--- 
source_codes_1387: 
  created_at: 2010-07-05 17:19:43
  error_line: 
  body: |
    {}
    
    AnzException::~AnzException() throw() {}
    
    /* CommandLineExc */

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10093"
  subtask_id: "10"
source_codes_1255: 
  created_at: 2010-07-05 17:18:40
  error_line: "34"
  body: |
    CommandLineExc::CommandLineExc(string in_userMsg)

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9961"
  subtask_id: "12"
source_codes_1123: 
  created_at: 2010-07-05 17:15:31
  error_line: "594"
  body: |
    {

  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9829"
  subtask_id: "7"
source_codes_940: 
  created_at: 2010-07-05 17:14:27
  error_line: "320"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9646"
  subtask_id: "9"
source_codes_809: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"FileELOC\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9515"
  subtask_id: "11"
source_codes_255: 
  created_at: 2010-07-05 17:09:20
  error_line: "397"
  body: "    if(the_iMeasureType == ANZ_COMMON_MEASURE){\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8961"
  subtask_id: "5"
source_codes_387: 
  created_at: 2010-07-05 17:11:40
  error_line: "21"
  body: |
    #include "analyzeme.h"

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9093"
  subtask_id: "1"
source_codes_123: 
  created_at: 2010-07-05 17:09:13
  error_line: 
  body: "    }\r\n    /* ?G???[File???J?? */\r\n    the_iRet = OpenErrorFile(the_pOption);\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8829"
  subtask_id: "5"
source_codes_1388: 
  created_at: 2010-07-05 17:19:43
  error_line: "34"
  body: |
    CommandLineExc::CommandLineExc(string in_userMsg)

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10094"
  subtask_id: "10"
source_codes_1256: 
  created_at: 2010-07-05 17:18:40
  error_line: 
  body: |
    {
    	Message = in_userMsg;
    }
    
    
    /*---------------------------------------------*/
    /* ComtNoClosedExc?F                           */
    /* ?R?????g??????????						   */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9962"
  subtask_id: "12"
source_codes_1124: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: |
    #ifdef __GNUC__
        /* Signal Set */

  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9830"
  subtask_id: "7"
source_codes_941: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "            strcat(the_szCurMetrics,\"McCabe????G?x\");\r\n        }\r\n\
    \r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9647"
  subtask_id: "9"
source_codes_256: 
  created_at: 2010-07-05 17:09:20
  error_line: 
  body: "        /* ????v??File??????}?N?????????? */\r\n        the_iRet = GetProcMacro(the_pAnzInfo,ANZ_COMMON_MEASURE);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8962"
  subtask_id: "5"
source_codes_388: 
  created_at: 2010-07-05 17:11:40
  error_line: "22"
  body: |
    #include "common.h"

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9094"
  subtask_id: "1"
source_codes_124: 
  created_at: 2010-07-05 17:09:14
  error_line: "229"
  body: "    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8830"
  subtask_id: "5"
source_codes_942: 
  created_at: 2010-07-05 17:14:27
  error_line: "324"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9648"
  subtask_id: "9"
source_codes_810: 
  created_at: 2010-07-05 17:13:49
  error_line: "300"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9516"
  subtask_id: "11"
source_codes_257: 
  created_at: 2010-07-05 17:09:20
  error_line: "400"
  body: "        if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8963"
  subtask_id: "5"
source_codes_389: 
  created_at: 2010-07-05 17:11:40
  error_line: "23"
  body: |
    #include "memory_manage.h"

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9095"
  subtask_id: "1"
source_codes_125: 
  created_at: 2010-07-05 17:09:14
  error_line: "230"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8831"
  subtask_id: "5"
source_codes_1389: 
  created_at: 2010-07-05 17:19:43
  error_line: 
  body: |
    {
    	Message = in_userMsg;
    }
    
    
    /*---------------------------------------------*/
    /* ComtNoClosedExc?F                           */
    /* ?R?????g??????????						   */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10095"
  subtask_id: "10"
source_codes_1257: 
  created_at: 2010-07-05 17:18:40
  error_line: "44"
  body: |
    ComtNoClosedExc::ComtNoClosedExc()

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9963"
  subtask_id: "12"
source_codes_1125: 
  created_at: 2010-07-05 17:15:31
  error_line: "597"
  body: "    signal( SIGFPE  , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9831"
  subtask_id: "7"
source_codes_943: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"File???G?x\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9649"
  subtask_id: "9"
source_codes_811: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"FileELOC\");\r\n        }\r\n    }\r\n\
    \r\n    /* ???G?x?v??Option???w?????? */\r\n    if(the_pOption->m_redundancy){\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9517"
  subtask_id: "11"
source_codes_258: 
  created_at: 2010-07-05 17:09:20
  error_line: "401"
  body: "            goto EXIT;\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8964"
  subtask_id: "5"
source_codes_126: 
  created_at: 2010-07-05 17:09:14
  error_line: 
  body: "    }\r\n    /* ????????t?@?C????? */\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8832"
  subtask_id: "5"
source_codes_1258: 
  created_at: 2010-07-05 17:18:40
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9964"
  subtask_id: "12"
source_codes_1126: 
  created_at: 2010-07-05 17:15:31
  error_line: "598"
  body: "    signal( SIGILL  , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9832"
  subtask_id: "7"
source_codes_944: 
  created_at: 2010-07-05 17:14:27
  error_line: "328"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9650"
  subtask_id: "9"
source_codes_812: 
  created_at: 2010-07-05 17:13:49
  error_line: "307"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9518"
  subtask_id: "11"
source_codes_259: 
  created_at: 2010-07-05 17:09:20
  error_line: 
  body: "        }\r\n        the_iRet = CommomMeasure(the_pAnzInfo);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8965"
  subtask_id: "5"
source_codes_127: 
  created_at: 2010-07-05 17:09:14
  error_line: "233"
  body: "    if(the_iMeasureType == ANZ_TREND_MEASURE) {\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8833"
  subtask_id: "5"
source_codes_1390: 
  created_at: 2010-07-05 17:19:43
  error_line: "44"
  body: |
    ComtNoClosedExc::ComtNoClosedExc()

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10096"
  subtask_id: "10"
source_codes_1259: 
  created_at: 2010-07-05 17:18:40
  error_line: "46"
  body: "\tMessage = \"?R?????g??????????\";\n"
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9965"
  subtask_id: "12"
source_codes_1127: 
  created_at: 2010-07-05 17:15:31
  error_line: "599"
  body: "    signal( SIGBUS  , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9833"
  subtask_id: "7"
source_codes_945: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "            strcat(the_szCurMetrics,\"File???G?x\");\r\n        }\r\n    }\r\n\
    \r\n    /* ?????(1)?v??Option???w?????? */\r\n    if(the_pOption->m_trend){\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9651"
  subtask_id: "9"
source_codes_813: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"McCabe????G?x\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9519"
  subtask_id: "11"
source_codes_390: 
  created_at: 2010-07-05 17:11:40
  error_line: "24"
  body: |
    #include "parse_cmdline.h"

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9096"
  subtask_id: "1"
source_codes_128: 
  created_at: 2010-07-05 17:09:14
  error_line: "234"
  body: "        int the_iType = -1;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8834"
  subtask_id: "5"
source_codes_1391: 
  created_at: 2010-07-05 17:19:43
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10097"
  subtask_id: "10"
source_codes_1128: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: |
    /*    signal( SIGIOT  , (void *)AbortAnalyzeMe); */

  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9834"
  subtask_id: "7"
source_codes_946: 
  created_at: 2010-07-05 17:14:27
  error_line: "335"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9652"
  subtask_id: "9"
source_codes_814: 
  created_at: 2010-07-05 17:13:49
  error_line: "311"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9520"
  subtask_id: "11"
source_codes_391: 
  created_at: 2010-07-05 17:11:40
  error_line: "25"
  body: |
    #include "common_measure.h"

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9097"
  subtask_id: "1"
source_codes_129: 
  created_at: 2010-07-05 17:09:14
  error_line: "235"
  body: "        int the_pPos = -1;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8835"
  subtask_id: "5"
source_codes_1392: 
  created_at: 2010-07-05 17:19:43
  error_line: "46"
  body: "\tMessage = \"?R?????g??????????\";\n"
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10098"
  subtask_id: "10"
source_codes_1260: 
  created_at: 2010-07-05 17:18:40
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9966"
  subtask_id: "12"
source_codes_1129: 
  created_at: 2010-07-05 17:15:31
  error_line: "601"
  body: "    signal( SIGSEGV , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9835"
  subtask_id: "7"
source_codes_947: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"File?????(1)\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9653"
  subtask_id: "9"
source_codes_815: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"McCabe????G?x\");\r\n        }\r\n\
    \r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9521"
  subtask_id: "11"
source_codes_260: 
  created_at: 2010-07-05 17:09:20
  error_line: "404"
  body: "        if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8966"
  subtask_id: "5"
source_codes_392: 
  created_at: 2010-07-05 17:11:40
  error_line: "26"
  body: |
    #include "trend_measure.h"

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9098"
  subtask_id: "1"
source_codes_1393: 
  created_at: 2010-07-05 17:19:43
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10099"
  subtask_id: "10"
source_codes_1261: 
  created_at: 2010-07-05 17:18:40
  error_line: "49"
  body: |
    ComtNoClosedExc::ComtNoClosedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9967"
  subtask_id: "12"
source_codes_261: 
  created_at: 2010-07-05 17:09:20
  error_line: "405"
  body: "            printf(\"%s%s\\n\",the_szCurMetrics,MSG_METRIC_ERROR);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8967"
  subtask_id: "5"
source_codes_393: 
  created_at: 2010-07-05 17:11:40
  error_line: "27"
  body: |
    #include "make_file_list.h"

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9099"
  subtask_id: "1"
source_codes_1394: 
  created_at: 2010-07-05 17:19:43
  error_line: "49"
  body: |
    ComtNoClosedExc::ComtNoClosedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10100"
  subtask_id: "10"
source_codes_1262: 
  created_at: 2010-07-05 17:18:40
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    ComtNoClosedExc::~ComtNoClosedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* StrLiteralNoClosedExc?F                     */
    /* ?_?u???N?H?[?e?[?V???????}?b?`??????????  */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9968"
  subtask_id: "12"
source_codes_1130: 
  created_at: 2010-07-05 17:15:31
  error_line: "602"
  body: "    signal( SIGSYS , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9836"
  subtask_id: "7"
source_codes_948: 
  created_at: 2010-07-05 17:14:28
  error_line: "339"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9654"
  subtask_id: "9"
source_codes_816: 
  created_at: 2010-07-05 17:13:49
  error_line: "315"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9522"
  subtask_id: "11"
source_codes_130: 
  created_at: 2010-07-05 17:09:14
  error_line: "236"
  body: "        isDirOrFile(*the_pMeasureItem,&the_iType);\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8836"
  subtask_id: "5"
source_codes_262: 
  created_at: 2010-07-05 17:09:20
  error_line: "406"
  body: "            goto EXIT;\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8968"
  subtask_id: "5"
source_codes_394: 
  created_at: 2010-07-05 17:11:40
  error_line: 
  body: |
    #include "output.h"

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9100"
  subtask_id: "1"
source_codes_1395: 
  created_at: 2010-07-05 17:19:43
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    ComtNoClosedExc::~ComtNoClosedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* StrLiteralNoClosedExc?F                     */
    /* ?_?u???N?H?[?e?[?V???????}?b?`??????????  */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10101"
  subtask_id: "10"
source_codes_1263: 
  created_at: 2010-07-05 17:18:40
  error_line: "60"
  body: |
    StrLiteralNoClosedExc::StrLiteralNoClosedExc()

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9969"
  subtask_id: "12"
source_codes_1131: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: ""
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9837"
  subtask_id: "7"
source_codes_949: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: "            strcat(the_szCurMetrics,\"File?????(1)\");\r\n        }\r\n        strcat(the_szCurMetrics,\"File??X??(1)\");\r\n    }\r\n\
    \r\n    /* ?????(2)?v??Option???w?????? */\r\n    if(the_pOption->m_funcTrend){\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9655"
  subtask_id: "9"
source_codes_817: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"File???G?x\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9523"
  subtask_id: "11"
source_codes_131: 
  created_at: 2010-07-05 17:09:14
  error_line: "237"
  body: "        if(the_iType == ANZ_FILE) {\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8837"
  subtask_id: "5"
source_codes_263: 
  created_at: 2010-07-05 17:09:20
  error_line: 
  body: "        }\r\n    }\r\n    /* ?????v?? */\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8969"
  subtask_id: "5"
source_codes_395: 
  created_at: 2010-07-05 17:11:40
  error_line: "29"
  body: |
    #include "get_process_macro.h"

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9101"
  subtask_id: "1"
source_codes_1396: 
  created_at: 2010-07-05 17:19:43
  error_line: "60"
  body: |
    StrLiteralNoClosedExc::StrLiteralNoClosedExc()

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10102"
  subtask_id: "10"
source_codes_1264: 
  created_at: 2010-07-05 17:18:40
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9970"
  subtask_id: "12"
source_codes_1132: 
  created_at: 2010-07-05 17:15:31
  error_line: "604"
  body: "    signal( SIGINT  , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9838"
  subtask_id: "7"
source_codes_1000: 
  created_at: 2010-07-05 17:14:28
  error_line: "635"
  body: "            if(strcmp(io_pPath,\"\") != 0) {\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9706"
  subtask_id: "9"
source_codes_818: 
  created_at: 2010-07-05 17:13:49
  error_line: "319"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9524"
  subtask_id: "11"
source_codes_132: 
  created_at: 2010-07-05 17:09:14
  error_line: 
  body: "            g_bTrendFile = true;\r\n            /* the_pMeasureItme??Path?????????? */\r\n            GetPathPos(*the_pMeasureItem,&the_pPos);\r\n            g_szNVPath[the_pPos] = '\\0';\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8838"
  subtask_id: "5"
source_codes_264: 
  created_at: 2010-07-05 17:09:20
  error_line: "410"
  body: "    if(the_iMeasureType == ANZ_TREND_MEASURE){\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8970"
  subtask_id: "5"
source_codes_396: 
  created_at: 2010-07-05 17:11:40
  error_line: "30"
  body: |
    #include <signal.h>

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9102"
  subtask_id: "1"
source_codes_1397: 
  created_at: 2010-07-05 17:19:43
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10103"
  subtask_id: "10"
source_codes_1265: 
  created_at: 2010-07-05 17:18:40
  error_line: "62"
  body: "\tMessage = \"?_?u???N?H?[?e?[?V???????}?b?`??????????\";\n"
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9971"
  subtask_id: "12"
source_codes_1133: 
  created_at: 2010-07-05 17:15:31
  error_line: "605"
  body: "    signal( SIGQUIT , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9839"
  subtask_id: "7"
source_codes_1001: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: "                sprintf(the_szFullPath,\"%s/%s\",the_szCurPath,io_pPath);\r\n            }\r\n        }\r\n\
    #else\r\n        /* ?J?????gDir??????Dir??????? */\r\n        if((io_pPath[1] == ':' && io_pPath[2] == '\\\\') ||\r\n            (io_pPath[0] == '\\\\')) {\r\n            goto EXIT;\r\n        }\r\n        else {\r\n            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {\r\n                the_iRet = ANZ_ERROR;\r\n                goto EXIT;\r\n            }\r\n            if(strcmp(io_pPath,\"\") != 0) {\r\n                sprintf(the_szFullPath,\"%s\\\\%s\",the_szCurPath,io_pPath);\r\n            }\r\n        }\r\n\
    #endif\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9707"
  subtask_id: "9"
source_codes_950: 
  created_at: 2010-07-05 17:14:28
  error_line: "347"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9656"
  subtask_id: "9"
source_codes_819: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"File???G?x\");\r\n        }\r\n    }\r\n\
    \r\n    /* ?????(1)?v??Option???w?????? */\r\n    if(the_pOption->m_trend){\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9525"
  subtask_id: "11"
source_codes_001: 
  created_at: 2010-07-05 17:09:11
  error_line: "1"
  body: |
    /*

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8707"
  subtask_id: "5"
source_codes_133: 
  created_at: 2010-07-05 17:09:14
  error_line: "242"
  body: "            if(the_pPos > 0) {\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8839"
  subtask_id: "5"
source_codes_265: 
  created_at: 2010-07-05 17:09:20
  error_line: 
  body: "        /* ?????v??File??????}?N?????????? */\r\n        the_iRet = GetProcMacro(the_pAnzInfo,ANZ_TREND_MEASURE);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8971"
  subtask_id: "5"
source_codes_397: 
  created_at: 2010-07-05 17:11:40
  error_line: 
  body: |
    
    /****************************************************/
    /*              ????                            */
    /****************************************************/

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9103"
  subtask_id: "1"
source_codes_1398: 
  created_at: 2010-07-05 17:19:43
  error_line: "62"
  body: "\tMessage = \"?_?u???N?H?[?e?[?V???????}?b?`??????????\";\n"
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10104"
  subtask_id: "10"
source_codes_1266: 
  created_at: 2010-07-05 17:18:40
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9972"
  subtask_id: "12"
source_codes_1134: 
  created_at: 2010-07-05 17:15:31
  error_line: "606"
  body: "    signal( SIGKILL , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9840"
  subtask_id: "7"
source_codes_1002: 
  created_at: 2010-07-05 17:14:28
  error_line: "655"
  body: "        strcpy(io_pPath,the_szFullPath);\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9708"
  subtask_id: "9"
source_codes_951: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"????????\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9657"
  subtask_id: "9"
source_codes_002: 
  created_at: 2010-07-05 17:09:11
  error_line: 
  body: " File:\r\n      analyzeme.c\r\n Copyright:\r\n      Copyright (C) 2004 TOSHIBA CORPORATION. All Rights Reserved.\r\n Product:\r\n      AnalyzeMe\r\n Abstract:\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8708"
  subtask_id: "5"
source_codes_134: 
  created_at: 2010-07-05 17:09:14
  error_line: "243"
  body: "                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8840"
  subtask_id: "5"
source_codes_266: 
  created_at: 2010-07-05 17:09:20
  error_line: "413"
  body: "        if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8972"
  subtask_id: "5"
source_codes_398: 
  created_at: 2010-07-05 17:11:40
  error_line: "35"
  body: |
    const char* TRACEFILE = "analyzeme_trace.txt";

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9104"
  subtask_id: "1"
source_codes_1399: 
  created_at: 2010-07-05 17:19:43
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10105"
  subtask_id: "10"
source_codes_1267: 
  created_at: 2010-07-05 17:18:40
  error_line: "65"
  body: |
    StrLiteralNoClosedExc::StrLiteralNoClosedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9973"
  subtask_id: "12"
source_codes_1135: 
  created_at: 2010-07-05 17:15:31
  error_line: "607"
  body: "    signal( SIGTERM , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9841"
  subtask_id: "7"
source_codes_1003: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: |
    EXIT:

  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9709"
  subtask_id: "9"
source_codes_952: 
  created_at: 2010-07-05 17:14:28
  error_line: "351"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9658"
  subtask_id: "9"
source_codes_820: 
  created_at: 2010-07-05 17:13:49
  error_line: "326"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9526"
  subtask_id: "11"
source_codes_003: 
  created_at: 2010-07-05 17:09:11
  error_line: "9"
  body: "      AnalyzeMe????C??????????`????\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8709"
  subtask_id: "5"
source_codes_135: 
  created_at: 2010-07-05 17:09:14
  error_line: 
  body: "            }\r\n\
    \r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8841"
  subtask_id: "5"
source_codes_267: 
  created_at: 2010-07-05 17:09:21
  error_line: "414"
  body: "            goto EXIT;\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8973"
  subtask_id: "5"
source_codes_399: 
  created_at: 2010-07-05 17:11:40
  error_line: "36"
  body: |
    const char* APPLOGFILE = "analyzeme_log.txt";

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9105"
  subtask_id: "1"
source_codes_953: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: "            strcat(the_szCurMetrics,\"????????\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9659"
  subtask_id: "9"
source_codes_821: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"File?????(1)\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9527"
  subtask_id: "11"
source_codes_004: 
  created_at: 2010-07-05 17:09:11
  error_line: 
  body: " Author:\r\n      zhang-gh\r\n Date:\r\n      2004/08/20\r\n REVISION HISTORY:\r\n\
    \r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8710"
  subtask_id: "5"
source_codes_136: 
  created_at: 2010-07-05 17:09:14
  error_line: "246"
  body: "            GetPathPos(*(the_pMeasureItem + 1),&the_pPos);\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8842"
  subtask_id: "5"
source_codes_268: 
  created_at: 2010-07-05 17:09:21
  error_line: 
  body: "        }\r\n        the_iRet = TrendMeasure(the_pAnzInfo);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8974"
  subtask_id: "5"
source_codes_1268: 
  created_at: 2010-07-05 17:18:40
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    StrLiteralNoClosedExc::~StrLiteralNoClosedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* PreprcNoClosedExc?F                         */
    /* #if?????A??????????#endif?????????     */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9974"
  subtask_id: "12"
source_codes_1136: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: |
    #else
        SetConsoleCtrlHandler(AbortAnalyzeMe, 1);
    #endif
        return;
    }
    
    /**
    *  ResetTrendPath
    *  ????p?X????????
    *  @param
    *         io_pPath  input Path
    *  @return
    *         ???
    *  @author luo-jirong
    */
    int ResetTrendPath(char *io_pPath)
    {
            char the_szFullPath[MAX_PATH];
            char the_szCurPath[MAX_PATH];
            int the_iRet = ANZ_SUCCESS;
    #ifdef __GNUC__
            /* ?J?????gDir??????Dir??????? */

  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9842"
  subtask_id: "7"
source_codes_1004: 
  created_at: 2010-07-05 17:14:28
  error_line: "657"
  body: "        return the_iRet;\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9710"
  subtask_id: "9"
source_codes_954: 
  created_at: 2010-07-05 17:14:28
  error_line: "354"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9660"
  subtask_id: "9"
source_codes_822: 
  created_at: 2010-07-05 17:13:49
  error_line: "330"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9528"
  subtask_id: "11"
source_codes_005: 
  created_at: 2010-07-05 17:09:11
  error_line: "16"
  body: |
    */

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8711"
  subtask_id: "5"
source_codes_137: 
  created_at: 2010-07-05 17:09:14
  error_line: 
  body: "            g_szOVPath[the_pPos] = '\\0';\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8843"
  subtask_id: "5"
source_codes_269: 
  created_at: 2010-07-05 17:09:21
  error_line: "417"
  body: "        if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8975"
  subtask_id: "5"
source_codes_1269: 
  created_at: 2010-07-05 17:18:40
  error_line: "76"
  body: |
    PreprcNoClosedExc::PreprcNoClosedExc()

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9975"
  subtask_id: "12"
source_codes_1137: 
  created_at: 2010-07-05 17:15:31
  error_line: "630"
  body: "        if(io_pPath[0] != '/') {\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9843"
  subtask_id: "7"
source_codes_1005: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9711"
  subtask_id: "9"
source_codes_955: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"?????X??\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9661"
  subtask_id: "9"
source_codes_823: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"File?????(1)\");\r\n        }\r\n        strcat(the_szCurMetrics,\"File??X??(1)\");\r\n    }\r\n\
    \r\n    /* ?????(2)?v??Option???w?????? */\r\n    if(the_pOption->m_funcTrend){\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9529"
  subtask_id: "11"
source_codes_006: 
  created_at: 2010-07-05 17:09:11
  error_line: 
  body: |
    
    /*
        $AnalyzeMe 1.0.0.1$

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8712"
  subtask_id: "5"
source_codes_138: 
  created_at: 2010-07-05 17:09:14
  error_line: "248"
  body: "            if(the_pPos > 0) {\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8844"
  subtask_id: "5"
source_codes_1138: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {\r\n                the_iRet = ANZ_ERROR;\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9844"
  subtask_id: "7"
source_codes_1006: 
  created_at: 2010-07-05 17:15:29
  error_line: 
  body: |
    /*
     File:
          analyzeme.c
     Copyright:
          Copyright (C) 2004 TOSHIBA CORPORATION. All Rights Reserved.
     Product:
          AnalyzeMe
     Abstract:
          AnalyzeMe????C??????????`????
     Author:
          zhang-gh
     Date:
          2004/08/20
     REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 1.0.0.1$
    */
    #include "analyzeme.h"
    #include "common.h"
    #include "memory_manage.h"
    #include "parse_cmdline.h"
    #include "common_measure.h"
    #include "trend_measure.h"
    #include "make_file_list.h"
    #include "output.h"
    #include "get_process_macro.h"
    #include <signal.h>
    
    /****************************************************/
    /*              ????                            */
    /****************************************************/

  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9712"
  subtask_id: "7"
source_codes_956: 
  created_at: 2010-07-05 17:14:28
  error_line: "358"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9662"
  subtask_id: "9"
source_codes_824: 
  created_at: 2010-07-05 17:13:49
  error_line: "338"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9530"
  subtask_id: "11"
source_codes_007: 
  created_at: 2010-07-05 17:09:11
  error_line: "20"
  body: |
    */

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8713"
  subtask_id: "5"
source_codes_139: 
  created_at: 2010-07-05 17:09:14
  error_line: "249"
  body: "                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8845"
  subtask_id: "5"
source_codes_1270: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9976"
  subtask_id: "12"
source_codes_1139: 
  created_at: 2010-07-05 17:15:31
  error_line: "633"
  body: "                goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9845"
  subtask_id: "7"
source_codes_1007: 
  created_at: 2010-07-05 17:15:29
  error_line: "35"
  body: |
    const char* TRACEFILE = "analyzeme_trace.txt";

  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9713"
  subtask_id: "7"
source_codes_957: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?????X??\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9663"
  subtask_id: "9"
source_codes_825: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"????????\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9531"
  subtask_id: "11"
source_codes_270: 
  created_at: 2010-07-05 17:09:21
  error_line: "418"
  body: "            printf(\"%s%s\\n\",the_szCurMetrics,MSG_METRIC_ERROR);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8976"
  subtask_id: "5"
source_codes_008: 
  created_at: 2010-07-05 17:09:11
  error_line: "21"
  body: |
    #include "analyzeme.h"

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8714"
  subtask_id: "5"
source_codes_1271: 
  created_at: 2010-07-05 17:18:41
  error_line: "78"
  body: "\tMessage = \"#if?????A??????????#endif?????????\";\n"
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9977"
  subtask_id: "12"
source_codes_1008: 
  created_at: 2010-07-05 17:15:29
  error_line: "36"
  body: |
    const char* APPLOGFILE = "analyzeme_log.txt";

  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9714"
  subtask_id: "7"
source_codes_958: 
  created_at: 2010-07-05 17:14:28
  error_line: "361"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9664"
  subtask_id: "9"
source_codes_826: 
  created_at: 2010-07-05 17:13:49
  error_line: "342"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9532"
  subtask_id: "11"
source_codes_271: 
  created_at: 2010-07-05 17:09:21
  error_line: "419"
  body: "            goto EXIT;\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8977"
  subtask_id: "5"
source_codes_009: 
  created_at: 2010-07-05 17:09:11
  error_line: "22"
  body: |
    #include "common.h"

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8715"
  subtask_id: "5"
source_codes_1272: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9978"
  subtask_id: "12"
source_codes_1140: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "            }\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9846"
  subtask_id: "7"
source_codes_1009: 
  created_at: 2010-07-05 17:15:29
  error_line: 
  body: |
    
    /****************************************************/
    /*              ?O???[?o???????                  */
    /****************************************************/
    /* ????????File??n???h????????????O???[?o???????? */
    
    /* Log File */

  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9715"
  subtask_id: "7"
source_codes_140: 
  created_at: 2010-07-05 17:09:14
  error_line: 
  body: "            }\r\n            /* g_szNVPath?Ag_szOVPath??????p?X???X???? */\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8846"
  subtask_id: "5"
source_codes_272: 
  created_at: 2010-07-05 17:09:21
  error_line: 
  body: "        }\r\n    }\r\n\
    \r\n    /* ?o?R???????o????? */\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8978"
  subtask_id: "5"
source_codes_1273: 
  created_at: 2010-07-05 17:18:41
  error_line: "81"
  body: |
    PreprcNoClosedExc::PreprcNoClosedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9979"
  subtask_id: "12"
source_codes_1141: 
  created_at: 2010-07-05 17:15:31
  error_line: "635"
  body: "            if(strcmp(io_pPath,\"\") != 0) {\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9847"
  subtask_id: "7"
source_codes_959: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"File?????(2)\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9665"
  subtask_id: "9"
source_codes_827: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"????????\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9533"
  subtask_id: "11"
source_codes_141: 
  created_at: 2010-07-05 17:09:14
  error_line: "252"
  body: "            the_iRet = ResetTrendPath(g_szNVPath);\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8847"
  subtask_id: "5"
source_codes_273: 
  created_at: 2010-07-05 17:09:21
  error_line: "424"
  body: "    if(the_pOption->m_verbos == ON){\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8979"
  subtask_id: "5"
source_codes_1274: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    PreprcNoClosedExc::~PreprcNoClosedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* KanJiErrorExc?F                             */
    /* ?S?p??????g?p???s?????                    */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9980"
  subtask_id: "12"
source_codes_1142: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "                sprintf(the_szFullPath,\"%s/%s\",the_szCurPath,io_pPath);\r\n            }\r\n        }\r\n        else {\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9848"
  subtask_id: "7"
source_codes_1010: 
  created_at: 2010-07-05 17:15:29
  error_line: "44"
  body: |
    FILE *g_fpLogFile = NULL;       /* Log File pointer */

  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9716"
  subtask_id: "7"
source_codes_828: 
  created_at: 2010-07-05 17:13:49
  error_line: "345"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9534"
  subtask_id: "11"
source_codes_010: 
  created_at: 2010-07-05 17:09:11
  error_line: "23"
  body: |
    #include "memory_manage.h"

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8716"
  subtask_id: "5"
source_codes_142: 
  created_at: 2010-07-05 17:09:14
  error_line: 
  body: "            the_iRet = ResetTrendPath(g_szOVPath);\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8848"
  subtask_id: "5"
source_codes_274: 
  created_at: 2010-07-05 17:09:21
  error_line: "425"
  body: "        if(the_pAnzInfo->m_err == NULL){\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8980"
  subtask_id: "5"
source_codes_1275: 
  created_at: 2010-07-05 17:18:41
  error_line: "92"
  body: |
    KanJiErrorExc::KanJiErrorExc()

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9981"
  subtask_id: "12"
source_codes_1143: 
  created_at: 2010-07-05 17:15:31
  error_line: "640"
  body: "            goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9849"
  subtask_id: "7"
source_codes_1011: 
  created_at: 2010-07-05 17:15:29
  error_line: 
  body: |
    /*  Trace File */

  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9717"
  subtask_id: "7"
source_codes_960: 
  created_at: 2010-07-05 17:14:28
  error_line: "365"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9666"
  subtask_id: "9"
source_codes_829: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"?????X??\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9535"
  subtask_id: "11"
source_codes_011: 
  created_at: 2010-07-05 17:09:11
  error_line: "24"
  body: |
    #include "parse_cmdline.h"

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8717"
  subtask_id: "5"
source_codes_143: 
  created_at: 2010-07-05 17:09:14
  error_line: "254"
  body: "            if(the_iRet != ANZ_SUCCESS) {\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8849"
  subtask_id: "5"
source_codes_275: 
  created_at: 2010-07-05 17:09:21
  error_line: "426"
  body: "            printf(\"%s%s\\n\",the_szCurMetrics,MSG_METRIC_NORMAL);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8981"
  subtask_id: "5"
source_codes_1276: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9982"
  subtask_id: "12"
source_codes_1144: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "        }\r\n\
    #else\r\n        /* ?J?????gDir??????Dir??????? */\r\n        if((io_pPath[1] == ':' && io_pPath[2] == '\\\\') ||\r\n            (io_pPath[0] == '\\\\')) {\r\n            goto EXIT;\r\n        }\r\n        else {\r\n            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {\r\n                the_iRet = ANZ_ERROR;\r\n                goto EXIT;\r\n            }\r\n            if(strcmp(io_pPath,\"\") != 0) {\r\n                sprintf(the_szFullPath,\"%s\\\\%s\",the_szCurPath,io_pPath);\r\n            }\r\n        }\r\n\
    #endif\r\n        strcpy(io_pPath,the_szFullPath);\r\n\
    EXIT:\r\n        return the_iRet;\r\n\
    }\r\n\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9850"
  subtask_id: "7"
source_codes_1012: 
  created_at: 2010-07-05 17:15:29
  error_line: "46"
  body: |
    FILE *g_fpTraceFile = NULL;     /* Trace File pointer */

  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9718"
  subtask_id: "7"
source_codes_961: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: "            strcat(the_szCurMetrics,\"File?????(2)\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9667"
  subtask_id: "9"
source_codes_012: 
  created_at: 2010-07-05 17:09:11
  error_line: "25"
  body: |
    #include "common_measure.h"

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8718"
  subtask_id: "5"
source_codes_144: 
  created_at: 2010-07-05 17:09:14
  error_line: "255"
  body: "                goto EXIT;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8850"
  subtask_id: "5"
source_codes_276: 
  created_at: 2010-07-05 17:09:21
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8982"
  subtask_id: "5"
source_codes_1277: 
  created_at: 2010-07-05 17:18:41
  error_line: "94"
  body: "\tMessage = \"?S?p??????g?p???s??????B\";\n"
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9983"
  subtask_id: "12"
source_codes_1145: 
  created_at: 2010-07-05 17:16:41
  error_line: 
  body: |+
    /*
    File:
       AnzException.cpp
    Copyright:
       Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
       AnalyzeMe
    Abstract:
       AnalyzeMe????O????
    Author:
       Tong-huixin
    Date:
       2005/02/08
    REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 2.0.0.0$
    */
    
    
  updated_at: 2011-05-13 10:34:57
  analyzed_source_path_id: "128"
  id: "9851"
  subtask_id: "6"
source_codes_1013: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: |
    /* ?G???[File */

  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9719"
  subtask_id: "7"
source_codes_962: 
  created_at: 2010-07-05 17:14:28
  error_line: "368"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9668"
  subtask_id: "9"
source_codes_830: 
  created_at: 2010-07-05 17:13:49
  error_line: "349"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9536"
  subtask_id: "11"
source_codes_013: 
  created_at: 2010-07-05 17:09:11
  error_line: "26"
  body: |
    #include "trend_measure.h"

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8719"
  subtask_id: "5"
source_codes_145: 
  created_at: 2010-07-05 17:09:14
  error_line: 
  body: "            }\r\n        }\r\n    }\r\n    /* ?v?????File??List???????? */\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8851"
  subtask_id: "5"
source_codes_277: 
  created_at: 2010-07-05 17:09:21
  error_line: "428"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8983"
  subtask_id: "5"
source_codes_1278: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9984"
  subtask_id: "12"
source_codes_1146: 
  created_at: 2010-07-05 17:16:41
  error_line: "23"
  body: |
    #include "AnzException.h"

  updated_at: 2011-05-13 10:34:57
  analyzed_source_path_id: "128"
  id: "9852"
  subtask_id: "6"
source_codes_1014: 
  created_at: 2010-07-05 17:15:30
  error_line: "48"
  body: |
    FILE *g_fpErrorFile = NULL;

  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9720"
  subtask_id: "7"
source_codes_963: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"File??X??(2)\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9669"
  subtask_id: "9"
source_codes_831: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?????X??\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9537"
  subtask_id: "11"
source_codes_014: 
  created_at: 2010-07-05 17:09:11
  error_line: "27"
  body: |
    #include "make_file_list.h"

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8720"
  subtask_id: "5"
source_codes_146: 
  created_at: 2010-07-05 17:09:14
  error_line: "260"
  body: "    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8852"
  subtask_id: "5"
source_codes_278: 
  created_at: 2010-07-05 17:09:21
  error_line: "429"
  body: "            printf(\"%s%s%s\\n\",MSG_MEASURE_FILE_ERROR,the_szCurMetrics,MSG_METRIC_NORMAL);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8984"
  subtask_id: "5"
source_codes_964: 
  created_at: 2010-07-05 17:14:28
  error_line: "372"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9670"
  subtask_id: "9"
source_codes_832: 
  created_at: 2010-07-05 17:13:49
  error_line: "352"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9538"
  subtask_id: "11"
source_codes_015: 
  created_at: 2010-07-05 17:09:11
  error_line: 
  body: |
    #include "output.h"

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8721"
  subtask_id: "5"
source_codes_147: 
  created_at: 2010-07-05 17:09:14
  error_line: "261"
  body: "    if(the_iRet == ANZ_NO_MEASURE_FILES){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8853"
  subtask_id: "5"
source_codes_279: 
  created_at: 2010-07-05 17:09:21
  error_line: 
  body: "        }\r\n    }\r\n\
    \r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8985"
  subtask_id: "5"
source_codes_700: 
  created_at: 2010-07-05 17:11:50
  error_line: "505"
  body: "        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGILL(%d)\\n\",sig );\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9406"
  subtask_id: "1"
source_codes_1279: 
  created_at: 2010-07-05 17:18:41
  error_line: "97"
  body: |
    KanJiErrorExc::KanJiErrorExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9985"
  subtask_id: "12"
source_codes_1147: 
  created_at: 2010-07-05 17:16:41
  error_line: 
  body: |+
    
    AnzException::AnzException()
    {}
    
    AnzException::AnzException(string in_useMsg)
    {}
    
    AnzException::~AnzException() throw() {}
    
    /* CommandLineExc */
    CommandLineExc::CommandLineExc(string in_userMsg)
    {
    	Message = in_userMsg;
    }
    
    
    /*---------------------------------------------*/
    /* ComtNoClosedExc?F                           */
    /* ?R?????g??????????						   */
    /*---------------------------------------------*/
    ComtNoClosedExc::ComtNoClosedExc()
    {
    	Message = "?R?????g??????????";
    }
    
    ComtNoClosedExc::ComtNoClosedExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    ComtNoClosedExc::~ComtNoClosedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* StrLiteralNoClosedExc?F                     */
    /* ?_?u???N?H?[?e?[?V???????}?b?`??????????  */
    /*---------------------------------------------*/
    StrLiteralNoClosedExc::StrLiteralNoClosedExc()
    {
    	Message = "?_?u???N?H?[?e?[?V???????}?b?`??????????";
    }
    
    StrLiteralNoClosedExc::StrLiteralNoClosedExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    StrLiteralNoClosedExc::~StrLiteralNoClosedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* PreprcNoClosedExc?F                         */
    /* #if?????A??????????#endif?????????     */
    /*---------------------------------------------*/
    PreprcNoClosedExc::PreprcNoClosedExc()
    {
    	Message = "#if?????A??????????#endif?????????";
    }
    
    PreprcNoClosedExc::PreprcNoClosedExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    PreprcNoClosedExc::~PreprcNoClosedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* KanJiErrorExc?F                             */
    /* ?S?p??????g?p???s?????                    */
    /*---------------------------------------------*/
    KanJiErrorExc::KanJiErrorExc()
    {
    	Message = "?S?p??????g?p???s??????B";
    }
    
    KanJiErrorExc::KanJiErrorExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    KanJiErrorExc::~KanJiErrorExc()  throw() {}
    
    /*---------------------------------------------*/
    /* CharLiteralNoClosedExc?F                    */
    /* ?V???O???N?H?[?e?[?V???????}?b?`??????????*/
    /*---------------------------------------------*/
    CharLiteralNoClosedExc::CharLiteralNoClosedExc()
    {
    	Message = "?V???O???N?H?[?e?[?V???????}?b?`??????????";
    }
    
    CharLiteralNoClosedExc::CharLiteralNoClosedExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    CharLiteralNoClosedExc::~CharLiteralNoClosedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* UnKnownErrorExc?F                           */
    /* ?s????G???[?????????????                  */
    /*---------------------------------------------*/
    UnKnownErrorExc::UnKnownErrorExc()
    {
    	Message = "?v???????G???[????????????????A?v???????~??????????B";
    }
    
    UnKnownErrorExc::UnKnownErrorExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    UnKnownErrorExc::~UnKnownErrorExc()  throw() {}
    
    /*---------------------------------------------*/
    /* MemoryFailedExc?F                           */
    /* ????????????????s???????                */
    /*---------------------------------------------*/
    MemoryFailedExc::MemoryFailedExc()
    {
    	Message = "????????????????s???????";
    }
    
    MemoryFailedExc::MemoryFailedExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    MemoryFailedExc::~MemoryFailedExc() throw() {}
    
    /*---------------------------------------------*/
    /* FileOpenFailedExc?F                         */
    /* File???J?????s???????                      */
    /*---------------------------------------------*/
    FileOpenFailedExc::FileOpenFailedExc()
    {
    	Message = "File???I?[?v????????????s???????";
    }
    
    FileOpenFailedExc::FileOpenFailedExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    FileOpenFailedExc::~FileOpenFailedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* FileReadFailedExc?F                         */
    /* File??????????s???????                  */
    /*---------------------------------------------*/
    FileReadFailedExc::FileReadFailedExc()
    {
    	Message = "File???????????????s???????";
    }
    
    FileReadFailedExc::FileReadFailedExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    FileReadFailedExc::~FileReadFailedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* InitVariableFailExc						   */
    /* ???????????s?????		                   */
    /*---------------------------------------------*/
    /* ???????????s????? */
    InitVariableFailExc::InitVariableFailExc()
    {
    	Message = "???????????????s???????";
    }
    
    InitVariableFailExc::InitVariableFailExc(string in_userMsg)
    {
    	Message = in_userMsg;
    }
    
    InitVariableFailExc::~InitVariableFailExc()  throw() {}
    
    /*---------------------------------------------*/
    /* DirOperateFailedExc?F                           */
    /* ?f?B???N?g???[???????????s?????        */
    /*---------------------------------------------*/
    DirOperateFailedExc::DirOperateFailedExc()
    {
    	Message = "?f?B???N?g???[???????????s???????";
    }
    
    DirOperateFailedExc::DirOperateFailedExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    DirOperateFailedExc::~DirOperateFailedExc() throw() {}
    
    /*---------------------------------------------*/
    /* MakeFileListFailedExc?F									*/
    /* ?v??????v?????File??List???????????s?????     */
    /*---------------------------------------------*/
    MakeFileListFailedExc::MakeFileListFailedExc()
    {
    	Message = "?v?????File??List??????????????s???????";
    }
    
    MakeFileListFailedExc::MakeFileListFailedExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    MakeFileListFailedExc::~MakeFileListFailedExc() throw() {}
    
    /*---------------------------------------------*/
    /* OptionErrorExc							   */
    /* ?I?v?V?????????????????			       */
    /*---------------------------------------------*/
    OptionErrorExc::OptionErrorExc()
    {
    	Message = "";
    }
    
    OptionErrorExc::OptionErrorExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    OptionErrorExc::~OptionErrorExc() throw() {}
    
    /*-------------------------------------------*/
    /* OptionErrorExc						     */
    /* ?w?????v???????s????? 			 */
    /*-------------------------------------------*/
    MeasureItemExc::MeasureItemExc()
    {
    	Message = "?w?????v???????s??????B";
    }
    
    MeasureItemExc::MeasureItemExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    MeasureItemExc::~MeasureItemExc() throw() {}
    
    /*-------------------------------------------*/
    /* FunRepetitionDefineExc				     */
    /* ??????d?????`?????????			 */
    /*-------------------------------------------*/
    FunRepetitionDefineExc::FunRepetitionDefineExc()
    {
    	Message = "??????d?????`?????????";
    }
    
    FunRepetitionDefineExc::FunRepetitionDefineExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    FunRepetitionDefineExc::~FunRepetitionDefineExc()  throw() {}
    
  updated_at: 2011-05-13 10:34:57
  analyzed_source_path_id: "128"
  id: "9853"
  subtask_id: "6"
source_codes_1015: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: ""
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9721"
  subtask_id: "7"
source_codes_965: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: "            strcat(the_szCurMetrics,\"File??X??(2)\");\r\n        }\r\n\
    \r\n    }\r\n    /* ?v???J?n,?o?R???????o????? */\r\n    if(the_pOption->m_verbos == ON ){\r\n        /* ?o?R???????o????? */\r\n        printf(\"%s%s\\n\",the_szCurMetrics,MSG_METRIC_START);\r\n    }\r\n\
    \r\n    /* ?v???O?A?K?v??v??????File???J?? */\r\n    the_iRet = OpenResultFile(the_pOption);\r\n    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9671"
  subtask_id: "9"
source_codes_833: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"File?????(2)\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9539"
  subtask_id: "11"
source_codes_016: 
  created_at: 2010-07-05 17:09:11
  error_line: "29"
  body: |
    #include "get_process_macro.h"

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8722"
  subtask_id: "5"
source_codes_148: 
  created_at: 2010-07-05 17:09:14
  error_line: "262"
  body: "        printf(\"%s\\n\",MSG_NO_FILES);\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8854"
  subtask_id: "5"
source_codes_701: 
  created_at: 2010-07-05 17:11:50
  error_line: "506"
  body: "        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9407"
  subtask_id: "1"
source_codes_1148: 
  created_at: 2010-07-05 17:16:41
  error_line: 
  body: |+
    /*
    File:
       LCSAlgo.cpp
    Copyright:
       Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
       AnalyzeMe
    Abstract:
       LCS?Z?o?A???S???Y??
    Author:
       zhang-gh
    Date:
       2005/02/08
    REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 2.0.0.0$
    */
    
  updated_at: 2011-05-13 10:34:57
  analyzed_source_path_id: "127"
  id: "9854"
  subtask_id: "6"
source_codes_1016: 
  created_at: 2010-07-05 17:15:30
  error_line: "50"
  body: |
    bool g_bTrace           = false;    /* Trace flag */

  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9722"
  subtask_id: "7"
source_codes_966: 
  created_at: 2010-07-05 17:14:28
  error_line: "386"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9672"
  subtask_id: "9"
source_codes_834: 
  created_at: 2010-07-05 17:13:49
  error_line: "356"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9540"
  subtask_id: "11"
source_codes_017: 
  created_at: 2010-07-05 17:09:11
  error_line: "30"
  body: |
    #include <signal.h>

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8723"
  subtask_id: "5"
source_codes_149: 
  created_at: 2010-07-05 17:09:14
  error_line: 
  body: "    }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8855"
  subtask_id: "5"
source_codes_702: 
  created_at: 2010-07-05 17:11:50
  error_line: 
  body: "        break;\r\n    case SIGBUS :\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9408"
  subtask_id: "1"
source_codes_1280: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    KanJiErrorExc::~KanJiErrorExc()  throw() {}
    
    /*---------------------------------------------*/
    /* CharLiteralNoClosedExc?F                    */
    /* ?V???O???N?H?[?e?[?V???????}?b?`??????????*/
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9986"
  subtask_id: "12"
source_codes_1149: 
  created_at: 2010-07-05 17:16:41
  error_line: "22"
  body: |
    #include "LCSAlgo.h"

  updated_at: 2011-05-13 10:34:57
  analyzed_source_path_id: "127"
  id: "9855"
  subtask_id: "6"
source_codes_1017: 
  created_at: 2010-07-05 17:15:30
  error_line: "51"
  body: |
    char g_szNVPath[MAX_PATH] = {0};

  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9723"
  subtask_id: "7"
source_codes_967: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: "    }\r\n\
    \r\n    /* ?v???O?A?K?v??v?????????????O???[?o?????????????m?? */\r\n    the_iRet = AllocResultMemory(the_pOption);\r\n    if(the_iRet != ANZ_SUCCESS){\r\n        FreeResultMemory(the_pOption);\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9673"
  subtask_id: "9"
source_codes_835: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"File?????(2)\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9541"
  subtask_id: "11"
source_codes_018: 
  created_at: 2010-07-05 17:09:11
  error_line: 
  body: |
    
    /****************************************************/
    /*              ????                            */
    /****************************************************/

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8724"
  subtask_id: "5"
source_codes_703: 
  created_at: 2010-07-05 17:11:50
  error_line: "509"
  body: "        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGBUS(%d)\\n\",sig );\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9409"
  subtask_id: "1"
source_codes_280: 
  created_at: 2010-07-05 17:09:21
  error_line: "433"
  body: |
    EXIT:;

  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8986"
  subtask_id: "5"
source_codes_1281: 
  created_at: 2010-07-05 17:18:41
  error_line: "108"
  body: |
    CharLiteralNoClosedExc::CharLiteralNoClosedExc()

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9987"
  subtask_id: "12"
source_codes_1018: 
  created_at: 2010-07-05 17:15:30
  error_line: "52"
  body: |
    char g_szOVPath[MAX_PATH] = {0};

  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9724"
  subtask_id: "7"
source_codes_968: 
  created_at: 2010-07-05 17:14:28
  error_line: "393"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9674"
  subtask_id: "9"
source_codes_836: 
  created_at: 2010-07-05 17:13:49
  error_line: "359"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9542"
  subtask_id: "11"
source_codes_019: 
  created_at: 2010-07-05 17:09:11
  error_line: "35"
  body: |
    const char* TRACEFILE = "analyzeme_trace.txt";

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8725"
  subtask_id: "5"
source_codes_704: 
  created_at: 2010-07-05 17:11:50
  error_line: "510"
  body: "        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9410"
  subtask_id: "1"
source_codes_281: 
  created_at: 2010-07-05 17:09:21
  error_line: 
  body: "    /* Error File???o????? */\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8987"
  subtask_id: "5"
source_codes_1282: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9988"
  subtask_id: "12"
source_codes_1150: 
  created_at: 2010-07-05 17:16:41
  error_line: 
  body: "#include \"common.h\"\n\
    #include \"AnalyzeMe.h\"\n\
    #include \"FileInfo.h\"\n\
    #include \"FunctionInfo.h\"\n\
    #include \"MeasureFuncObject.h\"\n\
    #include \"MemoryManagement.h\"\n\
    #include \"AnzException.h\"\n\n\
    PCELL g_dummy;\n\
    #define DCELL g_dummy\n\
    unsigned int g_iUnitSize = sizeof(unsigned long)*8;\n\
    /**\n\
    *  GetEmbeddings\n\
    *  All Embeddings????????\n\
    *  @param  in_comm_Head,in_comm_Tail ?????v????????v???\n\
    *  @param  in_i,in_j\n\
    *  @param  in_lcsrev,in_curl\n\
    *  @param  in_head,in_pretail,in_tail\n\
    *  @param  in_len1,in_len2?@????n???????\n\
    *  @param  in_pStr1         ????n?????\n\
    *  @param  in_LCS_Lenght    LCS??Lenght\n\
    *  @param  io_LCSsCurNode   LCS??List??J?????gNode\n\
    *  @param  out_LCSsNum      LCS???\n\
    *  @return  \n\
    *           ANZ_SUCCESS:?????I??                                      \n\
    *           ANZ_ERROR  :????I??\n\
    *  @author zhang-gh\n\
    */\n\
    int LCSAlgo::GetEmbeddings(int in_comm_Head, int in_comm_Tail,\n\
    \t\t\t\t\t\t   int in_i, int in_j,\n\
    \t\t\t\t\t\t   PLCSPOS *in_lcsrev, int in_curl,\n\
    \t\t\t\t\t\t   PCELL **in_head, PCELL **in_pretail, PCELL **in_tail,\n\
    \t\t\t\t\t\t   int in_len1, int in_len2,    /* ????n??????? */\n\
    \t\t\t\t\t\t   char **in_pStr1,             /* ????n????? */\n\
    \t\t\t\t\t\t   int in_LCS_Lenght,           /* LCS??Lenght */\n\
    \t\t\t\t\t\t   PLCSLIST **io_LCSsCurNode,   /* LCS??List??J?????gNode */\n\
    \t\t\t\t\t\t   int *out_LCSsNum)         /* LCS??? */\n\
    {\n\
    \tchar **the_LCS;          /* ????LCS */\n\
    \tPLCSLIST the_LCSsTmpNode; /* LCS??List???Node */\n\
    \tPLCSLIST the_LCSsPreTailNode; /* LCS??List????Node????ONode */\n\
    \tPLCSPOS *the_lcsp;\n\
    \tPCELL the_adjp;\n\n\
    \t/* ????????? */\n\
    \tthe_LCS = NULL;\n\
    \tthe_LCSsTmpNode = NULL;\n\
    \tthe_LCSsPreTailNode = NULL;\n\
    \tthe_lcsp = NULL;\n\
    \tthe_adjp = NULL;\n\n\
    \t/* ?????J?n */\n\
    \tthe_adjp = in_head[in_i][in_j];\n\
    \tif (the_adjp == DCELL)\n\
    \t{\n\
    \t\tthe_adjp = in_tail[in_i][in_j];\n\
    \t}\n\
    \tif (the_adjp == DCELL)\n\
    \t{\n\
    \t\t/* ????LCS??????????m????? */\n\
    \t\tAnzMalloc(the_LCS, char**, sizeof(char *)*(in_LCS_Lenght + in_comm_Head + in_comm_Tail + 1));\n\
    \t\tif (the_LCS != NULL) {\n\
    \t\t\tmemset(the_LCS, 0, sizeof(char *)*(in_LCS_Lenght + in_comm_Head + in_comm_Tail + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tfor (the_lcsp = in_lcsrev + in_curl - 1; the_lcsp >= in_lcsrev; the_lcsp--) {\n\
    \t\t\t*(the_LCS + in_comm_Head + (in_LCS_Lenght - (the_lcsp - in_lcsrev) - 1)) = (*the_lcsp)->lcschar;\n\
    #if 0/* DEBUG?p */\n\n\
    \t\t\tprintf(\"%s^{%d}_{%d}\", (*the_lcsp)->lcschar, (*the_lcsp)->Apos, (*the_lcsp)->Bpos);\n\
    #endif\n\n\
    \t\t}\n\
    \t\t(**io_LCSsCurNode)->LCS = the_LCS;\n\
    #if 0/* DEBUG?p */\n\n\
    \t\tprintf(\"\\n\");\n\
    #endif\n\
    \t\t/* LCS??List?????Node????????? */\n\
    \t\tAnzMalloc(the_LCSsTmpNode, PLCSLIST, sizeof(ST_LCSLIST));\n\
    \t\tif (the_LCSsTmpNode != NULL) {\n\
    \t\t\tmemset(the_LCSsTmpNode, 0, sizeof(ST_LCSLIST));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\t(**io_LCSsCurNode)->next = the_LCSsTmpNode;\n\
    \t\t(**io_LCSsCurNode) = (**io_LCSsCurNode)->next;\n\
    \t\t/* LCS?????Count */\n\
    \t\t(*out_LCSsNum)++;\n\
    \t} else\n\
    \t{\n\
    \t\twhile (the_adjp != DCELL) {\n\
    \t\t\tin_lcsrev[in_curl]->lcschar = in_pStr1[the_adjp->i - 1];\n\
    \t\t\tin_lcsrev[in_curl]->Apos = the_adjp->i;\n\
    \t\t\tin_lcsrev[in_curl]->Bpos = the_adjp->j;\n\
    \t\t\tGetEmbeddings(in_comm_Head, in_comm_Tail,\n\
    \t\t\t\t\t\t  the_adjp->i - 1, the_adjp->j - 1,\n\
    \t\t\t\t\t\t  in_lcsrev, in_curl + 1,\n\
    \t\t\t\t\t\t  in_head, in_pretail, in_tail,\n\
    \t\t\t\t\t\t  in_len1, in_len2,\n\
    \t\t\t\t\t\t  in_pStr1,\n\
    \t\t\t\t\t\t  in_LCS_Lenght,\n\
    \t\t\t\t\t\t  io_LCSsCurNode,\n\
    \t\t\t\t\t\t  out_LCSsNum);\n\
    \t\t\tif (the_adjp == in_tail[in_i][in_j])\n\
    \t\t\t\tbreak;\n\
    \t\t\tif (the_adjp == in_pretail[in_i][in_j]) {\n\
    \t\t\t\tthe_adjp = in_tail[in_i][in_j];\n\
    \t\t\t} else {\n\
    \t\t\t\tthe_adjp = the_adjp->next;\n\
    \t\t\t}\n\
    \t\t}\n\
    \t}\n\
    \tif (in_i == in_len1 && in_j == in_len2)\n\
    \t{\n\
    #if 0/* DEBUG?p */\n\
    \t\t//printf(\"%d\\n\",the_count);\n\
    \t\t/* ????n????LCS??????p???? */\n\
    \t\t//*out_LCSsNum = the_count;\n\
    #endif\n\n\
    \t}\n\
    \treturn 0;\n\
    }\n\n\
    /**\n\
    *  GetAllDistinctLCSs\n\
    *  ????n????All Distinct LCS????????\n\
    *  @param  in_pStr1,in_pStr2 ????n??\n\
    *  @param  in_len1,in_len2?@ ????n???????\n\
    *  @param  io_LCSsHeadNode   LCS??List??w?b?_Node\n\
    *  @param  out_LCS_Lenght    LCS??Lenght\n\
    *  @param  out_LCSsNum       LCS???\n\
    *  @return  \n\
    *           ANZ_SUCCESS:?????I??                                      \n\
    *           ANZ_ERROR  :????I??\n\
    *  @author zhang-gh\n\
    */\n\
    int LCSAlgo::GetAllDistinctLCSs(char **in_pStr1, char **in_pStr2,        /* ????n?? */\n\
    \t\t\t\t\t\t\t\tconst int in_len1, const int in_len2,    /* ????n??????? */\n\
    \t\t\t\t\t\t\t\tPLCSLIST *io_LCSsHeadNode,    /* LCS??List??w?b?_Node */\n\
    \t\t\t\t\t\t\t\tint *out_LCS_Lenght,          /* LCS??Lenght */\n\
    \t\t\t\t\t\t\t\tint *out_LCSsNum)          /* LCS??? */\n\
    {\n\
    \tint the_i, the_j;\n\
    \tPCELL **the_head, **the_pretail, **the_tail;\n\
    \tPLCSPOS *the_lcsrev;\n\
    \tint **the_rank;\n\
    \tPCELL **the_p;\n\
    \tPLCSLIST *the_pLCSsCurNode; /* LCS??List??J?????gNode */\n\
    \tPLCSLIST the_LCSsPrevNode; /* LCS??List??ONode */\n\
    \tPLCSLIST the_pLCSsNextNode; /* LCS??List???Node */\n\n\
    \t/* ????????? */\n\
    \tthe_i = 0;\n\
    \tthe_j = 0;\n\
    \tthe_head = NULL;\n\
    \tthe_pretail = NULL;\n\
    \tthe_tail = NULL;\n\
    \tthe_lcsrev = NULL;\n\
    \tthe_rank = NULL;\n\
    \tthe_p = NULL;\n\
    \tthe_pLCSsCurNode = NULL;\n\
    \tthe_LCSsPrevNode = NULL;\n\
    \tthe_pLCSsNextNode = NULL;\n\n\
    \tint the_iMinLen = min(in_len1, in_len2);\n\
    \tint the_iComm_Head = 0;\n\
    \tint the_iComm_Tail = 0;\n\
    \tfor (the_i = 0;the_i < the_iMinLen;the_i++) {\n\
    \t\tif (strcmp(in_pStr1[the_i], in_pStr2[the_i]) == 0) {\n\
    \t\t\tthe_iComm_Head++;\n\
    \t\t} else {\n\
    \t\t\tbreak;\n\
    \t\t}\n\
    \t}\n\n\
    \tint the_iCurLine1 = in_len1 - 1;\n\
    \tint the_iCurLine2 = in_len2 - 1;\n\
    \twhile (in_pStr1[the_iCurLine1] != NULL &&\n\
    \t\t\tin_pStr2[the_iCurLine2] != NULL &&\n\
    \t\t\tthe_iCurLine1 > the_iComm_Head - 1 &&\n\
    \t\t\tthe_iCurLine2 > the_iComm_Head - 1) {\n\
    \t\tif (strcmp(in_pStr1[the_iCurLine1], in_pStr2[the_iCurLine2]) == 0) {\n\
    \t\t\tthe_iComm_Tail++;\n\
    \t\t} else {\n\
    \t\t\tbreak;\n\
    \t\t}\n\
    \t\tthe_iCurLine1--;\n\
    \t\tthe_iCurLine2--;\n\
    \t}\n\
    \tint the_iLen1 = in_len1 - the_iComm_Head - the_iComm_Tail;\n\
    \tint the_iLen2 = in_len2 - the_iComm_Head - the_iComm_Tail;\n\
    \tchar** the_pStr1 = in_pStr1 + the_iComm_Head;\n\
    \tchar** the_pStr2 = in_pStr2 + the_iComm_Head;\n\n\
    \t/* LCS??List??w?b?_Node???????? */\n\
    \tAnzMalloc(the_pLCSsCurNode, PLCSLIST *, sizeof(PLCSLIST *));\n\
    \tif (the_pLCSsCurNode != NULL) {\n\
    \t\tmemset(the_pLCSsCurNode, 0, sizeof(PLCSLIST *));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tAnzMalloc(*the_pLCSsCurNode, PLCSLIST, sizeof(ST_LCSLIST));\n\
    \tif (the_pLCSsCurNode != NULL) {\n\
    \t\tmemset(*the_pLCSsCurNode, 0, sizeof(ST_LCSLIST));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \t*io_LCSsHeadNode = *the_pLCSsCurNode;\n\n\
    \t/* ?O???[?o?????g_dummy??????? */\n\
    \tAnzMalloc(g_dummy, PCELL, sizeof(ST_CELL));\n\
    \tif (g_dummy != NULL) {\n\
    \t\tmemset(g_dummy, 0, sizeof(ST_CELL));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tg_dummy->i = 0;\n\
    \tg_dummy->j = 0;\n\n\
    \tAnzMalloc(the_p, PCELL**, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \tif (the_p != NULL) {\n\
    \t\tmemset(the_p, 0, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_p[the_i], PCELL*, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\tif (the_p[the_i] != NULL) {\n\
    \t\t\tmemset(the_p[the_i], 0, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tAnzMalloc(the_p[the_i][the_j], PCELL, sizeof(ST_CELL));\n\
    \t\t\tif (the_p[the_i][the_j] != NULL) {\n\
    \t\t\t\tmemset(the_p[the_i][the_j], 0, sizeof(ST_CELL));\n\
    \t\t\t} else {\n\
    \t\t\t\tthrow MemoryFailedExc();\n\
    \t\t\t}\n\
    \t\t\tthe_p[the_i][the_j]->i = the_i;\n\
    \t\t\tthe_p[the_i][the_j]->j = the_j;\n\
    \t\t\tthe_p[the_i][the_j]->next = DCELL;\n\
    \t\t}\n\
    \t}\n\
    \t//the_rank\n\
    \tAnzMalloc(the_rank, int **, sizeof(int*)*(the_iLen1 + 1));\n\
    \tif (the_rank != NULL) {\n\
    \t\tmemset(the_rank, 0, sizeof(int*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_rank[the_i], int *, sizeof(int)*(the_iLen2 + 1));\n\
    \t\tif (the_rank[the_i] != NULL) {\n\
    \t\t\tmemset(the_rank[the_i], 0, sizeof(int)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tthe_rank[the_i][the_j] = 0;\n\
    \t\t}\n\
    \t}\n\
    \t//the_head\n\
    \tAnzMalloc(the_head, PCELL **, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \tif (the_head != NULL) {\n\
    \t\tmemset(the_head, 0, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_head[the_i], PCELL *, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\tif (the_head[the_i] != NULL) {\n\
    \t\t\tmemset(the_head[the_i], 0, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tthe_head[the_i][the_j] = DCELL;\n\
    \t\t}\n\
    \t}\n\
    \t//the_pretail\n\
    \tAnzMalloc(the_pretail, PCELL **, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \tif (the_pretail != NULL) {\n\
    \t\tmemset(the_pretail, 0, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_pretail[the_i], PCELL *, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\tif (the_pretail[the_i] != NULL) {\n\
    \t\t\tmemset(the_pretail[the_i], 0, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tthe_pretail[the_i][the_j] = DCELL;\n\
    \t\t}\n\
    \t}\n\
    \t//the_tail\n\
    \tAnzMalloc(the_tail, PCELL **, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \tif (the_tail != NULL) {\n\
    \t\tmemset(the_tail, 0, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_tail[the_i], PCELL *, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\tif (the_tail[the_i] != NULL) {\n\
    \t\t\tmemset(the_tail[the_i], 0, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tthe_tail[the_i][the_j] = DCELL;\n\
    \t\t}\n\
    \t}\n\
    \t//compute gragh\n\
    \tfor (the_i = 1;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 1;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tif (strcmp(the_pStr1[the_i - 1], the_pStr2[the_j - 1]) == 0) {\n\
    \t\t\t\tthe_rank[the_i][the_j] = the_rank[the_i - 1][the_j - 1] + 1;\n\
    \t\t\t\tthe_tail[the_i][the_j] = the_p[the_i][the_j];\n\
    \t\t\t} else {\n\
    \t\t\t\tthe_rank[the_i][the_j] = MAX(the_rank[the_i - 1][the_j], the_rank[the_i][the_j - 1]);\n\
    \t\t\t\tif (the_rank[the_i][the_j] > 0) {\n\
    \t\t\t\t\tif (the_rank[the_i - 1][the_j] == the_rank[the_i][the_j]) {\n\
    \t\t\t\t\t\tthe_tail[the_i][the_j] = the_tail[the_i - 1][the_j];\n\
    \t\t\t\t\t}\n\
    \t\t\t\t\tif (the_rank[the_i][the_j - 1] == the_rank[the_i][the_j]) {\n\
    \t\t\t\t\t\tif (the_tail[the_i][the_j] == DCELL) {\n\
    \t\t\t\t\t\t\tthe_tail[the_i][the_j] = the_tail[the_i][the_j - 1];\n\
    \t\t\t\t\t\t} else {\n\
    \t\t\t\t\t\t\tif (the_tail[the_i][the_j]->i == the_tail[the_i][the_j - 1]->i) {\n\
    \t\t\t\t\t\t\t\tthe_pretail[the_i][the_j] = the_pretail[the_i][the_j - 1];\n\
    \t\t\t\t\t\t\t} else {\n\
    \t\t\t\t\t\t\t\tthe_pretail[the_i][the_j] = the_tail[the_i][the_j - 1];\n\
    \t\t\t\t\t\t\t}\n\
    \t\t\t\t\t\t\tif (the_tail[the_i][the_j]->j == the_pretail[the_i][the_j]->j) {\n\
    \t\t\t\t\t\t\t\tthe_tail[the_i][the_j] = the_pretail[the_i][the_j];\n\
    \t\t\t\t\t\t\t} else {\n\
    \t\t\t\t\t\t\t\tthe_pretail[the_i][the_j]->next = the_tail[the_i][the_j];\n\
    \t\t\t\t\t\t\t\tthe_head[the_i][the_j] = the_head[the_i][the_j - 1];\n\
    \t\t\t\t\t\t\t\tif (the_head[the_i][the_j] == DCELL) {\n\
    \t\t\t\t\t\t\t\t\tthe_head[the_i][the_j] = the_pretail[the_i][the_j];\n\
    \t\t\t\t\t\t\t\t}\n\
    \t\t\t\t\t\t\t}\n\
    \t\t\t\t\t\t}\n\
    \t\t\t\t\t}\n\
    \t\t\t\t}\n\
    \t\t\t}\n\
    \t\t} //end for the_j\n\
    \t} //end for the_i\n\n\
    \t//get LCSs and count\n\
    \t//lcsrev???????\n\
    \tAnzMalloc(the_lcsrev, PLCSPOS *, sizeof(PLCSPOS)*(the_rank[the_iLen1][the_iLen2]));\n\
    \tif (the_lcsrev != NULL) {\n\
    \t\tmemset(the_lcsrev, 0, sizeof(PLCSPOS)*(the_rank[the_iLen1][the_iLen2]));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_rank[the_iLen1][the_iLen2];the_i++) {\n\
    \t\tAnzMalloc(the_lcsrev[the_i], PLCSPOS, sizeof(ST_LCSCELL));\n\
    \t\tif (the_lcsrev[the_i] != NULL) {\n\
    \t\t\tmemset(the_lcsrev[the_i], 0, sizeof(ST_LCSCELL));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \t*out_LCS_Lenght = the_rank[the_iLen1][the_iLen2];\n\
    \tif (*out_LCS_Lenght != 0) { //?????v????????v??O???????LCS????????\n\
    \t\tGetEmbeddings(the_iComm_Head, the_iComm_Tail,\n\
    \t\t\t\t\t  the_iLen1, the_iLen2,\n\
    \t\t\t\t\t  the_lcsrev, 0,\n\
    \t\t\t\t\t  the_head, the_pretail, the_tail,\n\
    \t\t\t\t\t  the_iLen1, the_iLen2,\n\
    \t\t\t\t\t  the_pStr1,\n\
    \t\t\t\t\t  the_rank[the_iLen1][the_iLen2],\n\
    \t\t\t\t\t  &the_pLCSsCurNode,\n\
    \t\t\t\t\t  out_LCSsNum);\n\
    \t\t/* ?? ????Node???????? */\n\
    \t\t*the_pLCSsCurNode = *io_LCSsHeadNode;\n\
    \t\tthe_LCSsPrevNode = *io_LCSsHeadNode;\n\
    \t\tthe_pLCSsNextNode = *io_LCSsHeadNode;\n\
    \t\twhile (*the_pLCSsCurNode != NULL) {\n\
    \t\t\tthe_pLCSsNextNode = (*the_pLCSsCurNode)->next;\n\
    \t\t\tif (the_pLCSsNextNode == NULL) {\n\
    \t\t\t\tfree(*the_pLCSsCurNode);\n\
    \t\t\t\t*the_pLCSsCurNode = NULL;\n\
    \t\t\t\tif (the_LCSsPrevNode != NULL) {\n\
    \t\t\t\t\t(the_LCSsPrevNode)->next = NULL;\n\
    \t\t\t\t}\n\
    \t\t\t}\n\
    \t\t\tthe_LCSsPrevNode = *the_pLCSsCurNode;\n\
    \t\t\t*the_pLCSsCurNode = the_pLCSsNextNode;\n\
    \t\t}\n\n\
    \t\t// add common context\n\
    \t\t*the_pLCSsCurNode = *io_LCSsHeadNode;\n\
    \t\twhile (*the_pLCSsCurNode != NULL) {\n\
    \t\t\tfor (the_i = 0;the_i < the_iComm_Head;the_i++) {\n\
    \t\t\t\t((*the_pLCSsCurNode)->LCS)[the_i] = in_pStr1[the_i];\n\
    \t\t\t}\n\
    \t\t\tthe_i = the_iComm_Head + *out_LCS_Lenght;\n\
    \t\t\tfor (the_j = in_len1 - the_iComm_Tail;the_j < in_len1;the_j++) {\n\
    \t\t\t\t((*the_pLCSsCurNode)->LCS)[the_i] = in_pStr1[the_j];\n\
    \t\t\t\tthe_i++;\n\
    \t\t\t}\n\
    \t\t\t*the_pLCSsCurNode = (*the_pLCSsCurNode)->next;\n\
    \t\t}\n\
    \t\t*out_LCS_Lenght = *out_LCS_Lenght + the_iComm_Head + the_iComm_Tail;\n\
    \t} else if (the_iComm_Head + the_iComm_Tail > 0) { //?????v????????v??O???????LCS???????\n\
    \t\tchar ** the_LCS = NULL;\n\
    \t\tAnzMalloc(the_LCS, char**, sizeof(char *)*(the_iComm_Head + the_iComm_Tail + 1));\n\
    \t\tif (the_LCS != NULL) {\n\
    \t\t\tmemset(the_LCS, 0, sizeof(char *)*(the_iComm_Head + the_iComm_Tail + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tfor (the_i = 0;the_i < the_iComm_Head;the_i++) {\n\
    \t\t\tthe_LCS[the_i] = in_pStr1[the_i];\n\
    \t\t}\n\
    \t\tfor (the_j = in_len1 - the_iComm_Tail;the_j < in_len1;the_j++) {\n\
    \t\t\tthe_LCS[the_i] = in_pStr1[the_j];\n\
    \t\t\tthe_i++;\n\
    \t\t}\n\
    \t\t(*the_pLCSsCurNode)->LCS = the_LCS;\n\
    \t\t(*the_pLCSsCurNode)->next = NULL;\n\
    \t\t*out_LCS_Lenght = the_iComm_Head + the_iComm_Tail;\n\
    \t} else {\n\
    \t\tif (*the_pLCSsCurNode != NULL) {\n\
    \t\t\tfree(*the_pLCSsCurNode);\n\
    \t\t\t*the_pLCSsCurNode = NULL;\n\
    \t\t\t*io_LCSsHeadNode = NULL;\n\
    \t\t}\n\
    \t}\n\
    \t//Free memory\n\
    \tfor (the_i = 0;the_i < the_rank[the_iLen1][the_iLen2];the_i++) {\n\
    \t\tif (the_lcsrev[the_i] != NULL) {\n\
    \t\t\tfree(the_lcsrev[the_i]);\n\
    \t\t\tthe_lcsrev[the_i] = NULL;\n\
    \t\t}\n\
    \t}\n\n\
    \tif (the_lcsrev != NULL) {\n\
    \t\tfree(the_lcsrev);\n\
    \t\tthe_lcsrev = NULL;\n\
    \t}\n\
    \t//**the_head, **the_pretail, **the_tail;\n\
    \t//**the_rank;\n\
    \t//**the_p[the_i][the_j];\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tif (the_p[the_i][the_j] != NULL) {\n\
    \t\t\t\tfree(the_p[the_i][the_j]);\n\
    \t\t\t\tthe_p[the_i][the_j] = NULL;\n\
    \t\t\t}\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tif (*(the_head + the_i) != NULL) {\n\
    \t\t\tfree(*(the_head + the_i));\n\
    \t\t\t*(the_head + the_i) = NULL;\n\
    \t\t}\n\
    \t\tif (the_pretail[the_i] != NULL) {\n\
    \t\t\tfree(the_pretail[the_i]);\n\
    \t\t\tthe_pretail[the_i] = NULL;\n\
    \t\t}\n\
    \t\tif (the_tail[the_i] != NULL) {\n\
    \t\t\tfree(the_tail[the_i]);\n\
    \t\t\tthe_tail[the_i] = NULL;\n\
    \t\t}\n\
    \t\tif (the_rank[the_i] != NULL) {\n\
    \t\t\tfree(the_rank[the_i]);\n\
    \t\t\tthe_rank[the_i] = NULL;\n\
    \t\t}\n\
    \t\tif (the_p[the_i] != NULL) {\n\
    \t\t\tfree(the_p[the_i]);\n\
    \t\t\tthe_p[the_i] = NULL;\n\
    \t\t}\n\
    \t}\n\
    \tif (the_head != NULL) {\n\
    \t\tfree(the_head);\n\
    \t\tthe_head = NULL;\n\
    \t}\n\
    \tif (the_pretail != NULL) {\n\
    \t\tfree(the_pretail);\n\
    \t\tthe_pretail = NULL;\n\
    \t}\n\
    \tif (the_tail != NULL) {\n\
    \t\tfree(the_tail);\n\
    \t\tthe_tail = NULL;\n\
    \t}\n\
    \tif (the_rank != NULL) {\n\
    \t\tfree(the_rank);\n\
    \t\tthe_rank = NULL;\n\
    \t}\n\
    \tif (the_p != NULL) {\n\
    \t\tfree(the_p);\n\
    \t\tthe_p = NULL;\n\
    \t}\n\
    \tif (the_pLCSsCurNode != NULL) {\n\
    \t\tfree(the_pLCSsCurNode);\n\
    \t\tthe_pLCSsCurNode = NULL;\n\
    \t}\n\
    \tif (g_dummy != NULL) {\n\
    \t\tfree(g_dummy);\n\
    \t\tg_dummy = NULL;\n\
    \t}\n\
    \treturn 0;\n\
    }\n\n\
    ST_LCS_DAT * LCSAlgo::CreateLCS_DAT(MeasureFileObject* in_measureFileObj)\n\
    {\n\
    \tint the_iPairNo = 0;\t\t\t\t\t\t// ????y?A?????A????????y?A????r??????????\n\
    \tint the_iArrayNum = 0;\t\t\t\t\t\t// _ST_LCS_DAT???????y?A??\n\
    \tint the_iFuncPair = 0;\t\t\t\t\t\t// LCS??g????????\n\
    \tint the_iArray_Cur = 0;\t\t\t\t\t\t// ?J?????g?????z???????\n\
    \tint the_iBit_Cur = 0;\t\t\t\t\t\t// ?J?????g?????long?^????bit???u\n\
    \tint the_iArray_Next = 0;\t\t\t\t\t// ???????z???????\n\
    \tint the_iBit_Next = 0;\t\t\t\t\t\t// ???????long?^????bit???u\n\
    \tint the_iCurNo = 0;\t\t\t\t\t\t\t// ?J?????g?????z???????\n\
    \tint the_iNextNo = 0;\t\t\t\t\t\t// ???????????\n\
    \tint the_iLCSsNum = 0;\t\t\t\t\t\t// LCS???\n\
    \tint the_iLCS_Lenght = 0;\t\t\t\t\t// LCS??Lenght\n\
    \tPLCSLIST the_pLCSsHeadNode = NULL; /* LCS??List??w?b?_Node */\n\
    \tPLCSLIST the_pLCSsNextNode = NULL; /* ????n????LCS??List???????p??Node */\n\
    \tPLCSLIST the_pLCSsCurNode = NULL; /* LCS??List???????p?J?????gNode */\n\n\
    \tunsigned long the_iFuncNum = 0;\t\t\t\t//File????L?q??????????\n\n\
    \tST_LCS_DAT* pLcs_Dat_Head = NULL;\t\t\t//_ST_LCS_DAT??HeadNode\n\
    \tST_LCS_DAT* pLcs_Dat_Cur = NULL;\t\t\t//_ST_LCS_DAT??CurNode\n\
    \tST_LCS_DAT* pLcs_Dat_Pre = NULL;\t\t\t//_ST_LCS_DAT??PreNode\n\
    \tunsigned long *lPair = NULL;\n\
    \tunsigned long *pPair = NULL;\n\
    \tunsigned long lFir, lSec;\n\n\
    \tlFir = 1;\n\
    \tlSec = 1;\n\n\
    \t// ????v??FileInfo????????\n\
    \tif (in_measureFileObj == NULL) {\n\
    \t\treturn NULL;\n\
    \t}\n\
    \t// ????v??FunctionInfo????????\n\
    \tthe_iFuncNum = in_measureFileObj->GetCommonFileInfo()->GetFuncNum();\n\
    \tthe_iFuncPair = the_iFuncNum * (the_iFuncNum - 1) / 2;\n\
    \tthe_iArrayNum = the_iFuncNum / g_iUnitSize;\n\
    \tif (the_iFuncNum % g_iUnitSize != 0) {\n\
    \t\tthe_iArrayNum++;\n\
    \t}\n\n\
    \tin_measureFileObj->RewindFuncList();\n\
    \tMeasureFuncObject* the_pFuncCur = in_measureFileObj->GetCurrFuncObj();\n\
    \tMeasureFuncObject* the_pFuncNext = in_measureFileObj->GetCurrFuncObj();\n\n\
    \t/* ????????? */\n\
    \tthe_iLCSsNum = 0;\n\
    \tthe_iLCS_Lenght = 0;\n\
    \tthe_pLCSsNextNode = NULL;\n\
    \tthe_pLCSsHeadNode = NULL;\n\
    \tthe_pLCSsCurNode = NULL;\n\
    \twhile (in_measureFileObj->HasNextFunc()) {\n\
    \t\tthe_iNextNo = the_iCurNo + 1;\n\
    \t\tthe_iArray_Cur = the_iCurNo / g_iUnitSize;\n\
    \t\tthe_iBit_Cur = the_iCurNo % g_iUnitSize;\n\
    \t\t//\n\
    \t\tin_measureFileObj->MoveNextFunc();\n\
    \t\tthe_pFuncNext = in_measureFileObj->GetCurrFuncObj();\n\
    \t\tin_measureFileObj->MarkCurrFuncPos();\n\
    \t\twhile (the_pFuncNext != NULL) {\n\
    \t\t\t//*out_fileELOC = *out_fileELOC + the_pFuncNext->m_eloc;\n\
    \t\t\tthe_iArray_Next = the_iNextNo / g_iUnitSize;\n\
    \t\t\tthe_iBit_Next = the_iNextNo % g_iUnitSize;\n\n\
    \t\t\tthe_iLCSsNum = 0;\n\
    \t\t\tthe_iLCS_Lenght = 0;\n\
    \t\t\tthe_pLCSsHeadNode = NULL;\n\
    \t\t\t/* ????n????All Distinct LCS???????? */\n\
    \t\t\tGetAllDistinctLCSs(the_pFuncCur->GetCommFuncInfo()->GetExecContent(),\n\
    \t\t\t\t\t\t\t   the_pFuncNext->GetCommFuncInfo()->GetExecContent(),\n\
    \t\t\t\t\t\t\t   the_pFuncCur->GetCommFuncInfo()->GetExecLOC(),\n\
    \t\t\t\t\t\t\t   the_pFuncNext->GetCommFuncInfo()->GetExecLOC(),\n\
    \t\t\t\t\t\t\t   &the_pLCSsHeadNode,\n\
    \t\t\t\t\t\t\t   &the_iLCS_Lenght,\n\
    \t\t\t\t\t\t\t   &the_iLCSsNum);\n\
    \t\t\tthe_pLCSsCurNode = the_pLCSsHeadNode;\n\
    \t\t\t//while (the_pLCSsCurNode!=NULL)\n\
    \t\t\tif (the_pLCSsCurNode != NULL && the_iLCS_Lenght != 0) {\n\
    \t\t\t\t//\t\t\t\tif(the_iLCS_Lenght == 0){\n\
    \t\t\t\t//\t\t\t\t\tthe_pLCSsCurNode = the_pLCSsCurNode->next;\n\
    \t\t\t\t//\t\t\t\t\tcontinue;\n\
    \t\t\t\t//\t\t\t\t}\n\
    \t\t\t\tAnzMalloc(pLcs_Dat_Cur, ST_LCS_DAT*, sizeof(ST_LCS_DAT));\n\
    \t\t\t\tif (pLcs_Dat_Cur != NULL) {\n\
    \t\t\t\t\tmemset(pLcs_Dat_Cur, 0, sizeof(ST_LCS_DAT));\n\
    \t\t\t\t} else {\n\
    \t\t\t\t\tthrow MemoryFailedExc();\n\
    \t\t\t\t}\n\
    \t\t\t\tif (pLcs_Dat_Head == NULL) {\n\
    \t\t\t\t\tpLcs_Dat_Head = pLcs_Dat_Cur;\n\
    \t\t\t\t\tpLcs_Dat_Pre = pLcs_Dat_Cur;\n\
    \t\t\t\t} else {\n\
    \t\t\t\t\tpLcs_Dat_Pre->next = pLcs_Dat_Cur;\n\
    \t\t\t\t}\n\n\
    \t\t\t\tpLcs_Dat_Cur->LCS = the_pLCSsCurNode->LCS;\n\
    \t\t\t\tpLcs_Dat_Cur->length = the_iLCS_Lenght;\n\
    \t\t\t\tAnzMalloc(lPair, unsigned long*, sizeof(unsigned long)*(the_iArrayNum + 1));\n\
    \t\t\t\tif (lPair != NULL) {\n\
    \t\t\t\t\tmemset(lPair, 0, sizeof(unsigned long)*(the_iArrayNum + 1));\n\
    \t\t\t\t} else {\n\
    \t\t\t\t\tthrow MemoryFailedExc();\n\
    \t\t\t\t}\n\
    \t\t\t\tpPair = lPair;\n\
    \t\t\t\tlFir = 1, lSec = 1;\n\
    \t\t\t\tlFir = lFir << the_iBit_Cur;\n\
    \t\t\t\tlSec = lSec << the_iBit_Next;\n\
    \t\t\t\tif (the_iArray_Cur == the_iArray_Next) {\n\
    \t\t\t\t\tpPair[the_iArray_Cur] = lFir | lSec;\n\
    \t\t\t\t} else {\n\
    \t\t\t\t\tpPair[the_iArray_Cur] = lFir;\n\
    \t\t\t\t\tpPair[the_iArray_Next] = lSec;\n\
    \t\t\t\t}\n\
    \t\t\t\tpPair[the_iArrayNum] = NULL;\n\
    \t\t\t\tpLcs_Dat_Cur->funcPair = pPair;\n\
    \t\t\t\tpLcs_Dat_Cur->next = NULL;\n\
    \t\t\t\tpLcs_Dat_Cur->pairNo = the_iPairNo;\n\
    \t\t\t\tpLcs_Dat_Cur->bDelete = false;\n\
    \t\t\t\tpLcs_Dat_Pre = pLcs_Dat_Cur;\n\
    \t\t\t\tthe_pLCSsCurNode = the_pLCSsCurNode->next;\n\
    \t\t\t} //End of while (the_pLCSsCurNode!=NULL)\n\
    \t\t\tthe_pLCSsCurNode = the_pLCSsHeadNode;\n\
    \t\t\twhile (the_pLCSsCurNode != NULL) {\n\
    \t\t\t\tthe_pLCSsNextNode = the_pLCSsCurNode->next;\n\
    \t\t\t\tif (the_pLCSsCurNode != the_pLCSsHeadNode && the_pLCSsCurNode->LCS != NULL) {\n\
    \t\t\t\t\tfree(the_pLCSsCurNode->LCS);\n\
    \t\t\t\t}\n\
    \t\t\t\tfree(the_pLCSsCurNode);\n\
    \t\t\t\tthe_pLCSsCurNode = the_pLCSsNextNode;\n\
    \t\t\t}\n\
    \t\t\tthe_iNextNo++;\n\
    \t\t\tthe_iPairNo++;\n\
    \t\t\tin_measureFileObj->MoveNextFunc();\n\
    \t\t\tthe_pFuncNext = in_measureFileObj->GetCurrFuncObj();\n\n\
    \t\t} //End of while (the_pFuncNext != NULL)\n\
    \t\tthe_iCurNo++;\n\
    \t\t//\n\
    \t\tin_measureFileObj->RestoreMarkFuncPos();\n\
    \t\tthe_pFuncCur = in_measureFileObj->GetCurrFuncObj();\n\
    \t} //End of while (in_measureFileObj->HasNextFunc())\n\
    \treturn pLcs_Dat_Head;\n\
    }\n\n\
    LCSAlgo::LCSAlgo()\n\
    {}\n\n\
    LCSAlgo::~LCSAlgo()\n\
    {}\n\n\
    /**\n\
    *  ?????:GetLCSLength\n\
    *  ?T?v:?????LCS???v?Z\n\
    *  @param\n\
    *          in_pStr1      ?v?????1??s???e\n\
    *          in_pStr2      ?v?????2??s???e\n\
    *          in_len1       ?v?????1??s??\n\
    *          in_len2       ?v?????2??s??\n\
    *  @return\n\
    *          ANZ_SUCCESS          ?????I??    \n\
    *          ANZERR_MEMORY_FAILED ???????m????s  \n\
    *  @author luo-jirong\n\
    *  @modified by fan-jia 2005/02/06\n\
    */\n\
    unsigned int LCSAlgo::GetLCSLength(char** in_pStr1,\n\
    \t\t\t\t\t\t\t\t   char** in_pStr2,\n\
    \t\t\t\t\t\t\t\t   const int in_len1,\n\
    \t\t\t\t\t\t\t\t   const int in_len2)\n\
    {\n\
    \tregister int the_i = 0;     /* Loop?p */\n\
    \tregister int the_j = 0;     /* Loop?p */\n\
    \tunsigned int the_max = 0;   /* ?J?????g????l */\n\
    \tunsigned int *the_ps1 = NULL;  /* ???l???i?[?????z?? */\n\
    \tunsigned int *the_ps2 = NULL;   /* ???l???i?[?????z?? */\n\
    \tunsigned int *the_tmp = NULL;        /* Swap?p???Point */\n\
    \tunsigned int the_commonNum = 0;      /* ????s?? */\n\
    \tint the_iMaxLen = 0;        /* Item?????\xC2\x90? */\n\n\
    \tif (in_pStr1 == NULL || in_pStr2 == NULL) {\n\
    \t\treturn -1;\n\
    \t}\n\n\
    \tint the_iMinLen = min(in_len1, in_len2);\n\
    \tint the_iComm_Head = 0;\n\
    \tint the_iComm_Tail = 0;\n\
    \tfor (the_i = 0;the_i < the_iMinLen;the_i++) {\n\
    \t\tif (strcmp(in_pStr1[the_i], in_pStr2[the_i]) == 0) {\n\
    \t\t\tthe_iComm_Head++;\n\
    \t\t} else {\n\
    \t\t\tbreak;\n\
    \t\t}\n\
    \t}\n\n\
    \tint the_iCurLine1 = in_len1 - 1;\n\
    \tint the_iCurLine2 = in_len2 - 1;\n\
    \twhile (in_pStr1[the_iCurLine1] != NULL &&\n\
    \t\t\tin_pStr2[the_iCurLine2] != NULL &&\n\
    \t\t\tthe_iCurLine1 > the_iComm_Head - 1 &&\n\
    \t\t\tthe_iCurLine2 > the_iComm_Head - 1) {\n\
    \t\tif (strcmp(in_pStr1[the_iCurLine1], in_pStr2[the_iCurLine2]) == 0) {\n\
    \t\t\tthe_iComm_Tail++;\n\
    \t\t} else {\n\
    \t\t\tbreak;\n\
    \t\t}\n\
    \t\tthe_iCurLine1--;\n\
    \t\tthe_iCurLine2--;\n\
    \t}\n\n\
    \tint the_iLen1 = in_len1 - the_iComm_Head - the_iComm_Tail;\n\
    \tint the_iLen2 = in_len2 - the_iComm_Head - the_iComm_Tail;\n\
    \tchar** the_pStr1 = in_pStr1 + the_iComm_Head;\n\
    \tchar** the_pStr2 = in_pStr2 + the_iComm_Head;\n\
    \tthe_iMaxLen = the_iLen1 > the_iLen2 ? the_iLen1 : the_iLen2;\n\n\
    \tAnzMalloc(the_ps1, unsigned int*, sizeof(unsigned int) * (the_iMaxLen + 1));\n\
    \tAnzMalloc(the_ps2, unsigned int*, sizeof(unsigned int) * (the_iMaxLen + 1));\n\n\
    \tif (the_ps1 == NULL || the_ps2 == NULL) {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\n\
    \tmemset(the_ps1, 0, sizeof(int) * (the_iMaxLen + 1));\n\
    \tmemset(the_ps2, 0, sizeof(int) * (the_iMaxLen + 1));\n\n\
    \tfor (the_i = 0; the_i < the_iLen2; the_i++) {\n\
    \t\tfor (the_j = 0; the_j < the_iLen1; the_j++) {\n\
    \t\t\tif (the_pStr1[the_j] == NULL || the_pStr2[the_i] == NULL) {\n\
    \t\t\t\tthe_max = 0;\n\
    \t\t\t\tTrace(\"GetLCSLength:?????v?f??Point??A?h???X??NULL??????B\");\n\
    \t\t\t} else {\n\
    \t\t\t\tif ( strcmp( the_pStr1[the_j], the_pStr2[the_i]) == 0 )\n\
    \t\t\t\t\tthe_max = the_ps1[the_j] + 1;\n\
    \t\t\t\telse\n\
    \t\t\t\t\tthe_max = 0;\n\
    \t\t\t}\n\
    \t\t\tif (the_max < the_ps1[the_j + 1])\n\
    \t\t\t\tthe_max = the_ps1[the_j + 1];\n\
    \t\t\tif (the_max < the_ps2[the_j])\n\
    \t\t\t\tthe_max = the_ps2[the_j];\n\
    \t\t\tthe_ps2[the_j + 1] = the_max;\n\
    \t\t}\n\
    \t\tthe_tmp = the_ps1;\n\
    \t\tthe_ps1 = the_ps2;\n\
    \t\tthe_ps2 = the_tmp;\n\
    \t}\n\n\
    \tthe_commonNum = the_ps1[ the_iLen1] + the_iComm_Head + the_iComm_Tail;\n\n\
    \tif (the_ps1 != NULL) {\n\
    \t\tfree(the_ps1);\n\
    \t\tthe_ps1 = NULL;\n\
    \t}\n\
    \tif (the_ps2 != NULL) {\n\
    \t\tfree(the_ps2);\n\
    \t\tthe_ps2 = NULL;\n\
    \t}\n\
    \treturn the_commonNum;\n\
    }\n\n\
    void LCSAlgo::RemoveLCS_DAT(ST_LCS_DAT *in_pLCS_DAT)\n\
    {\n\
    \tST_LCS_DAT* the_pCurLCS_DAT = in_pLCS_DAT;\n\
    \tST_LCS_DAT* the_pNextLCS_DAT = in_pLCS_DAT;\n\n\
    \twhile (the_pCurLCS_DAT) {\n\
    \t\tthe_pNextLCS_DAT = the_pCurLCS_DAT->next;\n\
    \t\t//free the_pCurLCS_DAT\n\
    \t\tif (the_pCurLCS_DAT->funcPair != NULL) {\n\
    \t\t\tfree(the_pCurLCS_DAT->funcPair);\n\
    \t\t\tthe_pCurLCS_DAT->funcPair = NULL;\n\
    \t\t}\n\
    \t\tif (the_pCurLCS_DAT->LCS != NULL) {\n\
    \t\t\tfree(the_pCurLCS_DAT->LCS);\n\
    \t\t\tthe_pCurLCS_DAT->LCS = NULL;\n\
    \t\t}\n\
    \t\tif (the_pCurLCS_DAT != NULL) {\n\
    \t\t\tfree(the_pCurLCS_DAT);\n\
    \t\t\tthe_pCurLCS_DAT = NULL;\n\
    \t\t}\n\
    \t\tthe_pCurLCS_DAT = the_pNextLCS_DAT;\n\
    \t}\n\
    }\n\n"
  updated_at: 2011-05-13 10:34:57
  analyzed_source_path_id: "127"
  id: "9856"
  subtask_id: "6"
source_codes_1019: 
  created_at: 2010-07-05 17:15:30
  error_line: "53"
  body: |
    bool g_bTrendFile = false;

  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9725"
  subtask_id: "7"
source_codes_969: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: "    }\r\n\
    \r\n    /* ?v?????? */\r\n    /* ????v?? */\r\n    if(the_iMeasureType == ANZ_COMMON_MEASURE){\r\n        /* ????v??File??????}?N?????????? */\r\n        the_iRet = GetProcMacro(the_pAnzInfo,ANZ_COMMON_MEASURE);\r\n        if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9675"
  subtask_id: "9"
source_codes_837: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"File??X??(2)\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9543"
  subtask_id: "11"
source_codes_705: 
  created_at: 2010-07-05 17:11:50
  error_line: 
  body: "        break;\r\n    case SIGSEGV :\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9411"
  subtask_id: "1"
source_codes_150: 
  created_at: 2010-07-05 17:09:14
  error_line: "264"
  body: "    if(the_iRet == ANZ_ERR_MEMORY_FAILED){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8856"
  subtask_id: "5"
source_codes_282: 
  created_at: 2010-07-05 17:09:21
  error_line: "435"
  body: "    the_iRet = OutErrorFile(the_pAnzInfo->m_err);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8988"
  subtask_id: "5"
source_codes_1283: 
  created_at: 2010-07-05 17:18:41
  error_line: "110"
  body: "\tMessage = \"?V???O???N?H?[?e?[?V???????}?b?`??????????\";\n"
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9989"
  subtask_id: "12"
source_codes_1151: 
  created_at: 2010-07-05 17:16:41
  error_line: 
  body: |
    /*
    File:
        LanguageFactory.cpp
    Copyright:
        Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
        AnalyzeMe
    Abstract:
        ????Factory
    Author:
        luo-jirong
    Date:
        2005/02/08
    REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 2.0.0.0$
    */

  updated_at: 2011-05-13 10:34:56
  analyzed_source_path_id: "124"
  id: "9857"
  subtask_id: "6"
source_codes_151: 
  created_at: 2010-07-05 17:09:14
  error_line: "265"
  body: "        printf(\"%s\\n\",MSG_MOMORY_FAILED);\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8857"
  subtask_id: "5"
source_codes_283: 
  created_at: 2010-07-05 17:09:21
  error_line: "436"
  body: "    if(the_iRet == ANZ_ERR_MEMORY_FAILED){\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8989"
  subtask_id: "5"
source_codes_1284: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9990"
  subtask_id: "12"
source_codes_1152: 
  created_at: 2010-07-05 17:16:41
  error_line: "22"
  body: |
    #include "LanguageFactory.h"

  updated_at: 2011-05-13 10:34:56
  analyzed_source_path_id: "124"
  id: "9858"
  subtask_id: "6"
source_codes_1020: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: |
    /* Option File????e??????????O???[?o???????? */

  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9726"
  subtask_id: "7"
source_codes_838: 
  created_at: 2010-07-05 17:13:49
  error_line: "363"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9544"
  subtask_id: "11"
source_codes_706: 
  created_at: 2010-07-05 17:11:50
  error_line: "513"
  body: "        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGSEGV(%d)\\n\",sig );\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9412"
  subtask_id: "1"
source_codes_020: 
  created_at: 2010-07-05 17:09:11
  error_line: "36"
  body: |
    const char* APPLOGFILE = "analyzeme_log.txt";

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8726"
  subtask_id: "5"
source_codes_152: 
  created_at: 2010-07-05 17:09:14
  error_line: 
  body: "    }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8858"
  subtask_id: "5"
source_codes_284: 
  created_at: 2010-07-05 17:09:21
  error_line: "437"
  body: "        printf(\"%s\\n\",MSG_MOMORY_FAILED);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8990"
  subtask_id: "5"
source_codes_1285: 
  created_at: 2010-07-05 17:18:41
  error_line: "113"
  body: |
    CharLiteralNoClosedExc::CharLiteralNoClosedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9991"
  subtask_id: "12"
source_codes_1153: 
  created_at: 2010-07-05 17:16:41
  error_line: 
  body: |+
    #include "C_LanguageProduct.h"
    #include "Asm_LanguageProduct.h"
    
    /// <summary>
    ///?v??????????????N???X??instance??????????
    /// </summary>
    /// <remarks>
    ///?v??????????Factory???????C?v??????????Product?????CFile??g???q???????C
    ///????v??????????????N???X??instance???????????B
    /// </remarks>
    /// <param name="pExtName">File??g???q</param>
    /// <returns>
    ///?@?v??????????????N???X??instance
    /// </returns>
    /// <exception cref="???O??">
    ///
    /// </exception>
    LanguageProduct* LanguageFactory::CreateProduct(const char* in_pExtName)
    {
    	Trace("LanguageFactory::CreateProduct() in\n");
    	assert(in_pExtName != NULL);
    	if (in_pExtName == NULL) {
    		return NULL;
    	}
    
    	LanguageProduct * the_pLangProd = NULL;
    	if (strcmp(in_pExtName, "c") == 0 ||
    			strcmp(in_pExtName, "C") == 0 ||
    			strcmp(in_pExtName, "h") == 0 ||
    			strcmp(in_pExtName, "H") == 0) {
    		the_pLangProd = C_LanguageProduct::GetInstance();
    #ifdef ANALYZEME_CPP_SUPPORT
    	} else if (strcmp(in_pExtName, "cpp") == 0 || // C++???????????(K.Maruya) 
    				strcmp(in_pExtName, "CPP") == 0 || 
    				strcmp(in_pExtName, "cxx") == 0 ||
    				strcmp(in_pExtName, "CXX") == 0) {
    		the_pLangProd = C_LanguageProduct::GetInstance();
    #endif
    	} else if (strcmp(in_pExtName, "s") == 0 || strcmp(in_pExtName, "S") == 0 ) {
    		the_pLangProd = Asm_LanguageProduct::GetInstance();
    	} else if (strcmp(in_pExtName, "asm") == 0 || strcmp(in_pExtName, "ASM") == 0 ) {
    		the_pLangProd = Asm_LanguageProduct::GetInstance();
    	} else {
    		the_pLangProd = Asm_LanguageProduct::GetInstance();
    	}
    
    	Trace("LanguageFactory::CreateProduct() out\n");
    	return the_pLangProd;
    }
    
    LanguageFactory::LanguageFactory()
    {
    	Trace("LanguageFactory::LanguageFactory() in\n");
    	Trace("LanguageFactory::LanguageFactory() out\n");
    }
    
    LanguageFactory::~LanguageFactory()
    {
    	Trace("LanguageFactory::LanguageFactory() in\n");
    	Trace("LanguageFactory::LanguageFactory() out\n");
    }
    
    
    
  updated_at: 2011-05-13 10:34:56
  analyzed_source_path_id: "124"
  id: "9859"
  subtask_id: "6"
source_codes_1021: 
  created_at: 2010-07-05 17:15:30
  error_line: "55"
  body: |
    char *g_optionFileCont = NULL;

  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9727"
  subtask_id: "7"
source_codes_970: 
  created_at: 2010-07-05 17:14:28
  error_line: "402"
  body: "            goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9676"
  subtask_id: "9"
source_codes_839: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"File??X??(2)\");\r\n        }\r\n\
    \r\n    }\r\n    /* ?v???J?n,?o?R???????o????? */\r\n    if(the_pOption->m_verbos == ON ){\r\n        /* ?o?R???????o????? */\r\n        printf(\"%s%s\\n\",the_szCurMetrics,MSG_METRIC_START);\r\n    }\r\n\
    \r\n    /* ?v???O?A?K?v??v??????File???J?? */\r\n    the_iRet = OpenResultFile(the_pOption);\r\n    if(the_iRet != ANZ_SUCCESS){\r\n        return 0;\r\n    }\r\n\
    \r\n    /* ?v???O?A?K?v??v?????????????O???[?o?????????????m?? */\r\n    the_iRet = AllocResultMemory(the_pOption);\r\n    if(the_iRet != ANZ_SUCCESS){\r\n        FreeResultMemory(the_pOption);\r\n        return 0;\r\n    }\r\n\
    \r\n    /* ?v?????? */\r\n    /* ????v?? */\r\n    if(the_iMeasureType == ANZ_COMMON_MEASURE){\r\n        /* ????v??File??????}?N?????????? */\r\n        the_iRet = GetProcMacro(the_pAnzInfo,ANZ_COMMON_MEASURE);\r\n        if(the_iRet != ANZ_SUCCESS){\r\n            return 0;\r\n        }\r\n        the_iRet = CommomMeasure(the_pAnzInfo);\r\n        if(the_iRet != ANZ_SUCCESS){\r\n            printf(\"%s%s\\n\",the_szCurMetrics,MSG_METRIC_ERROR);\r\n            return 0;\r\n        }\r\n    }\r\n    /* ?????v?? */\r\n    if(the_iMeasureType == ANZ_TREND_MEASURE){\r\n        /* ?????v??File??????}?N?????????? */\r\n        the_iRet = GetProcMacro(the_pAnzInfo,ANZ_TREND_MEASURE);\r\n        if(the_iRet != ANZ_SUCCESS){\r\n            return 0;\r\n        }\r\n        the_iRet = TrendMeasure(the_pAnzInfo);\r\n        if(the_iRet != ANZ_SUCCESS){\r\n            printf(\"%s%s\\n\",the_szCurMetrics,MSG_METRIC_ERROR);\r\n            return 0;\r\n        }\r\n    }\r\n\
    \r\n    /* ?o?R???????o????? */\r\n    if(the_pOption->m_verbos == ON){\r\n        if(the_pAnzInfo->m_err == NULL){\r\n            printf(\"%s%s\\n\",the_szCurMetrics,MSG_METRIC_NORMAL);\r\n        }\r\n        else{\r\n            printf(\"%s%s%s\\n\",MSG_MEASURE_FILE_ERROR,the_szCurMetrics,MSG_METRIC_NORMAL);\r\n        }\r\n    }\r\n\n\n\n\n\n\
    \r\n    return the_iRet;\r\n\
    }\r\n\
    /**\r\n\
    *  AbortAnalyzeMe\r\n\
    *  AnalyzeMe Abort\r\n\
    *  @param\r\n\
    *  @return\r\n\
    *          ???\r\n\
    *  @author zhang-gh\r\n\
    */\r\n\
    #ifdef __GNUC__\r\n\
    void AbortAnalyzeMe(int sig, int code, void *scp , char *addr)\r\n\
    #else\r\n\
    BOOL WINAPI AbortAnalyzeMe(DWORD dwCtrlType)\r\n\
    #endif\r\n\
    {\r\n    char the_errMsg[128]; /* ?G???[???b?Z?[?W */\r\n\
    #ifdef __GNUC__\r\n    /*  Signal */\r\n    switch(sig){\r\n    case SIGINT :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGINT(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGQUIT :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGQUIT(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGKILL :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGKILL(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGTERM :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGTERM(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGFPE :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGFPE(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGILL :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGILL(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGBUS :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGBUS(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGSEGV :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGSEGV(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGSYS :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGSYS(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    default :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=%d\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n    }\r\n\
    \r\n    /* AnalyzeMe????\\?[?X?????????? */\r\n    FreeAllResourc(g_pAnzInfo);\r\n\
    #ifdef _DEBUG\r\n    CheckAllMem();\r\n    DestoryMemMan();\r\n\
    #endif\r\n    /* Signal Check */\r\n    switch(sig){\r\n    case SIGINT :\r\n    case SIGQUIT :\r\n    case SIGKILL :\r\n    case SIGTERM :\r\n        exit(0) ;\r\n    case SIGFPE :\r\n    case SIGILL :\r\n    case SIGBUS :\r\n\
    \r\n    case SIGSEGV :\n\
    /*    case SIGIOT :*/\r\n    case SIGSYS :\r\n        abort() ;\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9545"
  subtask_id: "11"
source_codes_707: 
  created_at: 2010-07-05 17:11:50
  error_line: "514"
  body: "        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9413"
  subtask_id: "1"
source_codes_021: 
  created_at: 2010-07-05 17:09:11
  error_line: 
  body: |
    
    /****************************************************/
    /*              ?O???[?o???????                  */
    /****************************************************/
    /* ????????File??n???h????????????O???[?o???????? */
    
    /* Log File */

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8727"
  subtask_id: "5"
source_codes_153: 
  created_at: 2010-07-05 17:09:14
  error_line: "267"
  body: "    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8859"
  subtask_id: "5"
source_codes_285: 
  created_at: 2010-07-05 17:09:21
  error_line: 
  body: "    }\r\n\
    \r\n    /* ???????????????? */\r\n    /* ?R?}???h???C??????????Option??????????????? */\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8991"
  subtask_id: "5"
source_codes_1286: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    CharLiteralNoClosedExc::~CharLiteralNoClosedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* UnKnownErrorExc?F                           */
    /* ?s????G???[?????????????                  */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9992"
  subtask_id: "12"
source_codes_1154: 
  created_at: 2010-07-05 17:16:41
  error_line: 
  body: |+
    /*
    File:
       Preprocessor.cpp
    Copyright:
       Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
       AnalyzeMe
    Abstract:
       ?O????
    Author:
       tong-huixin
    Date:
       2005/02/08
    REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 2.0.0.0$
    */
    
  updated_at: 2011-05-13 10:34:56
  analyzed_source_path_id: "122"
  id: "9860"
  subtask_id: "6"
source_codes_1022: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: |
    /* Symbol File????e??????????O???[?o???????? */

  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9728"
  subtask_id: "7"
source_codes_971: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: "        }\r\n        the_iRet = CommomMeasure(the_pAnzInfo);\r\n        if(the_iRet != ANZ_SUCCESS){\r\n            printf(\"%s%s\\n\",the_szCurMetrics,MSG_METRIC_ERROR);\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9677"
  subtask_id: "9"
source_codes_708: 
  created_at: 2010-07-05 17:11:50
  error_line: 
  body: "        break;\r\n    case SIGSYS :\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9414"
  subtask_id: "1"
source_codes_022: 
  created_at: 2010-07-05 17:09:11
  error_line: "44"
  body: |
    FILE *g_fpLogFile = NULL;       /* Log File pointer */

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8728"
  subtask_id: "5"
source_codes_154: 
  created_at: 2010-07-05 17:09:14
  error_line: "268"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8860"
  subtask_id: "5"
source_codes_286: 
  created_at: 2010-07-05 17:09:21
  error_line: "442"
  body: "    if(the_pCmdOption != NULL){\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8992"
  subtask_id: "5"
source_codes_1287: 
  created_at: 2010-07-05 17:18:41
  error_line: "124"
  body: |
    UnKnownErrorExc::UnKnownErrorExc()

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9993"
  subtask_id: "12"
source_codes_1155: 
  created_at: 2010-07-05 17:16:41
  error_line: "22"
  body: |
    #include "Preprocessor.h"

  updated_at: 2011-05-13 10:34:56
  analyzed_source_path_id: "122"
  id: "9861"
  subtask_id: "6"
source_codes_1023: 
  created_at: 2010-07-05 17:15:30
  error_line: "57"
  body: |
    char *g_symbolFileCont = NULL;

  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9729"
  subtask_id: "7"
source_codes_972: 
  created_at: 2010-07-05 17:14:28
  error_line: "407"
  body: "            goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9678"
  subtask_id: "9"
source_codes_840: 
  created_at: 2010-07-05 17:13:50
  error_line: "512"
  body: "    }\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9546"
  subtask_id: "11"
source_codes_709: 
  created_at: 2010-07-05 17:11:50
  error_line: "517"
  body: "        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGSYS(%d)\\n\",sig );\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9415"
  subtask_id: "1"
source_codes_023: 
  created_at: 2010-07-05 17:09:12
  error_line: 
  body: |
    /*  Trace File */

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8729"
  subtask_id: "5"
source_codes_155: 
  created_at: 2010-07-05 17:09:14
  error_line: 
  body: "    }\r\n    /* ?o?R???????????? */\r\n    /* FileLOC?v??Option???w?????? */\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8861"
  subtask_id: "5"
source_codes_287: 
  created_at: 2010-07-05 17:09:21
  error_line: 
  body: "        free(the_pCmdOption);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8993"
  subtask_id: "5"
source_codes_1288: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9994"
  subtask_id: "12"
source_codes_1156: 
  created_at: 2010-07-05 17:16:42
  error_line: 
  body: |+
    
    Preprocessor::Preprocessor()
    {
    	/* ?J?????g?t?@?C????o?[?W?????????????? */
    	verState = COMMVERSION;
    }
    
    Preprocessor::~Preprocessor()
    {}
    
    /**
    *  DeleteSeriesBlank
    *  ?A??????????????????
    *  @author tong-huixin
    */
    void Preprocessor::DeleteSeriesBlank(ST_LineAttr* in_pLineAttr)
    {}
    
    
    //?O?????C?h???????N???X???????\?b?h???????????K?v??????B
    int Preprocessor::Process()
    {
    	return 0;
    }
    
    int Preprocessor::SetMeasureFileObject(MeasureFileObject* in_pMeasureFileObject)
    {
    	m_pMeasureFileObject = in_pMeasureFileObject;
    	return 0;
    }
    
    int Preprocessor::WriteToFile()
    {
    
    	return 0;
    }
    
    
    /* ?G???[??????????? */
    void Preprocessor::SetErrorInfo(char* in_pErrorType, char* in_pErrorFile, int in_iLineNum)
    {
    	Trace("SetErrorInfo() in\n");
    	if (in_pErrorType == NULL || in_pErrorFile == NULL) {
    		return ;
    	}
    	AnzMalloc(m_errorInfo, ST_ErrorInfo*, sizeof(ST_ErrorInfo));
    	if (m_errorInfo != NULL) {
    		memset(m_errorInfo, 0, sizeof(ST_ErrorInfo));
    		AnzMalloc(m_errorInfo->ErrorType, char*, strlen(in_pErrorType) + 1);
    		if (m_errorInfo->ErrorType != NULL) {
    			memset(m_errorInfo->ErrorType, '\0', strlen(in_pErrorType) + 1);
    			strcpy(m_errorInfo->ErrorType, in_pErrorType);
    		}
    		AnzMalloc(m_errorInfo->ErrorFile, char*, strlen(in_pErrorFile) + 1);
    		if (m_errorInfo->ErrorType != NULL) {
    			memset(m_errorInfo->ErrorFile, '\0', strlen(in_pErrorFile) + 1);
    			strcpy(m_errorInfo->ErrorFile, in_pErrorFile);
    		}
    		m_errorInfo->LineNum = in_iLineNum;
    		AnalyzeMe::GetInstance()->GetMeasObjErrInstance()->Add(m_errorInfo);
    	}
    	Trace("SetErrorInfo() out\n");
    }
    
  updated_at: 2011-05-13 10:34:56
  analyzed_source_path_id: "122"
  id: "9862"
  subtask_id: "6"
source_codes_1024: 
  created_at: 2010-07-05 17:15:30
  error_line: "58"
  body: |
    bool g_bOutTime = false;

  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9730"
  subtask_id: "7"
source_codes_973: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: "        }\r\n    }\r\n    /* ?????v?? */\r\n    if(the_iMeasureType == ANZ_TREND_MEASURE){\r\n        /* ?????v??File??????}?N?????????? */\r\n        the_iRet = GetProcMacro(the_pAnzInfo,ANZ_TREND_MEASURE);\r\n        if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9679"
  subtask_id: "9"
source_codes_841: 
  created_at: 2010-07-05 17:13:50
  error_line: 
  body: "    exit(0) ;\r\n\
    #else\r\n    switch(dwCtrlType){\r\n    case CTRL_C_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Ctrl + C pressed!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case CTRL_BREAK_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Ctrl + Break pressed!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case CTRL_CLOSE_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Console Closed!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case CTRL_LOGOFF_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Windows is logoff!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case CTRL_SHUTDOWN_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Windows is shutdown!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    default:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Unknowe event!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n    }\r\n    /* AnalyzeMe????\\?[?X?????????? */\r\n    FreeAllResourc(g_pAnzInfo);\r\n\
    #ifdef _DEBUG\r\n    CheckAllMem();\r\n    DestoryMemMan();\r\n\
    #endif\r\n    ExitProcess(0);\r\n    return 0;\r\n\
    #endif\r\n\
    }\r\n\
    /**\r\n\
    *  SetSignal\r\n\
    *  ?V?O?????n???h???o?^\r\n\
    *  @param\r\n\
    *         ???\r\n\
    *  @return\r\n\
    *         ???\r\n\
    *  @author zhang-gh\r\n\
    */\r\n\
    void SetSignal()\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9547"
  subtask_id: "11"
source_codes_024: 
  created_at: 2010-07-05 17:09:12
  error_line: "46"
  body: |
    FILE *g_fpTraceFile = NULL;     /* Trace File pointer */

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8730"
  subtask_id: "5"
source_codes_156: 
  created_at: 2010-07-05 17:09:14
  error_line: "272"
  body: "    if(the_pOption->m_fileLOC == ON){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8862"
  subtask_id: "5"
source_codes_288: 
  created_at: 2010-07-05 17:09:21
  error_line: "444"
  body: "        the_pCmdOption = NULL;\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8994"
  subtask_id: "5"
source_codes_1289: 
  created_at: 2010-07-05 17:18:41
  error_line: "126"
  body: "\tMessage = \"?v???????G???[????????????????A?v???????~??????????B\";\n"
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9995"
  subtask_id: "12"
source_codes_1157: 
  created_at: 2010-07-05 17:16:42
  error_line: 
  body: |+
    /*
    File:
       LanguageProduct.cpp
    Copyright:
       Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
       AnalyzeMe
    Abstract:
       ?????v???_?N?g
    Author:
       luo-jirong
    Date:
       2005/02/08
    REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 2.0.0.0$
    */
    
  updated_at: 2011-05-13 10:34:56
  analyzed_source_path_id: "123"
  id: "9863"
  subtask_id: "6"
source_codes_1025: 
  created_at: 2010-07-05 17:15:30
  error_line: "59"
  body: |
    ST_AnalyzeMe *g_pAnzInfo;  /* AnalyzeMe??????? */

  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9731"
  subtask_id: "7"
source_codes_974: 
  created_at: 2010-07-05 17:14:28
  error_line: "415"
  body: "            goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9680"
  subtask_id: "9"
source_codes_842: 
  created_at: 2010-07-05 17:13:50
  error_line: "560"
  body: |
    {

  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9548"
  subtask_id: "11"
source_codes_710: 
  created_at: 2010-07-05 17:11:50
  error_line: "518"
  body: "        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9416"
  subtask_id: "1"
source_codes_025: 
  created_at: 2010-07-05 17:09:12
  error_line: 
  body: |
    /* ?G???[File */

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8731"
  subtask_id: "5"
source_codes_157: 
  created_at: 2010-07-05 17:09:14
  error_line: "273"
  body: "        strcat(the_szCurMetrics,\"FileLOC\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8863"
  subtask_id: "5"
source_codes_289: 
  created_at: 2010-07-05 17:09:21
  error_line: 
  body: "    }\r\n    /* ?v?????List?????????? */\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8995"
  subtask_id: "5"
source_codes_975: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: "        }\r\n        the_iRet = TrendMeasure(the_pAnzInfo);\r\n        if(the_iRet != ANZ_SUCCESS){\r\n            printf(\"%s%s\\n\",the_szCurMetrics,MSG_METRIC_ERROR);\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9681"
  subtask_id: "9"
source_codes_843: 
  created_at: 2010-07-05 17:13:50
  error_line: 
  body: |
    #ifdef __GNUC__
        /* Signal Set */

  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9549"
  subtask_id: "11"
source_codes_711: 
  created_at: 2010-07-05 17:11:50
  error_line: 
  body: "        break;\r\n    default :\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9417"
  subtask_id: "1"
source_codes_026: 
  created_at: 2010-07-05 17:09:12
  error_line: "48"
  body: |
    FILE *g_fpErrorFile = NULL;

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8732"
  subtask_id: "5"
source_codes_158: 
  created_at: 2010-07-05 17:09:14
  error_line: 
  body: "    }\r\n    /* File???x?v??Option???w?????? */\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8864"
  subtask_id: "5"
source_codes_1158: 
  created_at: 2010-07-05 17:16:42
  error_line: "22"
  body: |
    #include "LanguageProduct.h"

  updated_at: 2011-05-13 10:34:56
  analyzed_source_path_id: "123"
  id: "9864"
  subtask_id: "6"
source_codes_1026: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: |
    /**
    *  main
    *  AnalyzeMe????C?????
    *  @param  argc ?R?}???h???C??????????
    *  @param  argv ?R?}???h???C?????????z??
    *  @return
               ANZ_SUCCESS:?????I??
               ANZ_ERROR  :????I??
    *  @author zhang-gh
    */
    int main(int argc,char * argv[])
    {
        /* ????? */
        int  the_iRet;                 /* Return?l */
        int  the_iMeasureType;         /* ?v??????F????v???A?????v?? */
        char **the_pMeasureItem;       /* ?R?}???h???C???????????v????????X?g */
        char the_szCurMetrics[MAX_METRICS] = {0};/* ?J?????g?v??Metrics */
        ST_Option    *the_pCmdOption;    /* ?R?}???h???C??????????Option???? */
        ST_AnalyzeMe *the_pAnzInfo;      /* AnalyzeMe??????? */
        ST_Option    *the_pOption;       /* AnalyzeMe???????????Option???? */
        char *the_pTrace = NULL;
        struct timeb the_st ;
        struct timeb the_ed ;
    
        /* ????????? */
        the_st.time = 0;
        the_st.millitm = 0;
        the_ed.time = 0;
        the_ed.millitm = 0;
        the_pAnzInfo = NULL;
        the_pCmdOption = NULL;
        the_iRet = ANZ_SUCCESS;
        the_pMeasureItem = NULL;
    
    #ifdef _DEBUG
        InitMemMan();
    #endif
    
        /* ?V?O?i???n???h????o?^?@*/
        SetSignal() ;
    
        the_pTrace = getenv("AnzTrace");
        if(the_pTrace != NULL) {

  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9732"
  subtask_id: "7"
source_codes_976: 
  created_at: 2010-07-05 17:14:28
  error_line: "420"
  body: "            goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9682"
  subtask_id: "9"
source_codes_844: 
  created_at: 2010-07-05 17:13:50
  error_line: "563"
  body: "    signal( SIGFPE  , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9550"
  subtask_id: "11"
source_codes_712: 
  created_at: 2010-07-05 17:11:50
  error_line: "521"
  body: "        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=%d\\n\",sig );\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9418"
  subtask_id: "1"
source_codes_027: 
  created_at: 2010-07-05 17:09:12
  error_line: 
  body: ""
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8733"
  subtask_id: "5"
source_codes_159: 
  created_at: 2010-07-05 17:09:14
  error_line: "276"
  body: "    if(the_pOption->m_redundancy == ON){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8865"
  subtask_id: "5"
source_codes_1290: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9996"
  subtask_id: "12"
source_codes_1159: 
  created_at: 2010-07-05 17:16:42
  error_line: 
  body: |+
    
    /// <summary>
    ///Total?s?A???s?s?A?????s?A?R?????g?s??|?C???g????
    /// </summary>
    /// <remarks>
    ///	Total?s?A???s?s?A?????s?A?R?????g?s??|?C???g????
    /// </remarks>
    /// <param name="io_fileInfo">?v?????File</param>
    /// <returns>
    ///?@
    /// </returns>
    /// <exception cref="MemoryFailedExc">
    /// Memory Failed
    /// </exception>
    int LanguageProduct::MakeLOCInfo(FileInfo* io_fileInfo)
    {
    	/* ????? */
    	int the_iTotaLOCNum = 0;    /* the_pTotaLOC??z???? */
    	int the_iExecLOCNum = 0;    /* the_pExecLOC??z???? */
    	int the_iComtLOCNum = 0;    /* the_pComtLOC??z???? */
    	int the_iBlankLOCNum = 0;   /* the_pBlankLOC??z????*/
    	char** the_pTotaLOC = NULL; /* File??LOC(???s)???P */
    	char** the_pExecLOC = NULL; /* LOC(???s)???P */
    	char** the_pComtLOC = NULL; /* LOC(?????s */
    	char** the_pBlankLOC = NULL; /* LOC(Comment ?s) ???P */
    	ST_LineAttr* the_pTempLineAttr = NULL; /* ?J?????g?t?@?C???w?b?_?[?m?[?h?????|?C???g */
    
    	/* ???[?J??????????? */
    
    	Trace("MakeLOCInfo() in\n");
    	/*?v?????t?@?C????s???????????????*/
    	if (io_fileInfo == NULL) {
    		return 0;
    	}
    	the_pTempLineAttr = io_fileInfo->GetLineAttr();
    
    	try {
    		AnzMalloc(the_pTotaLOC, char**, sizeof(char*)*(io_fileInfo->GetTotalLOC() + 1));
    		if (the_pTotaLOC == NULL) {
    			throw MemoryFailedExc();
    		}
    		memset(the_pTotaLOC, '\0', sizeof(char*)*(io_fileInfo->GetTotalLOC() + 1));
    		AnzMalloc(the_pExecLOC, char**, sizeof(char*)*(io_fileInfo->GetExecLOC() + 1));
    		if (the_pExecLOC == NULL) {
    			throw MemoryFailedExc();
    		}
    		memset(the_pExecLOC, '\0', sizeof(char*)*(io_fileInfo->GetExecLOC() + 1));
    		AnzMalloc(the_pComtLOC, char**, sizeof(char*)*(io_fileInfo->GetCommentLOC() + 1));
    		if (the_pComtLOC == NULL) {
    			throw MemoryFailedExc();
    		}
    		memset(the_pComtLOC, '\0', sizeof(char*)*(io_fileInfo->GetCommentLOC() + 1));
    		AnzMalloc(the_pBlankLOC, char**, sizeof(char*)*(io_fileInfo->GetBlankLOC() + 1));
    		if (the_pBlankLOC == NULL) {
    			throw MemoryFailedExc();
    		}
    		memset(the_pBlankLOC, '\0', sizeof(char*)*(io_fileInfo->GetBlankLOC() + 1));
    		while (the_pTempLineAttr != NULL) {
    
    			/*?R?????g?s??|?C???g????*/
    			if (the_pTempLineAttr->m_attr1.IFL == 1) {
    				*(the_pComtLOC + the_iComtLOCNum) = the_pTempLineAttr->m_prow;
    				the_iComtLOCNum++;
    			}
    
    			/*?????s??|?C???g????*/
    			else if (the_pTempLineAttr->m_attr.BL == 1) {
    				*(the_pBlankLOC + the_iBlankLOCNum) = the_pTempLineAttr->m_prow;
    				the_iBlankLOCNum++;
    			}
    
    			/*?R?????g?s??|?C???g????*/
    			else if (the_pTempLineAttr->m_attr.CL == 1) {
    				*(the_pComtLOC + the_iComtLOCNum) = the_pTempLineAttr->m_prow;
    				the_iComtLOCNum++;
    			}
    
    			/*???s?s??|?C???g????*/
    			else {
    				*(the_pExecLOC + the_iExecLOCNum) = the_pTempLineAttr->m_prow;
    				the_iExecLOCNum++;
    			}
    
    			/*Total?s??|?C???g????*/
    			*(the_pTotaLOC + the_iTotaLOCNum) = the_pTempLineAttr->m_prow;
    			the_iTotaLOCNum++;
    			the_pTempLineAttr = the_pTempLineAttr->next;
    		}
    
    		/*LOC(???s)??????????*/
    		io_fileInfo->SetTotalContent(the_pTotaLOC);
    
    		/*LOC(???s)???????*/
    		io_fileInfo->SetExecContent(the_pExecLOC);
    
    		/*LOC(Comment?s)???????*/
    		io_fileInfo->SetCommentContent(the_pComtLOC);
    
    		/*LOC(?????s)???????*/
    		io_fileInfo->SetBlankContent(the_pBlankLOC);
    	}
    	/*????????????????s????????B*/
    	catch (MemoryFailedExc &e) {
    		throw e;
    	}
    	Trace("MakeLOCInfo() out\n");
    	return 0;
    }
    
  updated_at: 2011-05-13 10:34:56
  analyzed_source_path_id: "123"
  id: "9865"
  subtask_id: "6"
source_codes_1027: 
  created_at: 2010-07-05 17:15:30
  error_line: "103"
  body: "        if(strcmp(the_pTrace,\"ON\") == 0 ) {\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9733"
  subtask_id: "7"
source_codes_977: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: "        }\r\n    }\r\n\
    \r\n    /* ?o?R???????o????? */\r\n    if(the_pOption->m_verbos == ON){\r\n        if(the_pAnzInfo->m_err == NULL){\r\n            printf(\"%s%s\\n\",the_szCurMetrics,MSG_METRIC_NORMAL);\r\n        }\r\n        else{\r\n            printf(\"%s%s%s\\n\",MSG_MEASURE_FILE_ERROR,the_szCurMetrics,MSG_METRIC_NORMAL);\r\n        }\r\n    }\r\n\
    \r\n\
    EXIT:;\r\n    /* Error File???o????? */\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9683"
  subtask_id: "9"
source_codes_845: 
  created_at: 2010-07-05 17:13:50
  error_line: "564"
  body: "    signal( SIGILL  , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9551"
  subtask_id: "11"
source_codes_713: 
  created_at: 2010-07-05 17:11:50
  error_line: "522"
  body: "        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9419"
  subtask_id: "1"
source_codes_290: 
  created_at: 2010-07-05 17:09:21
  error_line: "447"
  body: "    if(the_pMeasureItem != NULL) {\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8996"
  subtask_id: "5"
source_codes_028: 
  created_at: 2010-07-05 17:09:12
  error_line: "50"
  body: |
    bool g_bTrace           = false;    /* Trace flag */

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8734"
  subtask_id: "5"
source_codes_1291: 
  created_at: 2010-07-05 17:18:41
  error_line: "129"
  body: |
    UnKnownErrorExc::UnKnownErrorExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9997"
  subtask_id: "12"
source_codes_1028: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "            g_bTrace = true;\r\n        }\r\n    }\r\n    /* TraceFile??LogFile???J?? */\r\n\
    \t/*\r\n    g_fpTraceFile = fopen(TRACEFILE,\"w\");\r\n    if(g_fpTraceFile == NULL){\r\n        printf(\"Create trace file failed!\\n\");\r\n    }\r\n\
    \t*/\r\n    g_fpLogFile = fopen(APPLOGFILE,\"w\");\r\n    if(g_fpLogFile == NULL){\r\n        printf(\"Create log file failed!\\n\");   /* */\r\n    }\r\n\
    \r\n    /* AnalyzeMe???????????????m?? */\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9734"
  subtask_id: "7"
source_codes_978: 
  created_at: 2010-07-05 17:14:28
  error_line: "436"
  body: "    the_iRet = OutErrorFile(the_pAnzInfo->m_err);\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9684"
  subtask_id: "9"
source_codes_846: 
  created_at: 2010-07-05 17:13:50
  error_line: "565"
  body: "    signal( SIGBUS  , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9552"
  subtask_id: "11"
source_codes_714: 
  created_at: 2010-07-05 17:11:50
  error_line: 
  body: "    }\r\n\
    \r\n    /* AnalyzeMe????\\?[?X?????????? */\r\n    FreeAllResourc(g_pAnzInfo);\r\n\
    #ifdef _DEBUG\r\n    CheckAllMem();\r\n    DestoryMemMan();\r\n\
    #endif\r\n    /* Signal Check */\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9420"
  subtask_id: "1"
source_codes_291: 
  created_at: 2010-07-05 17:09:21
  error_line: 
  body: "        free(the_pMeasureItem);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8997"
  subtask_id: "5"
source_codes_029: 
  created_at: 2010-07-05 17:09:12
  error_line: "51"
  body: |
    char g_szNVPath[MAX_PATH] = {0};

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8735"
  subtask_id: "5"
source_codes_1292: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    UnKnownErrorExc::~UnKnownErrorExc()  throw() {}
    
    /*---------------------------------------------*/
    /* MemoryFailedExc?F                           */
    /* ????????????????s???????                */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9998"
  subtask_id: "12"
source_codes_1160: 
  created_at: 2010-07-05 17:17:11
  error_line: "0"
  body: ""
  updated_at: 2011-05-13 10:35:33
  analyzed_source_path_id: "162"
  id: "9866"
  subtask_id: "2"
source_codes_1029: 
  created_at: 2010-07-05 17:15:30
  error_line: "120"
  body: "    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9735"
  subtask_id: "7"
source_codes_979: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: "    if(the_iRet == ANZ_ERR_MEMORY_FAILED){\r\n        printf(\"%s\\n\",MSG_MOMORY_FAILED);\r\n    }\r\n\
    \r\n    /* ???????????????? */\r\n    /* ?R?}???h???C??????????Option??????????????? */\r\n    if(the_pCmdOption != NULL){\r\n        free(the_pCmdOption);\r\n        the_pCmdOption = NULL;\r\n    }\r\n    /* ?v?????List?????????? */\r\n    if(the_pMeasureItem != NULL) {\r\n        free(the_pMeasureItem);\r\n        the_pMeasureItem = NULL;\r\n    }\r\n\
    \r\n    /* AnalyzeMe????\\?[?X?????????? */\r\n    FreeAllResourc(the_pAnzInfo);\r\n\
    \r\n    if(g_bOutTime) {\r\n        ftime(&the_ed);\r\n        printf(\"\\nTotal times:%ld ms\\n\",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));\r\n    }\r\n\
    \r\n\
    #ifdef _DEBUG\r\n  CheckAllMem();\r\n  DestoryMemMan();\r\n\
    #endif\r\n    return the_iRet;\r\n\
    }\r\n\
    /**\r\n\
    *  AbortAnalyzeMe\r\n\
    *  AnalyzeMe Abort\r\n\
    *  @param\r\n\
    *  @return\r\n\
    *          ???\r\n\
    *  @author zhang-gh\r\n\
    */\r\n\
    #ifdef __GNUC__\r\n\
    void AbortAnalyzeMe(int sig, int code, void *scp , char *addr)\r\n\
    #else\r\n\
    BOOL WINAPI AbortAnalyzeMe(DWORD dwCtrlType)\r\n\
    #endif\r\n\
    {\r\n    char the_errMsg[128]; /* ?G???[???b?Z?[?W */\r\n\
    #ifdef __GNUC__\r\n    /*  Signal */\r\n    switch(sig){\r\n    case SIGINT :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGINT(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGQUIT :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGQUIT(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGKILL :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGKILL(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGTERM :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGTERM(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGFPE :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGFPE(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGILL :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGILL(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGBUS :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGBUS(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGSEGV :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGSEGV(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGSYS :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGSYS(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    default :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=%d\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n    }\r\n\
    \r\n    /* AnalyzeMe????\\?[?X?????????? */\r\n    FreeAllResourc(g_pAnzInfo);\r\n\
    #ifdef _DEBUG\r\n    CheckAllMem();\r\n    DestoryMemMan();\r\n\
    #endif\r\n    /* Signal Check */\r\n    switch(sig){\r\n    case SIGINT :\r\n    case SIGQUIT :\r\n    case SIGKILL :\r\n    case SIGTERM :\r\n        exit(0) ;\r\n    case SIGFPE :\r\n    case SIGILL :\r\n    case SIGBUS :\r\n\
    /*    case SIGIOT :*/\r\n    case SIGSEGV :\r\n    case SIGSYS :\r\n        abort() ;\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9685"
  subtask_id: "9"
source_codes_847: 
  created_at: 2010-07-05 17:13:50
  error_line: "566"
  body: "    signal( SIGSEGV , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9553"
  subtask_id: "11"
source_codes_715: 
  created_at: 2010-07-05 17:11:50
  error_line: "532"
  body: "    switch(sig){\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9421"
  subtask_id: "1"
source_codes_160: 
  created_at: 2010-07-05 17:09:14
  error_line: "277"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8866"
  subtask_id: "5"
source_codes_292: 
  created_at: 2010-07-05 17:09:21
  error_line: "449"
  body: "        the_pMeasureItem = NULL;\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8998"
  subtask_id: "5"
source_codes_1293: 
  created_at: 2010-07-05 17:18:41
  error_line: "140"
  body: |
    MemoryFailedExc::MemoryFailedExc()

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9999"
  subtask_id: "12"
source_codes_1161: 
  created_at: 2010-07-05 17:17:11
  error_line: "1"
  body: |
    /*

  updated_at: 2011-05-13 10:35:33
  analyzed_source_path_id: "162"
  id: "9867"
  subtask_id: "2"
source_codes_848: 
  created_at: 2010-07-05 17:13:50
  error_line: "567"
  body: "    signal( SIGSYS , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9554"
  subtask_id: "11"
source_codes_716: 
  created_at: 2010-07-05 17:11:50
  error_line: 
  body: "    case SIGINT :\r\n    case SIGQUIT :\r\n    case SIGKILL :\r\n    case SIGTERM :\r\n        exit(0) ;\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9422"
  subtask_id: "1"
source_codes_161: 
  created_at: 2010-07-05 17:09:14
  error_line: "278"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8867"
  subtask_id: "5"
source_codes_293: 
  created_at: 2010-07-05 17:09:21
  error_line: 
  body: "    }\r\n\
    \r\n    /* AnalyzeMe????\\?[?X?????????? */\r\n    FreeAllResourc(the_pAnzInfo);\r\n\
    \r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8999"
  subtask_id: "5"
source_codes_1294: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10000"
  subtask_id: "12"
source_codes_1162: 
  created_at: 2010-07-05 17:17:11
  error_line: 
  body: |+
    File:
       AnzException.cpp
    Copyright:
       Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
       AnalyzeMe
    Abstract:
       AnalyzeMe????O????
    Author:
       Tong-huixin
    Date:
       2005/02/08
    REVISION HISTORY:
    
    */
    
  updated_at: 2011-05-13 10:35:33
  analyzed_source_path_id: "162"
  id: "9868"
  subtask_id: "2"
source_codes_1030: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "    if(the_pAnzInfo == NULL){\r\n        the_iRet = ANZ_ERR_MEMORY_FAILED;\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9736"
  subtask_id: "7"
source_codes_030: 
  created_at: 2010-07-05 17:09:12
  error_line: "52"
  body: |
    char g_szOVPath[MAX_PATH] = {0};

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8736"
  subtask_id: "5"
source_codes_162: 
  created_at: 2010-07-05 17:09:14
  error_line: "279"
  body: "            strcat(the_szCurMetrics,\"File???x\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8868"
  subtask_id: "5"
source_codes_294: 
  created_at: 2010-07-05 17:09:21
  error_line: "455"
  body: "    if(g_bOutTime) {\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9000"
  subtask_id: "5"
source_codes_1295: 
  created_at: 2010-07-05 17:18:41
  error_line: "142"
  body: "\tMessage = \"????????????????s???????\";\n"
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10001"
  subtask_id: "12"
source_codes_1163: 
  created_at: 2010-07-05 17:17:11
  error_line: "18"
  body: |
    /*

  updated_at: 2011-05-13 10:35:33
  analyzed_source_path_id: "162"
  id: "9869"
  subtask_id: "2"
source_codes_1031: 
  created_at: 2010-07-05 17:15:30
  error_line: "123"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9737"
  subtask_id: "7"
source_codes_980: 
  created_at: 2010-07-05 17:14:28
  error_line: "546"
  body: "    }\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9686"
  subtask_id: "9"
source_codes_849: 
  created_at: 2010-07-05 17:13:50
  error_line: 
  body: ""
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9555"
  subtask_id: "11"
source_codes_717: 
  created_at: 2010-07-05 17:11:50
  error_line: "538"
  body: "    case SIGFPE :\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9423"
  subtask_id: "1"
source_codes_031: 
  created_at: 2010-07-05 17:09:12
  error_line: "53"
  body: |
    bool g_bTrendFile = false;

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8737"
  subtask_id: "5"
source_codes_163: 
  created_at: 2010-07-05 17:09:14
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8869"
  subtask_id: "5"
source_codes_295: 
  created_at: 2010-07-05 17:09:21
  error_line: "456"
  body: "        ftime(&the_ed);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9001"
  subtask_id: "5"
source_codes_1296: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10002"
  subtask_id: "12"
source_codes_1164: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: "    $AnalyzeMe 2.0.0.0$\n\
    */\n\n\n"
  updated_at: 2011-05-13 10:35:33
  analyzed_source_path_id: "162"
  id: "9870"
  subtask_id: "2"
source_codes_1032: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "    }\r\n    memset(the_pAnzInfo,'\\0',sizeof(ST_AnalyzeMe));\r\n    g_pAnzInfo = the_pAnzInfo;\r\n    /* AnalyzeMe???????????Option????????????m?? */\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9738"
  subtask_id: "7"
source_codes_981: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: "    exit(0) ;\r\n\
    #else\r\n    switch(dwCtrlType){\r\n    case CTRL_C_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Ctrl + C pressed!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case CTRL_BREAK_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Ctrl + Break pressed!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case CTRL_CLOSE_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Console Closed!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case CTRL_LOGOFF_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Windows is logoff!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case CTRL_SHUTDOWN_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Windows is shutdown!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    default:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Unknowe event!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n    }\r\n    /* AnalyzeMe????\\?[?X?????????? */\r\n    FreeAllResourc(g_pAnzInfo);\r\n\
    #ifdef _DEBUG\r\n    CheckAllMem();\r\n    DestoryMemMan();\r\n\
    #endif\r\n    ExitProcess(0);\r\n    return 0;\r\n\
    #endif\r\n\
    }\r\n\
    /**\r\n\
    *  SetSignal\r\n\
    *  ?V?O?????n???h???o?^\r\n\
    *  @param\r\n\
    *         ???\r\n\
    *  @return\r\n\
    *         ???\r\n\
    *  @author zhang-gh\r\n\
    */\r\n\
    void SetSignal()\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9687"
  subtask_id: "9"
source_codes_718: 
  created_at: 2010-07-05 17:11:50
  error_line: 
  body: "    case SIGILL :\r\n    case SIGBUS :\r\n\
    /*    case SIGIOT :*/\r\n    case SIGSEGV :\r\n    case SIGSYS :\r\n        abort() ;\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9424"
  subtask_id: "1"
source_codes_032: 
  created_at: 2010-07-05 17:09:12
  error_line: 
  body: |
    /* Option File????e??????????O???[?o???????? */

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8738"
  subtask_id: "5"
source_codes_164: 
  created_at: 2010-07-05 17:09:15
  error_line: "281"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8870"
  subtask_id: "5"
source_codes_296: 
  created_at: 2010-07-05 17:09:21
  error_line: "457"
  body: "        printf(\"\\nTotal times:%ld ms\\n\",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9002"
  subtask_id: "5"
source_codes_1297: 
  created_at: 2010-07-05 17:18:41
  error_line: "145"
  body: |
    MemoryFailedExc::MemoryFailedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10003"
  subtask_id: "12"
source_codes_1165: 
  created_at: 2010-07-05 17:17:12
  error_line: "23"
  body: |
    #include "AnzException.h"

  updated_at: 2011-05-13 10:35:33
  analyzed_source_path_id: "162"
  id: "9871"
  subtask_id: "2"
source_codes_1033: 
  created_at: 2010-07-05 17:15:30
  error_line: "128"
  body: "    AnzMalloc(the_pAnzInfo->m_option,ST_Option*,sizeof(ST_Option));\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9739"
  subtask_id: "7"
source_codes_982: 
  created_at: 2010-07-05 17:14:28
  error_line: "594"
  body: |
    {

  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9688"
  subtask_id: "9"
source_codes_850: 
  created_at: 2010-07-05 17:13:50
  error_line: "569"
  body: "    signal( SIGINT  , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9556"
  subtask_id: "11"
source_codes_719: 
  created_at: 2010-07-05 17:11:50
  error_line: "545"
  body: "    }\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9425"
  subtask_id: "1"
source_codes_033: 
  created_at: 2010-07-05 17:09:12
  error_line: "55"
  body: |
    char *g_optionFileCont = NULL;

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8739"
  subtask_id: "5"
source_codes_165: 
  created_at: 2010-07-05 17:09:15
  error_line: "282"
  body: "            strcat(the_szCurMetrics,\"File???x\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8871"
  subtask_id: "5"
source_codes_297: 
  created_at: 2010-07-05 17:09:21
  error_line: 
  body: "    }\r\n\
    \r\n\
    #ifdef _DEBUG\r\n  CheckAllMem();\r\n  DestoryMemMan();\r\n\
    #endif\r\n    return the_iRet;\r\n\
    }\r\n\
    /**\r\n\
    *  AbortAnalyzeMe\r\n\
    *  AnalyzeMe Abort\r\n\
    *  @param\r\n\
    *  @return\r\n\
    *          ???\r\n\
    *  @author zhang-gh\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9003"
  subtask_id: "5"
source_codes_1298: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    MemoryFailedExc::~MemoryFailedExc() throw() {}
    
    /*---------------------------------------------*/
    /* FileOpenFailedExc?F                         */
    /* File???J?????s???????                      */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10004"
  subtask_id: "12"
source_codes_1166: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: |+
    
    AnzException::AnzException()
    {}
    
    AnzException::AnzException(string in_useMsg)
    {}
    
    AnzException::~AnzException() throw() {}
    
    /* CommandLineExc */
    CommandLineExc::CommandLineExc(string in_userMsg)
    {
    	Message = in_userMsg;
    }
    
    
    /*---------------------------------------------*/
    /* ComtNoClosedExc?F                           */
    /* ?R?????g??????????						   */
    /*---------------------------------------------*/
    ComtNoClosedExc::ComtNoClosedExc()
    {
    	Message = "?R?????g??????????";
    }
    
    ComtNoClosedExc::ComtNoClosedExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    ComtNoClosedExc::~ComtNoClosedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* StrLiteralNoClosedExc?F                     */
    /* ?_?u???N?H?[?e?[?V???????}?b?`??????????  */
    /*---------------------------------------------*/
    StrLiteralNoClosedExc::StrLiteralNoClosedExc()
    {
    	Message = "?_?u???N?H?[?e?[?V???????}?b?`??????????";
    }
    
    StrLiteralNoClosedExc::StrLiteralNoClosedExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    StrLiteralNoClosedExc::~StrLiteralNoClosedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* PreprcNoClosedExc?F                         */
    /* #if?????A??????????#endif?????????     */
    /*---------------------------------------------*/
    PreprcNoClosedExc::PreprcNoClosedExc()
    {
    	Message = "#if?????A??????????#endif?????????";
    }
    
    PreprcNoClosedExc::PreprcNoClosedExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    PreprcNoClosedExc::~PreprcNoClosedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* KanJiErrorExc?F                             */
    /* ?S?p??????g?p???s?????                    */
    /*---------------------------------------------*/
    KanJiErrorExc::KanJiErrorExc()
    {
    	Message = "?S?p??????g?p???s??????B";
    }
    
    KanJiErrorExc::KanJiErrorExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    KanJiErrorExc::~KanJiErrorExc()  throw() {}
    
    /*---------------------------------------------*/
    /* CharLiteralNoClosedExc?F                    */
    /* ?V???O???N?H?[?e?[?V???????}?b?`??????????*/
    /*---------------------------------------------*/
    CharLiteralNoClosedExc::CharLiteralNoClosedExc()
    {
    	Message = "?V???O???N?H?[?e?[?V???????}?b?`??????????";
    }
    
    CharLiteralNoClosedExc::CharLiteralNoClosedExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    CharLiteralNoClosedExc::~CharLiteralNoClosedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* UnKnownErrorExc?F                           */
    /* ?s????G???[?????????????                  */
    /*---------------------------------------------*/
    UnKnownErrorExc::UnKnownErrorExc()
    {
    	Message = "?v???????G???[????????????????A?v???????~??????????B";
    }
    
    UnKnownErrorExc::UnKnownErrorExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    UnKnownErrorExc::~UnKnownErrorExc()  throw() {}
    
    /*---------------------------------------------*/
    /* MemoryFailedExc?F                           */
    /* ????????????????s???????                */
    /*---------------------------------------------*/
    MemoryFailedExc::MemoryFailedExc()
    {
    	Message = "????????????????s???????";
    }
    
    MemoryFailedExc::MemoryFailedExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    MemoryFailedExc::~MemoryFailedExc() throw() {}
    
    /*---------------------------------------------*/
    /* FileOpenFailedExc?F                         */
    /* File???J?????s???????                      */
    /*---------------------------------------------*/
    FileOpenFailedExc::FileOpenFailedExc()
    {
    	Message = "File???I?[?v????????????s???????";
    }
    
    FileOpenFailedExc::FileOpenFailedExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    FileOpenFailedExc::~FileOpenFailedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* FileReadFailedExc?F                         */
    /* File??????????s???????                  */
    /*---------------------------------------------*/
    FileReadFailedExc::FileReadFailedExc()
    {
    	Message = "File???????????????s???????";
    }
    
    FileReadFailedExc::FileReadFailedExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    FileReadFailedExc::~FileReadFailedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* InitVariableFailExc						   */
    /* ???????????s?????		                   */
    /*---------------------------------------------*/
    /* ???????????s????? */
    InitVariableFailExc::InitVariableFailExc()
    {
    	Message = "???????????????s???????";
    }
    
    InitVariableFailExc::InitVariableFailExc(string in_userMsg)
    {
    	Message = in_userMsg;
    }
    
    InitVariableFailExc::~InitVariableFailExc()  throw() {}
    
    /*---------------------------------------------*/
    /* DirOperateFailedExc?F                           */
    /* ?f?B???N?g???[???????????s?????        */
    /*---------------------------------------------*/
    DirOperateFailedExc::DirOperateFailedExc()
    {
    	Message = "?f?B???N?g???[???????????s???????";
    }
    
    DirOperateFailedExc::DirOperateFailedExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    DirOperateFailedExc::~DirOperateFailedExc() throw() {}
    
    /*---------------------------------------------*/
    /* MakeFileListFailedExc?F									*/
    /* ?v??????v?????File??List???????????s?????     */
    /*---------------------------------------------*/
    MakeFileListFailedExc::MakeFileListFailedExc()
    {
    	Message = "?v?????File??List??????????????s???????";
    }
    
    MakeFileListFailedExc::MakeFileListFailedExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    MakeFileListFailedExc::~MakeFileListFailedExc() throw() {}
    
    /*---------------------------------------------*/
    /* OptionErrorExc							   */
    /* ?I?v?V?????????????????			       */
    /*---------------------------------------------*/
    OptionErrorExc::OptionErrorExc()
    {
    	Message = "";
    }
    
    OptionErrorExc::OptionErrorExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    OptionErrorExc::~OptionErrorExc() throw() {}
    
    /*-------------------------------------------*/
    /* OptionErrorExc						     */
    /* ?w?????v???????s????? 			 */
    /*-------------------------------------------*/
    MeasureItemExc::MeasureItemExc()
    {
    	Message = "?w?????v???????s??????B";
    }
    
    MeasureItemExc::MeasureItemExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    MeasureItemExc::~MeasureItemExc() throw() {}
    
    /*-------------------------------------------*/
    /* FunRepetitionDefineExc				     */
    /* ??????d?????`?????????			 */
    /*-------------------------------------------*/
    FunRepetitionDefineExc::FunRepetitionDefineExc()
    {
    	Message = "??????d?????`?????????";
    }
    
    FunRepetitionDefineExc::FunRepetitionDefineExc(string in_useMsg)
    {
    	Message = in_useMsg;
    }
    
    FunRepetitionDefineExc::~FunRepetitionDefineExc()  throw() {}
    
  updated_at: 2011-05-13 10:35:33
  analyzed_source_path_id: "162"
  id: "9872"
  subtask_id: "2"
source_codes_1034: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "    if(the_pAnzInfo->m_option == NULL){\r\n        the_iRet = ANZ_ERR_MEMORY_FAILED;\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9740"
  subtask_id: "7"
source_codes_983: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: |
    #ifdef __GNUC__
        /* Signal Set */

  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9689"
  subtask_id: "9"
source_codes_851: 
  created_at: 2010-07-05 17:13:50
  error_line: "570"
  body: "    signal( SIGQUIT , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9557"
  subtask_id: "11"
source_codes_034: 
  created_at: 2010-07-05 17:09:12
  error_line: 
  body: |
    /* Symbol File????e??????????O???[?o???????? */

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8740"
  subtask_id: "5"
source_codes_166: 
  created_at: 2010-07-05 17:09:15
  error_line: 
  body: "        }\r\n    }\r\n    /* ??????v??Option???w?????? */\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8872"
  subtask_id: "5"
source_codes_298: 
  created_at: 2010-07-05 17:09:21
  error_line: "473"
  body: |
    */

  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9004"
  subtask_id: "5"
source_codes_1299: 
  created_at: 2010-07-05 17:18:41
  error_line: "156"
  body: |
    FileOpenFailedExc::FileOpenFailedExc()

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10005"
  subtask_id: "12"
source_codes_1167: 
  created_at: 2010-07-05 17:17:12
  error_line: "0"
  body: ""
  updated_at: 2011-05-13 10:35:33
  analyzed_source_path_id: "161"
  id: "9873"
  subtask_id: "2"
source_codes_1035: 
  created_at: 2010-07-05 17:15:30
  error_line: "131"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9741"
  subtask_id: "7"
source_codes_984: 
  created_at: 2010-07-05 17:14:28
  error_line: "597"
  body: "    signal( SIGFPE  , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9690"
  subtask_id: "9"
source_codes_852: 
  created_at: 2010-07-05 17:13:50
  error_line: "571"
  body: "    signal( SIGKILL , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9558"
  subtask_id: "11"
source_codes_035: 
  created_at: 2010-07-05 17:09:12
  error_line: "57"
  body: |
    char *g_symbolFileCont = NULL;

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8741"
  subtask_id: "5"
source_codes_167: 
  created_at: 2010-07-05 17:09:15
  error_line: "286"
  body: "    if(the_pOption->m_funcNum){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8873"
  subtask_id: "5"
source_codes_299: 
  created_at: 2010-07-05 17:09:21
  error_line: 
  body: |
    #ifdef __GNUC__

  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9005"
  subtask_id: "5"
source_codes_720: 
  created_at: 2010-07-05 17:11:50
  error_line: 
  body: "    exit(0) ;\r\n\
    #else\r\n    switch(dwCtrlType){\r\n    case CTRL_C_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Ctrl + C pressed!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case CTRL_BREAK_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Ctrl + Break pressed!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case CTRL_CLOSE_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Console Closed!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case CTRL_LOGOFF_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Windows is logoff!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case CTRL_SHUTDOWN_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Windows is shutdown!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    default:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Unknowe event!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    }\r\n    /* AnalyzeMe????\\?[?X?????????? */\r\n    FreeAllResourc(g_pAnzInfo);\r\n\
    #ifdef _DEBUG\r\n    CheckAllMem();\r\n    DestoryMemMan();\r\n\
    #endif\r\n    ExitProcess(0);\r\n    return 0;\r\n\
    #endif\r\n\
    }\r\n\
    /**\r\n\
    *  SetSignal\r\n\
    *  ?V?O?????n???h???o?^\r\n\
    *  @param\r\n\
    *         ???\r\n\
    *  @return\r\n\
    *         ???\r\n\
    *  @author zhang-gh\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9426"
  subtask_id: "1"
source_codes_1168: 
  created_at: 2010-07-05 17:17:12
  error_line: "1"
  body: |
    /*

  updated_at: 2011-05-13 10:35:33
  analyzed_source_path_id: "161"
  id: "9874"
  subtask_id: "2"
source_codes_1036: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "    }\r\n    memset(the_pAnzInfo->m_option,'\\0',sizeof(ST_Option));\r\n\
    \r\n    /* ?v?????Item????????m?? */\r\n\
    \r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9742"
  subtask_id: "7"
source_codes_985: 
  created_at: 2010-07-05 17:14:28
  error_line: "598"
  body: "    signal( SIGILL  , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9691"
  subtask_id: "9"
source_codes_853: 
  created_at: 2010-07-05 17:13:50
  error_line: "572"
  body: "    signal( SIGTERM , (void *)AbortAnalyzeMe);\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9559"
  subtask_id: "11"
source_codes_036: 
  created_at: 2010-07-05 17:09:12
  error_line: "58"
  body: |
    bool g_bOutTime = false;

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8742"
  subtask_id: "5"
source_codes_168: 
  created_at: 2010-07-05 17:09:15
  error_line: "287"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8874"
  subtask_id: "5"
source_codes_721: 
  created_at: 2010-07-05 17:11:50
  error_line: "592"
  body: |
    */

  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9427"
  subtask_id: "1"
source_codes_986: 
  created_at: 2010-07-05 17:14:28
  error_line: "599"
  body: "    signal( SIGBUS  , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9692"
  subtask_id: "9"
source_codes_854: 
  created_at: 2010-07-05 17:13:50
  error_line: 
  body: |
    /*    signal( SIGIOT  , (void *)AbortAnalyzeMe); */
    #else
        SetConsoleCtrlHandler(AbortAnalyzeMe, 1);
    #endif
        return;
    }
    
    /**
    *  ResetTrendPath
    *  ????p?X????????
    *  @param
    *         io_pPath  input Path
    *  @return
    *         ???
    *  @author luo-jirong
    */
    int ResetTrendPath(char *io_pPath)
    {
            char the_szFullPath[MAX_PATH];
            char the_szCurPath[MAX_PATH];
            int the_iRet = 0;
    #ifdef __GNUC__
            /* ?J?????gDir??????Dir??????? */

  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9560"
  subtask_id: "11"
source_codes_037: 
  created_at: 2010-07-05 17:09:12
  error_line: "59"
  body: |
    ST_AnalyzeMe *g_pAnzInfo;  /* AnalyzeMe??????? */

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8743"
  subtask_id: "5"
source_codes_169: 
  created_at: 2010-07-05 17:09:15
  error_line: "288"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8875"
  subtask_id: "5"
source_codes_722: 
  created_at: 2010-07-05 17:11:51
  error_line: 
  body: |
    void SetSignal()

  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9428"
  subtask_id: "1"
source_codes_1169: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: |+
    File:
       LCSAlgo.cpp
    Copyright:
       Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
       AnalyzeMe
    Abstract:
       LCS?Z?o?A???S???Y??
    Author:
       zhang-gh
    Date:
       2005/02/08
    REVISION HISTORY:
    
    */
    
  updated_at: 2011-05-13 10:35:33
  analyzed_source_path_id: "161"
  id: "9875"
  subtask_id: "2"
source_codes_1037: 
  created_at: 2010-07-05 17:15:30
  error_line: "137"
  body: "    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9743"
  subtask_id: "7"
source_codes_987: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: |
    /*    signal( SIGIOT  , (void *)AbortAnalyzeMe); */

  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9693"
  subtask_id: "9"
source_codes_855: 
  created_at: 2010-07-05 17:13:50
  error_line: "596"
  body: "        if(io_pPath[0] != '/') {\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9561"
  subtask_id: "11"
source_codes_038: 
  created_at: 2010-07-05 17:09:12
  error_line: 
  body: |
    /**
    *  main
    *  AnalyzeMe????C?????
    *  @param  argc ?R?}???h???C??????????
    *  @param  argv ?R?}???h???C?????????z??
    *  @return
               ANZ_SUCCESS:?????I??
               ANZ_ERROR  :????I??
    *  @author zhang-gh

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8744"
  subtask_id: "5"
source_codes_723: 
  created_at: 2010-07-05 17:11:51
  error_line: "594"
  body: |
    {

  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9429"
  subtask_id: "1"
source_codes_1038: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "    if(the_pMeasureItem == NULL) {\r\n        the_iRet = ANZ_ERR_MEMORY_FAILED;\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9744"
  subtask_id: "7"
source_codes_988: 
  created_at: 2010-07-05 17:14:28
  error_line: "601"
  body: "    signal( SIGSEGV , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9694"
  subtask_id: "9"
source_codes_856: 
  created_at: 2010-07-05 17:13:50
  error_line: 
  body: "            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {\r\n                the_iRet = ANZ_ERROR;\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9562"
  subtask_id: "11"
source_codes_039: 
  created_at: 2010-07-05 17:09:12
  error_line: "69"
  body: |
    */

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8745"
  subtask_id: "5"
source_codes_724: 
  created_at: 2010-07-05 17:11:51
  error_line: 
  body: |
    #ifdef __GNUC__
        /* Signal Set */

  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9430"
  subtask_id: "1"
source_codes_1170: 
  created_at: 2010-07-05 17:17:12
  error_line: "18"
  body: |
    /*

  updated_at: 2011-05-13 10:35:33
  analyzed_source_path_id: "161"
  id: "9876"
  subtask_id: "2"
source_codes_1039: 
  created_at: 2010-07-05 17:15:30
  error_line: "140"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9745"
  subtask_id: "7"
source_codes_989: 
  created_at: 2010-07-05 17:14:28
  error_line: "602"
  body: "    signal( SIGSYS , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9695"
  subtask_id: "9"
source_codes_857: 
  created_at: 2010-07-05 17:13:50
  error_line: "599"
  body: "                goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9563"
  subtask_id: "11"
source_codes_725: 
  created_at: 2010-07-05 17:11:51
  error_line: "597"
  body: "    signal( SIGFPE  , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9431"
  subtask_id: "1"
source_codes_170: 
  created_at: 2010-07-05 17:09:15
  error_line: "289"
  body: "            strcat(the_szCurMetrics,\"?????\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8876"
  subtask_id: "5"
source_codes_1171: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: "    $AnalyzeMe 2.0.0.0$\n\
    */\n\n"
  updated_at: 2011-05-13 10:35:33
  analyzed_source_path_id: "161"
  id: "9877"
  subtask_id: "2"
source_codes_858: 
  created_at: 2010-07-05 17:13:50
  error_line: 
  body: "            }\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9564"
  subtask_id: "11"
source_codes_726: 
  created_at: 2010-07-05 17:11:51
  error_line: "598"
  body: "    signal( SIGILL  , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9432"
  subtask_id: "1"
source_codes_171: 
  created_at: 2010-07-05 17:09:15
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8877"
  subtask_id: "5"
source_codes_1172: 
  created_at: 2010-07-05 17:17:12
  error_line: "22"
  body: |
    #include "LCSAlgo.h"

  updated_at: 2011-05-13 10:35:33
  analyzed_source_path_id: "161"
  id: "9878"
  subtask_id: "2"
source_codes_1040: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "    }\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9746"
  subtask_id: "7"
source_codes_859: 
  created_at: 2010-07-05 17:13:50
  error_line: "601"
  body: "            if(strcmp(io_pPath,\"\") != 0) {\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9565"
  subtask_id: "11"
source_codes_727: 
  created_at: 2010-07-05 17:11:51
  error_line: "599"
  body: "    signal( SIGBUS  , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9433"
  subtask_id: "1"
source_codes_040: 
  created_at: 2010-07-05 17:09:12
  error_line: "70"
  body: |
    int main(int argc,char * argv[])

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8746"
  subtask_id: "5"
source_codes_172: 
  created_at: 2010-07-05 17:09:15
  error_line: "291"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8878"
  subtask_id: "5"
source_codes_1173: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: "#include \"common.h\"\n\
    #include \"AnalyzeMe.h\"\n\
    #include \"FileInfo.h\"\n\
    #include \"FunctionInfo.h\"\n\
    #include \"MeasureFuncObject.h\"\n\
    #include \"MemoryManagement.h\"\n\
    #include \"AnzException.h\"\n\n\
    PCELL g_dummy;\n\
    #define DCELL g_dummy\n\
    unsigned int g_iUnitSize = sizeof(unsigned long)*8;\n\
    /**\n\
    *  GetEmbeddings\n\
    *  All Embeddings????????\n\
    *  @param  in_comm_Head,in_comm_Tail ?????v????????v???\n\
    *  @param  in_i,in_j\n\
    *  @param  in_lcsrev,in_curl\n\
    *  @param  in_head,in_pretail,in_tail\n\
    *  @param  in_len1,in_len2?@????n???????\n\
    *  @param  in_pStr1         ????n?????\n\
    *  @param  in_LCS_Lenght    LCS??Lenght\n\
    *  @param  io_LCSsCurNode   LCS??List??J?????gNode\n\
    *  @param  out_LCSsNum      LCS???\n\
    *  @return  \n\
    *           ANZ_SUCCESS:?????I??                                      \n\
    *           ANZ_ERROR  :????I??\n\
    *  @author zhang-gh\n\
    */\n\
    int LCSAlgo::GetEmbeddings(int in_comm_Head, int in_comm_Tail,\n\
    \t\t\t\t\t\t   int in_i, int in_j,\n\
    \t\t\t\t\t\t   PLCSPOS *in_lcsrev, int in_curl,\n\
    \t\t\t\t\t\t   PCELL **in_head, PCELL **in_pretail, PCELL **in_tail,\n\
    \t\t\t\t\t\t   int in_len1, int in_len2,    /* ????n??????? */\n\
    \t\t\t\t\t\t   char **in_pStr1,             /* ????n????? */\n\
    \t\t\t\t\t\t   int in_LCS_Lenght,           /* LCS??Lenght */\n\
    \t\t\t\t\t\t   PLCSLIST **io_LCSsCurNode,   /* LCS??List??J?????gNode */\n\
    \t\t\t\t\t\t   int *out_LCSsNum)         /* LCS??? */\n\
    {\n\
    \tchar **the_LCS;          /* ????LCS */\n\
    \tPLCSLIST the_LCSsTmpNode; /* LCS??List???Node */\n\
    \tPLCSLIST the_LCSsPreTailNode; /* LCS??List????Node????ONode */\n\
    \tPLCSPOS *the_lcsp;\n\
    \tPCELL the_adjp;\n\n\
    \t/* ????????? */\n\
    \tthe_LCS = NULL;\n\
    \tthe_LCSsTmpNode = NULL;\n\
    \tthe_LCSsPreTailNode = NULL;\n\
    \tthe_lcsp = NULL;\n\
    \tthe_adjp = NULL;\n\n\
    \t/* ?????J?n */\n\
    \tthe_adjp = in_head[in_i][in_j];\n\
    \tif (the_adjp == DCELL)\n\
    \t{\n\
    \t\tthe_adjp = in_tail[in_i][in_j];\n\
    \t}\n\
    \tif (the_adjp == DCELL)\n\
    \t{\n\
    \t\t/* ????LCS??????????m????? */\n\
    \t\tAnzMalloc(the_LCS, char**, sizeof(char *)*(in_LCS_Lenght + in_comm_Head + in_comm_Tail + 1));\n\
    \t\tif (the_LCS != NULL) {\n\
    \t\t\tmemset(the_LCS, 0, sizeof(char *)*(in_LCS_Lenght + in_comm_Head + in_comm_Tail + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tfor (the_lcsp = in_lcsrev + in_curl - 1; the_lcsp >= in_lcsrev; the_lcsp--) {\n\
    \t\t\t*(the_LCS + in_comm_Head + (in_LCS_Lenght - (the_lcsp - in_lcsrev) - 1)) = (*the_lcsp)->lcschar;\n\
    #if 0/* DEBUG?p */\n\n\
    \t\t\tprintf(\"%s^{%d}_{%d}\", (*the_lcsp)->lcschar, (*the_lcsp)->Apos, (*the_lcsp)->Bpos);\n\
    #endif\n\n\
    \t\t}\n\
    \t\t(**io_LCSsCurNode)->LCS = the_LCS;\n\
    #if 0/* DEBUG?p */\n\n\
    \t\tprintf(\"\\n\");\n\
    #endif\n\
    \t\t/* LCS??List?????Node????????? */\n\
    \t\tAnzMalloc(the_LCSsTmpNode, PLCSLIST, sizeof(ST_LCSLIST));\n\
    \t\tif (the_LCSsTmpNode != NULL) {\n\
    \t\t\tmemset(the_LCSsTmpNode, 0, sizeof(ST_LCSLIST));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\t(**io_LCSsCurNode)->next = the_LCSsTmpNode;\n\
    \t\t(**io_LCSsCurNode) = (**io_LCSsCurNode)->next;\n\
    \t\t/* LCS?????Count */\n\
    \t\t(*out_LCSsNum)++;\n\
    \t} else\n\
    \t{\n\
    \t\twhile (the_adjp != DCELL) {\n\
    \t\t\tin_lcsrev[in_curl]->lcschar = in_pStr1[the_adjp->i - 1];\n\
    \t\t\tin_lcsrev[in_curl]->Apos = the_adjp->i;\n\
    \t\t\tin_lcsrev[in_curl]->Bpos = the_adjp->j;\n\
    \t\t\tGetEmbeddings(in_comm_Head, in_comm_Tail,\n\
    \t\t\t\t\t\t  the_adjp->i - 1, the_adjp->j - 1,\n\
    \t\t\t\t\t\t  in_lcsrev, in_curl + 1,\n\
    \t\t\t\t\t\t  in_head, in_pretail, in_tail,\n\
    \t\t\t\t\t\t  in_len1, in_len2,\n\
    \t\t\t\t\t\t  in_pStr1,\n\
    \t\t\t\t\t\t  in_LCS_Lenght,\n\
    \t\t\t\t\t\t  io_LCSsCurNode,\n\
    \t\t\t\t\t\t  out_LCSsNum);\n\
    \t\t\tif (the_adjp == in_tail[in_i][in_j])\n\
    \t\t\t\tbreak;\n\
    \t\t\tif (the_adjp == in_pretail[in_i][in_j]) {\n\
    \t\t\t\tthe_adjp = in_tail[in_i][in_j];\n\
    \t\t\t} else {\n\
    \t\t\t\tthe_adjp = the_adjp->next;\n\
    \t\t\t}\n\
    \t\t}\n\
    \t}\n\
    \tif (in_i == in_len1 && in_j == in_len2)\n\
    \t{\n\
    #if 0/* DEBUG?p */\n\
    \t\t//printf(\"%d\\n\",the_count);\n\
    \t\t/* ????n????LCS??????p???? */\n\
    \t\t//*out_LCSsNum = the_count;\n\
    #endif\n\n\
    \t}\n\
    \treturn 0;\n\
    }\n\n\
    /**\n\
    *  GetAllDistinctLCSs\n\
    *  ????n????All Distinct LCS????????\n\
    *  @param  in_pStr1,in_pStr2 ????n??\n\
    *  @param  in_len1,in_len2?@ ????n???????\n\
    *  @param  io_LCSsHeadNode   LCS??List??w?b?_Node\n\
    *  @param  out_LCS_Lenght    LCS??Lenght\n\
    *  @param  out_LCSsNum       LCS???\n\
    *  @return  \n\
    *           ANZ_SUCCESS:?????I??                                      \n\
    *           ANZ_ERROR  :????I??\n\
    *  @author zhang-gh\n\
    */\n\
    int LCSAlgo::GetAllDistinctLCSs(char **in_pStr1, char **in_pStr2,        /* ????n?? */\n\
    \t\t\t\t\t\t\t\tconst int in_len1, const int in_len2,    /* ????n??????? */\n\
    \t\t\t\t\t\t\t\tPLCSLIST *io_LCSsHeadNode,    /* LCS??List??w?b?_Node */\n\
    \t\t\t\t\t\t\t\tint *out_LCS_Lenght,          /* LCS??Lenght */\n\
    \t\t\t\t\t\t\t\tint *out_LCSsNum)          /* LCS??? */\n\
    {\n\
    \tint the_i, the_j;\n\
    \tPCELL **the_head, **the_pretail, **the_tail;\n\
    \tPLCSPOS *the_lcsrev;\n\
    \tint **the_rank;\n\
    \tPCELL **the_p;\n\
    \tPLCSLIST *the_pLCSsCurNode; /* LCS??List??J?????gNode */\n\
    \tPLCSLIST the_LCSsPrevNode; /* LCS??List??ONode */\n\
    \tPLCSLIST the_pLCSsNextNode; /* LCS??List???Node */\n\n\
    \t/* ????????? */\n\
    \tthe_i = 0;\n\
    \tthe_j = 0;\n\
    \tthe_head = NULL;\n\
    \tthe_pretail = NULL;\n\
    \tthe_tail = NULL;\n\
    \tthe_lcsrev = NULL;\n\
    \tthe_rank = NULL;\n\
    \tthe_p = NULL;\n\
    \tthe_pLCSsCurNode = NULL;\n\
    \tthe_LCSsPrevNode = NULL;\n\
    \tthe_pLCSsNextNode = NULL;\n\n\
    \tint the_iMinLen = min(in_len1, in_len2);\n\
    \tint the_iComm_Head = 0;\n\
    \tint the_iComm_Tail = 0;\n\
    \tfor (the_i = 0;the_i < the_iMinLen;the_i++) {\n\
    \t\tif (strcmp(in_pStr1[the_i], in_pStr2[the_i]) == 0) {\n\
    \t\t\tthe_iComm_Head++;\n\
    \t\t} else {\n\
    \t\t\tbreak;\n\
    \t\t}\n\
    \t}\n\n\
    \tint the_iCurLine1 = in_len1 - 1;\n\
    \tint the_iCurLine2 = in_len2 - 1;\n\
    \twhile (in_pStr1[the_iCurLine1] != NULL &&\n\
    \t\t\tin_pStr2[the_iCurLine2] != NULL &&\n\
    \t\t\tthe_iCurLine1 > the_iComm_Head - 1 &&\n\
    \t\t\tthe_iCurLine2 > the_iComm_Head - 1) {\n\
    \t\tif (strcmp(in_pStr1[the_iCurLine1], in_pStr2[the_iCurLine2]) == 0) {\n\
    \t\t\tthe_iComm_Tail++;\n\
    \t\t} else {\n\
    \t\t\tbreak;\n\
    \t\t}\n\
    \t\tthe_iCurLine1--;\n\
    \t\tthe_iCurLine2--;\n\
    \t}\n\
    \tint the_iLen1 = in_len1 - the_iComm_Head - the_iComm_Tail;\n\
    \tint the_iLen2 = in_len2 - the_iComm_Head - the_iComm_Tail;\n\
    \tchar** the_pStr1 = in_pStr1 + the_iComm_Head;\n\
    \tchar** the_pStr2 = in_pStr2 + the_iComm_Head;\n\n\
    \t/* LCS??List??w?b?_Node???????? */\n\
    \tAnzMalloc(the_pLCSsCurNode, PLCSLIST *, sizeof(PLCSLIST *));\n\
    \tif (the_pLCSsCurNode != NULL) {\n\
    \t\tmemset(the_pLCSsCurNode, 0, sizeof(PLCSLIST *));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tAnzMalloc(*the_pLCSsCurNode, PLCSLIST, sizeof(ST_LCSLIST));\n\
    \tif (the_pLCSsCurNode != NULL) {\n\
    \t\tmemset(*the_pLCSsCurNode, 0, sizeof(ST_LCSLIST));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \t*io_LCSsHeadNode = *the_pLCSsCurNode;\n\n\
    \t/* ?O???[?o?????g_dummy??????? */\n\
    \tAnzMalloc(g_dummy, PCELL, sizeof(ST_CELL));\n\
    \tif (g_dummy != NULL) {\n\
    \t\tmemset(g_dummy, 0, sizeof(ST_CELL));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tg_dummy->i = 0;\n\
    \tg_dummy->j = 0;\n\n\
    \tAnzMalloc(the_p, PCELL**, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \tif (the_p != NULL) {\n\
    \t\tmemset(the_p, 0, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_p[the_i], PCELL*, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\tif (the_p[the_i] != NULL) {\n\
    \t\t\tmemset(the_p[the_i], 0, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tAnzMalloc(the_p[the_i][the_j], PCELL, sizeof(ST_CELL));\n\
    \t\t\tif (the_p[the_i][the_j] != NULL) {\n\
    \t\t\t\tmemset(the_p[the_i][the_j], 0, sizeof(ST_CELL));\n\
    \t\t\t} else {\n\
    \t\t\t\tthrow MemoryFailedExc();\n\
    \t\t\t}\n\
    \t\t\tthe_p[the_i][the_j]->i = the_i;\n\
    \t\t\tthe_p[the_i][the_j]->j = the_j;\n\
    \t\t\tthe_p[the_i][the_j]->next = DCELL;\n\
    \t\t}\n\
    \t}\n\
    \t//the_rank\n\
    \tAnzMalloc(the_rank, int **, sizeof(int*)*(the_iLen1 + 1));\n\
    \tif (the_rank != NULL) {\n\
    \t\tmemset(the_rank, 0, sizeof(int*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_rank[the_i], int *, sizeof(int)*(the_iLen2 + 1));\n\
    \t\tif (the_rank[the_i] != NULL) {\n\
    \t\t\tmemset(the_rank[the_i], 0, sizeof(int)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tthe_rank[the_i][the_j] = 0;\n\
    \t\t}\n\
    \t}\n\
    \t//the_head\n\
    \tAnzMalloc(the_head, PCELL **, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \tif (the_head != NULL) {\n\
    \t\tmemset(the_head, 0, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_head[the_i], PCELL *, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\tif (the_head[the_i] != NULL) {\n\
    \t\t\tmemset(the_head[the_i], 0, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tthe_head[the_i][the_j] = DCELL;\n\
    \t\t}\n\
    \t}\n\
    \t//the_pretail\n\
    \tAnzMalloc(the_pretail, PCELL **, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \tif (the_pretail != NULL) {\n\
    \t\tmemset(the_pretail, 0, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_pretail[the_i], PCELL *, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\tif (the_pretail[the_i] != NULL) {\n\
    \t\t\tmemset(the_pretail[the_i], 0, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tthe_pretail[the_i][the_j] = DCELL;\n\
    \t\t}\n\
    \t}\n\
    \t//the_tail\n\
    \tAnzMalloc(the_tail, PCELL **, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \tif (the_tail != NULL) {\n\
    \t\tmemset(the_tail, 0, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_tail[the_i], PCELL *, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\tif (the_tail[the_i] != NULL) {\n\
    \t\t\tmemset(the_tail[the_i], 0, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tthe_tail[the_i][the_j] = DCELL;\n\
    \t\t}\n\
    \t}\n\
    \t//compute gragh\n\
    \tfor (the_i = 1;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 1;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tif (strcmp(the_pStr1[the_i - 1], the_pStr2[the_j - 1]) == 0) {\n\
    \t\t\t\tthe_rank[the_i][the_j] = the_rank[the_i - 1][the_j - 1] + 1;\n\
    \t\t\t\tthe_tail[the_i][the_j] = the_p[the_i][the_j];\n\
    \t\t\t} else {\n\
    \t\t\t\tthe_rank[the_i][the_j] = MAX(the_rank[the_i - 1][the_j], the_rank[the_i][the_j - 1]);\n\
    \t\t\t\tif (the_rank[the_i][the_j] > 0) {\n\
    \t\t\t\t\tif (the_rank[the_i - 1][the_j] == the_rank[the_i][the_j]) {\n\
    \t\t\t\t\t\tthe_tail[the_i][the_j] = the_tail[the_i - 1][the_j];\n\
    \t\t\t\t\t}\n\
    \t\t\t\t\tif (the_rank[the_i][the_j - 1] == the_rank[the_i][the_j]) {\n\
    \t\t\t\t\t\tif (the_tail[the_i][the_j] == DCELL) {\n\
    \t\t\t\t\t\t\tthe_tail[the_i][the_j] = the_tail[the_i][the_j - 1];\n\
    \t\t\t\t\t\t} else {\n\
    \t\t\t\t\t\t\tif (the_tail[the_i][the_j]->i == the_tail[the_i][the_j - 1]->i) {\n\
    \t\t\t\t\t\t\t\tthe_pretail[the_i][the_j] = the_pretail[the_i][the_j - 1];\n\
    \t\t\t\t\t\t\t} else {\n\
    \t\t\t\t\t\t\t\tthe_pretail[the_i][the_j] = the_tail[the_i][the_j - 1];\n\
    \t\t\t\t\t\t\t}\n\
    \t\t\t\t\t\t\tif (the_tail[the_i][the_j]->j == the_pretail[the_i][the_j]->j) {\n\
    \t\t\t\t\t\t\t\tthe_tail[the_i][the_j] = the_pretail[the_i][the_j];\n\
    \t\t\t\t\t\t\t} else {\n\
    \t\t\t\t\t\t\t\tthe_pretail[the_i][the_j]->next = the_tail[the_i][the_j];\n\
    \t\t\t\t\t\t\t\tthe_head[the_i][the_j] = the_head[the_i][the_j - 1];\n\
    \t\t\t\t\t\t\t\tif (the_head[the_i][the_j] == DCELL) {\n\
    \t\t\t\t\t\t\t\t\tthe_head[the_i][the_j] = the_pretail[the_i][the_j];\n\
    \t\t\t\t\t\t\t\t}\n\
    \t\t\t\t\t\t\t}\n\
    \t\t\t\t\t\t}\n\
    \t\t\t\t\t}\n\
    \t\t\t\t}\n\
    \t\t\t}\n\
    \t\t} //end for the_j\n\
    \t} //end for the_i\n\n\
    \t//get LCSs and count\n\
    \t//lcsrev???????\n\
    \tAnzMalloc(the_lcsrev, PLCSPOS *, sizeof(PLCSPOS)*(the_rank[the_iLen1][the_iLen2]));\n\
    \tif (the_lcsrev != NULL) {\n\
    \t\tmemset(the_lcsrev, 0, sizeof(PLCSPOS)*(the_rank[the_iLen1][the_iLen2]));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_rank[the_iLen1][the_iLen2];the_i++) {\n\
    \t\tAnzMalloc(the_lcsrev[the_i], PLCSPOS, sizeof(ST_LCSCELL));\n\
    \t\tif (the_lcsrev[the_i] != NULL) {\n\
    \t\t\tmemset(the_lcsrev[the_i], 0, sizeof(ST_LCSCELL));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \t*out_LCS_Lenght = the_rank[the_iLen1][the_iLen2];\n\
    \tif (*out_LCS_Lenght != 0) { //?????v????????v??O???????LCS????????\n\
    \t\tGetEmbeddings(the_iComm_Head, the_iComm_Tail,\n\
    \t\t\t\t\t  the_iLen1, the_iLen2,\n\
    \t\t\t\t\t  the_lcsrev, 0,\n\
    \t\t\t\t\t  the_head, the_pretail, the_tail,\n\
    \t\t\t\t\t  the_iLen1, the_iLen2,\n\
    \t\t\t\t\t  the_pStr1,\n\
    \t\t\t\t\t  the_rank[the_iLen1][the_iLen2],\n\
    \t\t\t\t\t  &the_pLCSsCurNode,\n\
    \t\t\t\t\t  out_LCSsNum);\n\
    \t\t/* ?? ????Node???????? */\n\
    \t\t*the_pLCSsCurNode = *io_LCSsHeadNode;\n\
    \t\tthe_LCSsPrevNode = *io_LCSsHeadNode;\n\
    \t\tthe_pLCSsNextNode = *io_LCSsHeadNode;\n\
    \t\twhile (*the_pLCSsCurNode != NULL) {\n\
    \t\t\tthe_pLCSsNextNode = (*the_pLCSsCurNode)->next;\n\
    \t\t\tif (the_pLCSsNextNode == NULL) {\n\
    \t\t\t\tfree(*the_pLCSsCurNode);\n\
    \t\t\t\t*the_pLCSsCurNode = NULL;\n\
    \t\t\t\tif (the_LCSsPrevNode != NULL) {\n\
    \t\t\t\t\t(the_LCSsPrevNode)->next = NULL;\n\
    \t\t\t\t}\n\
    \t\t\t}\n\
    \t\t\tthe_LCSsPrevNode = *the_pLCSsCurNode;\n\
    \t\t\t*the_pLCSsCurNode = the_pLCSsNextNode;\n\
    \t\t}\n\n\
    \t\t// add common context\n\
    \t\t*the_pLCSsCurNode = *io_LCSsHeadNode;\n\
    \t\twhile (*the_pLCSsCurNode != NULL) {\n\
    \t\t\tfor (the_i = 0;the_i < the_iComm_Head;the_i++) {\n\
    \t\t\t\t((*the_pLCSsCurNode)->LCS)[the_i] = in_pStr1[the_i];\n\
    \t\t\t}\n\
    \t\t\tthe_i = the_iComm_Head + *out_LCS_Lenght;\n\
    \t\t\tfor (the_j = in_len1 - the_iComm_Tail;the_j < in_len1;the_j++) {\n\
    \t\t\t\t((*the_pLCSsCurNode)->LCS)[the_i] = in_pStr1[the_j];\n\
    \t\t\t\tthe_i++;\n\
    \t\t\t}\n\
    \t\t\t*the_pLCSsCurNode = (*the_pLCSsCurNode)->next;\n\
    \t\t}\n\
    \t\t*out_LCS_Lenght = *out_LCS_Lenght + the_iComm_Head + the_iComm_Tail;\n\
    \t} else if (the_iComm_Head + the_iComm_Tail > 0) { //?????v????????v??O???????LCS???????\n\
    \t\tchar ** the_LCS = NULL;\n\
    \t\tAnzMalloc(the_LCS, char**, sizeof(char *)*(the_iComm_Head + the_iComm_Tail + 1));\n\
    \t\tif (the_LCS != NULL) {\n\
    \t\t\tmemset(the_LCS, 0, sizeof(char *)*(the_iComm_Head + the_iComm_Tail + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tfor (the_i = 0;the_i < the_iComm_Head;the_i++) {\n\
    \t\t\tthe_LCS[the_i] = in_pStr1[the_i];\n\
    \t\t}\n\
    \t\tfor (the_j = in_len1 - the_iComm_Tail;the_j < in_len1;the_j++) {\n\
    \t\t\tthe_LCS[the_i] = in_pStr1[the_j];\n\
    \t\t\tthe_i++;\n\
    \t\t}\n\
    \t\t(*the_pLCSsCurNode)->LCS = the_LCS;\n\
    \t\t(*the_pLCSsCurNode)->next = NULL;\n\
    \t\t*out_LCS_Lenght = the_iComm_Head + the_iComm_Tail;\n\
    \t} else {\n\
    \t\tif (*the_pLCSsCurNode != NULL) {\n\
    \t\t\tfree(*the_pLCSsCurNode);\n\
    \t\t\t*the_pLCSsCurNode = NULL;\n\
    \t\t\t*io_LCSsHeadNode = NULL;\n\
    \t\t}\n\
    \t}\n\
    \t//Free memory\n\
    \tfor (the_i = 0;the_i < the_rank[the_iLen1][the_iLen2];the_i++) {\n\
    \t\tif (the_lcsrev[the_i] != NULL) {\n\
    \t\t\tfree(the_lcsrev[the_i]);\n\
    \t\t\tthe_lcsrev[the_i] = NULL;\n\
    \t\t}\n\
    \t}\n\n\
    \tif (the_lcsrev != NULL) {\n\
    \t\tfree(the_lcsrev);\n\
    \t\tthe_lcsrev = NULL;\n\
    \t}\n\
    \t//**the_head, **the_pretail, **the_tail;\n\
    \t//**the_rank;\n\
    \t//**the_p[the_i][the_j];\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tif (the_p[the_i][the_j] != NULL) {\n\
    \t\t\t\tfree(the_p[the_i][the_j]);\n\
    \t\t\t\tthe_p[the_i][the_j] = NULL;\n\
    \t\t\t}\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tif (*(the_head + the_i) != NULL) {\n\
    \t\t\tfree(*(the_head + the_i));\n\
    \t\t\t*(the_head + the_i) = NULL;\n\
    \t\t}\n\
    \t\tif (the_pretail[the_i] != NULL) {\n\
    \t\t\tfree(the_pretail[the_i]);\n\
    \t\t\tthe_pretail[the_i] = NULL;\n\
    \t\t}\n\
    \t\tif (the_tail[the_i] != NULL) {\n\
    \t\t\tfree(the_tail[the_i]);\n\
    \t\t\tthe_tail[the_i] = NULL;\n\
    \t\t}\n\
    \t\tif (the_rank[the_i] != NULL) {\n\
    \t\t\tfree(the_rank[the_i]);\n\
    \t\t\tthe_rank[the_i] = NULL;\n\
    \t\t}\n\
    \t\tif (the_p[the_i] != NULL) {\n\
    \t\t\tfree(the_p[the_i]);\n\
    \t\t\tthe_p[the_i] = NULL;\n\
    \t\t}\n\
    \t}\n\
    \tif (the_head != NULL) {\n\
    \t\tfree(the_head);\n\
    \t\tthe_head = NULL;\n\
    \t}\n\
    \tif (the_pretail != NULL) {\n\
    \t\tfree(the_pretail);\n\
    \t\tthe_pretail = NULL;\n\
    \t}\n\
    \tif (the_tail != NULL) {\n\
    \t\tfree(the_tail);\n\
    \t\tthe_tail = NULL;\n\
    \t}\n\
    \tif (the_rank != NULL) {\n\
    \t\tfree(the_rank);\n\
    \t\tthe_rank = NULL;\n\
    \t}\n\
    \tif (the_p != NULL) {\n\
    \t\tfree(the_p);\n\
    \t\tthe_p = NULL;\n\
    \t}\n\
    \tif (the_pLCSsCurNode != NULL) {\n\
    \t\tfree(the_pLCSsCurNode);\n\
    \t\tthe_pLCSsCurNode = NULL;\n\
    \t}\n\
    \tif (g_dummy != NULL) {\n\
    \t\tfree(g_dummy);\n\
    \t\tg_dummy = NULL;\n\
    \t}\n\
    \treturn 0;\n\
    }\n\n\
    ST_LCS_DAT * LCSAlgo::CreateLCS_DAT(MeasureFileObject* in_measureFileObj)\n\
    {\n\
    \tint the_iPairNo = 0;\t\t\t\t\t\t// ????y?A?????A????????y?A????r??????????\n\
    \tint the_iArrayNum = 0;\t\t\t\t\t\t// _ST_LCS_DAT???????y?A??\n\
    \tint the_iFuncPair = 0;\t\t\t\t\t\t// LCS??g????????\n\
    \tint the_iArray_Cur = 0;\t\t\t\t\t\t// ?J?????g?????z???????\n\
    \tint the_iBit_Cur = 0;\t\t\t\t\t\t// ?J?????g?????long?^????bit???u\n\
    \tint the_iArray_Next = 0;\t\t\t\t\t// ???????z???????\n\
    \tint the_iBit_Next = 0;\t\t\t\t\t\t// ???????long?^????bit???u\n\
    \tint the_iCurNo = 0;\t\t\t\t\t\t\t// ?J?????g?????z???????\n\
    \tint the_iNextNo = 0;\t\t\t\t\t\t// ???????????\n\
    \tint the_iLCSsNum = 0;\t\t\t\t\t\t// LCS???\n\
    \tint the_iLCS_Lenght = 0;\t\t\t\t\t// LCS??Lenght\n\
    \tPLCSLIST the_pLCSsHeadNode = NULL; /* LCS??List??w?b?_Node */\n\
    \tPLCSLIST the_pLCSsNextNode = NULL; /* ????n????LCS??List???????p??Node */\n\
    \tPLCSLIST the_pLCSsCurNode = NULL; /* LCS??List???????p?J?????gNode */\n\n\
    \tunsigned long the_iFuncNum = 0;\t\t\t\t//File????L?q??????????\n\n\
    \tST_LCS_DAT* pLcs_Dat_Head = NULL;\t\t\t//_ST_LCS_DAT??HeadNode\n\
    \tST_LCS_DAT* pLcs_Dat_Cur = NULL;\t\t\t//_ST_LCS_DAT??CurNode\n\
    \tST_LCS_DAT* pLcs_Dat_Pre = NULL;\t\t\t//_ST_LCS_DAT??PreNode\n\
    \tunsigned long *lPair = NULL;\n\
    \tunsigned long *pPair = NULL;\n\
    \tunsigned long lFir, lSec;\n\n\
    \tlFir = 1;\n\
    \tlSec = 1;\n\n\
    \t// ????v??FileInfo????????\n\
    \tif (in_measureFileObj == NULL) {\n\
    \t\treturn NULL;\n\
    \t}\n\
    \t// ????v??FunctionInfo????????\n\
    \tthe_iFuncNum = in_measureFileObj->GetCommonFileInfo()->GetFuncNum();\n\
    \tthe_iFuncPair = the_iFuncNum * (the_iFuncNum - 1) / 2;\n\
    \tthe_iArrayNum = the_iFuncNum / g_iUnitSize;\n\
    \tif (the_iFuncNum % g_iUnitSize != 0) {\n\
    \t\tthe_iArrayNum++;\n\
    \t}\n\n\
    \tin_measureFileObj->RewindFuncList();\n\
    \tMeasureFuncObject* the_pFuncCur = in_measureFileObj->GetCurrFuncObj();\n\
    \tMeasureFuncObject* the_pFuncNext = in_measureFileObj->GetCurrFuncObj();\n\n\
    \t/* ????????? */\n\
    \tthe_iLCSsNum = 0;\n\
    \tthe_iLCS_Lenght = 0;\n\
    \tthe_pLCSsNextNode = NULL;\n\
    \tthe_pLCSsHeadNode = NULL;\n\
    \tthe_pLCSsCurNode = NULL;\n\
    \twhile (in_measureFileObj->HasNextFunc()) {\n\
    \t\tthe_iNextNo = the_iCurNo + 1;\n\
    \t\tthe_iArray_Cur = the_iCurNo / g_iUnitSize;\n\
    \t\tthe_iBit_Cur = the_iCurNo % g_iUnitSize;\n\
    \t\t//\n\
    \t\tin_measureFileObj->MoveNextFunc();\n\
    \t\tthe_pFuncNext = in_measureFileObj->GetCurrFuncObj();\n\
    \t\tin_measureFileObj->MarkCurrFuncPos();\n\
    \t\twhile (the_pFuncNext != NULL) {\n\
    \t\t\t//*out_fileELOC = *out_fileELOC + the_pFuncNext->m_eloc;\n\
    \t\t\tthe_iArray_Next = the_iNextNo / g_iUnitSize;\n\
    \t\t\tthe_iBit_Next = the_iNextNo % g_iUnitSize;\n\n\
    \t\t\tthe_iLCSsNum = 0;\n\
    \t\t\tthe_iLCS_Lenght = 0;\n\
    \t\t\tthe_pLCSsHeadNode = NULL;\n\
    \t\t\t/* ????n????All Distinct LCS???????? */\n\
    \t\t\tGetAllDistinctLCSs(the_pFuncCur->GetCommFuncInfo()->GetExecContent(),\n\
    \t\t\t\t\t\t\t   the_pFuncNext->GetCommFuncInfo()->GetExecContent(),\n\
    \t\t\t\t\t\t\t   the_pFuncCur->GetCommFuncInfo()->GetExecLOC(),\n\
    \t\t\t\t\t\t\t   the_pFuncNext->GetCommFuncInfo()->GetExecLOC(),\n\
    \t\t\t\t\t\t\t   &the_pLCSsHeadNode,\n\
    \t\t\t\t\t\t\t   &the_iLCS_Lenght,\n\
    \t\t\t\t\t\t\t   &the_iLCSsNum);\n\
    \t\t\tthe_pLCSsCurNode = the_pLCSsHeadNode;\n\
    \t\t\t//while (the_pLCSsCurNode!=NULL)\n\
    \t\t\tif (the_pLCSsCurNode != NULL && the_iLCS_Lenght != 0) {\n\
    \t\t\t\t//\t\t\t\tif(the_iLCS_Lenght == 0){\n\
    \t\t\t\t//\t\t\t\t\tthe_pLCSsCurNode = the_pLCSsCurNode->next;\n\
    \t\t\t\t//\t\t\t\t\tcontinue;\n\
    \t\t\t\t//\t\t\t\t}\n\
    \t\t\t\tAnzMalloc(pLcs_Dat_Cur, ST_LCS_DAT*, sizeof(ST_LCS_DAT));\n\
    \t\t\t\tif (pLcs_Dat_Cur != NULL) {\n\
    \t\t\t\t\tmemset(pLcs_Dat_Cur, 0, sizeof(ST_LCS_DAT));\n\
    \t\t\t\t} else {\n\
    \t\t\t\t\tthrow MemoryFailedExc();\n\
    \t\t\t\t}\n\
    \t\t\t\tif (pLcs_Dat_Head == NULL) {\n\
    \t\t\t\t\tpLcs_Dat_Head = pLcs_Dat_Cur;\n\
    \t\t\t\t\tpLcs_Dat_Pre = pLcs_Dat_Cur;\n\
    \t\t\t\t} else {\n\
    \t\t\t\t\tpLcs_Dat_Pre->next = pLcs_Dat_Cur;\n\
    \t\t\t\t}\n\n\
    \t\t\t\tpLcs_Dat_Cur->LCS = the_pLCSsCurNode->LCS;\n\
    \t\t\t\tpLcs_Dat_Cur->length = the_iLCS_Lenght;\n\
    \t\t\t\tAnzMalloc(lPair, unsigned long*, sizeof(unsigned long)*(the_iArrayNum + 1));\n\
    \t\t\t\tif (lPair != NULL) {\n\
    \t\t\t\t\tmemset(lPair, 0, sizeof(unsigned long)*(the_iArrayNum + 1));\n\
    \t\t\t\t} else {\n\
    \t\t\t\t\tthrow MemoryFailedExc();\n\
    \t\t\t\t}\n\
    \t\t\t\tpPair = lPair;\n\
    \t\t\t\tlFir = 1, lSec = 1;\n\
    \t\t\t\tlFir = lFir << the_iBit_Cur;\n\
    \t\t\t\tlSec = lSec << the_iBit_Next;\n\
    \t\t\t\tif (the_iArray_Cur == the_iArray_Next) {\n\
    \t\t\t\t\tpPair[the_iArray_Cur] = lFir | lSec;\n\
    \t\t\t\t} else {\n\
    \t\t\t\t\tpPair[the_iArray_Cur] = lFir;\n\
    \t\t\t\t\tpPair[the_iArray_Next] = lSec;\n\
    \t\t\t\t}\n\
    \t\t\t\tpPair[the_iArrayNum] = NULL;\n\
    \t\t\t\tpLcs_Dat_Cur->funcPair = pPair;\n\
    \t\t\t\tpLcs_Dat_Cur->next = NULL;\n\
    \t\t\t\tpLcs_Dat_Cur->pairNo = the_iPairNo;\n\
    \t\t\t\tpLcs_Dat_Cur->bDelete = false;\n\
    \t\t\t\tpLcs_Dat_Pre = pLcs_Dat_Cur;\n\
    \t\t\t\tthe_pLCSsCurNode = the_pLCSsCurNode->next;\n\
    \t\t\t} //End of while (the_pLCSsCurNode!=NULL)\n\
    \t\t\tthe_pLCSsCurNode = the_pLCSsHeadNode;\n\
    \t\t\twhile (the_pLCSsCurNode != NULL) {\n\
    \t\t\t\tthe_pLCSsNextNode = the_pLCSsCurNode->next;\n\
    \t\t\t\tif (the_pLCSsCurNode != the_pLCSsHeadNode && the_pLCSsCurNode->LCS != NULL) {\n\
    \t\t\t\t\tfree(the_pLCSsCurNode->LCS);\n\
    \t\t\t\t}\n\
    \t\t\t\tfree(the_pLCSsCurNode);\n\
    \t\t\t\tthe_pLCSsCurNode = the_pLCSsNextNode;\n\
    \t\t\t}\n\
    \t\t\tthe_iNextNo++;\n\
    \t\t\tthe_iPairNo++;\n\
    \t\t\tin_measureFileObj->MoveNextFunc();\n\
    \t\t\tthe_pFuncNext = in_measureFileObj->GetCurrFuncObj();\n\n\
    \t\t} //End of while (the_pFuncNext != NULL)\n\
    \t\tthe_iCurNo++;\n\
    \t\t//\n\
    \t\tin_measureFileObj->RestoreMarkFuncPos();\n\
    \t\tthe_pFuncCur = in_measureFileObj->GetCurrFuncObj();\n\
    \t} //End of while (in_measureFileObj->HasNextFunc())\n\
    \treturn pLcs_Dat_Head;\n\
    }\n\n\
    LCSAlgo::LCSAlgo()\n\
    {}\n\n\
    LCSAlgo::~LCSAlgo()\n\
    {}\n\n\
    /**\n\
    *  ?????:GetLCSLength\n\
    *  ?T?v:?????LCS???v?Z\n\
    *  @param\n\
    *          in_pStr1      ?v?????1??s???e\n\
    *          in_pStr2      ?v?????2??s???e\n\
    *          in_len1       ?v?????1??s??\n\
    *          in_len2       ?v?????2??s??\n\
    *  @return\n\
    *          ANZ_SUCCESS          ?????I??    \n\
    *          ANZERR_MEMORY_FAILED ???????m????s  \n\
    *  @author luo-jirong\n\
    *  @modified by fan-jia 2005/02/06\n\
    */\n\
    unsigned int LCSAlgo::GetLCSLength(char** in_pStr1,\n\
    \t\t\t\t\t\t\t\t   char** in_pStr2,\n\
    \t\t\t\t\t\t\t\t   const int in_len1,\n\
    \t\t\t\t\t\t\t\t   const int in_len2)\n\
    {\n\
    \tregister int the_i = 0;     /* Loop?p */\n\
    \tregister int the_j = 0;     /* Loop?p */\n\
    \tunsigned int the_max = 0;   /* ?J?????g????l */\n\
    \tunsigned int *the_ps1 = NULL;  /* ???l???i?[?????z?? */\n\
    \tunsigned int *the_ps2 = NULL;   /* ???l???i?[?????z?? */\n\
    \tunsigned int *the_tmp = NULL;        /* Swap?p???Point */\n\
    \tunsigned int the_commonNum = 0;      /* ????s?? */\n\
    \tint the_iMaxLen = 0;        /* Item?????\xC2\x90? */\n\n\
    \tif (in_pStr1 == NULL || in_pStr2 == NULL) {\n\
    \t\treturn -1;\n\
    \t}\n\n\
    \tint the_iMinLen = min(in_len1, in_len2);\n\
    \tint the_iComm_Head = 0;\n\
    \tint the_iComm_Tail = 0;\n\
    \tfor (the_i = 0;the_i < the_iMinLen;the_i++) {\n\
    \t\tif (strcmp(in_pStr1[the_i], in_pStr2[the_i]) == 0) {\n\
    \t\t\tthe_iComm_Head++;\n\
    \t\t} else {\n\
    \t\t\tbreak;\n\
    \t\t}\n\
    \t}\n\n\
    \tint the_iCurLine1 = in_len1 - 1;\n\
    \tint the_iCurLine2 = in_len2 - 1;\n\
    \twhile (in_pStr1[the_iCurLine1] != NULL &&\n\
    \t\t\tin_pStr2[the_iCurLine2] != NULL &&\n\
    \t\t\tthe_iCurLine1 > the_iComm_Head - 1 &&\n\
    \t\t\tthe_iCurLine2 > the_iComm_Head - 1) {\n\
    \t\tif (strcmp(in_pStr1[the_iCurLine1], in_pStr2[the_iCurLine2]) == 0) {\n\
    \t\t\tthe_iComm_Tail++;\n\
    \t\t} else {\n\
    \t\t\tbreak;\n\
    \t\t}\n\
    \t\tthe_iCurLine1--;\n\
    \t\tthe_iCurLine2--;\n\
    \t}\n\n\
    \tint the_iLen1 = in_len1 - the_iComm_Head - the_iComm_Tail;\n\
    \tint the_iLen2 = in_len2 - the_iComm_Head - the_iComm_Tail;\n\
    \tchar** the_pStr1 = in_pStr1 + the_iComm_Head;\n\
    \tchar** the_pStr2 = in_pStr2 + the_iComm_Head;\n\
    \tthe_iMaxLen = the_iLen1 > the_iLen2 ? the_iLen1 : the_iLen2;\n\n\
    \tAnzMalloc(the_ps1, unsigned int*, sizeof(unsigned int) * (the_iMaxLen + 1));\n\
    \tAnzMalloc(the_ps2, unsigned int*, sizeof(unsigned int) * (the_iMaxLen + 1));\n\n\
    \tif (the_ps1 == NULL || the_ps2 == NULL) {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\n\
    \tmemset(the_ps1, 0, sizeof(int) * (the_iMaxLen + 1));\n\
    \tmemset(the_ps2, 0, sizeof(int) * (the_iMaxLen + 1));\n\n\
    \tfor (the_i = 0; the_i < the_iLen2; the_i++) {\n\
    \t\tfor (the_j = 0; the_j < the_iLen1; the_j++) {\n\
    \t\t\tif (the_pStr1[the_j] == NULL || the_pStr2[the_i] == NULL) {\n\
    \t\t\t\tthe_max = 0;\n\
    \t\t\t\tTrace(\"GetLCSLength:?????v?f??Point??A?h???X??NULL??????B\");\n\
    \t\t\t} else {\n\
    \t\t\t\tif ( strcmp( the_pStr1[the_j], the_pStr2[the_i]) == 0 )\n\
    \t\t\t\t\tthe_max = the_ps1[the_j] + 1;\n\
    \t\t\t\telse\n\
    \t\t\t\t\tthe_max = 0;\n\
    \t\t\t}\n\
    \t\t\tif (the_max < the_ps1[the_j + 1])\n\
    \t\t\t\tthe_max = the_ps1[the_j + 1];\n\
    \t\t\tif (the_max < the_ps2[the_j])\n\
    \t\t\t\tthe_max = the_ps2[the_j];\n\
    \t\t\tthe_ps2[the_j + 1] = the_max;\n\
    \t\t}\n\
    \t\tthe_tmp = the_ps1;\n\
    \t\tthe_ps1 = the_ps2;\n\
    \t\tthe_ps2 = the_tmp;\n\
    \t}\n\n\
    \tthe_commonNum = the_ps1[ the_iLen1] + the_iComm_Head + the_iComm_Tail;\n\n\
    \tif (the_ps1 != NULL) {\n\
    \t\tfree(the_ps1);\n\
    \t\tthe_ps1 = NULL;\n\
    \t}\n\
    \tif (the_ps2 != NULL) {\n\
    \t\tfree(the_ps2);\n\
    \t\tthe_ps2 = NULL;\n\
    \t}\n\
    \treturn the_commonNum;\n\
    }\n\n\
    void LCSAlgo::RemoveLCS_DAT(ST_LCS_DAT *in_pLCS_DAT)\n\
    {\n\
    \tST_LCS_DAT* the_pCurLCS_DAT = in_pLCS_DAT;\n\
    \tST_LCS_DAT* the_pNextLCS_DAT = in_pLCS_DAT;\n\n\
    \twhile (the_pCurLCS_DAT) {\n\
    \t\tthe_pNextLCS_DAT = the_pCurLCS_DAT->next;\n\
    \t\t//free the_pCurLCS_DAT\n\
    \t\tif (the_pCurLCS_DAT->funcPair != NULL) {\n\
    \t\t\tfree(the_pCurLCS_DAT->funcPair);\n\
    \t\t\tthe_pCurLCS_DAT->funcPair = NULL;\n\
    \t\t}\n\
    \t\tif (the_pCurLCS_DAT->LCS != NULL) {\n\
    \t\t\tfree(the_pCurLCS_DAT->LCS);\n\
    \t\t\tthe_pCurLCS_DAT->LCS = NULL;\n\
    \t\t}\n\
    \t\tif (the_pCurLCS_DAT != NULL) {\n\
    \t\t\tfree(the_pCurLCS_DAT);\n\
    \t\t\tthe_pCurLCS_DAT = NULL;\n\
    \t\t}\n\
    \t\tthe_pCurLCS_DAT = the_pNextLCS_DAT;\n\
    \t}\n\
    }\n\n"
  updated_at: 2011-05-13 10:35:33
  analyzed_source_path_id: "161"
  id: "9879"
  subtask_id: "2"
source_codes_1041: 
  created_at: 2010-07-05 17:15:30
  error_line: "142"
  body: "    memset(the_pMeasureItem,0,argc * sizeof(char *));\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9747"
  subtask_id: "7"
source_codes_990: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: ""
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9696"
  subtask_id: "9"
source_codes_041: 
  created_at: 2010-07-05 17:09:12
  error_line: 
  body: |
    {
        /* ????? */
        int  the_iRet;                 /* Return?l */
        int  the_iMeasureType;         /* ?v??????F????v???A?????v?? */

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8747"
  subtask_id: "5"
source_codes_173: 
  created_at: 2010-07-05 17:09:15
  error_line: "292"
  body: "            strcat(the_szCurMetrics,\"?????\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8879"
  subtask_id: "5"
source_codes_1174: 
  created_at: 2010-07-05 17:17:12
  error_line: "0"
  body: ""
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9880"
  subtask_id: "2"
source_codes_1042: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: |
    
    the_pOption = the_pAnzInfo->m_option;
    /* ?f?t?H???g?l??Option????the_pCmdOption??????? */
    the_pOption->m_version = OFF;
    the_pOption->m_help = OFF;
    the_pOption->m_verbos = OFF;
    #ifdef __GNUC__
    strcpy(the_pOption->m_prefix,"./");
    #else
    strcpy(the_pOption->m_prefix,".\\");
    #endif
    strcpy(the_pOption->m_filePattern,"**/*.[CcHh]");
    strcpy(the_pOption->m_symbolFile,"");
    strcpy(the_pOption->m_optionFile,"");
    the_pOption->m_fileLOC = ON;
    the_pOption->m_redundancy = OFF;
    the_pOption->m_funcNum = OFF;
    the_pOption->m_eloc = OFF;
    the_pOption->m_mccabe = OFF;
    the_pOption->m_similar = OFF;
    the_pOption->m_trend = OFF;
    the_pOption->m_funcTrend = OFF;
    the_pOption->m_symThresh = 70;
    the_pOption->m_minThresh = 2;
    
    /* ?R?}???h???C??????????Option????????????m?? */

  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9748"
  subtask_id: "7"
source_codes_991: 
  created_at: 2010-07-05 17:14:28
  error_line: "604"
  body: "    signal( SIGINT  , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9697"
  subtask_id: "9"
source_codes_728: 
  created_at: 2010-07-05 17:11:51
  error_line: 
  body: |
    /*    signal( SIGIOT  , (void *)AbortAnalyzeMe); */

  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9434"
  subtask_id: "1"
source_codes_042: 
  created_at: 2010-07-05 17:09:12
  error_line: "75"
  body: "    char **the_pMeasureItem;       /* ?R?}???h???C???????????v????????X?g */\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8748"
  subtask_id: "5"
source_codes_174: 
  created_at: 2010-07-05 17:09:15
  error_line: 
  body: "        }\r\n    }\r\n    /* ELOC?v??Option???w?????? */\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8880"
  subtask_id: "5"
source_codes_1175: 
  created_at: 2010-07-05 17:17:12
  error_line: "1"
  body: |
    /*

  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9881"
  subtask_id: "2"
source_codes_1043: 
  created_at: 2010-07-05 17:15:30
  error_line: "169"
  body: "    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9749"
  subtask_id: "7"
source_codes_992: 
  created_at: 2010-07-05 17:14:28
  error_line: "605"
  body: "    signal( SIGQUIT , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9698"
  subtask_id: "9"
source_codes_860: 
  created_at: 2010-07-05 17:13:50
  error_line: 
  body: "                sprintf(the_szFullPath,\"%s/%s\",the_szCurPath,io_pPath);\r\n            }\r\n        }\r\n\
    #else\r\n        /* ?J?????gDir??????Dir??????? */\r\n        if((io_pPath[1] == ':' && io_pPath[2] == '\\\\') ||\r\n            (io_pPath[0] == '\\\\')) {\r\n            goto EXIT;\r\n        }\r\n        else {\r\n            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {\r\n                the_iRet = ANZ_ERROR;\r\n                goto EXIT;\r\n            }\r\n            if(strcmp(io_pPath,\"\") != 0) {\r\n                sprintf(the_szFullPath,\"%s\\\\%s\",the_szCurPath,io_pPath);\r\n            }\r\n        }\r\n\
    #endif\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9566"
  subtask_id: "11"
source_codes_729: 
  created_at: 2010-07-05 17:11:51
  error_line: "601"
  body: "    signal( SIGSEGV , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9435"
  subtask_id: "1"
source_codes_043: 
  created_at: 2010-07-05 17:09:12
  error_line: "76"
  body: "    char the_szCurMetrics[MAX_METRICS] = {0};/* ?J?????g?v??Metrics */\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8749"
  subtask_id: "5"
source_codes_175: 
  created_at: 2010-07-05 17:09:15
  error_line: "296"
  body: "    if(the_pOption->m_eloc){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8881"
  subtask_id: "5"
source_codes_1176: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: |+
    File:
       MemoryManagement.cpp
    Copyright:
       Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
       AnalyzeMe
    Abstract:
       AnalyzeMe?????????????
    Author:
       luo-jirong
    Date:
       2005/02/08
    REVISION HISTORY:
    
    */
    
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9882"
  subtask_id: "2"
source_codes_1044: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "    if(the_pCmdOption == NULL){\r\n        the_iRet = ANZ_ERR_MEMORY_FAILED;\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9750"
  subtask_id: "7"
source_codes_993: 
  created_at: 2010-07-05 17:14:28
  error_line: "606"
  body: "    signal( SIGKILL , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9699"
  subtask_id: "9"
source_codes_861: 
  created_at: 2010-07-05 17:13:50
  error_line: "621"
  body: "        strcpy(io_pPath,the_szFullPath);\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9567"
  subtask_id: "11"
source_codes_044: 
  created_at: 2010-07-05 17:09:12
  error_line: 
  body: "    ST_Option    *the_pCmdOption;    /* ?R?}???h???C??????????Option???? */\r\n    ST_AnalyzeMe *the_pAnzInfo;      /* AnalyzeMe??????? */\r\n    ST_Option    *the_pOption;       /* AnalyzeMe???????????Option???? */\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8750"
  subtask_id: "5"
source_codes_176: 
  created_at: 2010-07-05 17:09:15
  error_line: "297"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8882"
  subtask_id: "5"
source_codes_1177: 
  created_at: 2010-07-05 17:17:12
  error_line: "18"
  body: |
    /*

  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9883"
  subtask_id: "2"
source_codes_1045: 
  created_at: 2010-07-05 17:15:30
  error_line: "172"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9751"
  subtask_id: "7"
source_codes_994: 
  created_at: 2010-07-05 17:14:28
  error_line: "607"
  body: "    signal( SIGTERM , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9700"
  subtask_id: "9"
source_codes_862: 
  created_at: 2010-07-05 17:13:50
  error_line: 
  body: |+
    EXIT:
            return the_iRet;
    }
    
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9568"
  subtask_id: "11"
source_codes_730: 
  created_at: 2010-07-05 17:11:51
  error_line: "602"
  body: "    signal( SIGSYS , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9436"
  subtask_id: "1"
source_codes_045: 
  created_at: 2010-07-05 17:09:12
  error_line: "80"
  body: "    char *the_pTrace = NULL;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8751"
  subtask_id: "5"
source_codes_177: 
  created_at: 2010-07-05 17:09:16
  error_line: "298"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8883"
  subtask_id: "5"
source_codes_1178: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: "    $AnalyzeMe 2.0.0.0$\n\
    */\n\n"
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9884"
  subtask_id: "2"
source_codes_1046: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "    }\r\n    memset(the_pCmdOption,'\\0',sizeof(ST_Option));\r\n    /* ?f?t?H???g?l??Option????the_pCmdOption??????? */\r\n    the_pCmdOption->m_version = OFF;\r\n    the_pCmdOption->m_help = OFF;\r\n    the_pCmdOption->m_verbos = OFF;\r\n\
    #ifdef __GNUC__\r\n    strcpy(the_pCmdOption->m_prefix,\"./\");\r\n\
    #else\r\n    strcpy(the_pCmdOption->m_prefix,\".\\\\\");\r\n\
    #endif\r\n    strcpy(the_pCmdOption->m_filePattern,\"**/*.[CcHh]\");\r\n    strcpy(the_pCmdOption->m_symbolFile,\"\");\r\n    strcpy(the_pCmdOption->m_optionFile,\"\");\r\n    the_pCmdOption->m_fileLOC = ON;\r\n    the_pCmdOption->m_redundancy = OFF;\r\n    the_pCmdOption->m_funcNum = OFF;\r\n    the_pCmdOption->m_eloc = OFF;\r\n    the_pCmdOption->m_mccabe = OFF;\r\n    the_pCmdOption->m_similar = OFF;\r\n    the_pCmdOption->m_trend = OFF;\r\n    the_pCmdOption->m_funcTrend = OFF;\r\n    the_pCmdOption->m_symThresh = 70;\r\n    the_pCmdOption->m_minThresh = 2;\r\n\
    \r\n    /* ?R?}???h???C??????????? */\r\n    the_iRet = AnalyzeCmdLine(argc,argv,the_pCmdOption,the_pMeasureItem);\r\n    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9752"
  subtask_id: "7"
source_codes_995: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: |
    #else
        SetConsoleCtrlHandler(AbortAnalyzeMe, 1);
    #endif
        return;
    }
    
    /**
    *  ResetTrendPath
    *  ????p?X????????
    *  @param
    *         io_pPath  input Path
    *  @return
    *         ???
    *  @author luo-jirong
    */
    int ResetTrendPath(char *io_pPath)
    {
            char the_szFullPath[MAX_PATH];
            char the_szCurPath[MAX_PATH];
            int the_iRet;
    #ifdef __GNUC__
            /* ?J?????gDir??????Dir??????? */

  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9701"
  subtask_id: "9"
source_codes_863: 
  created_at: 2010-07-05 17:14:26
  error_line: 
  body: |
    /*
     File:
          analyzeme.c
     Copyright:
          Copyright (C) 2004 TOSHIBA CORPORATION. All Rights Reserved.
     Product:
          AnalyzeMe
     Abstract:
          AnalyzeMe????C??????????`????
     Author:
          zhang-gh
     Date:
          2004/08/20
     REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 1.0.0.1$
    */
    #include "analyzeme.h"
    #include "parse_cmdline.h"
    #include "common_measure.h"
    #include "trend_measure.h"
    #include "make_file_list.h"
    #include "output.h"
    #include "get_process_macro.h"
    #include <signal.h>
    #include <stdio.h>
    
    /****************************************************/
    /*              ????                            */
    /****************************************************/

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9569"
  subtask_id: "9"
source_codes_731: 
  created_at: 2010-07-05 17:11:51
  error_line: 
  body: ""
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9437"
  subtask_id: "1"
source_codes_046: 
  created_at: 2010-07-05 17:09:12
  error_line: "81"
  body: "    struct timeb the_st ;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8752"
  subtask_id: "5"
source_codes_178: 
  created_at: 2010-07-05 17:09:16
  error_line: "299"
  body: "            strcat(the_szCurMetrics,\"???ELOC\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8884"
  subtask_id: "5"
source_codes_1179: 
  created_at: 2010-07-05 17:17:12
  error_line: "22"
  body: |
    #include "MemoryManagement.h"

  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9885"
  subtask_id: "2"
source_codes_1047: 
  created_at: 2010-07-05 17:15:30
  error_line: "201"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9753"
  subtask_id: "7"
source_codes_996: 
  created_at: 2010-07-05 17:14:28
  error_line: "630"
  body: "        if(io_pPath[0] != '/') {\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9702"
  subtask_id: "9"
source_codes_864: 
  created_at: 2010-07-05 17:14:26
  error_line: "34"
  body: |
    const char* TRACEFILE = "analyzeme_trace.txt";

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9570"
  subtask_id: "9"
source_codes_600: 
  created_at: 2010-07-05 17:11:47
  error_line: "351"
  body: "            strcat(the_szCurMetrics,\"????????\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9306"
  subtask_id: "1"
source_codes_732: 
  created_at: 2010-07-05 17:11:51
  error_line: "604"
  body: "    signal( SIGINT  , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9438"
  subtask_id: "1"
source_codes_047: 
  created_at: 2010-07-05 17:09:12
  error_line: 
  body: "    struct timeb the_ed ;\r\n\
    \r\n    /* ????????? */\r\n    the_st.time = 0;\r\n    the_st.millitm = 0;\r\n    the_ed.time = 0;\r\n    the_ed.millitm = 0;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8753"
  subtask_id: "5"
source_codes_179: 
  created_at: 2010-07-05 17:09:16
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8885"
  subtask_id: "5"
source_codes_1600: 
  created_at: 2010-07-05 17:20:42
  error_line: 
  body: |+
    {
    	Message = in_useMsg;
    }
    
    FunRepetitionDefineExc::~FunRepetitionDefineExc()  throw() {}
    
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10306"
  subtask_id: "8"
source_codes_997: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: "            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {\r\n                the_iRet = ANZ_ERROR;\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9703"
  subtask_id: "9"
source_codes_865: 
  created_at: 2010-07-05 17:14:26
  error_line: "35"
  body: |
    const char* APPLOGFILE = "analyzeme_log.txt";

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9571"
  subtask_id: "9"
source_codes_601: 
  created_at: 2010-07-05 17:11:47
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9307"
  subtask_id: "1"
source_codes_733: 
  created_at: 2010-07-05 17:11:51
  error_line: "605"
  body: "    signal( SIGQUIT , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9439"
  subtask_id: "1"
source_codes_048: 
  created_at: 2010-07-05 17:09:12
  error_line: "89"
  body: "    the_pAnzInfo = NULL;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8754"
  subtask_id: "5"
source_codes_1048: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "    }\r\n    if(g_bOutTime) {\r\n        ftime(&the_st);\r\n    }\r\n\
    \r\n    /* Option??????????? */\r\n    the_iRet = SetOption(the_pAnzInfo,the_pCmdOption);\r\n    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9754"
  subtask_id: "7"
source_codes_998: 
  created_at: 2010-07-05 17:14:28
  error_line: "633"
  body: "                goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9704"
  subtask_id: "9"
source_codes_866: 
  created_at: 2010-07-05 17:14:26
  error_line: 
  body: |
    
    /****************************************************/
    /*              ?O???[?o???????                  */
    /****************************************************/
    /* ????????File??n???h????????????O???[?o???????? */
    
    /* Log File */

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9572"
  subtask_id: "9"
source_codes_602: 
  created_at: 2010-07-05 17:11:47
  error_line: "353"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9308"
  subtask_id: "1"
source_codes_734: 
  created_at: 2010-07-05 17:11:51
  error_line: "606"
  body: "    signal( SIGKILL , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9440"
  subtask_id: "1"
source_codes_049: 
  created_at: 2010-07-05 17:09:12
  error_line: 
  body: "    the_pCmdOption = NULL;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8755"
  subtask_id: "5"
source_codes_1180: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: ""
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9886"
  subtask_id: "2"
source_codes_1049: 
  created_at: 2010-07-05 17:15:30
  error_line: "210"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9755"
  subtask_id: "7"
source_codes_999: 
  created_at: 2010-07-05 17:14:28
  error_line: 
  body: "            }\r\n"
  updated_at: 2011-05-13 10:35:39
  analyzed_source_path_id: "168"
  id: "9705"
  subtask_id: "9"
source_codes_867: 
  created_at: 2010-07-05 17:14:26
  error_line: "43"
  body: |
    FILE *g_fpLogFile = NULL;       /* Log File pointer */

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9573"
  subtask_id: "9"
source_codes_603: 
  created_at: 2010-07-05 17:11:48
  error_line: "354"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9309"
  subtask_id: "1"
source_codes_735: 
  created_at: 2010-07-05 17:11:51
  error_line: "607"
  body: "    signal( SIGTERM , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9441"
  subtask_id: "1"
source_codes_180: 
  created_at: 2010-07-05 17:09:16
  error_line: "301"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8886"
  subtask_id: "5"
source_codes_1181: 
  created_at: 2010-07-05 17:17:12
  error_line: "24"
  body: |
    #ifdef MEMORY_DEBUG

  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9887"
  subtask_id: "2"
source_codes_868: 
  created_at: 2010-07-05 17:14:26
  error_line: 
  body: |
    /*  Trace File */

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9574"
  subtask_id: "9"
source_codes_604: 
  created_at: 2010-07-05 17:11:48
  error_line: "355"
  body: "            strcat(the_szCurMetrics,\"?????X??\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9310"
  subtask_id: "1"
source_codes_736: 
  created_at: 2010-07-05 17:11:51
  error_line: 
  body: |
    #else
        SetConsoleCtrlHandler(AbortAnalyzeMe, 1);
    #endif
        return;
    }
    
    /**
    *  ResetTrendPath
    *  ????p?X????????
    *  @param
    *         io_pPath  input Path
    *  @return
    *         ???
    *  @author luo-jirong

  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9442"
  subtask_id: "1"
source_codes_181: 
  created_at: 2010-07-05 17:09:16
  error_line: "302"
  body: "            strcat(the_szCurMetrics,\"???ELOC\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8887"
  subtask_id: "5"
source_codes_1182: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: ""
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9888"
  subtask_id: "2"
source_codes_1050: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "    }\r\n    /* ?v?????????????? */\r\n    the_iRet = GetMeasureType(the_pOption,&the_iMeasureType);\r\n    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9756"
  subtask_id: "7"
source_codes_869: 
  created_at: 2010-07-05 17:14:26
  error_line: "45"
  body: |
    FILE *g_fpTraceFile = NULL;     /* Trace File pointer */

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9575"
  subtask_id: "9"
source_codes_605: 
  created_at: 2010-07-05 17:11:48
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9311"
  subtask_id: "1"
source_codes_737: 
  created_at: 2010-07-05 17:11:51
  error_line: "622"
  body: |
    */

  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9443"
  subtask_id: "1"
source_codes_050: 
  created_at: 2010-07-05 17:09:12
  error_line: "91"
  body: "    the_iRet = ANZ_SUCCESS;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8756"
  subtask_id: "5"
source_codes_182: 
  created_at: 2010-07-05 17:09:16
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8888"
  subtask_id: "5"
source_codes_1183: 
  created_at: 2010-07-05 17:17:12
  error_line: "26"
  body: |
    static FILE *the_fpMemLog = NULL;			/* ????????Trace?t?@?C????n???h?? */

  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9889"
  subtask_id: "2"
source_codes_1051: 
  created_at: 2010-07-05 17:15:30
  error_line: "215"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9757"
  subtask_id: "7"
source_codes_606: 
  created_at: 2010-07-05 17:11:48
  error_line: "357"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9312"
  subtask_id: "1"
source_codes_738: 
  created_at: 2010-07-05 17:11:51
  error_line: "623"
  body: |
    int ResetTrendPath(char *io_pPath)

  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9444"
  subtask_id: "1"
source_codes_051: 
  created_at: 2010-07-05 17:09:12
  error_line: 
  body: "    the_pMeasureItem = NULL;\r\n\
    \r\n\
    #ifdef _DEBUG\r\n    InitMemMan();\r\n\
    #endif\r\n\
    \r\n    /* ?V?O?i???n???h????o?^?@*/\r\n    SetSignal() ;\r\n\
    \r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8757"
  subtask_id: "5"
source_codes_183: 
  created_at: 2010-07-05 17:09:16
  error_line: "304"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8889"
  subtask_id: "5"
source_codes_1184: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: |+
    static ST_MemoryInfo *the_miHeader = NULL;	/* ST_MemoryInfo??Head point */
    static ST_MemoryInfo *the_miPreNode = NULL;	/* ?ONode */
    const char *MEMLOGFILE = "memlog.txt";		/* ????????Trace?t?@?C???? */
    
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9890"
  subtask_id: "2"
source_codes_1052: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "    }\r\n    /* ?R?}???h???C??????????Option??????????????? */\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9758"
  subtask_id: "7"
source_codes_052: 
  created_at: 2010-07-05 17:09:12
  error_line: "101"
  body: "    the_pTrace = getenv(\"AnzTrace\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8758"
  subtask_id: "5"
source_codes_184: 
  created_at: 2010-07-05 17:09:16
  error_line: "305"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8890"
  subtask_id: "5"
source_codes_1185: 
  created_at: 2010-07-05 17:17:12
  error_line: "31"
  body: |
    /**

  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9891"
  subtask_id: "2"
source_codes_1053: 
  created_at: 2010-07-05 17:15:30
  error_line: "218"
  body: "    if(the_pCmdOption != NULL){\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9759"
  subtask_id: "7"
source_codes_870: 
  created_at: 2010-07-05 17:14:26
  error_line: 
  body: |
    /* ?G???[File */

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9576"
  subtask_id: "9"
source_codes_607: 
  created_at: 2010-07-05 17:11:48
  error_line: "358"
  body: "            strcat(the_szCurMetrics,\"?????X??\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9313"
  subtask_id: "1"
source_codes_739: 
  created_at: 2010-07-05 17:11:51
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9445"
  subtask_id: "1"
source_codes_053: 
  created_at: 2010-07-05 17:09:12
  error_line: "102"
  body: "    if(the_pTrace != NULL) {\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8759"
  subtask_id: "5"
source_codes_185: 
  created_at: 2010-07-05 17:09:16
  error_line: "306"
  body: "            strcat(the_szCurMetrics,\"FileELOC\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8891"
  subtask_id: "5"
source_codes_1186: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: |+
    *  InitMemMan
    *  ??????MemMan 
    *  @param  
    *          ???
    *  @return 
    *          ???
    *  @author luo-jirong
    */
    void InitMemMan()
    {
    	the_fpMemLog = fopen(MEMLOGFILE, "w");
    	if (the_fpMemLog == NULL) {
    		printf("\nMemLog.txt???I?[?v????????????s????????B");
    	}
    }
    
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9892"
  subtask_id: "2"
source_codes_1054: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "        free(the_pCmdOption);\r\n        the_pCmdOption = NULL;\r\n    }\r\n    /* ?v???????`?F?b?N???? */\r\n    the_iRet = CheckMeasureItem(the_pMeasureItem,the_iMeasureType);\r\n    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9760"
  subtask_id: "7"
source_codes_871: 
  created_at: 2010-07-05 17:14:26
  error_line: "47"
  body: |
    FILE *g_fpErrorFile = NULL;

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9577"
  subtask_id: "9"
source_codes_608: 
  created_at: 2010-07-05 17:11:48
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9314"
  subtask_id: "1"
source_codes_054: 
  created_at: 2010-07-05 17:09:12
  error_line: "103"
  body: "        if(strcmp(the_pTrace,\"ON\") == 0 ) {\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8760"
  subtask_id: "5"
source_codes_186: 
  created_at: 2010-07-05 17:09:16
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8892"
  subtask_id: "5"
source_codes_1187: 
  created_at: 2010-07-05 17:17:12
  error_line: "48"
  body: |
    /**

  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9893"
  subtask_id: "2"
source_codes_1055: 
  created_at: 2010-07-05 17:15:30
  error_line: "225"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9761"
  subtask_id: "7"
source_codes_872: 
  created_at: 2010-07-05 17:14:26
  error_line: 
  body: ""
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9578"
  subtask_id: "9"
source_codes_609: 
  created_at: 2010-07-05 17:11:48
  error_line: "360"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9315"
  subtask_id: "1"
source_codes_055: 
  created_at: 2010-07-05 17:09:12
  error_line: 
  body: "            g_bTrace = true;\r\n        }\r\n    }\r\n    /* TraceFile??LogFile???J?? */\r\n\
    \t/*\r\n    g_fpTraceFile = fopen(TRACEFILE,\"w\");\r\n    if(g_fpTraceFile == NULL){\r\n        printf(\"Create trace file failed!\\n\");\r\n    }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8761"
  subtask_id: "5"
source_codes_187: 
  created_at: 2010-07-05 17:09:16
  error_line: "308"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8893"
  subtask_id: "5"
source_codes_740: 
  created_at: 2010-07-05 17:11:51
  error_line: "625"
  body: "        char the_szFullPath[MAX_PATH];\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9446"
  subtask_id: "1"
source_codes_1188: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: |+
    *  DestoryMemMan
    *  ??????????   
    *  @param  
    *          ???
    *  @return 
    *          ???
    *  @author luo-jirong
    */
    void DestoryMemMan()
    {
    	if (the_fpMemLog != NULL ) {
    		fclose(the_fpMemLog);
    	}
    }
    
    
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9894"
  subtask_id: "2"
source_codes_1056: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "    }\r\n    /* ?G???[File???J?? */\r\n    the_iRet = OpenErrorFile(the_pOption);\r\n    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9762"
  subtask_id: "7"
source_codes_873: 
  created_at: 2010-07-05 17:14:26
  error_line: "49"
  body: |
    int g_iAdd;

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9579"
  subtask_id: "9"
source_codes_056: 
  created_at: 2010-07-05 17:09:12
  error_line: "113"
  body: "\t*/\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8762"
  subtask_id: "5"
source_codes_188: 
  created_at: 2010-07-05 17:09:16
  error_line: "309"
  body: "            strcat(the_szCurMetrics,\"FileELOC\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8894"
  subtask_id: "5"
source_codes_741: 
  created_at: 2010-07-05 17:11:51
  error_line: "626"
  body: "        char the_szCurPath[MAX_PATH];\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9447"
  subtask_id: "1"
source_codes_1189: 
  created_at: 2010-07-05 17:17:12
  error_line: "65"
  body: |
    /**

  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9895"
  subtask_id: "2"
source_codes_1057: 
  created_at: 2010-07-05 17:15:30
  error_line: "230"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9763"
  subtask_id: "7"
source_codes_874: 
  created_at: 2010-07-05 17:14:26
  error_line: "50"
  body: |
    int g_iSubtract;

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9580"
  subtask_id: "9"
source_codes_057: 
  created_at: 2010-07-05 17:09:12
  error_line: "114"
  body: "    g_fpLogFile = fopen(APPLOGFILE,\"w\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8763"
  subtask_id: "5"
source_codes_189: 
  created_at: 2010-07-05 17:09:16
  error_line: 
  body: "        }\r\n    }\r\n\
    \r\n    /* ???G?x?v??Option???w?????? */\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8895"
  subtask_id: "5"
source_codes_610: 
  created_at: 2010-07-05 17:11:48
  error_line: "361"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9316"
  subtask_id: "1"
source_codes_742: 
  created_at: 2010-07-05 17:11:51
  error_line: "627"
  body: "        int the_iRet = ANZ_SUCCESS;\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9448"
  subtask_id: "1"
source_codes_1058: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "    }\r\n    /* ????????t?@?C????? */\r\n    if(the_iMeasureType == ANZ_TREND_MEASURE) {\r\n        int the_iType = -1;\r\n        int the_pPos = -1;\r\n        isDirOrFile(*the_pMeasureItem,&the_iType);\r\n        if(the_iType == ANZ_FILE) {\r\n            g_bTrendFile = true;\r\n            /* the_pMeasureItme??Path?????????? */\r\n            GetPathPos(*the_pMeasureItem,&the_pPos);\r\n            g_szNVPath[the_pPos] = '\\0';\r\n            if(the_pPos > 0) {\r\n                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;\r\n            }\r\n\
    \r\n            GetPathPos(*(the_pMeasureItem + 1),&the_pPos);\r\n            g_szOVPath[the_pPos] = '\\0';\r\n            if(the_pPos > 0) {\r\n                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;\r\n            }\r\n            /* g_szNVPath?Ag_szOVPath??????p?X???X???? */\r\n            the_iRet = ResetTrendPath(g_szNVPath);\r\n            the_iRet = ResetTrendPath(g_szOVPath);\r\n            if(the_iRet != ANZ_SUCCESS) {\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9764"
  subtask_id: "7"
source_codes_875: 
  created_at: 2010-07-05 17:14:27
  error_line: "51"
  body: |
    int g_iTmp;

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9581"
  subtask_id: "9"
source_codes_058: 
  created_at: 2010-07-05 17:09:12
  error_line: "115"
  body: "    if(g_fpLogFile == NULL){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8764"
  subtask_id: "5"
source_codes_611: 
  created_at: 2010-07-05 17:11:48
  error_line: "362"
  body: "            strcat(the_szCurMetrics,\"File?????(2)\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9317"
  subtask_id: "1"
source_codes_743: 
  created_at: 2010-07-05 17:11:51
  error_line: 
  body: |
    #ifdef __GNUC__
            /* ?J?????gDir??????Dir??????? */

  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9449"
  subtask_id: "1"
source_codes_876: 
  created_at: 2010-07-05 17:14:27
  error_line: "52"
  body: |
    bool g_bTrace;    /* Trace flag */

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9582"
  subtask_id: "9"
source_codes_059: 
  created_at: 2010-07-05 17:09:12
  error_line: "116"
  body: "        printf(\"Create log file failed!\\n\");   /* */\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8765"
  subtask_id: "5"
source_codes_612: 
  created_at: 2010-07-05 17:11:48
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9318"
  subtask_id: "1"
source_codes_744: 
  created_at: 2010-07-05 17:11:51
  error_line: "630"
  body: "        if(io_pPath[0] != '/') {\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9450"
  subtask_id: "1"
source_codes_1190: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: |+
    *  TraceMem
    *  ???????g???[?X   
    *  @param  
    *          ???
    *  @return 
    *          ???
    *  @author luo-jirong
    */
    static void TraceMem(const char *in_fmt, ...)
    {
    	if (the_fpMemLog == NULL) {
    		return ;
    	}
    
    	{
    		va_list the_args;
    		char the_szBuffer[MAXLINE];
    		va_start( the_args, in_fmt );
    		vsprintf( the_szBuffer, in_fmt, the_args );
    		fputs(the_szBuffer, the_fpMemLog);
    	}
    }
    
    
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9896"
  subtask_id: "2"
source_codes_1059: 
  created_at: 2010-07-05 17:15:30
  error_line: "255"
  body: "                goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9765"
  subtask_id: "7"
source_codes_877: 
  created_at: 2010-07-05 17:14:27
  error_line: "53"
  body: |
    char g_szNVPath[MAX_PATH] = {

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9583"
  subtask_id: "9"
source_codes_190: 
  created_at: 2010-07-05 17:09:16
  error_line: "314"
  body: "    if(the_pOption->m_redundancy){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8896"
  subtask_id: "5"
source_codes_613: 
  created_at: 2010-07-05 17:11:48
  error_line: "364"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9319"
  subtask_id: "1"
source_codes_745: 
  created_at: 2010-07-05 17:11:51
  error_line: "631"
  body: "            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9451"
  subtask_id: "1"
source_codes_1191: 
  created_at: 2010-07-05 17:17:12
  error_line: "90"
  body: |
    /**

  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9897"
  subtask_id: "2"
source_codes_878: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: |
    0
    };

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9584"
  subtask_id: "9"
source_codes_191: 
  created_at: 2010-07-05 17:09:16
  error_line: "315"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8897"
  subtask_id: "5"
source_codes_614: 
  created_at: 2010-07-05 17:11:48
  error_line: "365"
  body: "            strcat(the_szCurMetrics,\"File?????(2)\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9320"
  subtask_id: "1"
source_codes_746: 
  created_at: 2010-07-05 17:11:51
  error_line: 
  body: "                the_iRet = ANZ_ERROR;\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9452"
  subtask_id: "1"
source_codes_1192: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: |
    *  NewMalloc
    *  ???????m??   
    *  @param  
    *          ???
    *  @return 
    *          ???
    *  @author luo-jirong
    */
    void *RecordMalloc(unsigned int in_size, char *in_name)
    {

  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9898"
  subtask_id: "2"
source_codes_1060: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "            }\r\n        }\r\n    }\r\n    /* ?v?????File??List???????? */\r\n    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);\r\n    if(the_iRet == ANZ_NO_MEASURE_FILES){\r\n        printf(\"%s\\n\",MSG_NO_FILES);\r\n    }\r\n    if(the_iRet == ANZ_ERR_MEMORY_FAILED){\r\n        printf(\"%s\\n\",MSG_MOMORY_FAILED);\r\n    }\r\n    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9766"
  subtask_id: "7"
source_codes_879: 
  created_at: 2010-07-05 17:14:27
  error_line: "56"
  body: |
    char g_szOVPath[MAX_PATH] = {0};

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9585"
  subtask_id: "9"
source_codes_060: 
  created_at: 2010-07-05 17:09:12
  error_line: 
  body: "    }\r\n\
    \r\n    /* AnalyzeMe???????????????m?? */\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8766"
  subtask_id: "5"
source_codes_192: 
  created_at: 2010-07-05 17:09:17
  error_line: "316"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8898"
  subtask_id: "5"
source_codes_615: 
  created_at: 2010-07-05 17:11:48
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9321"
  subtask_id: "1"
source_codes_747: 
  created_at: 2010-07-05 17:11:51
  error_line: "633"
  body: "                goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9453"
  subtask_id: "1"
source_codes_1193: 
  created_at: 2010-07-05 17:17:12
  error_line: "101"
  body: |
    #undef malloc

  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9899"
  subtask_id: "2"
source_codes_1061: 
  created_at: 2010-07-05 17:15:30
  error_line: "268"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9767"
  subtask_id: "7"
source_codes_061: 
  created_at: 2010-07-05 17:09:13
  error_line: "120"
  body: "    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8767"
  subtask_id: "5"
source_codes_193: 
  created_at: 2010-07-05 17:09:17
  error_line: "317"
  body: "            strcat(the_szCurMetrics,\"McCabe????G?x\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8899"
  subtask_id: "5"
source_codes_616: 
  created_at: 2010-07-05 17:11:48
  error_line: "367"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9322"
  subtask_id: "1"
source_codes_748: 
  created_at: 2010-07-05 17:11:51
  error_line: 
  body: "            }\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9454"
  subtask_id: "1"
source_codes_1194: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: "\tvoid * the_pv ;\n\
    \tST_MemoryInfo *the_miTmp ;\n\
    \tthe_pv = malloc(in_size);\n\
    \tif (the_pv == NULL) {\n\
    \t\tgoto EXIT;\n\
    \t}\n"
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9900"
  subtask_id: "2"
source_codes_1062: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "    }\r\n    /* ?o?R???????????? */\r\n    /* FileLOC?v??Option???w?????? */\r\n    if(the_pOption->m_fileLOC == ON){\r\n        strcat(the_szCurMetrics,\"FileLOC\");\r\n    }\r\n    /* File???x?v??Option???w?????? */\r\n    if(the_pOption->m_redundancy == ON){\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9768"
  subtask_id: "7"
source_codes_062: 
  created_at: 2010-07-05 17:09:13
  error_line: "121"
  body: "    if(the_pAnzInfo == NULL){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8768"
  subtask_id: "5"
source_codes_194: 
  created_at: 2010-07-05 17:09:17
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8900"
  subtask_id: "5"
source_codes_617: 
  created_at: 2010-07-05 17:11:49
  error_line: "368"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9323"
  subtask_id: "1"
source_codes_749: 
  created_at: 2010-07-05 17:11:51
  error_line: "635"
  body: "            if(strcmp(io_pPath,\"\") != 0) {\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9455"
  subtask_id: "1"
source_codes_1195: 
  created_at: 2010-07-05 17:17:12
  error_line: "108"
  body: "\t/* ??????Block??????? */\n"
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9901"
  subtask_id: "2"
source_codes_1063: 
  created_at: 2010-07-05 17:15:30
  error_line: "277"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9769"
  subtask_id: "7"
source_codes_880: 
  created_at: 2010-07-05 17:14:27
  error_line: "57"
  body: |
    bool g_bTrendFile = false;

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9586"
  subtask_id: "9"
source_codes_063: 
  created_at: 2010-07-05 17:09:13
  error_line: "122"
  body: "        the_iRet = ANZ_ERR_MEMORY_FAILED;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8769"
  subtask_id: "5"
source_codes_195: 
  created_at: 2010-07-05 17:09:17
  error_line: "319"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8901"
  subtask_id: "5"
source_codes_1196: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: "\tmemset(the_pv, GFILLVALUE, in_size);\n\n\
    \tthe_miTmp = (ST_MemoryInfo *)malloc(sizeof(ST_MemoryInfo));\n\
    \tif (the_miTmp == NULL) {\n\
    \t\tgoto EXIT;\n\
    \t}\n\
    \tmemset(the_miTmp, '\\0', sizeof(ST_MemoryInfo));\n\
    \tTraceMem(\"\\ns> [%ld] allocated success!\", in_name, the_pv);\n"
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9902"
  subtask_id: "2"
source_codes_1064: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"File???x\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9770"
  subtask_id: "7"
source_codes_881: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: |
    /* Option File????e??????????O???[?o???????? */

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9587"
  subtask_id: "9"
source_codes_064: 
  created_at: 2010-07-05 17:09:13
  error_line: "123"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8770"
  subtask_id: "5"
source_codes_196: 
  created_at: 2010-07-05 17:09:17
  error_line: "320"
  body: "            strcat(the_szCurMetrics,\"McCabe????G?x\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8902"
  subtask_id: "5"
source_codes_618: 
  created_at: 2010-07-05 17:11:49
  error_line: "369"
  body: "            strcat(the_szCurMetrics,\"File??X??(2)\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9324"
  subtask_id: "1"
source_codes_1197: 
  created_at: 2010-07-05 17:17:12
  error_line: "117"
  body: "\t/* Node??List??u?? */\n"
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9903"
  subtask_id: "2"
source_codes_1065: 
  created_at: 2010-07-05 17:15:30
  error_line: "281"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9771"
  subtask_id: "7"
source_codes_882: 
  created_at: 2010-07-05 17:14:27
  error_line: "59"
  body: |
    char *g_optionFileCont = NULL;

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9588"
  subtask_id: "9"
source_codes_065: 
  created_at: 2010-07-05 17:09:13
  error_line: 
  body: "    }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8771"
  subtask_id: "5"
source_codes_197: 
  created_at: 2010-07-05 17:09:17
  error_line: 
  body: "        }\r\n\
    \r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8903"
  subtask_id: "5"
source_codes_750: 
  created_at: 2010-07-05 17:11:52
  error_line: "636"
  body: "                sprintf(the_szFullPath,\"%s/%s\",the_szCurPath,io_pPath);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9456"
  subtask_id: "1"
source_codes_619: 
  created_at: 2010-07-05 17:11:49
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9325"
  subtask_id: "1"
source_codes_1198: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: "\tif (the_miHeader == NULL) {\n\
    \t\tthe_miHeader = the_miTmp;\n\
    \t\tthe_miPreNode = the_miTmp;\n\
    \t} else {\n\
    \t\tthe_miPreNode->m_next = the_miTmp;\n\
    \t\tthe_miPreNode = the_miTmp;\n\
    \t}\n\
    \tthe_miTmp->m_ps = the_pv;\n\
    \tthe_miTmp->m_size = in_size;\n\
    \tif (strlen(in_name) > 30) {\n\
    \t\tstrncpy(the_miTmp->m_name, in_name, 30);\n\
    \t} else {\n\
    \t\tstrcpy(the_miTmp->m_name, in_name);\n\
    \t}\n\
    \tthe_miTmp->m_next = NULL;\n\n\
    EXIT:\n\
    #define malloc NewMalloc\n\n\
    \treturn the_pv;\n\n\
    }\n\n"
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9904"
  subtask_id: "2"
source_codes_1066: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "            strcat(the_szCurMetrics,\"File???x\");\r\n        }\r\n    }\r\n    /* ??????v??Option???w?????? */\r\n    if(the_pOption->m_funcNum){\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9772"
  subtask_id: "7"
source_codes_883: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: |
    /* Symbol File????e??????????O???[?o???????? */

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9589"
  subtask_id: "9"
source_codes_066: 
  created_at: 2010-07-05 17:09:13
  error_line: "125"
  body: "    memset(the_pAnzInfo,'\\0',sizeof(ST_AnalyzeMe));\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8772"
  subtask_id: "5"
source_codes_198: 
  created_at: 2010-07-05 17:09:17
  error_line: "323"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8904"
  subtask_id: "5"
source_codes_751: 
  created_at: 2010-07-05 17:11:52
  error_line: 
  body: "            }\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9457"
  subtask_id: "1"
source_codes_1199: 
  created_at: 2010-07-05 17:17:12
  error_line: "141"
  body: |
    /**

  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9905"
  subtask_id: "2"
source_codes_1067: 
  created_at: 2010-07-05 17:15:30
  error_line: "287"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9773"
  subtask_id: "7"
source_codes_884: 
  created_at: 2010-07-05 17:14:27
  error_line: "61"
  body: |
    char *g_symbolFileCont = NULL;

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9590"
  subtask_id: "9"
source_codes_067: 
  created_at: 2010-07-05 17:09:13
  error_line: 
  body: "    g_pAnzInfo = the_pAnzInfo;\r\n    /* AnalyzeMe???????????Option????????????m?? */\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8773"
  subtask_id: "5"
source_codes_199: 
  created_at: 2010-07-05 17:09:17
  error_line: "324"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8905"
  subtask_id: "5"
source_codes_620: 
  created_at: 2010-07-05 17:11:49
  error_line: "371"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9326"
  subtask_id: "1"
source_codes_752: 
  created_at: 2010-07-05 17:11:52
  error_line: "639"
  body: "        else {\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9458"
  subtask_id: "1"
source_codes_1068: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"?????\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9774"
  subtask_id: "7"
source_codes_885: 
  created_at: 2010-07-05 17:14:27
  error_line: "62"
  body: |
    bool g_bOutTime = false;

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9591"
  subtask_id: "9"
source_codes_068: 
  created_at: 2010-07-05 17:09:13
  error_line: "128"
  body: "    AnzMalloc(the_pAnzInfo->m_option,ST_Option*,sizeof(ST_Option));\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8774"
  subtask_id: "5"
source_codes_621: 
  created_at: 2010-07-05 17:11:49
  error_line: "372"
  body: "            strcat(the_szCurMetrics,\"File??X??(2)\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9327"
  subtask_id: "1"
source_codes_753: 
  created_at: 2010-07-05 17:11:52
  error_line: "640"
  body: "            goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9459"
  subtask_id: "1"
source_codes_1069: 
  created_at: 2010-07-05 17:15:30
  error_line: "291"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9775"
  subtask_id: "7"
source_codes_886: 
  created_at: 2010-07-05 17:14:27
  error_line: "63"
  body: |
    ST_AnalyzeMe *g_pAnzInfo;  /* AnalyzeMe??????? */

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9592"
  subtask_id: "9"
source_codes_069: 
  created_at: 2010-07-05 17:09:13
  error_line: "129"
  body: "    if(the_pAnzInfo->m_option == NULL){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8775"
  subtask_id: "5"
source_codes_622: 
  created_at: 2010-07-05 17:11:49
  error_line: 
  body: "        }\r\n\
    \r\n    }\r\n    /* ?v???J?n,?o?R???????o????? */\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9328"
  subtask_id: "1"
source_codes_754: 
  created_at: 2010-07-05 17:11:52
  error_line: 
  body: "        }\r\n\
    #else\r\n        /* ?J?????gDir??????Dir??????? */\r\n        if((io_pPath[1] == ':' && io_pPath[2] == '\\\\') ||\r\n            (io_pPath[0] == '\\\\')) {\r\n            goto EXIT;\r\n        }\r\n        else {\r\n            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {\r\n                the_iRet = ANZ_ERROR;\r\n                goto EXIT;\r\n            }\r\n            if(strcmp(io_pPath,\"\") != 0) {\r\n                sprintf(the_szFullPath,\"%s\\\\%s\",the_szCurPath,io_pPath);\r\n            }\r\n        }\r\n\
    #endif\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9460"
  subtask_id: "1"
source_codes_887: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: |
    /**
    *  main
    *  AnalyzeMe????C?????
    *  @param  argc ?R?}???h???C??????????
    *  @param  argv ?R?}???h???C?????????z??
    *  @return
               ANZ_SUCCESS:?????I??
               ANZ_ERROR  :????I??
    *  @author zhang-gh
    */
    int main(int argc,char * argv[])
    {
        /* ????? */
        int  the_iRet;                 /* Return?l */
        int  the_iMeasureType;         /* ?v??????F????v???A?????v?? */
        char **the_pMeasureItem;       /* ?R?}???h???C???????????v????????X?g */
        char the_szCurMetrics[MAX_METRICS] = {0};/* ?J?????g?v??Metrics */
        ST_Option    *the_pCmdOption;    /* ?R?}???h???C??????????Option???? */
        ST_AnalyzeMe *the_pAnzInfo;      /* AnalyzeMe??????? */
        ST_Option    *the_pOption;       /* AnalyzeMe???????????Option???? */
        char *the_pTrace = NULL;
        struct timeb the_st ;
        struct timeb the_ed ;
    
        /* ????????? */
        the_st.time = 0;
        the_st.millitm = 0;
        the_ed.time = 0;
        the_ed.millitm = 0;
        the_pAnzInfo = NULL;
        the_pCmdOption = NULL;
        the_iRet = ANZ_SUCCESS;
        the_pMeasureItem = NULL;
    
    #ifdef _DEBUG
        InitMemMan();
    #endif
    
        /* ?V?O?i???n???h????o?^?@*/
        SetSignal() ;
    
        the_pTrace = getenv("AnzTrace");
        if(the_pTrace != NULL) {

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9593"
  subtask_id: "9"
source_codes_623: 
  created_at: 2010-07-05 17:11:49
  error_line: "377"
  body: "    if(the_pOption->m_verbos == ON ){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9329"
  subtask_id: "1"
source_codes_755: 
  created_at: 2010-07-05 17:11:52
  error_line: "658"
  body: "        strcpy(io_pPath,the_szFullPath);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9461"
  subtask_id: "1"
source_codes_888: 
  created_at: 2010-07-05 17:14:27
  error_line: "107"
  body: "        if(strcmp(the_pTrace,\"ON\") == 0 ) {\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9594"
  subtask_id: "9"
source_codes_624: 
  created_at: 2010-07-05 17:11:49
  error_line: 
  body: "        /* ?o?R???????o????? */\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9330"
  subtask_id: "1"
source_codes_756: 
  created_at: 2010-07-05 17:11:52
  error_line: "659"
  body: |
    EXIT:

  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9462"
  subtask_id: "1"
source_codes_1070: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?????\");\r\n        }\r\n    }\r\n    /* ELOC?v??Option???w?????? */\r\n    if(the_pOption->m_eloc){\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9776"
  subtask_id: "7"
source_codes_889: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "            g_bTrace = true;\r\n        }\r\n    }\r\n    /* TraceFile??LogFile???J?? */\r\n\
    \t/*\r\n    g_fpTraceFile = fopen(TRACEFILE,\"w\");\r\n    if(g_fpTraceFile == NULL){\r\n        printf(\"Create trace file failed!\\n\");\r\n    }\r\n\
    \t*/\r\n    g_fpLogFile = fopen(APPLOGFILE,\"w\");\r\n    if(g_fpLogFile == NULL){\r\n        printf(\"Create log file failed!\\n\");   /* */\r\n    }\r\n\
    \r\n    /* AnalyzeMe???????????????m?? */\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9595"
  subtask_id: "9"
source_codes_625: 
  created_at: 2010-07-05 17:11:49
  error_line: "379"
  body: "        printf(\"%s%s\\n\",the_szCurMetrics,MSG_METRIC_START);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9331"
  subtask_id: "1"
source_codes_757: 
  created_at: 2010-07-05 17:11:52
  error_line: "660"
  body: "        return the_iRet;\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9463"
  subtask_id: "1"
source_codes_070: 
  created_at: 2010-07-05 17:09:13
  error_line: "130"
  body: "        the_iRet = ANZ_ERR_MEMORY_FAILED;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8776"
  subtask_id: "5"
source_codes_1071: 
  created_at: 2010-07-05 17:15:30
  error_line: "297"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9777"
  subtask_id: "7"
source_codes_626: 
  created_at: 2010-07-05 17:11:49
  error_line: 
  body: "    }\r\n\
    \r\n    /* ?v???O?A?K?v??v??????File???J?? */\r\n    the_iRet = OpenResultFile(the_pOption);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9332"
  subtask_id: "1"
source_codes_758: 
  created_at: 2010-07-05 17:11:52
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9464"
  subtask_id: "1"
source_codes_071: 
  created_at: 2010-07-05 17:09:13
  error_line: "131"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8777"
  subtask_id: "5"
source_codes_1072: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"???ELOC\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9778"
  subtask_id: "7"
source_codes_627: 
  created_at: 2010-07-05 17:11:49
  error_line: "384"
  body: "    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9333"
  subtask_id: "1"
source_codes_759: 
  created_at: 2010-07-05 17:13:48
  error_line: 
  body: |
    /*
     File:
          analyzeme.c
     Copyright:
          Copyright (C) 2004 TOSHIBA CORPORATION. All Rights Reserved.
     Product:
          AnalyzeMe
     Abstract:
          AnalyzeMe????C??????????`????
     Author:
          zhang-gh
     Date:
          2004/08/20
     REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 1.0.0.1$
    */
    #include "analyzeme.h"
    #include "parse_cmdline.h"
    #include "common_measure.h"
    #include "trend_measure.h"
    #include "make_file_list.h"
    #include "output.h"
    #include "get_process_macro.h"
    
    /****************************************************/
    /*              ????                            */
    /****************************************************/

  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9465"
  subtask_id: "11"
source_codes_072: 
  created_at: 2010-07-05 17:09:13
  error_line: 
  body: "    }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8778"
  subtask_id: "5"
source_codes_1073: 
  created_at: 2010-07-05 17:15:30
  error_line: "301"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9779"
  subtask_id: "7"
source_codes_890: 
  created_at: 2010-07-05 17:14:27
  error_line: "124"
  body: "    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9596"
  subtask_id: "9"
source_codes_628: 
  created_at: 2010-07-05 17:11:49
  error_line: "385"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9334"
  subtask_id: "1"
source_codes_073: 
  created_at: 2010-07-05 17:09:13
  error_line: "133"
  body: "    memset(the_pAnzInfo->m_option,'\\0',sizeof(ST_Option));\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8779"
  subtask_id: "5"
source_codes_1074: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "            strcat(the_szCurMetrics,\"???ELOC\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9780"
  subtask_id: "7"
source_codes_891: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "    if(the_pAnzInfo == NULL){\r\n        the_iRet = ANZ_ERR_MEMORY_FAILED;\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9597"
  subtask_id: "9"
source_codes_074: 
  created_at: 2010-07-05 17:09:13
  error_line: 
  body: |
    
    /* ?v?????Item????????m?? */

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8780"
  subtask_id: "5"
source_codes_1075: 
  created_at: 2010-07-05 17:15:30
  error_line: "304"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9781"
  subtask_id: "7"
source_codes_892: 
  created_at: 2010-07-05 17:14:27
  error_line: "127"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9598"
  subtask_id: "9"
source_codes_760: 
  created_at: 2010-07-05 17:13:48
  error_line: "32"
  body: |
    const char* TRACEFILE = "analyzeme_trace.txt";

  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9466"
  subtask_id: "11"
source_codes_629: 
  created_at: 2010-07-05 17:11:49
  error_line: 
  body: "    }\r\n\
    \r\n    /* ?v???O?A?K?v??v?????????????O???[?o?????????????m?? */\r\n    the_iRet = AllocResultMemory(the_pOption);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9335"
  subtask_id: "1"
source_codes_075: 
  created_at: 2010-07-05 17:09:13
  error_line: "137"
  body: "    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8781"
  subtask_id: "5"
source_codes_1076: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"FileELOC\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9782"
  subtask_id: "7"
source_codes_893: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "    }\r\n    memset(the_pAnzInfo,'\\0',sizeof(ST_AnalyzeMe));\r\n    g_pAnzInfo = the_pAnzInfo;\r\n    /* AnalyzeMe???????????Option????????????m?? */\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9599"
  subtask_id: "9"
source_codes_761: 
  created_at: 2010-07-05 17:13:48
  error_line: "33"
  body: |
    const char* APPLOGFILE = "analyzeme_log.txt";

  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9467"
  subtask_id: "11"
source_codes_076: 
  created_at: 2010-07-05 17:09:13
  error_line: "138"
  body: "    if(the_pMeasureItem == NULL) {\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8782"
  subtask_id: "5"
source_codes_1077: 
  created_at: 2010-07-05 17:15:30
  error_line: "308"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9783"
  subtask_id: "7"
source_codes_894: 
  created_at: 2010-07-05 17:14:27
  error_line: "132"
  body: "    AnzMalloc(the_pAnzInfo->m_option,ST_Option*,sizeof(ST_Option));\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9600"
  subtask_id: "9"
source_codes_630: 
  created_at: 2010-07-05 17:11:49
  error_line: "390"
  body: "    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9336"
  subtask_id: "1"
source_codes_762: 
  created_at: 2010-07-05 17:13:48
  error_line: 
  body: |
    
    /****************************************************/
    /*              ?O???[?o???????                  */
    /****************************************************/
    /* ????????File??n???h????????????O???[?o???????? */
    
    /* Log File */

  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9468"
  subtask_id: "11"
source_codes_077: 
  created_at: 2010-07-05 17:09:13
  error_line: "139"
  body: "        the_iRet = ANZ_ERR_MEMORY_FAILED;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8783"
  subtask_id: "5"
source_codes_1078: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "            strcat(the_szCurMetrics,\"FileELOC\");\r\n        }\r\n    }\r\n\
    \r\n    /* ???G?x?v??Option???w?????? */\r\n    if(the_pOption->m_redundancy){\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9784"
  subtask_id: "7"
source_codes_895: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "    if(the_pAnzInfo->m_option == NULL){\r\n        the_iRet = ANZ_ERR_MEMORY_FAILED;\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9601"
  subtask_id: "9"
source_codes_631: 
  created_at: 2010-07-05 17:11:49
  error_line: 
  body: "        FreeResultMemory(the_pOption);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9337"
  subtask_id: "1"
source_codes_763: 
  created_at: 2010-07-05 17:13:48
  error_line: "41"
  body: |
    FILE *g_fpLogFile = NULL;       /* Log File pointer */

  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9469"
  subtask_id: "11"
source_codes_078: 
  created_at: 2010-07-05 17:09:13
  error_line: "140"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8784"
  subtask_id: "5"
source_codes_1079: 
  created_at: 2010-07-05 17:15:30
  error_line: "315"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9785"
  subtask_id: "7"
source_codes_896: 
  created_at: 2010-07-05 17:14:27
  error_line: "135"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9602"
  subtask_id: "9"
source_codes_632: 
  created_at: 2010-07-05 17:11:49
  error_line: "392"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9338"
  subtask_id: "1"
source_codes_764: 
  created_at: 2010-07-05 17:13:48
  error_line: 
  body: |
    /*  Trace File */

  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9470"
  subtask_id: "11"
source_codes_079: 
  created_at: 2010-07-05 17:09:13
  error_line: 
  body: "    }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8785"
  subtask_id: "5"
source_codes_500: 
  created_at: 2010-07-05 17:11:42
  error_line: "224"
  body: "    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9206"
  subtask_id: "1"
source_codes_1500: 
  created_at: 2010-07-05 17:20:40
  error_line: "44"
  body: "\tchar** the_pTotaLOC = NULL; /* File??LOC(???s)???P */\n"
  updated_at: 2011-05-13 10:35:44
  analyzed_source_path_id: "176"
  id: "10206"
  subtask_id: "8"
source_codes_897: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "    }\r\n    memset(the_pAnzInfo->m_option,'\\0',sizeof(ST_Option));\r\n\
    \r\n    /* ?v?????Item????????m?? */\r\n\
    \r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9603"
  subtask_id: "9"
source_codes_633: 
  created_at: 2010-07-05 17:11:49
  error_line: 
  body: "    }\r\n\
    \r\n    /* ?v?????? */\r\n    /* ????v?? */\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9339"
  subtask_id: "1"
source_codes_765: 
  created_at: 2010-07-05 17:13:48
  error_line: "43"
  body: |
    FILE *g_fpTraceFile = NULL;     /* Trace File pointer */

  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9471"
  subtask_id: "11"
source_codes_501: 
  created_at: 2010-07-05 17:11:42
  error_line: "225"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9207"
  subtask_id: "1"
source_codes_1501: 
  created_at: 2010-07-05 17:20:40
  error_line: 
  body: "\tchar** the_pExecLOC = NULL; /* LOC(???s)???P */\n\
    \tchar** the_pComtLOC = NULL; /* LOC(?????s */\n\
    \tchar** the_pBlankLOC = NULL; /* LOC(Comment ?s) ???P */\n\
    \tST_LineAttr* the_pTempLineAttr = NULL; /* ?J?????g?t?@?C???w?b?_?[?m?[?h?????|?C???g */\n\n\
    \t/* ???[?J??????????? */\n\n\
    \tTrace(\"MakeLOCInfo() in\\n\");\n\
    \t/*?v?????t?@?C????s???????????????*/\n\
    \tif (io_fileInfo == NULL) {\n\
    \t\treturn 0;\n\
    \t}\n\
    \tthe_pTempLineAttr = io_fileInfo->GetLineAttr();\n\n\
    \ttry {\n\
    \t\tAnzMalloc(the_pTotaLOC, char**, sizeof(char*)*(io_fileInfo->GetTotalLOC() + 1));\n\
    \t\tif (the_pTotaLOC == NULL) {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tmemset(the_pTotaLOC, '\\0', sizeof(char*)*(io_fileInfo->GetTotalLOC() + 1));\n\
    \t\tAnzMalloc(the_pExecLOC, char**, sizeof(char*)*(io_fileInfo->GetExecLOC() + 1));\n\
    \t\tif (the_pExecLOC == NULL) {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tmemset(the_pExecLOC, '\\0', sizeof(char*)*(io_fileInfo->GetExecLOC() + 1));\n\
    \t\tAnzMalloc(the_pComtLOC, char**, sizeof(char*)*(io_fileInfo->GetCommentLOC() + 1));\n\
    \t\tif (the_pComtLOC == NULL) {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tmemset(the_pComtLOC, '\\0', sizeof(char*)*(io_fileInfo->GetCommentLOC() + 1));\n\
    \t\tAnzMalloc(the_pBlankLOC, char**, sizeof(char*)*(io_fileInfo->GetBlankLOC() + 1));\n\
    \t\tif (the_pBlankLOC == NULL) {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tmemset(the_pBlankLOC, '\\0', sizeof(char*)*(io_fileInfo->GetBlankLOC() + 1));\n\
    \t\twhile (the_pTempLineAttr != NULL) {\n\n\
    \t\t\t/*?R?????g?s??|?C???g????*/\n\
    \t\t\tif (the_pTempLineAttr->m_attr1.IFL == 1) {\n\
    \t\t\t\t*(the_pComtLOC + the_iComtLOCNum) = the_pTempLineAttr->m_prow;\n\
    \t\t\t\tthe_iComtLOCNum++;\n\
    \t\t\t}\n\n\
    \t\t\t/*?????s??|?C???g????*/\n\
    \t\t\telse if (the_pTempLineAttr->m_attr.BL == 1) {\n\
    \t\t\t\t*(the_pBlankLOC + the_iBlankLOCNum) = the_pTempLineAttr->m_prow;\n\
    \t\t\t\tthe_iBlankLOCNum++;\n\
    \t\t\t}\n\n\
    \t\t\t/*?R?????g?s??|?C???g????*/\n\
    \t\t\telse if (the_pTempLineAttr->m_attr.CL == 1) {\n\
    \t\t\t\t*(the_pComtLOC + the_iComtLOCNum) = the_pTempLineAttr->m_prow;\n\
    \t\t\t\tthe_iComtLOCNum++;\n\
    \t\t\t}\n\n\
    \t\t\t/*???s?s??|?C???g????*/\n\
    \t\t\telse {\n\
    \t\t\t\t*(the_pExecLOC + the_iExecLOCNum) = the_pTempLineAttr->m_prow;\n\
    \t\t\t\tthe_iExecLOCNum++;\n\
    \t\t\t}\n\n\
    \t\t\t/*Total?s??|?C???g????*/\n\
    \t\t\t*(the_pTotaLOC + the_iTotaLOCNum) = the_pTempLineAttr->m_prow;\n\
    \t\t\tthe_iTotaLOCNum++;\n\
    \t\t\tthe_pTempLineAttr = the_pTempLineAttr->next;\n\
    \t\t}\n\n\
    \t\t/*LOC(???s)??????????*/\n\
    \t\tio_fileInfo->SetTotalContent(the_pTotaLOC);\n\n\
    \t\t/*LOC(???s)???????*/\n\
    \t\tio_fileInfo->SetExecContent(the_pExecLOC);\n\n\
    \t\t/*LOC(Comment?s)???????*/\n\
    \t\tio_fileInfo->SetCommentContent(the_pComtLOC);\n\n\
    \t\t/*LOC(?????s)???????*/\n\
    \t\tio_fileInfo->SetBlankContent(the_pBlankLOC);\n\
    \t}\n\
    \t/*????????????????s????????B*/\n\
    \tcatch (MemoryFailedExc &e) {\n\
    \t\tthrow e;\n\
    \t}\n\
    \tTrace(\"MakeLOCInfo() out\\n\");\n\
    \treturn 0;\n\
    }\n\n"
  updated_at: 2011-05-13 10:35:44
  analyzed_source_path_id: "176"
  id: "10207"
  subtask_id: "8"
source_codes_898: 
  created_at: 2010-07-05 17:14:27
  error_line: "141"
  body: "    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9604"
  subtask_id: "9"
source_codes_634: 
  created_at: 2010-07-05 17:11:49
  error_line: "397"
  body: "    if(the_iMeasureType == ANZ_COMMON_MEASURE){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9340"
  subtask_id: "1"
source_codes_766: 
  created_at: 2010-07-05 17:13:48
  error_line: 
  body: |
    /* ?G???[File */

  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9472"
  subtask_id: "11"
source_codes_502: 
  created_at: 2010-07-05 17:11:42
  error_line: 
  body: "    }\r\n    /* ?G???[File???J?? */\r\n    the_iRet = OpenErrorFile(the_pOption);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9208"
  subtask_id: "1"
source_codes_1502: 
  created_at: 2010-07-05 17:20:40
  error_line: 
  body: |+
    /*
    File:
       AnzException.cpp
    Copyright:
       Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
       AnalyzeMe
    Abstract:
       AnalyzeMe????O????
    Author:
       Tong-huixin
    Date:
       2005/02/08
    REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 2.0.0.0$
    */
    
    
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10208"
  subtask_id: "8"
source_codes_1080: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"McCabe????G?x\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9786"
  subtask_id: "7"
source_codes_899: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "    if(the_pMeasureItem == NULL) {\r\n        the_iRet = ANZ_ERR_MEMORY_FAILED;\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9605"
  subtask_id: "9"
source_codes_635: 
  created_at: 2010-07-05 17:11:49
  error_line: 
  body: "        /* ????v??File??????}?N?????????? */\r\n        the_iRet = GetProcMacro(the_pAnzInfo,ANZ_COMMON_MEASURE);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9341"
  subtask_id: "1"
source_codes_767: 
  created_at: 2010-07-05 17:13:48
  error_line: "45"
  body: |
    FILE *g_fpErrorFile = NULL;

  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9473"
  subtask_id: "11"
source_codes_080: 
  created_at: 2010-07-05 17:09:13
  error_line: "142"
  body: "    memset(the_pMeasureItem,0,argc * sizeof(char *));\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8786"
  subtask_id: "5"
source_codes_503: 
  created_at: 2010-07-05 17:11:42
  error_line: "229"
  body: "    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9209"
  subtask_id: "1"
source_codes_1503: 
  created_at: 2010-07-05 17:20:40
  error_line: "23"
  body: |
    #include "AnzException.h"

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10209"
  subtask_id: "8"
source_codes_1081: 
  created_at: 2010-07-05 17:15:30
  error_line: "319"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9787"
  subtask_id: "7"
source_codes_636: 
  created_at: 2010-07-05 17:11:49
  error_line: "400"
  body: "        if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9342"
  subtask_id: "1"
source_codes_768: 
  created_at: 2010-07-05 17:13:48
  error_line: 
  body: ""
  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9474"
  subtask_id: "11"
source_codes_081: 
  created_at: 2010-07-05 17:09:13
  error_line: 
  body: |
    
    the_pOption = the_pAnzInfo->m_option;
    /* ?f?t?H???g?l??Option????the_pCmdOption??????? */
    the_pOption->m_version = OFF;
    the_pOption->m_help = OFF;
    the_pOption->m_verbos = OFF;

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8787"
  subtask_id: "5"
source_codes_504: 
  created_at: 2010-07-05 17:11:42
  error_line: "230"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9210"
  subtask_id: "1"
source_codes_1504: 
  created_at: 2010-07-05 17:20:40
  error_line: 
  body: ""
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10210"
  subtask_id: "8"
source_codes_1082: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "            strcat(the_szCurMetrics,\"McCabe????G?x\");\r\n        }\r\n\
    \r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9788"
  subtask_id: "7"
source_codes_637: 
  created_at: 2010-07-05 17:11:49
  error_line: "401"
  body: "            goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9343"
  subtask_id: "1"
source_codes_769: 
  created_at: 2010-07-05 17:13:48
  error_line: "47"
  body: |
    bool g_bTrace;    /* Trace flag */

  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9475"
  subtask_id: "11"
source_codes_082: 
  created_at: 2010-07-05 17:09:13
  error_line: "150"
  body: "    strcpy(the_pOption->m_prefix,\"./\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8788"
  subtask_id: "5"
source_codes_505: 
  created_at: 2010-07-05 17:11:42
  error_line: 
  body: "    }\r\n    /* ????????t?@?C????? */\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9211"
  subtask_id: "1"
source_codes_1505: 
  created_at: 2010-07-05 17:20:40
  error_line: "25"
  body: |
    AnzException::AnzException()

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10211"
  subtask_id: "8"
source_codes_1083: 
  created_at: 2010-07-05 17:15:30
  error_line: "323"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9789"
  subtask_id: "7"
source_codes_638: 
  created_at: 2010-07-05 17:11:49
  error_line: 
  body: "        }\r\n        the_iRet = CommomMeasure(the_pAnzInfo);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9344"
  subtask_id: "1"
source_codes_083: 
  created_at: 2010-07-05 17:09:13
  error_line: 
  body: |
    #else
        strcpy(the_pOption->m_prefix,".\\");
    #endif

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8789"
  subtask_id: "5"
source_codes_506: 
  created_at: 2010-07-05 17:11:42
  error_line: "233"
  body: "    if(the_iMeasureType == ANZ_TREND_MEASURE) {\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9212"
  subtask_id: "1"
source_codes_1506: 
  created_at: 2010-07-05 17:20:40
  error_line: 
  body: |+
    {}
    
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10212"
  subtask_id: "8"
source_codes_1084: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"File???G?x\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:41
  analyzed_source_path_id: "171"
  id: "9790"
  subtask_id: "7"
source_codes_639: 
  created_at: 2010-07-05 17:11:49
  error_line: "404"
  body: "        if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9345"
  subtask_id: "1"
source_codes_084: 
  created_at: 2010-07-05 17:09:13
  error_line: "154"
  body: "    strcpy(the_pOption->m_filePattern,\"**/*.[CcHh]\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8790"
  subtask_id: "5"
source_codes_507: 
  created_at: 2010-07-05 17:11:42
  error_line: "234"
  body: "        int the_iType = -1;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9213"
  subtask_id: "1"
source_codes_1507: 
  created_at: 2010-07-05 17:20:40
  error_line: "28"
  body: |
    AnzException::AnzException(string in_useMsg)

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10213"
  subtask_id: "8"
source_codes_1085: 
  created_at: 2010-07-05 17:15:30
  error_line: "327"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9791"
  subtask_id: "7"
source_codes_085: 
  created_at: 2010-07-05 17:09:13
  error_line: "155"
  body: "    strcpy(the_pOption->m_symbolFile,\"\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8791"
  subtask_id: "5"
source_codes_770: 
  created_at: 2010-07-05 17:13:48
  error_line: "48"
  body: |
    char g_szNVPath[MAX_PATH] = {

  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9476"
  subtask_id: "11"
source_codes_1508: 
  created_at: 2010-07-05 17:20:40
  error_line: 
  body: |
    {}
    
    AnzException::~AnzException() throw() {}
    
    /* CommandLineExc */

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10214"
  subtask_id: "8"
source_codes_1086: 
  created_at: 2010-07-05 17:15:30
  error_line: 
  body: "            strcat(the_szCurMetrics,\"File???G?x\");\r\n        }\r\n    }\r\n\
    \r\n    /* ?????(1)?v??Option???w?????? */\r\n    if(the_pOption->m_trend){\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9792"
  subtask_id: "7"
source_codes_086: 
  created_at: 2010-07-05 17:09:13
  error_line: "156"
  body: "    strcpy(the_pOption->m_optionFile,\"\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8792"
  subtask_id: "5"
source_codes_771: 
  created_at: 2010-07-05 17:13:48
  error_line: 
  body: "    0\n\
    };\r\n"
  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9477"
  subtask_id: "11"
source_codes_508: 
  created_at: 2010-07-05 17:11:42
  error_line: "235"
  body: "        int the_pPos = -1;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9214"
  subtask_id: "1"
source_codes_1509: 
  created_at: 2010-07-05 17:20:40
  error_line: "34"
  body: |
    CommandLineExc::CommandLineExc(string in_userMsg)

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10215"
  subtask_id: "8"
source_codes_1087: 
  created_at: 2010-07-05 17:15:30
  error_line: "334"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9793"
  subtask_id: "7"
source_codes_087: 
  created_at: 2010-07-05 17:09:13
  error_line: 
  body: "    the_pOption->m_fileLOC = ON;\r\n    the_pOption->m_redundancy = OFF;\r\n    the_pOption->m_funcNum = OFF;\r\n    the_pOption->m_eloc = OFF;\r\n    the_pOption->m_mccabe = OFF;\r\n    the_pOption->m_similar = OFF;\r\n    the_pOption->m_trend = OFF;\r\n    the_pOption->m_funcTrend = OFF;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8793"
  subtask_id: "5"
source_codes_640: 
  created_at: 2010-07-05 17:11:49
  error_line: "405"
  body: "            printf(\"%s%s\\n\",the_szCurMetrics,MSG_METRIC_ERROR);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9346"
  subtask_id: "1"
source_codes_772: 
  created_at: 2010-07-05 17:13:48
  error_line: "51"
  body: |
    char g_szOVPath[MAX_PATH] = {

  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9478"
  subtask_id: "11"
source_codes_509: 
  created_at: 2010-07-05 17:11:42
  error_line: "236"
  body: "        isDirOrFile(*the_pMeasureItem,&the_iType);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9215"
  subtask_id: "1"
source_codes_1088: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"File?????(1)\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9794"
  subtask_id: "7"
source_codes_088: 
  created_at: 2010-07-05 17:09:13
  error_line: "165"
  body: "    the_pOption->m_symThresh = 70;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8794"
  subtask_id: "5"
source_codes_641: 
  created_at: 2010-07-05 17:11:49
  error_line: "406"
  body: "            goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9347"
  subtask_id: "1"
source_codes_773: 
  created_at: 2010-07-05 17:13:48
  error_line: 
  body: "    0\n\
    };\r\n"
  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9479"
  subtask_id: "11"
source_codes_1089: 
  created_at: 2010-07-05 17:15:31
  error_line: "338"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9795"
  subtask_id: "7"
source_codes_089: 
  created_at: 2010-07-05 17:09:13
  error_line: "166"
  body: "    the_pOption->m_minThresh = 2;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8795"
  subtask_id: "5"
source_codes_510: 
  created_at: 2010-07-05 17:11:42
  error_line: "237"
  body: "        if(the_iType == ANZ_FILE) {\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9216"
  subtask_id: "1"
source_codes_642: 
  created_at: 2010-07-05 17:11:49
  error_line: 
  body: "        }\r\n    }\r\n    /* ?????v?? */\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9348"
  subtask_id: "1"
source_codes_774: 
  created_at: 2010-07-05 17:13:48
  error_line: "54"
  body: |
    bool g_bTrendFile = true;

  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9480"
  subtask_id: "11"
source_codes_1510: 
  created_at: 2010-07-05 17:20:40
  error_line: 
  body: |
    {
    	Message = in_userMsg;
    }
    
    
    /*---------------------------------------------*/
    /* ComtNoClosedExc?F                           */
    /* ?R?????g??????????						   */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10216"
  subtask_id: "8"
source_codes_511: 
  created_at: 2010-07-05 17:11:42
  error_line: 
  body: "            g_bTrendFile = true;\r\n            /* the_pMeasureItme??Path?????????? */\r\n            GetPathPos(*the_pMeasureItem,&the_pPos);\r\n            g_szNVPath[the_pPos] = '\\0';\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9217"
  subtask_id: "1"
source_codes_643: 
  created_at: 2010-07-05 17:11:49
  error_line: "410"
  body: "    if(the_iMeasureType == ANZ_TREND_MEASURE){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9349"
  subtask_id: "1"
source_codes_775: 
  created_at: 2010-07-05 17:13:48
  error_line: 
  body: |
    /* Option File????e??????????O???[?o???????? */

  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9481"
  subtask_id: "11"
source_codes_1511: 
  created_at: 2010-07-05 17:20:40
  error_line: "44"
  body: |
    ComtNoClosedExc::ComtNoClosedExc()

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10217"
  subtask_id: "8"
source_codes_512: 
  created_at: 2010-07-05 17:11:42
  error_line: "242"
  body: "            if(the_pPos > 0) {\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9218"
  subtask_id: "1"
source_codes_644: 
  created_at: 2010-07-05 17:11:49
  error_line: 
  body: "        /* ?????v??File??????}?N?????????? */\r\n        the_iRet = GetProcMacro(the_pAnzInfo,ANZ_TREND_MEASURE);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9350"
  subtask_id: "1"
source_codes_776: 
  created_at: 2010-07-05 17:13:48
  error_line: "56"
  body: |
    char *g_optionFileCont = NULL;

  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9482"
  subtask_id: "11"
source_codes_1512: 
  created_at: 2010-07-05 17:20:40
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10218"
  subtask_id: "8"
source_codes_1090: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "            strcat(the_szCurMetrics,\"File?????(1)\");\r\n        }\r\n        strcat(the_szCurMetrics,\"File??X??(1)\");\r\n    }\r\n\
    \r\n    /* ?????(2)?v??Option???w?????? */\r\n    if(the_pOption->m_funcTrend){\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9796"
  subtask_id: "7"
source_codes_513: 
  created_at: 2010-07-05 17:11:42
  error_line: "243"
  body: "                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9219"
  subtask_id: "1"
source_codes_645: 
  created_at: 2010-07-05 17:11:49
  error_line: "413"
  body: "        if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9351"
  subtask_id: "1"
source_codes_777: 
  created_at: 2010-07-05 17:13:48
  error_line: 
  body: |
    /* Symbol File????e??????????O???[?o???????? */

  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9483"
  subtask_id: "11"
source_codes_090: 
  created_at: 2010-07-05 17:09:13
  error_line: 
  body: |
    
    /* ?R?}???h???C??????????Option????????????m?? */

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8796"
  subtask_id: "5"
source_codes_1513: 
  created_at: 2010-07-05 17:20:40
  error_line: "46"
  body: "\tMessage = \"?R?????g??????????\";\n"
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10219"
  subtask_id: "8"
source_codes_1091: 
  created_at: 2010-07-05 17:15:31
  error_line: "346"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9797"
  subtask_id: "7"
source_codes_514: 
  created_at: 2010-07-05 17:11:42
  error_line: 
  body: "            }\r\n\
    \r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9220"
  subtask_id: "1"
source_codes_646: 
  created_at: 2010-07-05 17:11:49
  error_line: "414"
  body: "            goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9352"
  subtask_id: "1"
source_codes_778: 
  created_at: 2010-07-05 17:13:48
  error_line: "58"
  body: |
    char *g_symbolFileCont = NULL;

  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9484"
  subtask_id: "11"
source_codes_091: 
  created_at: 2010-07-05 17:09:13
  error_line: "169"
  body: "    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8797"
  subtask_id: "5"
source_codes_1514: 
  created_at: 2010-07-05 17:20:40
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10220"
  subtask_id: "8"
source_codes_1092: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"????????\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9798"
  subtask_id: "7"
source_codes_515: 
  created_at: 2010-07-05 17:11:42
  error_line: "246"
  body: "            GetPathPos(*(the_pMeasureItem + 1),&the_pPos);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9221"
  subtask_id: "1"
source_codes_647: 
  created_at: 2010-07-05 17:11:49
  error_line: 
  body: "        }\r\n        the_iRet = TrendMeasure(the_pAnzInfo);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9353"
  subtask_id: "1"
source_codes_779: 
  created_at: 2010-07-05 17:13:48
  error_line: "59"
  body: |
    bool g_bOutTime = false;

  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9485"
  subtask_id: "11"
source_codes_092: 
  created_at: 2010-07-05 17:09:13
  error_line: "170"
  body: "    if(the_pCmdOption == NULL){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8798"
  subtask_id: "5"
source_codes_1515: 
  created_at: 2010-07-05 17:20:40
  error_line: "49"
  body: |
    ComtNoClosedExc::ComtNoClosedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10221"
  subtask_id: "8"
source_codes_1093: 
  created_at: 2010-07-05 17:15:31
  error_line: "350"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9799"
  subtask_id: "7"
source_codes_516: 
  created_at: 2010-07-05 17:11:42
  error_line: 
  body: "            g_szOVPath[the_pPos] = '\\0';\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9222"
  subtask_id: "1"
source_codes_648: 
  created_at: 2010-07-05 17:11:49
  error_line: "417"
  body: "        if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9354"
  subtask_id: "1"
source_codes_093: 
  created_at: 2010-07-05 17:09:13
  error_line: "171"
  body: "        the_iRet = ANZ_ERR_MEMORY_FAILED;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8799"
  subtask_id: "5"
source_codes_1516: 
  created_at: 2010-07-05 17:20:40
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    ComtNoClosedExc::~ComtNoClosedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* StrLiteralNoClosedExc?F                     */
    /* ?_?u???N?H?[?e?[?V???????}?b?`??????????  */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10222"
  subtask_id: "8"
source_codes_1094: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "            strcat(the_szCurMetrics,\"????????\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9800"
  subtask_id: "7"
source_codes_517: 
  created_at: 2010-07-05 17:11:42
  error_line: "248"
  body: "            if(the_pPos > 0) {\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9223"
  subtask_id: "1"
source_codes_649: 
  created_at: 2010-07-05 17:11:49
  error_line: "418"
  body: "            printf(\"%s%s\\n\",the_szCurMetrics,MSG_METRIC_ERROR);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9355"
  subtask_id: "1"
source_codes_094: 
  created_at: 2010-07-05 17:09:13
  error_line: "172"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8800"
  subtask_id: "5"
source_codes_1517: 
  created_at: 2010-07-05 17:20:40
  error_line: "60"
  body: |
    StrLiteralNoClosedExc::StrLiteralNoClosedExc()

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10223"
  subtask_id: "8"
source_codes_1095: 
  created_at: 2010-07-05 17:15:31
  error_line: "353"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9801"
  subtask_id: "7"
source_codes_780: 
  created_at: 2010-07-05 17:13:48
  error_line: "60"
  body: |
    ST_AnalyzeMe *g_pAnzInfo;  /* AnalyzeMe??????? */

  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9486"
  subtask_id: "11"
source_codes_518: 
  created_at: 2010-07-05 17:11:42
  error_line: "249"
  body: "                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9224"
  subtask_id: "1"
source_codes_095: 
  created_at: 2010-07-05 17:09:13
  error_line: 
  body: "    }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8801"
  subtask_id: "5"
source_codes_1518: 
  created_at: 2010-07-05 17:20:40
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10224"
  subtask_id: "8"
source_codes_1096: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"?????X??\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9802"
  subtask_id: "7"
source_codes_781: 
  created_at: 2010-07-05 17:13:48
  error_line: 
  body: |
    /**
    *  main
    *  AnalyzeMe????C?????
    *  @param  argc ?R?}???h???C??????????
    *  @param  argv ?R?}???h???C?????????z??
    *  @return
               ANZ_SUCCESS:?????I??
               ANZ_ERROR  :????I??
    *  @author zhang-gh
    */
    int main(int argc,char * argv[])
    {
        /* ????? */
        int  the_iRet;                 /* Return?l */
        int  the_iMeasureType;         /* ?v??????F????v???A?????v?? */
        char **the_pMeasureItem;       /* ?R?}???h???C???????????v????????X?g */
        char the_szCurMetrics[MAX_METRICS] = {0};/* ?J?????g?v??Metrics */
        ST_Option    *the_pCmdOption;    /* ?R?}???h???C??????????Option???? */
        ST_AnalyzeMe *the_pAnzInfo;      /* AnalyzeMe??????? */
        ST_Option    *the_pOption;       /* AnalyzeMe???????????Option???? */
        char *the_pTrace = NULL;
        struct timeb the_st ;
        struct timeb the_ed ;
    
        /* ????????? */
        the_st.time = 0;
        the_st.millitm = 0;
        the_ed.time = 0;
        the_ed.millitm = 0;
        the_pAnzInfo = NULL;
        the_pCmdOption = NULL;
        the_iRet = ANZ_SUCCESS;
        the_pMeasureItem = NULL;
    
        /* ?V?O?i???n???h????o?^?@*/
        SetSignal() ;
    
        the_pTrace = getenv("AnzTrace");
        if(the_pTrace != NULL) {

  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9487"
  subtask_id: "11"
source_codes_096: 
  created_at: 2010-07-05 17:09:13
  error_line: "174"
  body: "    memset(the_pCmdOption,'\\0',sizeof(ST_Option));\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8802"
  subtask_id: "5"
source_codes_1519: 
  created_at: 2010-07-05 17:20:40
  error_line: "62"
  body: "\tMessage = \"?_?u???N?H?[?e?[?V???????}?b?`??????????\";\n"
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10225"
  subtask_id: "8"
source_codes_1097: 
  created_at: 2010-07-05 17:15:31
  error_line: "357"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9803"
  subtask_id: "7"
source_codes_650: 
  created_at: 2010-07-05 17:11:49
  error_line: "419"
  body: "            goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9356"
  subtask_id: "1"
source_codes_782: 
  created_at: 2010-07-05 17:13:48
  error_line: "100"
  body: "        if(strcmp(the_pTrace,\"ON\") == 0 ) {\r\n"
  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9488"
  subtask_id: "11"
source_codes_519: 
  created_at: 2010-07-05 17:11:43
  error_line: 
  body: "            }\r\n            /* g_szNVPath?Ag_szOVPath??????p?X???X???? */\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9225"
  subtask_id: "1"
source_codes_097: 
  created_at: 2010-07-05 17:09:13
  error_line: 
  body: "    /* ?f?t?H???g?l??Option????the_pCmdOption??????? */\r\n    the_pCmdOption->m_version = OFF;\r\n    the_pCmdOption->m_help = OFF;\r\n    the_pCmdOption->m_verbos = OFF;\r\n\
    #ifdef __GNUC__\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8803"
  subtask_id: "5"
source_codes_1098: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?????X??\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9804"
  subtask_id: "7"
source_codes_651: 
  created_at: 2010-07-05 17:11:49
  error_line: 
  body: "        }\r\n    }\r\n\
    \r\n    /* ?o?R???????o????? */\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9357"
  subtask_id: "1"
source_codes_783: 
  created_at: 2010-07-05 17:13:48
  error_line: 
  body: "            g_bTrace = true;\r\n        }\r\n    }\r\n    /* TraceFile??LogFile???J?? */\r\n    g_fpTraceFile = fopen(TRACEFILE,\"w\");\r\n    if(g_fpTraceFile == NULL){\r\n        printf(\"Create trace file failed!\\n\");\r\n    }\r\n\
    \r\n    g_fpLogFile = fopen(APPLOGFILE,\"w\");\r\n    if(g_fpLogFile == NULL){\r\n        printf(\"Create log file failed!\\n\");   /* */\r\n    }\r\n\
    \r\n    /* AnalyzeMe???????????????m?? */\r\n"
  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9489"
  subtask_id: "11"
source_codes_098: 
  created_at: 2010-07-05 17:09:13
  error_line: "180"
  body: "    strcpy(the_pCmdOption->m_prefix,\"./\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8804"
  subtask_id: "5"
source_codes_1520: 
  created_at: 2010-07-05 17:20:40
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10226"
  subtask_id: "8"
source_codes_1099: 
  created_at: 2010-07-05 17:15:31
  error_line: "360"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9805"
  subtask_id: "7"
source_codes_520: 
  created_at: 2010-07-05 17:11:43
  error_line: "252"
  body: "            the_iRet = ResetTrendPath(g_szNVPath);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9226"
  subtask_id: "1"
source_codes_652: 
  created_at: 2010-07-05 17:11:49
  error_line: "424"
  body: "    if(the_pOption->m_verbos == ON){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9358"
  subtask_id: "1"
source_codes_784: 
  created_at: 2010-07-05 17:13:48
  error_line: "116"
  body: "    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));\r\n"
  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9490"
  subtask_id: "11"
source_codes_099: 
  created_at: 2010-07-05 17:09:13
  error_line: 
  body: |
    #else
        strcpy(the_pCmdOption->m_prefix,".\\");
    #endif

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8805"
  subtask_id: "5"
source_codes_521: 
  created_at: 2010-07-05 17:11:43
  error_line: 
  body: "            the_iRet = ResetTrendPath(g_szOVPath);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9227"
  subtask_id: "1"
source_codes_653: 
  created_at: 2010-07-05 17:11:49
  error_line: "425"
  body: "        if(the_pAnzInfo->m_err == NULL){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9359"
  subtask_id: "1"
source_codes_785: 
  created_at: 2010-07-05 17:13:48
  error_line: 
  body: "    if(the_pAnzInfo == NULL){\r\n        the_iRet = ANZ_ERR_MEMORY_FAILED;\r\n        return 0;\r\n    }\r\n    memset(the_pAnzInfo,'\\0',sizeof(ST_AnalyzeMe));\r\n    g_pAnzInfo = the_pAnzInfo;\r\n    /* AnalyzeMe???????????Option????????????m?? */\r\n"
  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9491"
  subtask_id: "11"
source_codes_1521: 
  created_at: 2010-07-05 17:20:40
  error_line: "65"
  body: |
    StrLiteralNoClosedExc::StrLiteralNoClosedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10227"
  subtask_id: "8"
source_codes_522: 
  created_at: 2010-07-05 17:11:43
  error_line: "254"
  body: "            if(the_iRet != ANZ_SUCCESS) {\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9228"
  subtask_id: "1"
source_codes_654: 
  created_at: 2010-07-05 17:11:49
  error_line: "426"
  body: "            printf(\"%s%s\\n\",the_szCurMetrics,MSG_METRIC_NORMAL);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9360"
  subtask_id: "1"
source_codes_786: 
  created_at: 2010-07-05 17:13:48
  error_line: "124"
  body: "    AnzMalloc(the_pAnzInfo->m_option,ST_Option*,sizeof(ST_Option));\r\n"
  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9492"
  subtask_id: "11"
source_codes_1522: 
  created_at: 2010-07-05 17:20:40
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    StrLiteralNoClosedExc::~StrLiteralNoClosedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* PreprcNoClosedExc?F                         */
    /* #if?????A??????????#endif?????????     */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10228"
  subtask_id: "8"
source_codes_787: 
  created_at: 2010-07-05 17:13:48
  error_line: 
  body: "    if(the_pAnzInfo->m_option == NULL){\r\n        the_iRet = ANZ_ERR_MEMORY_FAILED;\r\n        return 0;\r\n    }\r\n    memset(the_pAnzInfo->m_option,'\\0',sizeof(ST_Option));\r\n\
    \r\n    /* ?v?????Item????????m?? */\r\n\
    \r\n"
  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9493"
  subtask_id: "11"
source_codes_523: 
  created_at: 2010-07-05 17:11:43
  error_line: "255"
  body: "                goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9229"
  subtask_id: "1"
source_codes_655: 
  created_at: 2010-07-05 17:11:49
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9361"
  subtask_id: "1"
source_codes_1523: 
  created_at: 2010-07-05 17:20:41
  error_line: "76"
  body: |
    PreprcNoClosedExc::PreprcNoClosedExc()

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10229"
  subtask_id: "8"
source_codes_788: 
  created_at: 2010-07-05 17:13:48
  error_line: "133"
  body: "    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));\r\n"
  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9494"
  subtask_id: "11"
source_codes_524: 
  created_at: 2010-07-05 17:11:43
  error_line: 
  body: "            }\r\n        }\r\n    }\r\n    /* ?v?????File??List???????? */\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9230"
  subtask_id: "1"
source_codes_656: 
  created_at: 2010-07-05 17:11:49
  error_line: "428"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9362"
  subtask_id: "1"
source_codes_1524: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10230"
  subtask_id: "8"
source_codes_789: 
  created_at: 2010-07-05 17:13:48
  error_line: 
  body: "    if(the_pMeasureItem == NULL) {\r\n        the_iRet = ANZ_ERR_MEMORY_FAILED;\r\n        return 0;\r\n    }\r\n"
  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9495"
  subtask_id: "11"
source_codes_525: 
  created_at: 2010-07-05 17:11:43
  error_line: "260"
  body: "    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9231"
  subtask_id: "1"
source_codes_657: 
  created_at: 2010-07-05 17:11:49
  error_line: "429"
  body: "            printf(\"%s%s%s\\n\",MSG_MEASURE_FILE_ERROR,the_szCurMetrics,MSG_METRIC_NORMAL);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9363"
  subtask_id: "1"
source_codes_1525: 
  created_at: 2010-07-05 17:20:41
  error_line: "78"
  body: "\tMessage = \"#if?????A??????????#endif?????????\";\n"
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10231"
  subtask_id: "8"
source_codes_526: 
  created_at: 2010-07-05 17:11:43
  error_line: "261"
  body: "    if(the_iRet == ANZ_NO_MEASURE_FILES){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9232"
  subtask_id: "1"
source_codes_658: 
  created_at: 2010-07-05 17:11:49
  error_line: 
  body: "        }\r\n    }\r\n\
    \r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9364"
  subtask_id: "1"
source_codes_1526: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10232"
  subtask_id: "8"
source_codes_527: 
  created_at: 2010-07-05 17:11:43
  error_line: "262"
  body: "        printf(\"%s\\n\",MSG_NO_FILES);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9233"
  subtask_id: "1"
source_codes_659: 
  created_at: 2010-07-05 17:11:49
  error_line: "433"
  body: |
    EXIT:;

  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9365"
  subtask_id: "1"
source_codes_1527: 
  created_at: 2010-07-05 17:20:41
  error_line: "81"
  body: |
    PreprcNoClosedExc::PreprcNoClosedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10233"
  subtask_id: "8"
source_codes_790: 
  created_at: 2010-07-05 17:13:48
  error_line: "138"
  body: "    memset(the_pMeasureItem,0,argc * sizeof(char *));\r\n"
  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9496"
  subtask_id: "11"
source_codes_528: 
  created_at: 2010-07-05 17:11:43
  error_line: 
  body: "    }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9234"
  subtask_id: "1"
source_codes_1528: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    PreprcNoClosedExc::~PreprcNoClosedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* KanJiErrorExc?F                             */
    /* ?S?p??????g?p???s?????                    */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10234"
  subtask_id: "8"
source_codes_791: 
  created_at: 2010-07-05 17:13:48
  error_line: 
  body: |
    
    the_pOption = the_pAnzInfo->m_option;
    /* ?f?t?H???g?l??Option????the_pCmdOption??????? */
    the_pOption->m_version = OFF;
    the_pOption->m_help = OFF;
    the_pOption->m_verbos = OFF;
    #ifdef __GNUC__
    strcpy(the_pOption->m_prefix,"./");
    #else
    strcpy(the_pOption->m_prefix,".\\");
    #endif
    strcpy(the_pOption->m_filePattern,"**/*.[CcHh]");
    strcpy(the_pOption->m_symbolFile,"");
    strcpy(the_pOption->m_optionFile,"");
    the_pOption->m_fileLOC = ON;
    the_pOption->m_redundancy = OFF;
    the_pOption->m_funcNum = OFF;
    the_pOption->m_eloc = OFF;
    the_pOption->m_mccabe = OFF;
    the_pOption->m_similar = OFF;
    the_pOption->m_trend = OFF;
    the_pOption->m_funcTrend = OFF;
    the_pOption->m_symThresh = 70;
    the_pOption->m_minThresh = 2;
    
    /* ?R?}???h???C??????????Option????????????m?? */

  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9497"
  subtask_id: "11"
source_codes_529: 
  created_at: 2010-07-05 17:11:43
  error_line: "264"
  body: "    if(the_iRet == ANZ_ERR_MEMORY_FAILED){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9235"
  subtask_id: "1"
source_codes_1529: 
  created_at: 2010-07-05 17:20:41
  error_line: "92"
  body: |
    KanJiErrorExc::KanJiErrorExc()

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10235"
  subtask_id: "8"
source_codes_792: 
  created_at: 2010-07-05 17:13:48
  error_line: "165"
  body: "    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));\r\n"
  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9498"
  subtask_id: "11"
source_codes_660: 
  created_at: 2010-07-05 17:11:49
  error_line: 
  body: "    /* Error File???o????? */\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9366"
  subtask_id: "1"
source_codes_793: 
  created_at: 2010-07-05 17:13:48
  error_line: 
  body: "    if(the_pCmdOption == NULL){\r\n        the_iRet = ANZ_ERR_MEMORY_FAILED;\r\n        return 0;\r\n    }\r\n    memset(the_pCmdOption,'\\0',sizeof(ST_Option));\r\n    /* ?f?t?H???g?l??Option????the_pCmdOption??????? */\r\n    the_pCmdOption->m_version = OFF;\r\n    the_pCmdOption->m_help = OFF;\r\n    the_pCmdOption->m_verbos = OFF;\r\n\
    #ifdef __GNUC__\r\n    strcpy(the_pCmdOption->m_prefix,\"./\");\r\n\
    #else\r\n    strcpy(the_pCmdOption->m_prefix,\".\\\\\");\r\n\
    #endif\r\n    strcpy(the_pCmdOption->m_filePattern,\"**/*.[CcHh]\");\r\n    strcpy(the_pCmdOption->m_symbolFile,\"\");\r\n    strcpy(the_pCmdOption->m_optionFile,\"\");\r\n    the_pCmdOption->m_fileLOC = ON;\r\n    the_pCmdOption->m_redundancy = OFF;\r\n    the_pCmdOption->m_funcNum = OFF;\r\n    the_pCmdOption->m_eloc = OFF;\r\n    the_pCmdOption->m_mccabe = OFF;\r\n    the_pCmdOption->m_similar = OFF;\r\n    the_pCmdOption->m_trend = OFF;\r\n    the_pCmdOption->m_funcTrend = OFF;\r\n    the_pCmdOption->m_symThresh = 70;\r\n    the_pCmdOption->m_minThresh = 2;\r\n\
    \r\n    /* ?R?}???h???C??????????? */\r\n    the_iRet = AnalyzeCmdLine(argc,argv,the_pCmdOption,the_pMeasureItem);\r\n    if(the_iRet != ANZ_SUCCESS){\r\n        return 0;\r\n    }\r\n    if(g_bOutTime) {\r\n        ftime(&the_st);\r\n    }\r\n\
    \r\n    /* Option??????????? */\r\n    the_iRet = SetOption(the_pAnzInfo,the_pCmdOption);\r\n    if(the_iRet != ANZ_SUCCESS){\r\n        return 0;\r\n    }\r\n    /* ?v?????????????? */\r\n    the_iRet = GetMeasureType(the_pOption,&the_iMeasureType);\r\n    if(the_iRet != ANZ_SUCCESS){\r\n        return 0;\r\n    }\r\n    /* ?R?}???h???C??????????Option??????????????? */\r\n"
  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9499"
  subtask_id: "11"
source_codes_661: 
  created_at: 2010-07-05 17:11:49
  error_line: "435"
  body: "    the_iRet = OutErrorFile(the_pAnzInfo->m_err);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9367"
  subtask_id: "1"
source_codes_1530: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10236"
  subtask_id: "8"
source_codes_794: 
  created_at: 2010-07-05 17:13:48
  error_line: "214"
  body: "    if(the_pCmdOption != NULL){\r\n"
  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9500"
  subtask_id: "11"
source_codes_530: 
  created_at: 2010-07-05 17:11:43
  error_line: "265"
  body: "        printf(\"%s\\n\",MSG_MOMORY_FAILED);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9236"
  subtask_id: "1"
source_codes_662: 
  created_at: 2010-07-05 17:11:49
  error_line: "436"
  body: "    if(the_iRet == ANZ_ERR_MEMORY_FAILED){\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9368"
  subtask_id: "1"
source_codes_1531: 
  created_at: 2010-07-05 17:20:41
  error_line: "94"
  body: "\tMessage = \"?S?p??????g?p???s??????B\";\n"
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10237"
  subtask_id: "8"
source_codes_795: 
  created_at: 2010-07-05 17:13:48
  error_line: 
  body: "        free(the_pCmdOption);\r\n        the_pCmdOption = NULL;\r\n    }\r\n    /* ?v???????`?F?b?N???? */\r\n    the_iRet = CheckMeasureItem(the_pMeasureItem,the_iMeasureType);\r\n    if(the_iRet != ANZ_SUCCESS){\r\n        return 0;\r\n    }\r\n   \r\n    /* ????????t?@?C????? */\r\n    if(the_iMeasureType == ANZ_TREND_MEASURE)    {\r\n        int the_iType = -1;\r\n        int the_pPos = -1;\r\n        isDirOrFile(*the_pMeasureItem,&the_iType);\r\n        if(the_iType == ANZ_FILE) {\r\n            g_bTrendFile = true;\r\n            /* the_pMeasureItme??Path?????????? */\r\n            GetPathPos(*the_pMeasureItem,&the_pPos);\r\n            g_szNVPath[the_pPos] = '\\0';\r\n            if(the_pPos > 0) {\r\n                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;\r\n            }\r\n\
    \r\n            GetPathPos(*(the_pMeasureItem + 1),&the_pPos);\r\n            g_szOVPath[the_pPos] = '\\0';\r\n            if(the_pPos > 0) {\r\n                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;\r\n            }\r\n            /* g_szNVPath?Ag_szOVPath??????p?X???X???? */\r\n            the_iRet = ResetTrendPath(g_szNVPath);\r\n            the_iRet = ResetTrendPath(g_szOVPath);\r\n            if(the_iRet != ANZ_SUCCESS) {\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n    /* ?v?????File??List???????? */\r\n    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);\r\n    if(the_iRet == ANZ_NO_MEASURE_FILES){\r\n        printf(\"%s\\n\",MSG_NO_FILES);\r\n    }\r\n    if(the_iRet == ANZ_ERR_MEMORY_FAILED){\r\n        printf(\"%s\\n\",MSG_MOMORY_FAILED);\r\n    }\r\n    if(the_iRet != ANZ_SUCCESS){\r\n        return 0;\r\n    }\r\n    /* ?o?R???????????? */\r\n    /* FileLOC?v??Option???w?????? */\r\n    if(the_pOption->m_fileLOC == ON){\r\n        strcat(the_szCurMetrics,\"FileLOC\");\r\n    }\r\n    /* File???x?v??Option???w?????? */\r\n    if(the_pOption->m_redundancy == ON){\r\n"
  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9501"
  subtask_id: "11"
source_codes_531: 
  created_at: 2010-07-05 17:11:43
  error_line: 
  body: "    }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9237"
  subtask_id: "1"
source_codes_663: 
  created_at: 2010-07-05 17:11:49
  error_line: "437"
  body: "        printf(\"%s\\n\",MSG_MOMORY_FAILED);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9369"
  subtask_id: "1"
source_codes_796: 
  created_at: 2010-07-05 17:13:49
  error_line: "269"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9502"
  subtask_id: "11"
source_codes_400: 
  created_at: 2010-07-05 17:11:40
  error_line: 
  body: |
    
    /****************************************************/
    /*              ?O???[?o???????                  */
    /****************************************************/
    /* ????????File??n???h????????????O???[?o???????? */
    
    /* Log File */

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9106"
  subtask_id: "1"
source_codes_532: 
  created_at: 2010-07-05 17:11:43
  error_line: "267"
  body: "    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9238"
  subtask_id: "1"
source_codes_664: 
  created_at: 2010-07-05 17:11:49
  error_line: 
  body: "    }\r\n\
    \r\n    /* ???????????????? */\r\n    /* ?R?}???h???C??????????Option??????????????? */\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9370"
  subtask_id: "1"
source_codes_1532: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10238"
  subtask_id: "8"
source_codes_1400: 
  created_at: 2010-07-05 17:19:43
  error_line: "65"
  body: |
    StrLiteralNoClosedExc::StrLiteralNoClosedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10106"
  subtask_id: "10"
source_codes_797: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"File???x\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9503"
  subtask_id: "11"
source_codes_401: 
  created_at: 2010-07-05 17:11:40
  error_line: "44"
  body: |
    FILE *g_fpLogFile = NULL;       /* Log File pointer */

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9107"
  subtask_id: "1"
source_codes_533: 
  created_at: 2010-07-05 17:11:43
  error_line: "268"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9239"
  subtask_id: "1"
source_codes_665: 
  created_at: 2010-07-05 17:11:49
  error_line: "442"
  body: "    if(the_pCmdOption != NULL){\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9371"
  subtask_id: "1"
source_codes_1533: 
  created_at: 2010-07-05 17:20:41
  error_line: "97"
  body: |
    KanJiErrorExc::KanJiErrorExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10239"
  subtask_id: "8"
source_codes_1401: 
  created_at: 2010-07-05 17:19:43
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    StrLiteralNoClosedExc::~StrLiteralNoClosedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* PreprcNoClosedExc?F                         */
    /* #if?????A??????????#endif?????????     */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10107"
  subtask_id: "10"
source_codes_798: 
  created_at: 2010-07-05 17:13:49
  error_line: "273"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9504"
  subtask_id: "11"
source_codes_402: 
  created_at: 2010-07-05 17:11:40
  error_line: 
  body: |
    /*  Trace File */

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9108"
  subtask_id: "1"
source_codes_534: 
  created_at: 2010-07-05 17:11:43
  error_line: 
  body: "    }\r\n    /* ?o?R???????????? */\r\n    /* FileLOC?v??Option???w?????? */\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9240"
  subtask_id: "1"
source_codes_666: 
  created_at: 2010-07-05 17:11:49
  error_line: 
  body: "        free(the_pCmdOption);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9372"
  subtask_id: "1"
source_codes_1534: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    KanJiErrorExc::~KanJiErrorExc()  throw() {}
    
    /*---------------------------------------------*/
    /* CharLiteralNoClosedExc?F                    */
    /* ?V???O???N?H?[?e?[?V???????}?b?`??????????*/
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10240"
  subtask_id: "8"
source_codes_1402: 
  created_at: 2010-07-05 17:19:43
  error_line: "76"
  body: |
    PreprcNoClosedExc::PreprcNoClosedExc()

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10108"
  subtask_id: "10"
source_codes_799: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"File???x\");\r\n        }\r\n    }\r\n    /* ??????v??Option???w?????? */\r\n    if(the_pOption->m_funcNum){\r\n"
  updated_at: 2011-05-13 10:35:35
  analyzed_source_path_id: "165"
  id: "9505"
  subtask_id: "11"
source_codes_403: 
  created_at: 2010-07-05 17:11:40
  error_line: "46"
  body: |
    FILE *g_fpTraceFile = NULL;     /* Trace File pointer */

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9109"
  subtask_id: "1"
source_codes_535: 
  created_at: 2010-07-05 17:11:43
  error_line: "272"
  body: "    if(the_pOption->m_fileLOC == ON){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9241"
  subtask_id: "1"
source_codes_667: 
  created_at: 2010-07-05 17:11:49
  error_line: "444"
  body: "        the_pCmdOption = NULL;\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9373"
  subtask_id: "1"
source_codes_1535: 
  created_at: 2010-07-05 17:20:41
  error_line: "108"
  body: |
    CharLiteralNoClosedExc::CharLiteralNoClosedExc()

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10241"
  subtask_id: "8"
source_codes_1403: 
  created_at: 2010-07-05 17:19:43
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10109"
  subtask_id: "10"
source_codes_404: 
  created_at: 2010-07-05 17:11:40
  error_line: 
  body: |
    /* ?G???[File */

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9110"
  subtask_id: "1"
source_codes_536: 
  created_at: 2010-07-05 17:11:43
  error_line: "273"
  body: "        strcat(the_szCurMetrics,\"FileLOC\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9242"
  subtask_id: "1"
source_codes_668: 
  created_at: 2010-07-05 17:11:50
  error_line: 
  body: "    }\r\n    /* ?v?????List?????????? */\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9374"
  subtask_id: "1"
source_codes_1536: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10242"
  subtask_id: "8"
source_codes_1404: 
  created_at: 2010-07-05 17:19:43
  error_line: "78"
  body: "\tMessage = \"#if?????A??????????#endif?????????\";\n"
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10110"
  subtask_id: "10"
source_codes_405: 
  created_at: 2010-07-05 17:11:40
  error_line: "48"
  body: |
    FILE *g_fpErrorFile = NULL;

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9111"
  subtask_id: "1"
source_codes_537: 
  created_at: 2010-07-05 17:11:43
  error_line: 
  body: "    }\r\n    /* File???x?v??Option???w?????? */\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9243"
  subtask_id: "1"
source_codes_669: 
  created_at: 2010-07-05 17:11:50
  error_line: "447"
  body: "    if(the_pMeasureItem != NULL) {\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9375"
  subtask_id: "1"
source_codes_1537: 
  created_at: 2010-07-05 17:20:41
  error_line: "110"
  body: "\tMessage = \"?V???O???N?H?[?e?[?V???????}?b?`??????????\";\n"
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10243"
  subtask_id: "8"
source_codes_1405: 
  created_at: 2010-07-05 17:19:43
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10111"
  subtask_id: "10"
source_codes_406: 
  created_at: 2010-07-05 17:11:40
  error_line: 
  body: ""
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9112"
  subtask_id: "1"
source_codes_538: 
  created_at: 2010-07-05 17:11:43
  error_line: "276"
  body: "    if(the_pOption->m_redundancy == ON){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9244"
  subtask_id: "1"
source_codes_1538: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10244"
  subtask_id: "8"
source_codes_1406: 
  created_at: 2010-07-05 17:19:43
  error_line: "81"
  body: |
    PreprcNoClosedExc::PreprcNoClosedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10112"
  subtask_id: "10"
source_codes_407: 
  created_at: 2010-07-05 17:11:40
  error_line: "50"
  body: |
    bool g_bTrace           = false;    /* Trace flag */

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9113"
  subtask_id: "1"
source_codes_539: 
  created_at: 2010-07-05 17:11:43
  error_line: "277"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9245"
  subtask_id: "1"
source_codes_1539: 
  created_at: 2010-07-05 17:20:41
  error_line: "113"
  body: |
    CharLiteralNoClosedExc::CharLiteralNoClosedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10245"
  subtask_id: "8"
source_codes_1407: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    PreprcNoClosedExc::~PreprcNoClosedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* KanJiErrorExc?F                             */
    /* ?S?p??????g?p???s?????                    */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10113"
  subtask_id: "10"
source_codes_670: 
  created_at: 2010-07-05 17:11:50
  error_line: 
  body: "        free(the_pMeasureItem);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9376"
  subtask_id: "1"
source_codes_408: 
  created_at: 2010-07-05 17:11:40
  error_line: "51"
  body: |
    char g_szNVPath[MAX_PATH] = {0};

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9114"
  subtask_id: "1"
source_codes_1408: 
  created_at: 2010-07-05 17:19:44
  error_line: "92"
  body: |
    KanJiErrorExc::KanJiErrorExc()

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10114"
  subtask_id: "10"
source_codes_671: 
  created_at: 2010-07-05 17:11:50
  error_line: "449"
  body: "        the_pMeasureItem = NULL;\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9377"
  subtask_id: "1"
source_codes_1540: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    CharLiteralNoClosedExc::~CharLiteralNoClosedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* UnKnownErrorExc?F                           */
    /* ?s????G???[?????????????                  */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10246"
  subtask_id: "8"
source_codes_1409: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10115"
  subtask_id: "10"
source_codes_540: 
  created_at: 2010-07-05 17:11:43
  error_line: "278"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9246"
  subtask_id: "1"
source_codes_672: 
  created_at: 2010-07-05 17:11:50
  error_line: 
  body: "    }\r\n\
    \r\n    /* AnalyzeMe????\\?[?X?????????? */\r\n    FreeAllResourc(the_pAnzInfo);\r\n\
    \r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9378"
  subtask_id: "1"
source_codes_409: 
  created_at: 2010-07-05 17:11:40
  error_line: "52"
  body: |
    char g_szOVPath[MAX_PATH] = {0};

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9115"
  subtask_id: "1"
source_codes_1541: 
  created_at: 2010-07-05 17:20:41
  error_line: "124"
  body: |
    UnKnownErrorExc::UnKnownErrorExc()

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10247"
  subtask_id: "8"
source_codes_541: 
  created_at: 2010-07-05 17:11:43
  error_line: "279"
  body: "            strcat(the_szCurMetrics,\"File???x\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9247"
  subtask_id: "1"
source_codes_673: 
  created_at: 2010-07-05 17:11:50
  error_line: "455"
  body: "    if(g_bOutTime) {\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9379"
  subtask_id: "1"
source_codes_1542: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10248"
  subtask_id: "8"
source_codes_1410: 
  created_at: 2010-07-05 17:19:44
  error_line: "94"
  body: "\tMessage = \"?S?p??????g?p???s??????B\";\n"
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10116"
  subtask_id: "10"
source_codes_410: 
  created_at: 2010-07-05 17:11:40
  error_line: "53"
  body: |
    bool g_bTrendFile = false;

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9116"
  subtask_id: "1"
source_codes_542: 
  created_at: 2010-07-05 17:11:43
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9248"
  subtask_id: "1"
source_codes_674: 
  created_at: 2010-07-05 17:11:50
  error_line: "456"
  body: "        ftime(&the_ed);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9380"
  subtask_id: "1"
source_codes_411: 
  created_at: 2010-07-05 17:11:40
  error_line: 
  body: |
    /* Option File????e??????????O???[?o???????? */

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9117"
  subtask_id: "1"
source_codes_543: 
  created_at: 2010-07-05 17:11:43
  error_line: "281"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9249"
  subtask_id: "1"
source_codes_675: 
  created_at: 2010-07-05 17:11:50
  error_line: "457"
  body: "        printf(\"\\nTotal times:%ld ms\\n\",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9381"
  subtask_id: "1"
source_codes_1543: 
  created_at: 2010-07-05 17:20:41
  error_line: "126"
  body: "\tMessage = \"?v???????G???[????????????????A?v???????~??????????B\";\n"
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10249"
  subtask_id: "8"
source_codes_1411: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10117"
  subtask_id: "10"
source_codes_412: 
  created_at: 2010-07-05 17:11:40
  error_line: "55"
  body: |
    char *g_optionFileCont = NULL;

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9118"
  subtask_id: "1"
source_codes_544: 
  created_at: 2010-07-05 17:11:43
  error_line: "282"
  body: "            strcat(the_szCurMetrics,\"File???x\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9250"
  subtask_id: "1"
source_codes_676: 
  created_at: 2010-07-05 17:11:50
  error_line: 
  body: "    }\r\n\
    \r\n\
    #ifdef _DEBUG\r\n  CheckAllMem();\r\n  DestoryMemMan();\r\n\
    #endif\r\n    return the_iRet;\r\n\
    }\r\n\
    /**\r\n\
    *  AbortAnalyzeMe\r\n\
    *  AnalyzeMe Abort\r\n\
    *  @param\r\n\
    *  @return\r\n\
    *          ???\r\n\
    *  @author zhang-gh\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9382"
  subtask_id: "1"
source_codes_1544: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10250"
  subtask_id: "8"
source_codes_1412: 
  created_at: 2010-07-05 17:19:44
  error_line: "97"
  body: |
    KanJiErrorExc::KanJiErrorExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10118"
  subtask_id: "10"
source_codes_413: 
  created_at: 2010-07-05 17:11:41
  error_line: 
  body: |
    /* Symbol File????e??????????O???[?o???????? */

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9119"
  subtask_id: "1"
source_codes_545: 
  created_at: 2010-07-05 17:11:43
  error_line: 
  body: "        }\r\n    }\r\n    /* ??????v??Option???w?????? */\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9251"
  subtask_id: "1"
source_codes_677: 
  created_at: 2010-07-05 17:11:50
  error_line: "473"
  body: |
    */

  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9383"
  subtask_id: "1"
source_codes_1545: 
  created_at: 2010-07-05 17:20:41
  error_line: "129"
  body: |
    UnKnownErrorExc::UnKnownErrorExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10251"
  subtask_id: "8"
source_codes_1413: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    KanJiErrorExc::~KanJiErrorExc()  throw() {}
    
    /*---------------------------------------------*/
    /* CharLiteralNoClosedExc?F                    */
    /* ?V???O???N?H?[?e?[?V???????}?b?`??????????*/
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10119"
  subtask_id: "10"
source_codes_414: 
  created_at: 2010-07-05 17:11:41
  error_line: "57"
  body: |
    char *g_symbolFileCont = NULL;

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9120"
  subtask_id: "1"
source_codes_546: 
  created_at: 2010-07-05 17:11:43
  error_line: "286"
  body: "    if(the_pOption->m_funcNum){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9252"
  subtask_id: "1"
source_codes_678: 
  created_at: 2010-07-05 17:11:50
  error_line: 
  body: |
    #ifdef __GNUC__

  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9384"
  subtask_id: "1"
source_codes_1546: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    UnKnownErrorExc::~UnKnownErrorExc()  throw() {}
    
    /*---------------------------------------------*/
    /* MemoryFailedExc?F                           */
    /* ????????????????s???????                */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10252"
  subtask_id: "8"
source_codes_1414: 
  created_at: 2010-07-05 17:19:44
  error_line: "108"
  body: |
    CharLiteralNoClosedExc::CharLiteralNoClosedExc()

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10120"
  subtask_id: "10"
source_codes_415: 
  created_at: 2010-07-05 17:11:41
  error_line: "58"
  body: |
    bool g_bOutTime = false;

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9121"
  subtask_id: "1"
source_codes_547: 
  created_at: 2010-07-05 17:11:43
  error_line: "287"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9253"
  subtask_id: "1"
source_codes_679: 
  created_at: 2010-07-05 17:11:50
  error_line: "475"
  body: |
    void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )

  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9385"
  subtask_id: "1"
source_codes_1547: 
  created_at: 2010-07-05 17:20:41
  error_line: "140"
  body: |
    MemoryFailedExc::MemoryFailedExc()

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10253"
  subtask_id: "8"
source_codes_1415: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10121"
  subtask_id: "10"
source_codes_416: 
  created_at: 2010-07-05 17:11:41
  error_line: "59"
  body: |
    ST_AnalyzeMe *g_pAnzInfo;  /* AnalyzeMe??????? */

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9122"
  subtask_id: "1"
source_codes_548: 
  created_at: 2010-07-05 17:11:44
  error_line: "288"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9254"
  subtask_id: "1"
source_codes_1548: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10254"
  subtask_id: "8"
source_codes_1416: 
  created_at: 2010-07-05 17:19:44
  error_line: "110"
  body: "\tMessage = \"?V???O???N?H?[?e?[?V???????}?b?`??????????\";\n"
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10122"
  subtask_id: "10"
source_codes_417: 
  created_at: 2010-07-05 17:11:41
  error_line: 
  body: |
    /**
    *  main
    *  AnalyzeMe????C?????
    *  @param  argc ?R?}???h???C??????????
    *  @param  argv ?R?}???h???C?????????z??
    *  @return
               ANZ_SUCCESS:?????I??
               ANZ_ERROR  :????I??
    *  @author zhang-gh

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9123"
  subtask_id: "1"
source_codes_549: 
  created_at: 2010-07-05 17:11:44
  error_line: "289"
  body: "            strcat(the_szCurMetrics,\"?????\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9255"
  subtask_id: "1"
source_codes_1549: 
  created_at: 2010-07-05 17:20:41
  error_line: "142"
  body: "\tMessage = \"????????????????s???????\";\n"
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10255"
  subtask_id: "8"
source_codes_1417: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10123"
  subtask_id: "10"
source_codes_680: 
  created_at: 2010-07-05 17:11:50
  error_line: 
  body: |
    #else
    BOOL WINAPI AbortAnalyzeMe(DWORD dwCtrlType)
    #endif
    {

  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9386"
  subtask_id: "1"
source_codes_418: 
  created_at: 2010-07-05 17:11:41
  error_line: "69"
  body: |
    */

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9124"
  subtask_id: "1"
source_codes_1418: 
  created_at: 2010-07-05 17:19:44
  error_line: "113"
  body: |
    CharLiteralNoClosedExc::CharLiteralNoClosedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10124"
  subtask_id: "10"
source_codes_681: 
  created_at: 2010-07-05 17:11:50
  error_line: "480"
  body: "    char the_errMsg[128]; /* ?G???[???b?Z?[?W */\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9387"
  subtask_id: "1"
source_codes_419: 
  created_at: 2010-07-05 17:11:41
  error_line: "70"
  body: |
    int main(int argc,char * argv[])

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9125"
  subtask_id: "1"
source_codes_1550: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10256"
  subtask_id: "8"
source_codes_1419: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    CharLiteralNoClosedExc::~CharLiteralNoClosedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* UnKnownErrorExc?F                           */
    /* ?s????G???[?????????????                  */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10125"
  subtask_id: "10"
source_codes_682: 
  created_at: 2010-07-05 17:11:50
  error_line: 
  body: |
    #ifdef __GNUC__
        /*  Signal */

  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9388"
  subtask_id: "1"
source_codes_550: 
  created_at: 2010-07-05 17:11:44
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9256"
  subtask_id: "1"
source_codes_1551: 
  created_at: 2010-07-05 17:20:41
  error_line: "145"
  body: |
    MemoryFailedExc::MemoryFailedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10257"
  subtask_id: "8"
source_codes_683: 
  created_at: 2010-07-05 17:11:50
  error_line: "483"
  body: "    switch(sig){\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9389"
  subtask_id: "1"
source_codes_551: 
  created_at: 2010-07-05 17:11:44
  error_line: "291"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9257"
  subtask_id: "1"
source_codes_1552: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    MemoryFailedExc::~MemoryFailedExc() throw() {}
    
    /*---------------------------------------------*/
    /* FileOpenFailedExc?F                         */
    /* File???J?????s???????                      */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10258"
  subtask_id: "8"
source_codes_1420: 
  created_at: 2010-07-05 17:19:44
  error_line: "124"
  body: |
    UnKnownErrorExc::UnKnownErrorExc()

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10126"
  subtask_id: "10"
source_codes_684: 
  created_at: 2010-07-05 17:11:50
  error_line: 
  body: "    case SIGINT :\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9390"
  subtask_id: "1"
source_codes_420: 
  created_at: 2010-07-05 17:11:41
  error_line: 
  body: |
    {
        /* ????? */
        int  the_iRet;                 /* Return?l */
        int  the_iMeasureType;         /* ?v??????F????v???A?????v?? */

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9126"
  subtask_id: "1"
source_codes_552: 
  created_at: 2010-07-05 17:11:44
  error_line: "292"
  body: "            strcat(the_szCurMetrics,\"?????\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9258"
  subtask_id: "1"
source_codes_1553: 
  created_at: 2010-07-05 17:20:41
  error_line: "156"
  body: |
    FileOpenFailedExc::FileOpenFailedExc()

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10259"
  subtask_id: "8"
source_codes_1421: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10127"
  subtask_id: "10"
source_codes_685: 
  created_at: 2010-07-05 17:11:50
  error_line: "485"
  body: "        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGINT(%d)\\n\",sig );\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9391"
  subtask_id: "1"
source_codes_421: 
  created_at: 2010-07-05 17:11:41
  error_line: "75"
  body: "    char **the_pMeasureItem;       /* ?R?}???h???C???????????v????????X?g */\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9127"
  subtask_id: "1"
source_codes_553: 
  created_at: 2010-07-05 17:11:44
  error_line: 
  body: "        }\r\n    }\r\n    /* ELOC?v??Option???w?????? */\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9259"
  subtask_id: "1"
source_codes_686: 
  created_at: 2010-07-05 17:11:50
  error_line: "486"
  body: "        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9392"
  subtask_id: "1"
source_codes_422: 
  created_at: 2010-07-05 17:11:41
  error_line: "76"
  body: "    char the_szCurMetrics[MAX_METRICS] = {0};/* ?J?????g?v??Metrics */\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9128"
  subtask_id: "1"
source_codes_554: 
  created_at: 2010-07-05 17:11:44
  error_line: "296"
  body: "    if(the_pOption->m_eloc){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9260"
  subtask_id: "1"
source_codes_1554: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10260"
  subtask_id: "8"
source_codes_1422: 
  created_at: 2010-07-05 17:19:44
  error_line: "126"
  body: "\tMessage = \"?v???????G???[????????????????A?v???????~??????????B\";\n"
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10128"
  subtask_id: "10"
source_codes_423: 
  created_at: 2010-07-05 17:11:41
  error_line: 
  body: "    ST_Option    *the_pCmdOption;    /* ?R?}???h???C??????????Option???? */\r\n    ST_AnalyzeMe *the_pAnzInfo;      /* AnalyzeMe??????? */\r\n    ST_Option    *the_pOption;       /* AnalyzeMe???????????Option???? */\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9129"
  subtask_id: "1"
source_codes_555: 
  created_at: 2010-07-05 17:11:44
  error_line: "297"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9261"
  subtask_id: "1"
source_codes_687: 
  created_at: 2010-07-05 17:11:50
  error_line: 
  body: "        break;\r\n    case SIGQUIT :\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9393"
  subtask_id: "1"
source_codes_1555: 
  created_at: 2010-07-05 17:20:41
  error_line: "158"
  body: "\tMessage = \"File???I?[?v????????????s???????\";\n"
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10261"
  subtask_id: "8"
source_codes_1423: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10129"
  subtask_id: "10"
source_codes_424: 
  created_at: 2010-07-05 17:11:41
  error_line: "80"
  body: "    char *the_pTrace = NULL;\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9130"
  subtask_id: "1"
source_codes_556: 
  created_at: 2010-07-05 17:11:44
  error_line: "298"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9262"
  subtask_id: "1"
source_codes_688: 
  created_at: 2010-07-05 17:11:50
  error_line: "489"
  body: "        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGQUIT(%d)\\n\",sig );\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9394"
  subtask_id: "1"
source_codes_1556: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10262"
  subtask_id: "8"
source_codes_1424: 
  created_at: 2010-07-05 17:19:44
  error_line: "129"
  body: |
    UnKnownErrorExc::UnKnownErrorExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10130"
  subtask_id: "10"
source_codes_425: 
  created_at: 2010-07-05 17:11:41
  error_line: "81"
  body: "    struct timeb the_st ;\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9131"
  subtask_id: "1"
source_codes_557: 
  created_at: 2010-07-05 17:11:44
  error_line: "299"
  body: "            strcat(the_szCurMetrics,\"???ELOC\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9263"
  subtask_id: "1"
source_codes_689: 
  created_at: 2010-07-05 17:11:50
  error_line: "490"
  body: "        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9395"
  subtask_id: "1"
source_codes_1557: 
  created_at: 2010-07-05 17:20:41
  error_line: "161"
  body: |
    FileOpenFailedExc::FileOpenFailedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10263"
  subtask_id: "8"
source_codes_1425: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    UnKnownErrorExc::~UnKnownErrorExc()  throw() {}
    
    /*---------------------------------------------*/
    /* MemoryFailedExc?F                           */
    /* ????????????????s???????                */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10131"
  subtask_id: "10"
source_codes_426: 
  created_at: 2010-07-05 17:11:41
  error_line: 
  body: "    struct timeb the_ed ;\r\n\
    \r\n    /* ????????? */\r\n    the_st.time = 0;\r\n    the_st.millitm = 0;\r\n    the_ed.time = 0;\r\n    the_ed.millitm = 0;\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9132"
  subtask_id: "1"
source_codes_558: 
  created_at: 2010-07-05 17:11:44
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9264"
  subtask_id: "1"
source_codes_1558: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    FileOpenFailedExc::~FileOpenFailedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* FileReadFailedExc?F                         */
    /* File??????????s???????                  */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10264"
  subtask_id: "8"
source_codes_1426: 
  created_at: 2010-07-05 17:19:44
  error_line: "140"
  body: |
    MemoryFailedExc::MemoryFailedExc()

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10132"
  subtask_id: "10"
source_codes_427: 
  created_at: 2010-07-05 17:11:41
  error_line: "89"
  body: "    the_pAnzInfo = NULL;\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9133"
  subtask_id: "1"
source_codes_559: 
  created_at: 2010-07-05 17:11:44
  error_line: "301"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9265"
  subtask_id: "1"
source_codes_1559: 
  created_at: 2010-07-05 17:20:41
  error_line: "172"
  body: |
    FileReadFailedExc::FileReadFailedExc()

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10265"
  subtask_id: "8"
source_codes_1427: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10133"
  subtask_id: "10"
source_codes_690: 
  created_at: 2010-07-05 17:11:50
  error_line: 
  body: "        break;\r\n    case SIGKILL :\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9396"
  subtask_id: "1"
source_codes_428: 
  created_at: 2010-07-05 17:11:41
  error_line: 
  body: "    the_pCmdOption = NULL;\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9134"
  subtask_id: "1"
source_codes_1428: 
  created_at: 2010-07-05 17:19:44
  error_line: "142"
  body: "\tMessage = \"????????????????s???????\";\n"
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10134"
  subtask_id: "10"
source_codes_691: 
  created_at: 2010-07-05 17:11:50
  error_line: "493"
  body: "        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGKILL(%d)\\n\",sig );\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9397"
  subtask_id: "1"
source_codes_429: 
  created_at: 2010-07-05 17:11:41
  error_line: "91"
  body: "    the_iRet = ANZ_SUCCESS;\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9135"
  subtask_id: "1"
source_codes_1560: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10266"
  subtask_id: "8"
source_codes_1429: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10135"
  subtask_id: "10"
source_codes_560: 
  created_at: 2010-07-05 17:11:44
  error_line: "302"
  body: "            strcat(the_szCurMetrics,\"???ELOC\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9266"
  subtask_id: "1"
source_codes_692: 
  created_at: 2010-07-05 17:11:50
  error_line: "494"
  body: "        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9398"
  subtask_id: "1"
source_codes_1561: 
  created_at: 2010-07-05 17:20:41
  error_line: "174"
  body: "\tMessage = \"File???????????????s???????\";\n"
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10267"
  subtask_id: "8"
source_codes_561: 
  created_at: 2010-07-05 17:11:44
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9267"
  subtask_id: "1"
source_codes_693: 
  created_at: 2010-07-05 17:11:50
  error_line: 
  body: "        break;\r\n    case SIGTERM :\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9399"
  subtask_id: "1"
source_codes_1562: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10268"
  subtask_id: "8"
source_codes_1430: 
  created_at: 2010-07-05 17:19:44
  error_line: "145"
  body: |
    MemoryFailedExc::MemoryFailedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10136"
  subtask_id: "10"
source_codes_430: 
  created_at: 2010-07-05 17:11:41
  error_line: 
  body: "    the_pMeasureItem = NULL;\r\n\
    \r\n\
    #ifdef _DEBUG\r\n    InitMemMan();\r\n\
    #endif\r\n\
    \r\n    /* ?V?O?i???n???h????o?^?@*/\r\n    SetSignal() ;\r\n\
    \r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9136"
  subtask_id: "1"
source_codes_562: 
  created_at: 2010-07-05 17:11:44
  error_line: "304"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9268"
  subtask_id: "1"
source_codes_694: 
  created_at: 2010-07-05 17:11:50
  error_line: "497"
  body: "        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGTERM(%d)\\n\",sig );\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9400"
  subtask_id: "1"
source_codes_1563: 
  created_at: 2010-07-05 17:20:41
  error_line: "177"
  body: |
    FileReadFailedExc::FileReadFailedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10269"
  subtask_id: "8"
source_codes_1431: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    MemoryFailedExc::~MemoryFailedExc() throw() {}
    
    /*---------------------------------------------*/
    /* FileOpenFailedExc?F                         */
    /* File???J?????s???????                      */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10137"
  subtask_id: "10"
source_codes_431: 
  created_at: 2010-07-05 17:11:41
  error_line: "101"
  body: "    the_pTrace = getenv(\"AnzTrace\");\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9137"
  subtask_id: "1"
source_codes_563: 
  created_at: 2010-07-05 17:11:45
  error_line: "305"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9269"
  subtask_id: "1"
source_codes_695: 
  created_at: 2010-07-05 17:11:50
  error_line: "498"
  body: "        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9401"
  subtask_id: "1"
source_codes_1564: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    FileReadFailedExc::~FileReadFailedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* InitVariableFailExc						   */
    /* ???????????s?????		                   */
    /*---------------------------------------------*/
    /* ???????????s????? */

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10270"
  subtask_id: "8"
source_codes_1432: 
  created_at: 2010-07-05 17:19:44
  error_line: "156"
  body: |
    FileOpenFailedExc::FileOpenFailedExc()

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10138"
  subtask_id: "10"
source_codes_1300: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10006"
  subtask_id: "12"
source_codes_300: 
  created_at: 2010-07-05 17:09:21
  error_line: "475"
  body: |
    void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )

  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9006"
  subtask_id: "5"
source_codes_432: 
  created_at: 2010-07-05 17:11:41
  error_line: "102"
  body: "    if(the_pTrace != NULL) {\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9138"
  subtask_id: "1"
source_codes_564: 
  created_at: 2010-07-05 17:11:45
  error_line: "306"
  body: "            strcat(the_szCurMetrics,\"FileELOC\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9270"
  subtask_id: "1"
source_codes_696: 
  created_at: 2010-07-05 17:11:50
  error_line: 
  body: "        break;\r\n    case SIGFPE :\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9402"
  subtask_id: "1"
source_codes_301: 
  created_at: 2010-07-05 17:09:21
  error_line: 
  body: |
    #else
    BOOL WINAPI AbortAnalyzeMe(DWORD dwCtrlType)
    #endif
    {

  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9007"
  subtask_id: "5"
source_codes_433: 
  created_at: 2010-07-05 17:11:41
  error_line: "103"
  body: "        if(strcmp(the_pTrace,\"ON\") == 0 ) {\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9139"
  subtask_id: "1"
source_codes_565: 
  created_at: 2010-07-05 17:11:45
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9271"
  subtask_id: "1"
source_codes_697: 
  created_at: 2010-07-05 17:11:50
  error_line: "501"
  body: "        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGFPE(%d)\\n\",sig );\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9403"
  subtask_id: "1"
source_codes_1565: 
  created_at: 2010-07-05 17:20:41
  error_line: "189"
  body: |
    InitVariableFailExc::InitVariableFailExc()

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10271"
  subtask_id: "8"
source_codes_1433: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10139"
  subtask_id: "10"
source_codes_1301: 
  created_at: 2010-07-05 17:18:41
  error_line: "158"
  body: "\tMessage = \"File???I?[?v????????????s???????\";\n"
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10007"
  subtask_id: "12"
source_codes_302: 
  created_at: 2010-07-05 17:09:21
  error_line: "480"
  body: "    char the_errMsg[128]; /* ?G???[???b?Z?[?W */\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9008"
  subtask_id: "5"
source_codes_434: 
  created_at: 2010-07-05 17:11:41
  error_line: 
  body: "            g_bTrace = true;\r\n        }\r\n    }\r\n    /* TraceFile??LogFile???J?? */\r\n\
    \t/*\r\n    g_fpTraceFile = fopen(TRACEFILE,\"w\");\r\n    if(g_fpTraceFile == NULL){\r\n        printf(\"Create trace file failed!\\n\");\r\n    }\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9140"
  subtask_id: "1"
source_codes_566: 
  created_at: 2010-07-05 17:11:45
  error_line: "308"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9272"
  subtask_id: "1"
source_codes_698: 
  created_at: 2010-07-05 17:11:50
  error_line: "502"
  body: "        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9404"
  subtask_id: "1"
source_codes_1566: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10272"
  subtask_id: "8"
source_codes_1434: 
  created_at: 2010-07-05 17:19:44
  error_line: "158"
  body: "\tMessage = \"File???I?[?v????????????s???????\";\n"
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10140"
  subtask_id: "10"
source_codes_1302: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10008"
  subtask_id: "12"
source_codes_303: 
  created_at: 2010-07-05 17:09:21
  error_line: 
  body: |
    #ifdef __GNUC__
        /*  Signal */

  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9009"
  subtask_id: "5"
source_codes_435: 
  created_at: 2010-07-05 17:11:41
  error_line: "113"
  body: "\t*/\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9141"
  subtask_id: "1"
source_codes_567: 
  created_at: 2010-07-05 17:11:45
  error_line: "309"
  body: "            strcat(the_szCurMetrics,\"FileELOC\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9273"
  subtask_id: "1"
source_codes_699: 
  created_at: 2010-07-05 17:11:50
  error_line: 
  body: "        break;\r\n    case SIGILL :\r\n"
  updated_at: 2011-05-13 10:35:30
  analyzed_source_path_id: "151"
  id: "9405"
  subtask_id: "1"
source_codes_1567: 
  created_at: 2010-07-05 17:20:41
  error_line: "191"
  body: "\tMessage = \"???????????????s???????\";\n"
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10273"
  subtask_id: "8"
source_codes_1435: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10141"
  subtask_id: "10"
source_codes_1303: 
  created_at: 2010-07-05 17:18:41
  error_line: "161"
  body: |
    FileOpenFailedExc::FileOpenFailedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10009"
  subtask_id: "12"
source_codes_304: 
  created_at: 2010-07-05 17:09:21
  error_line: "483"
  body: "    switch(sig){\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9010"
  subtask_id: "5"
source_codes_436: 
  created_at: 2010-07-05 17:11:41
  error_line: "114"
  body: "    g_fpLogFile = fopen(APPLOGFILE,\"w\");\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9142"
  subtask_id: "1"
source_codes_568: 
  created_at: 2010-07-05 17:11:45
  error_line: 
  body: "        }\r\n    }\r\n\
    \r\n    /* ???G?x?v??Option???w?????? */\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9274"
  subtask_id: "1"
source_codes_1568: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10274"
  subtask_id: "8"
source_codes_1436: 
  created_at: 2010-07-05 17:19:44
  error_line: "161"
  body: |
    FileOpenFailedExc::FileOpenFailedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10142"
  subtask_id: "10"
source_codes_1304: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    FileOpenFailedExc::~FileOpenFailedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* FileReadFailedExc?F                         */
    /* File??????????s???????                  */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10010"
  subtask_id: "12"
source_codes_305: 
  created_at: 2010-07-05 17:09:21
  error_line: 
  body: "    case SIGINT :\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9011"
  subtask_id: "5"
source_codes_437: 
  created_at: 2010-07-05 17:11:41
  error_line: "115"
  body: "    if(g_fpLogFile == NULL){\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9143"
  subtask_id: "1"
source_codes_569: 
  created_at: 2010-07-05 17:11:45
  error_line: "314"
  body: "    if(the_pOption->m_redundancy){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9275"
  subtask_id: "1"
source_codes_1569: 
  created_at: 2010-07-05 17:20:41
  error_line: "194"
  body: |
    InitVariableFailExc::InitVariableFailExc(string in_userMsg)

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10275"
  subtask_id: "8"
source_codes_1437: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    FileOpenFailedExc::~FileOpenFailedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* FileReadFailedExc?F                         */
    /* File??????????s???????                  */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10143"
  subtask_id: "10"
source_codes_1305: 
  created_at: 2010-07-05 17:18:41
  error_line: "172"
  body: |
    FileReadFailedExc::FileReadFailedExc()

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10011"
  subtask_id: "12"
source_codes_306: 
  created_at: 2010-07-05 17:09:21
  error_line: "485"
  body: "        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGINT(%d)\\n\",sig );\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9012"
  subtask_id: "5"
source_codes_438: 
  created_at: 2010-07-05 17:11:41
  error_line: "116"
  body: "        printf(\"Create log file failed!\\n\");   /* */\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9144"
  subtask_id: "1"
source_codes_1438: 
  created_at: 2010-07-05 17:19:44
  error_line: "172"
  body: |
    FileReadFailedExc::FileReadFailedExc()

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10144"
  subtask_id: "10"
source_codes_1306: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10012"
  subtask_id: "12"
source_codes_307: 
  created_at: 2010-07-05 17:09:21
  error_line: "486"
  body: "        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9013"
  subtask_id: "5"
source_codes_439: 
  created_at: 2010-07-05 17:11:41
  error_line: 
  body: "    }\r\n\
    \r\n    /* AnalyzeMe???????????????m?? */\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9145"
  subtask_id: "1"
source_codes_1570: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {
    	Message = in_userMsg;
    }
    
    InitVariableFailExc::~InitVariableFailExc()  throw() {}
    
    /*---------------------------------------------*/
    /* DirOperateFailedExc?F                           */
    /* ?f?B???N?g???[???????????s?????        */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10276"
  subtask_id: "8"
source_codes_1439: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10145"
  subtask_id: "10"
source_codes_1307: 
  created_at: 2010-07-05 17:18:41
  error_line: "174"
  body: "\tMessage = \"File???????????????s???????\";\n"
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10013"
  subtask_id: "12"
source_codes_570: 
  created_at: 2010-07-05 17:11:45
  error_line: "315"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9276"
  subtask_id: "1"
source_codes_308: 
  created_at: 2010-07-05 17:09:21
  error_line: 
  body: "        break;\r\n    case SIGQUIT :\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9014"
  subtask_id: "5"
source_codes_1571: 
  created_at: 2010-07-05 17:20:41
  error_line: "205"
  body: |
    DirOperateFailedExc::DirOperateFailedExc()

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10277"
  subtask_id: "8"
source_codes_1308: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10014"
  subtask_id: "12"
source_codes_571: 
  created_at: 2010-07-05 17:11:45
  error_line: "316"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9277"
  subtask_id: "1"
source_codes_309: 
  created_at: 2010-07-05 17:09:21
  error_line: "489"
  body: "        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGQUIT(%d)\\n\",sig );\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9015"
  subtask_id: "5"
source_codes_1572: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10278"
  subtask_id: "8"
source_codes_1440: 
  created_at: 2010-07-05 17:19:44
  error_line: "174"
  body: "\tMessage = \"File???????????????s???????\";\n"
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10146"
  subtask_id: "10"
source_codes_1309: 
  created_at: 2010-07-05 17:18:41
  error_line: "177"
  body: |
    FileReadFailedExc::FileReadFailedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10015"
  subtask_id: "12"
source_codes_440: 
  created_at: 2010-07-05 17:11:41
  error_line: "120"
  body: "    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9146"
  subtask_id: "1"
source_codes_572: 
  created_at: 2010-07-05 17:11:45
  error_line: "317"
  body: "            strcat(the_szCurMetrics,\"McCabe????G?x\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9278"
  subtask_id: "1"
source_codes_1573: 
  created_at: 2010-07-05 17:20:41
  error_line: "207"
  body: "\tMessage = \"?f?B???N?g???[???????????s???????\";\n"
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10279"
  subtask_id: "8"
source_codes_1441: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10147"
  subtask_id: "10"
source_codes_441: 
  created_at: 2010-07-05 17:11:41
  error_line: "121"
  body: "    if(the_pAnzInfo == NULL){\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9147"
  subtask_id: "1"
source_codes_573: 
  created_at: 2010-07-05 17:11:45
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9279"
  subtask_id: "1"
source_codes_1574: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10280"
  subtask_id: "8"
source_codes_1442: 
  created_at: 2010-07-05 17:19:44
  error_line: "177"
  body: |
    FileReadFailedExc::FileReadFailedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10148"
  subtask_id: "10"
source_codes_1310: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    FileReadFailedExc::~FileReadFailedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* InitVariableFailExc						   */
    /* ???????????s?????		                   */
    /*---------------------------------------------*/
    /* ???????????s????? */

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10016"
  subtask_id: "12"
source_codes_442: 
  created_at: 2010-07-05 17:11:41
  error_line: "122"
  body: "        the_iRet = ANZ_ERR_MEMORY_FAILED;\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9148"
  subtask_id: "1"
source_codes_574: 
  created_at: 2010-07-05 17:11:45
  error_line: "319"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9280"
  subtask_id: "1"
source_codes_310: 
  created_at: 2010-07-05 17:09:21
  error_line: "490"
  body: "        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9016"
  subtask_id: "5"
source_codes_1575: 
  created_at: 2010-07-05 17:20:41
  error_line: "210"
  body: |
    DirOperateFailedExc::DirOperateFailedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10281"
  subtask_id: "8"
source_codes_1443: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    FileReadFailedExc::~FileReadFailedExc()  throw() {}
    
    /*---------------------------------------------*/
    /* InitVariableFailExc						   */
    /* ???????????s?????		                   */
    /*---------------------------------------------*/
    /* ???????????s????? */

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10149"
  subtask_id: "10"
source_codes_1311: 
  created_at: 2010-07-05 17:18:41
  error_line: "189"
  body: |
    InitVariableFailExc::InitVariableFailExc()

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10017"
  subtask_id: "12"
source_codes_443: 
  created_at: 2010-07-05 17:11:41
  error_line: "123"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9149"
  subtask_id: "1"
source_codes_575: 
  created_at: 2010-07-05 17:11:45
  error_line: "320"
  body: "            strcat(the_szCurMetrics,\"McCabe????G?x\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9281"
  subtask_id: "1"
source_codes_311: 
  created_at: 2010-07-05 17:09:21
  error_line: 
  body: "        break;\r\n    case SIGKILL :\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9017"
  subtask_id: "5"
source_codes_444: 
  created_at: 2010-07-05 17:11:41
  error_line: 
  body: "    }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9150"
  subtask_id: "1"
source_codes_576: 
  created_at: 2010-07-05 17:11:46
  error_line: 
  body: "        }\r\n\
    \r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9282"
  subtask_id: "1"
source_codes_312: 
  created_at: 2010-07-05 17:09:21
  error_line: "493"
  body: "        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGKILL(%d)\\n\",sig );\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9018"
  subtask_id: "5"
source_codes_1576: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    DirOperateFailedExc::~DirOperateFailedExc() throw() {}
    
    /*---------------------------------------------*/
    /* MakeFileListFailedExc?F									*/
    /* ?v??????v?????File??List???????????s?????     */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10282"
  subtask_id: "8"
source_codes_1444: 
  created_at: 2010-07-05 17:19:44
  error_line: "189"
  body: |
    InitVariableFailExc::InitVariableFailExc()

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10150"
  subtask_id: "10"
source_codes_1312: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10018"
  subtask_id: "12"
source_codes_445: 
  created_at: 2010-07-05 17:11:41
  error_line: "125"
  body: "    memset(the_pAnzInfo,'\\0',sizeof(ST_AnalyzeMe));\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9151"
  subtask_id: "1"
source_codes_577: 
  created_at: 2010-07-05 17:11:46
  error_line: "323"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9283"
  subtask_id: "1"
source_codes_313: 
  created_at: 2010-07-05 17:09:21
  error_line: "494"
  body: "        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9019"
  subtask_id: "5"
source_codes_1577: 
  created_at: 2010-07-05 17:20:41
  error_line: "221"
  body: |
    MakeFileListFailedExc::MakeFileListFailedExc()

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10283"
  subtask_id: "8"
source_codes_1445: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10151"
  subtask_id: "10"
source_codes_1313: 
  created_at: 2010-07-05 17:18:41
  error_line: "191"
  body: "\tMessage = \"???????????????s???????\";\n"
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10019"
  subtask_id: "12"
source_codes_446: 
  created_at: 2010-07-05 17:11:41
  error_line: 
  body: "    g_pAnzInfo = the_pAnzInfo;\r\n    /* AnalyzeMe???????????Option????????????m?? */\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9152"
  subtask_id: "1"
source_codes_578: 
  created_at: 2010-07-05 17:11:46
  error_line: "324"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9284"
  subtask_id: "1"
source_codes_314: 
  created_at: 2010-07-05 17:09:21
  error_line: 
  body: "        break;\r\n    case SIGTERM :\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9020"
  subtask_id: "5"
source_codes_1578: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10284"
  subtask_id: "8"
source_codes_1446: 
  created_at: 2010-07-05 17:19:44
  error_line: "191"
  body: "\tMessage = \"???????????????s???????\";\n"
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10152"
  subtask_id: "10"
source_codes_1314: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10020"
  subtask_id: "12"
source_codes_447: 
  created_at: 2010-07-05 17:11:41
  error_line: "128"
  body: "    AnzMalloc(the_pAnzInfo->m_option,ST_Option*,sizeof(ST_Option));\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9153"
  subtask_id: "1"
source_codes_579: 
  created_at: 2010-07-05 17:11:46
  error_line: "325"
  body: "            strcat(the_szCurMetrics,\"File???G?x\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9285"
  subtask_id: "1"
source_codes_315: 
  created_at: 2010-07-05 17:09:21
  error_line: "497"
  body: "        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGTERM(%d)\\n\",sig );\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9021"
  subtask_id: "5"
source_codes_1579: 
  created_at: 2010-07-05 17:20:41
  error_line: "223"
  body: "\tMessage = \"?v?????File??List??????????????s???????\";\n"
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10285"
  subtask_id: "8"
source_codes_1447: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10153"
  subtask_id: "10"
source_codes_1315: 
  created_at: 2010-07-05 17:18:41
  error_line: "194"
  body: |
    InitVariableFailExc::InitVariableFailExc(string in_userMsg)

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10021"
  subtask_id: "12"
source_codes_448: 
  created_at: 2010-07-05 17:11:41
  error_line: "129"
  body: "    if(the_pAnzInfo->m_option == NULL){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9154"
  subtask_id: "1"
source_codes_316: 
  created_at: 2010-07-05 17:09:21
  error_line: "498"
  body: "        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9022"
  subtask_id: "5"
source_codes_1448: 
  created_at: 2010-07-05 17:19:44
  error_line: "194"
  body: |
    InitVariableFailExc::InitVariableFailExc(string in_userMsg)

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10154"
  subtask_id: "10"
source_codes_1316: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |
    {
    	Message = in_userMsg;
    }
    
    InitVariableFailExc::~InitVariableFailExc()  throw() {}
    
    /*---------------------------------------------*/
    /* DirOperateFailedExc?F                           */
    /* ?f?B???N?g???[???????????s?????        */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10022"
  subtask_id: "12"
source_codes_449: 
  created_at: 2010-07-05 17:11:41
  error_line: "130"
  body: "        the_iRet = ANZ_ERR_MEMORY_FAILED;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9155"
  subtask_id: "1"
source_codes_317: 
  created_at: 2010-07-05 17:09:21
  error_line: 
  body: "        break;\r\n    case SIGFPE :\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9023"
  subtask_id: "5"
source_codes_1580: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10286"
  subtask_id: "8"
source_codes_1449: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {
    	Message = in_userMsg;
    }
    
    InitVariableFailExc::~InitVariableFailExc()  throw() {}
    
    /*---------------------------------------------*/
    /* DirOperateFailedExc?F                           */
    /* ?f?B???N?g???[???????????s?????        */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10155"
  subtask_id: "10"
source_codes_1317: 
  created_at: 2010-07-05 17:18:41
  error_line: "205"
  body: |
    DirOperateFailedExc::DirOperateFailedExc()

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10023"
  subtask_id: "12"
source_codes_580: 
  created_at: 2010-07-05 17:11:46
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9286"
  subtask_id: "1"
source_codes_318: 
  created_at: 2010-07-05 17:09:21
  error_line: "501"
  body: "        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGFPE(%d)\\n\",sig );\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9024"
  subtask_id: "5"
source_codes_1581: 
  created_at: 2010-07-05 17:20:41
  error_line: "226"
  body: |
    MakeFileListFailedExc::MakeFileListFailedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10287"
  subtask_id: "8"
source_codes_1318: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10024"
  subtask_id: "12"
source_codes_581: 
  created_at: 2010-07-05 17:11:46
  error_line: "327"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9287"
  subtask_id: "1"
source_codes_319: 
  created_at: 2010-07-05 17:09:21
  error_line: "502"
  body: "        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9025"
  subtask_id: "5"
source_codes_1582: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    MakeFileListFailedExc::~MakeFileListFailedExc() throw() {}
    
    /*---------------------------------------------*/
    /* OptionErrorExc							   */
    /* ?I?v?V?????????????????			       */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10288"
  subtask_id: "8"
source_codes_1450: 
  created_at: 2010-07-05 17:19:44
  error_line: "205"
  body: |
    DirOperateFailedExc::DirOperateFailedExc()

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10156"
  subtask_id: "10"
source_codes_1319: 
  created_at: 2010-07-05 17:18:41
  error_line: "207"
  body: "\tMessage = \"?f?B???N?g???[???????????s???????\";\n"
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10025"
  subtask_id: "12"
source_codes_450: 
  created_at: 2010-07-05 17:11:41
  error_line: "131"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9156"
  subtask_id: "1"
source_codes_582: 
  created_at: 2010-07-05 17:11:46
  error_line: "328"
  body: "            strcat(the_szCurMetrics,\"File???G?x\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9288"
  subtask_id: "1"
source_codes_1583: 
  created_at: 2010-07-05 17:20:41
  error_line: "237"
  body: |
    OptionErrorExc::OptionErrorExc()

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10289"
  subtask_id: "8"
source_codes_1451: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10157"
  subtask_id: "10"
source_codes_451: 
  created_at: 2010-07-05 17:11:41
  error_line: 
  body: "    }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9157"
  subtask_id: "1"
source_codes_583: 
  created_at: 2010-07-05 17:11:46
  error_line: 
  body: "        }\r\n    }\r\n\
    \r\n    /* ?????(1)?v??Option???w?????? */\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9289"
  subtask_id: "1"
source_codes_1584: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10290"
  subtask_id: "8"
source_codes_1452: 
  created_at: 2010-07-05 17:19:44
  error_line: "207"
  body: "\tMessage = \"?f?B???N?g???[???????????s???????\";\n"
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10158"
  subtask_id: "10"
source_codes_1320: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10026"
  subtask_id: "12"
source_codes_320: 
  created_at: 2010-07-05 17:09:21
  error_line: 
  body: "        break;\r\n    case SIGILL :\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9026"
  subtask_id: "5"
source_codes_452: 
  created_at: 2010-07-05 17:11:41
  error_line: "133"
  body: "    memset(the_pAnzInfo->m_option,'\\0',sizeof(ST_Option));\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9158"
  subtask_id: "1"
source_codes_584: 
  created_at: 2010-07-05 17:11:46
  error_line: "333"
  body: "    if(the_pOption->m_trend){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9290"
  subtask_id: "1"
source_codes_1585: 
  created_at: 2010-07-05 17:20:41
  error_line: "239"
  body: "\tMessage = \"\";\n"
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10291"
  subtask_id: "8"
source_codes_1453: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10159"
  subtask_id: "10"
source_codes_1321: 
  created_at: 2010-07-05 17:18:41
  error_line: "210"
  body: |
    DirOperateFailedExc::DirOperateFailedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10027"
  subtask_id: "12"
source_codes_321: 
  created_at: 2010-07-05 17:09:21
  error_line: "505"
  body: "        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGILL(%d)\\n\",sig );\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9027"
  subtask_id: "5"
source_codes_453: 
  created_at: 2010-07-05 17:11:41
  error_line: 
  body: |
    
    /* ?v?????Item????????m?? */

  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9159"
  subtask_id: "1"
source_codes_585: 
  created_at: 2010-07-05 17:11:46
  error_line: "334"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9291"
  subtask_id: "1"
source_codes_1586: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10292"
  subtask_id: "8"
source_codes_1454: 
  created_at: 2010-07-05 17:19:44
  error_line: "210"
  body: |
    DirOperateFailedExc::DirOperateFailedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10160"
  subtask_id: "10"
source_codes_1322: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    DirOperateFailedExc::~DirOperateFailedExc() throw() {}
    
    /*---------------------------------------------*/
    /* MakeFileListFailedExc?F									*/
    /* ?v??????v?????File??List???????????s?????     */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10028"
  subtask_id: "12"
source_codes_322: 
  created_at: 2010-07-05 17:09:21
  error_line: "506"
  body: "        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9028"
  subtask_id: "5"
source_codes_454: 
  created_at: 2010-07-05 17:11:41
  error_line: "137"
  body: "    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9160"
  subtask_id: "1"
source_codes_586: 
  created_at: 2010-07-05 17:11:46
  error_line: "335"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9292"
  subtask_id: "1"
source_codes_323: 
  created_at: 2010-07-05 17:09:21
  error_line: 
  body: "        break;\r\n    case SIGBUS :\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9029"
  subtask_id: "5"
source_codes_455: 
  created_at: 2010-07-05 17:11:42
  error_line: "138"
  body: "    if(the_pMeasureItem == NULL) {\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9161"
  subtask_id: "1"
source_codes_587: 
  created_at: 2010-07-05 17:11:47
  error_line: "336"
  body: "            strcat(the_szCurMetrics,\"File?????(1)\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9293"
  subtask_id: "1"
source_codes_1587: 
  created_at: 2010-07-05 17:20:41
  error_line: "242"
  body: |
    OptionErrorExc::OptionErrorExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10293"
  subtask_id: "8"
source_codes_1455: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    DirOperateFailedExc::~DirOperateFailedExc() throw() {}
    
    /*---------------------------------------------*/
    /* MakeFileListFailedExc?F									*/
    /* ?v??????v?????File??List???????????s?????     */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10161"
  subtask_id: "10"
source_codes_1323: 
  created_at: 2010-07-05 17:18:41
  error_line: "221"
  body: |
    MakeFileListFailedExc::MakeFileListFailedExc()

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10029"
  subtask_id: "12"
source_codes_324: 
  created_at: 2010-07-05 17:09:22
  error_line: "509"
  body: "        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGBUS(%d)\\n\",sig );\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9030"
  subtask_id: "5"
source_codes_456: 
  created_at: 2010-07-05 17:11:42
  error_line: "139"
  body: "        the_iRet = ANZ_ERR_MEMORY_FAILED;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9162"
  subtask_id: "1"
source_codes_588: 
  created_at: 2010-07-05 17:11:47
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9294"
  subtask_id: "1"
source_codes_1588: 
  created_at: 2010-07-05 17:20:41
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    OptionErrorExc::~OptionErrorExc() throw() {}
    
    /*-------------------------------------------*/
    /* OptionErrorExc						     */
    /* ?w?????v???????s????? 			 */
    /*-------------------------------------------*/

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10294"
  subtask_id: "8"
source_codes_1456: 
  created_at: 2010-07-05 17:19:44
  error_line: "221"
  body: |
    MakeFileListFailedExc::MakeFileListFailedExc()

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10162"
  subtask_id: "10"
source_codes_1324: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10030"
  subtask_id: "12"
source_codes_325: 
  created_at: 2010-07-05 17:09:22
  error_line: "510"
  body: "        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9031"
  subtask_id: "5"
source_codes_457: 
  created_at: 2010-07-05 17:11:42
  error_line: "140"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9163"
  subtask_id: "1"
source_codes_589: 
  created_at: 2010-07-05 17:11:47
  error_line: "338"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9295"
  subtask_id: "1"
source_codes_1589: 
  created_at: 2010-07-05 17:20:41
  error_line: "253"
  body: |
    MeasureItemExc::MeasureItemExc()

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10295"
  subtask_id: "8"
source_codes_1457: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10163"
  subtask_id: "10"
source_codes_1325: 
  created_at: 2010-07-05 17:18:41
  error_line: "223"
  body: "\tMessage = \"?v?????File??List??????????????s???????\";\n"
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10031"
  subtask_id: "12"
source_codes_326: 
  created_at: 2010-07-05 17:09:22
  error_line: 
  body: "        break;\r\n    case SIGSEGV :\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9032"
  subtask_id: "5"
source_codes_458: 
  created_at: 2010-07-05 17:11:42
  error_line: 
  body: "    }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9164"
  subtask_id: "1"
source_codes_1458: 
  created_at: 2010-07-05 17:19:44
  error_line: "223"
  body: "\tMessage = \"?v?????File??List??????????????s???????\";\n"
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10164"
  subtask_id: "10"
source_codes_1326: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10032"
  subtask_id: "12"
source_codes_327: 
  created_at: 2010-07-05 17:09:22
  error_line: "513"
  body: "        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGSEGV(%d)\\n\",sig );\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9033"
  subtask_id: "5"
source_codes_459: 
  created_at: 2010-07-05 17:11:42
  error_line: "142"
  body: "    memset(the_pMeasureItem,0,argc * sizeof(char *));\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9165"
  subtask_id: "1"
source_codes_1590: 
  created_at: 2010-07-05 17:20:42
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10296"
  subtask_id: "8"
source_codes_1459: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:08
  analyzed_source_path_id: "148"
  id: "10165"
  subtask_id: "10"
source_codes_1327: 
  created_at: 2010-07-05 17:18:41
  error_line: "226"
  body: |
    MakeFileListFailedExc::MakeFileListFailedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10033"
  subtask_id: "12"
source_codes_590: 
  created_at: 2010-07-05 17:11:47
  error_line: "339"
  body: "            strcat(the_szCurMetrics,\"File?????(1)\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9296"
  subtask_id: "1"
source_codes_328: 
  created_at: 2010-07-05 17:09:22
  error_line: "514"
  body: "        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9034"
  subtask_id: "5"
source_codes_1591: 
  created_at: 2010-07-05 17:20:42
  error_line: "255"
  body: "\tMessage = \"?w?????v???????s??????B\";\n"
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10297"
  subtask_id: "8"
source_codes_1328: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    MakeFileListFailedExc::~MakeFileListFailedExc() throw() {}
    
    /*---------------------------------------------*/
    /* OptionErrorExc							   */
    /* ?I?v?V?????????????????			       */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10034"
  subtask_id: "12"
source_codes_591: 
  created_at: 2010-07-05 17:11:47
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9297"
  subtask_id: "1"
source_codes_329: 
  created_at: 2010-07-05 17:09:22
  error_line: 
  body: "        break;\r\n    case SIGSYS :\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9035"
  subtask_id: "5"
source_codes_1592: 
  created_at: 2010-07-05 17:20:42
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10298"
  subtask_id: "8"
source_codes_1460: 
  created_at: 2010-07-05 17:19:44
  error_line: "226"
  body: |
    MakeFileListFailedExc::MakeFileListFailedExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:08
  analyzed_source_path_id: "148"
  id: "10166"
  subtask_id: "10"
source_codes_1329: 
  created_at: 2010-07-05 17:18:41
  error_line: "237"
  body: |
    OptionErrorExc::OptionErrorExc()

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10035"
  subtask_id: "12"
source_codes_460: 
  created_at: 2010-07-05 17:11:42
  error_line: 
  body: |
    
    the_pOption = the_pAnzInfo->m_option;
    /* ?f?t?H???g?l??Option????the_pCmdOption??????? */
    the_pOption->m_version = OFF;
    the_pOption->m_help = OFF;
    the_pOption->m_verbos = OFF;

  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9166"
  subtask_id: "1"
source_codes_592: 
  created_at: 2010-07-05 17:11:47
  error_line: "341"
  body: "        strcat(the_szCurMetrics,\"File??X??(1)\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9298"
  subtask_id: "1"
source_codes_1593: 
  created_at: 2010-07-05 17:20:42
  error_line: "258"
  body: |
    MeasureItemExc::MeasureItemExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10299"
  subtask_id: "8"
source_codes_1461: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    MakeFileListFailedExc::~MakeFileListFailedExc() throw() {}
    
    /*---------------------------------------------*/
    /* OptionErrorExc							   */
    /* ?I?v?V?????????????????			       */
    /*---------------------------------------------*/

  updated_at: 2011-05-13 10:35:08
  analyzed_source_path_id: "148"
  id: "10167"
  subtask_id: "10"
source_codes_461: 
  created_at: 2010-07-05 17:11:42
  error_line: "150"
  body: "    strcpy(the_pOption->m_prefix,\"./\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9167"
  subtask_id: "1"
source_codes_593: 
  created_at: 2010-07-05 17:11:47
  error_line: 
  body: "    }\r\n\
    \r\n    /* ?????(2)?v??Option???w?????? */\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9299"
  subtask_id: "1"
source_codes_1594: 
  created_at: 2010-07-05 17:20:42
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    MeasureItemExc::~MeasureItemExc() throw() {}
    
    /*-------------------------------------------*/
    /* FunRepetitionDefineExc				     */
    /* ??????d?????`?????????			 */
    /*-------------------------------------------*/

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10300"
  subtask_id: "8"
source_codes_1462: 
  created_at: 2010-07-05 17:19:44
  error_line: "237"
  body: |
    OptionErrorExc::OptionErrorExc()

  updated_at: 2011-05-13 10:35:08
  analyzed_source_path_id: "148"
  id: "10168"
  subtask_id: "10"
source_codes_1330: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10036"
  subtask_id: "12"
source_codes_330: 
  created_at: 2010-07-05 17:09:22
  error_line: "517"
  body: "        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGSYS(%d)\\n\",sig );\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9036"
  subtask_id: "5"
source_codes_462: 
  created_at: 2010-07-05 17:11:42
  error_line: 
  body: |
    #else
        strcpy(the_pOption->m_prefix,".\\");
    #endif

  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9168"
  subtask_id: "1"
source_codes_594: 
  created_at: 2010-07-05 17:11:47
  error_line: "345"
  body: "    if(the_pOption->m_funcTrend){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9300"
  subtask_id: "1"
source_codes_1595: 
  created_at: 2010-07-05 17:20:42
  error_line: "269"
  body: |
    FunRepetitionDefineExc::FunRepetitionDefineExc()

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10301"
  subtask_id: "8"
source_codes_1463: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:08
  analyzed_source_path_id: "148"
  id: "10169"
  subtask_id: "10"
source_codes_1331: 
  created_at: 2010-07-05 17:18:41
  error_line: "239"
  body: "\tMessage = \"\";\n"
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10037"
  subtask_id: "12"
source_codes_331: 
  created_at: 2010-07-05 17:09:22
  error_line: "518"
  body: "        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9037"
  subtask_id: "5"
source_codes_463: 
  created_at: 2010-07-05 17:11:42
  error_line: "154"
  body: "    strcpy(the_pOption->m_filePattern,\"**/*.[CcHh]\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9169"
  subtask_id: "1"
source_codes_595: 
  created_at: 2010-07-05 17:11:47
  error_line: "346"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9301"
  subtask_id: "1"
source_codes_1596: 
  created_at: 2010-07-05 17:20:42
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10302"
  subtask_id: "8"
source_codes_1464: 
  created_at: 2010-07-05 17:19:44
  error_line: "239"
  body: "\tMessage = \"\";\n"
  updated_at: 2011-05-13 10:35:08
  analyzed_source_path_id: "148"
  id: "10170"
  subtask_id: "10"
source_codes_1332: 
  created_at: 2010-07-05 17:18:41
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10038"
  subtask_id: "12"
source_codes_1200: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: |
    *  NewFree
    *  ??????????   
    *  @param  
    *          ???
    *  @return 
    *          ???
    *  @author luo-jirong
    */
    void NewFreeMem(void *in_memblock, char *in_pStr)
    {

  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9906"
  subtask_id: "2"
source_codes_200: 
  created_at: 2010-07-05 17:09:17
  error_line: "325"
  body: "            strcat(the_szCurMetrics,\"File???G?x\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8906"
  subtask_id: "5"
source_codes_332: 
  created_at: 2010-07-05 17:09:22
  error_line: 
  body: "        break;\r\n    default :\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9038"
  subtask_id: "5"
source_codes_464: 
  created_at: 2010-07-05 17:11:42
  error_line: "155"
  body: "    strcpy(the_pOption->m_symbolFile,\"\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9170"
  subtask_id: "1"
source_codes_596: 
  created_at: 2010-07-05 17:11:47
  error_line: "347"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9302"
  subtask_id: "1"
source_codes_1597: 
  created_at: 2010-07-05 17:20:42
  error_line: "271"
  body: "\tMessage = \"??????d?????`?????????\";\n"
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10303"
  subtask_id: "8"
source_codes_1465: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:08
  analyzed_source_path_id: "148"
  id: "10171"
  subtask_id: "10"
source_codes_1333: 
  created_at: 2010-07-05 17:18:41
  error_line: "242"
  body: |
    OptionErrorExc::OptionErrorExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10039"
  subtask_id: "12"
source_codes_1201: 
  created_at: 2010-07-05 17:17:12
  error_line: "152"
  body: |
    #undef free

  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9907"
  subtask_id: "2"
source_codes_201: 
  created_at: 2010-07-05 17:09:17
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8907"
  subtask_id: "5"
source_codes_333: 
  created_at: 2010-07-05 17:09:22
  error_line: "521"
  body: "        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=%d\\n\",sig );\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9039"
  subtask_id: "5"
source_codes_465: 
  created_at: 2010-07-05 17:11:42
  error_line: "156"
  body: "    strcpy(the_pOption->m_optionFile,\"\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9171"
  subtask_id: "1"
source_codes_597: 
  created_at: 2010-07-05 17:11:47
  error_line: "348"
  body: "            strcat(the_szCurMetrics,\"????????\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9303"
  subtask_id: "1"
source_codes_202: 
  created_at: 2010-07-05 17:09:17
  error_line: "327"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8908"
  subtask_id: "5"
source_codes_334: 
  created_at: 2010-07-05 17:09:22
  error_line: "522"
  body: "        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9040"
  subtask_id: "5"
source_codes_466: 
  created_at: 2010-07-05 17:11:42
  error_line: 
  body: "    the_pOption->m_fileLOC = ON;\r\n    the_pOption->m_redundancy = OFF;\r\n    the_pOption->m_funcNum = OFF;\r\n    the_pOption->m_eloc = OFF;\r\n    the_pOption->m_mccabe = OFF;\r\n    the_pOption->m_similar = OFF;\r\n    the_pOption->m_trend = OFF;\r\n    the_pOption->m_funcTrend = OFF;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9172"
  subtask_id: "1"
source_codes_598: 
  created_at: 2010-07-05 17:11:47
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9304"
  subtask_id: "1"
source_codes_1598: 
  created_at: 2010-07-05 17:20:42
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10304"
  subtask_id: "8"
source_codes_1466: 
  created_at: 2010-07-05 17:19:44
  error_line: "242"
  body: |
    OptionErrorExc::OptionErrorExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:08
  analyzed_source_path_id: "148"
  id: "10172"
  subtask_id: "10"
source_codes_1334: 
  created_at: 2010-07-05 17:18:42
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    OptionErrorExc::~OptionErrorExc() throw() {}
    
    /*-------------------------------------------*/
    /* OptionErrorExc						     */
    /* ?w?????v???????s????? 			 */
    /*-------------------------------------------*/

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10040"
  subtask_id: "12"
source_codes_1202: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: "\tST_MemoryInfo *the_miTmp = NULL;\n\
    \tST_MemoryInfo *the_miPrev = NULL;\n\
    \tint the_iHeapStatus = 0;\n\
    \tshort the_bFound = 0;\n\n"
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9908"
  subtask_id: "2"
source_codes_203: 
  created_at: 2010-07-05 17:09:17
  error_line: "328"
  body: "            strcat(the_szCurMetrics,\"File???G?x\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8909"
  subtask_id: "5"
source_codes_335: 
  created_at: 2010-07-05 17:09:22
  error_line: 
  body: "    }\r\n\
    \r\n    /* AnalyzeMe????\\?[?X?????????? */\r\n    FreeAllResourc(g_pAnzInfo);\r\n\
    #ifdef _DEBUG\r\n    CheckAllMem();\r\n    DestoryMemMan();\r\n\
    #endif\r\n    /* Signal Check */\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9041"
  subtask_id: "5"
source_codes_467: 
  created_at: 2010-07-05 17:11:42
  error_line: "165"
  body: "    the_pOption->m_symThresh = 70;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9173"
  subtask_id: "1"
source_codes_599: 
  created_at: 2010-07-05 17:11:47
  error_line: "350"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9305"
  subtask_id: "1"
source_codes_1599: 
  created_at: 2010-07-05 17:20:42
  error_line: "274"
  body: |
    FunRepetitionDefineExc::FunRepetitionDefineExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:47
  analyzed_source_path_id: "181"
  id: "10305"
  subtask_id: "8"
source_codes_1467: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    OptionErrorExc::~OptionErrorExc() throw() {}
    
    /*-------------------------------------------*/
    /* OptionErrorExc						     */
    /* ?w?????v???????s????? 			 */
    /*-------------------------------------------*/

  updated_at: 2011-05-13 10:35:08
  analyzed_source_path_id: "148"
  id: "10173"
  subtask_id: "10"
source_codes_1335: 
  created_at: 2010-07-05 17:18:42
  error_line: "253"
  body: |
    MeasureItemExc::MeasureItemExc()

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10041"
  subtask_id: "12"
source_codes_1203: 
  created_at: 2010-07-05 17:17:12
  error_line: "158"
  body: "\t/* Heap??`?F?b?N */\n"
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9909"
  subtask_id: "2"
source_codes_204: 
  created_at: 2010-07-05 17:09:17
  error_line: 
  body: "        }\r\n    }\r\n\
    \r\n    /* ?????(1)?v??Option???w?????? */\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8910"
  subtask_id: "5"
source_codes_336: 
  created_at: 2010-07-05 17:09:22
  error_line: "532"
  body: "    switch(sig){\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9042"
  subtask_id: "5"
source_codes_468: 
  created_at: 2010-07-05 17:11:42
  error_line: "166"
  body: "    the_pOption->m_minThresh = 2;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9174"
  subtask_id: "1"
source_codes_1468: 
  created_at: 2010-07-05 17:19:44
  error_line: "253"
  body: |
    MeasureItemExc::MeasureItemExc()

  updated_at: 2011-05-13 10:35:08
  analyzed_source_path_id: "148"
  id: "10174"
  subtask_id: "10"
source_codes_1336: 
  created_at: 2010-07-05 17:18:42
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10042"
  subtask_id: "12"
source_codes_1204: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: |
    #ifndef __GNUC__
    
    	the_iHeapStatus = _heapchk();
    	switch ( the_iHeapStatus ) {
    		case _HEAPOK:
    			TraceMem("\n s> [%ld]:OK - heap is fine. deleted" , in_pStr, in_memblock);
    			break;
    		case _HEAPBADBEGIN:
    			TraceMem( "\ns> [%ld]: bad start of heap. deleted", in_pStr, in_memblock );
    			break;
    		case _HEAPBADNODE:
    			TraceMem( "\ns> [%ld]: bad node in heap.deleted", in_pStr, in_memblock );
    			break;
    	}
    #endif
    	the_miTmp = the_miHeader;
    	the_miPrev = NULL;

  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9910"
  subtask_id: "2"
source_codes_205: 
  created_at: 2010-07-05 17:09:17
  error_line: "333"
  body: "    if(the_pOption->m_trend){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8911"
  subtask_id: "5"
source_codes_337: 
  created_at: 2010-07-05 17:09:22
  error_line: 
  body: "    case SIGINT :\r\n    case SIGQUIT :\r\n    case SIGKILL :\r\n    case SIGTERM :\r\n        exit(0) ;\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9043"
  subtask_id: "5"
source_codes_469: 
  created_at: 2010-07-05 17:11:42
  error_line: 
  body: |
    
    /* ?R?}???h???C??????????Option????????????m?? */

  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9175"
  subtask_id: "1"
source_codes_1469: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:08
  analyzed_source_path_id: "148"
  id: "10175"
  subtask_id: "10"
source_codes_1337: 
  created_at: 2010-07-05 17:18:42
  error_line: "255"
  body: "\tMessage = \"?w?????v???????s??????B\";\n"
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10043"
  subtask_id: "12"
source_codes_1205: 
  created_at: 2010-07-05 17:17:12
  error_line: "176"
  body: "\t/* Node????????????????A??????????????????? */\n"
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9911"
  subtask_id: "2"
source_codes_206: 
  created_at: 2010-07-05 17:09:17
  error_line: "334"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8912"
  subtask_id: "5"
source_codes_338: 
  created_at: 2010-07-05 17:09:22
  error_line: "538"
  body: "    case SIGFPE :\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9044"
  subtask_id: "5"
source_codes_1338: 
  created_at: 2010-07-05 17:18:42
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10044"
  subtask_id: "12"
source_codes_1206: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: "\twhile ( the_miTmp != NULL) {\n\
    \t\tif (the_miTmp->m_ps == in_memblock) {\n\
    \t\t\tthe_bFound = 1;\n\
    \t\t\tbreak;\n\
    \t\t}\n\
    \t\tthe_miPrev = the_miTmp;\n\
    \t\tthe_miTmp = the_miTmp->m_next;\n\
    \t}\n\n"
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9912"
  subtask_id: "2"
source_codes_207: 
  created_at: 2010-07-05 17:09:18
  error_line: "335"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8913"
  subtask_id: "5"
source_codes_339: 
  created_at: 2010-07-05 17:09:22
  error_line: 
  body: "    case SIGILL :\r\n    case SIGBUS :\r\n\
    /*    case SIGIOT :*/\r\n    case SIGSEGV :\r\n    case SIGSYS :\r\n        abort() ;\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9045"
  subtask_id: "5"
source_codes_1470: 
  created_at: 2010-07-05 17:19:44
  error_line: "255"
  body: "\tMessage = \"?w?????v???????s??????B\";\n"
  updated_at: 2011-05-13 10:35:08
  analyzed_source_path_id: "148"
  id: "10176"
  subtask_id: "10"
source_codes_1339: 
  created_at: 2010-07-05 17:18:42
  error_line: "258"
  body: |
    MeasureItemExc::MeasureItemExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10045"
  subtask_id: "12"
source_codes_1207: 
  created_at: 2010-07-05 17:17:12
  error_line: "186"
  body: "\tif (the_bFound == 0) { /* ?????????? */\n"
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9913"
  subtask_id: "2"
source_codes_208: 
  created_at: 2010-07-05 17:09:18
  error_line: "336"
  body: "            strcat(the_szCurMetrics,\"File?????(1)\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8914"
  subtask_id: "5"
source_codes_470: 
  created_at: 2010-07-05 17:11:42
  error_line: "169"
  body: "    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9176"
  subtask_id: "1"
source_codes_1471: 
  created_at: 2010-07-05 17:19:44
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:08
  analyzed_source_path_id: "148"
  id: "10177"
  subtask_id: "10"
source_codes_1208: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: "\t\tTraceMem(\"\\nERROR-<%s> [%ld] : Free again or this address is not exists!\", in_pStr, in_memblock);\n\
    \t} else {\n\
    \t\tif (the_miTmp == the_miPreNode) {\n\
    \t\t\tthe_miPreNode = the_miPrev;\n\
    \t\t\tif (the_miPrev == NULL) {\n\
    \t\t\t\tthe_miPreNode = the_miHeader;\n\
    \t\t\t}\n\
    \t\t}\n\
    \t\tif (the_miPrev == NULL) {\n\
    \t\t\tthe_miHeader = the_miHeader->m_next;\n\
    \t\t} else {\n\
    \t\t\tthe_miPrev->m_next = the_miTmp->m_next;\n\
    \t\t}\n\
    \t\tif (the_miTmp != NULL) {\n\
    \t\t\tif (the_miTmp->m_ps != NULL) {\n\
    \t\t\t\tfree(the_miTmp->m_ps);\n\
    \t\t\t\tthe_miTmp->m_ps = NULL;\n\
    \t\t\t}\n\
    \t\t\tfree(the_miTmp);\n\
    \t\t\tthe_miTmp = NULL;\n\
    \t\t}\n\
    \t}\n\
    #define free NewFree\n\
    }\n\n\n"
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9914"
  subtask_id: "2"
source_codes_209: 
  created_at: 2010-07-05 17:09:18
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8915"
  subtask_id: "5"
source_codes_471: 
  created_at: 2010-07-05 17:11:42
  error_line: "170"
  body: "    if(the_pCmdOption == NULL){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9177"
  subtask_id: "1"
source_codes_1472: 
  created_at: 2010-07-05 17:19:45
  error_line: "258"
  body: |
    MeasureItemExc::MeasureItemExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:08
  analyzed_source_path_id: "148"
  id: "10178"
  subtask_id: "10"
source_codes_1340: 
  created_at: 2010-07-05 17:18:42
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    MeasureItemExc::~MeasureItemExc() throw() {}
    
    /*-------------------------------------------*/
    /* FunRepetitionDefineExc				     */
    /* ??????d?????`?????????			 */
    /*-------------------------------------------*/

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10046"
  subtask_id: "12"
source_codes_1209: 
  created_at: 2010-07-05 17:17:12
  error_line: "213"
  body: |
    /**

  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9915"
  subtask_id: "2"
source_codes_340: 
  created_at: 2010-07-05 17:09:22
  error_line: "545"
  body: "    }\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9046"
  subtask_id: "5"
source_codes_472: 
  created_at: 2010-07-05 17:11:42
  error_line: "171"
  body: "        the_iRet = ANZ_ERR_MEMORY_FAILED;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9178"
  subtask_id: "1"
source_codes_1473: 
  created_at: 2010-07-05 17:19:45
  error_line: 
  body: |
    {
    	Message = in_useMsg;
    }
    
    MeasureItemExc::~MeasureItemExc() throw() {}
    
    /*-------------------------------------------*/
    /* FunRepetitionDefineExc				     */
    /* ??????d?????`?????????			 */
    /*-------------------------------------------*/

  updated_at: 2011-05-13 10:35:08
  analyzed_source_path_id: "148"
  id: "10179"
  subtask_id: "10"
source_codes_1341: 
  created_at: 2010-07-05 17:18:42
  error_line: "269"
  body: |
    FunRepetitionDefineExc::FunRepetitionDefineExc()

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10047"
  subtask_id: "12"
source_codes_341: 
  created_at: 2010-07-05 17:09:22
  error_line: 
  body: "    exit(0) ;\r\n\
    #else\r\n    switch(dwCtrlType){\r\n    case CTRL_C_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Ctrl + C pressed!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case CTRL_BREAK_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Ctrl + Break pressed!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case CTRL_CLOSE_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Console Closed!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case CTRL_LOGOFF_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Windows is logoff!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case CTRL_SHUTDOWN_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Windows is shutdown!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    default:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Unknowe event!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    }\r\n    /* AnalyzeMe????\\?[?X?????????? */\r\n    FreeAllResourc(g_pAnzInfo);\r\n\
    #ifdef _DEBUG\r\n    CheckAllMem();\r\n    DestoryMemMan();\r\n\
    #endif\r\n    ExitProcess(0);\r\n    return 0;\r\n\
    #endif\r\n\
    }\r\n\
    /**\r\n\
    *  SetSignal\r\n\
    *  ?V?O?????n???h???o?^\r\n\
    *  @param\r\n\
    *         ???\r\n\
    *  @return\r\n\
    *         ???\r\n\
    *  @author zhang-gh\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9047"
  subtask_id: "5"
source_codes_473: 
  created_at: 2010-07-05 17:11:42
  error_line: "172"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9179"
  subtask_id: "1"
source_codes_1474: 
  created_at: 2010-07-05 17:19:45
  error_line: "269"
  body: |
    FunRepetitionDefineExc::FunRepetitionDefineExc()

  updated_at: 2011-05-13 10:35:08
  analyzed_source_path_id: "148"
  id: "10180"
  subtask_id: "10"
source_codes_1342: 
  created_at: 2010-07-05 17:18:42
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10048"
  subtask_id: "12"
source_codes_1210: 
  created_at: 2010-07-05 17:17:12
  error_line: 
  body: |
    *  CheckAllMem
    *  ??????????????`?F?b?N   
    *  @param  
    *          ???
    *  @return 
    *          ???
    *  @author luo-jirong
    */
    void CheckAllMem()
    {

  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9916"
  subtask_id: "2"
source_codes_210: 
  created_at: 2010-07-05 17:09:18
  error_line: "338"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8916"
  subtask_id: "5"
source_codes_342: 
  created_at: 2010-07-05 17:09:22
  error_line: "592"
  body: |
    */

  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9048"
  subtask_id: "5"
source_codes_474: 
  created_at: 2010-07-05 17:11:42
  error_line: 
  body: "    }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9180"
  subtask_id: "1"
source_codes_1475: 
  created_at: 2010-07-05 17:19:45
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:35:08
  analyzed_source_path_id: "148"
  id: "10181"
  subtask_id: "10"
source_codes_1343: 
  created_at: 2010-07-05 17:18:42
  error_line: "271"
  body: "\tMessage = \"??????d?????`?????????\";\n"
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10049"
  subtask_id: "12"
source_codes_1211: 
  created_at: 2010-07-05 17:17:12
  error_line: "224"
  body: |
    #undef free

  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9917"
  subtask_id: "2"
source_codes_211: 
  created_at: 2010-07-05 17:09:18
  error_line: "339"
  body: "            strcat(the_szCurMetrics,\"File?????(1)\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8917"
  subtask_id: "5"
source_codes_343: 
  created_at: 2010-07-05 17:09:22
  error_line: 
  body: |
    void SetSignal()

  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9049"
  subtask_id: "5"
source_codes_475: 
  created_at: 2010-07-05 17:11:42
  error_line: "174"
  body: "    memset(the_pCmdOption,'\\0',sizeof(ST_Option));\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9181"
  subtask_id: "1"
source_codes_1476: 
  created_at: 2010-07-05 17:19:45
  error_line: "271"
  body: "\tMessage = \"??????d?????`?????????\";\n"
  updated_at: 2011-05-13 10:35:08
  analyzed_source_path_id: "148"
  id: "10182"
  subtask_id: "10"
source_codes_1344: 
  created_at: 2010-07-05 17:18:42
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10050"
  subtask_id: "12"
source_codes_1212: 
  created_at: 2010-07-05 17:17:12
  error_line: "225"
  body: "\tST_MemoryInfo *the_miTmp = NULL;\t/* ??Node */\n"
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9918"
  subtask_id: "2"
source_codes_212: 
  created_at: 2010-07-05 17:09:18
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8918"
  subtask_id: "5"
source_codes_344: 
  created_at: 2010-07-05 17:09:22
  error_line: "594"
  body: |
    {

  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9050"
  subtask_id: "5"
source_codes_476: 
  created_at: 2010-07-05 17:11:42
  error_line: 
  body: "    /* ?f?t?H???g?l??Option????the_pCmdOption??????? */\r\n    the_pCmdOption->m_version = OFF;\r\n    the_pCmdOption->m_help = OFF;\r\n    the_pCmdOption->m_verbos = OFF;\r\n\
    #ifdef __GNUC__\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9182"
  subtask_id: "1"
source_codes_213: 
  created_at: 2010-07-05 17:09:18
  error_line: "341"
  body: "        strcat(the_szCurMetrics,\"File??X??(1)\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8919"
  subtask_id: "5"
source_codes_345: 
  created_at: 2010-07-05 17:09:22
  error_line: 
  body: |
    #ifdef __GNUC__
        /* Signal Set */

  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9051"
  subtask_id: "5"
source_codes_477: 
  created_at: 2010-07-05 17:11:42
  error_line: "180"
  body: "    strcpy(the_pCmdOption->m_prefix,\"./\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9183"
  subtask_id: "1"
source_codes_1477: 
  created_at: 2010-07-05 17:19:45
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:35:08
  analyzed_source_path_id: "148"
  id: "10183"
  subtask_id: "10"
source_codes_1345: 
  created_at: 2010-07-05 17:18:42
  error_line: "274"
  body: |
    FunRepetitionDefineExc::FunRepetitionDefineExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10051"
  subtask_id: "12"
source_codes_1213: 
  created_at: 2010-07-05 17:17:13
  error_line: 
  body: "\tST_MemoryInfo *the_miPrev = NULL;\t/* ?ONode */\n\
    \tlong the_lTotalSize = 0;\n\n\
    \tthe_miTmp = the_miHeader;\n\
    \tthe_miPrev = the_miHeader;\n\
    \tTraceMem(\"\\n\\n\\t***************Check Memory**********************\");\n"
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9919"
  subtask_id: "2"
source_codes_214: 
  created_at: 2010-07-05 17:09:18
  error_line: 
  body: "    }\r\n\
    \r\n    /* ?????(2)?v??Option???w?????? */\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8920"
  subtask_id: "5"
source_codes_346: 
  created_at: 2010-07-05 17:09:22
  error_line: "597"
  body: "    signal( SIGFPE  , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9052"
  subtask_id: "5"
source_codes_478: 
  created_at: 2010-07-05 17:11:42
  error_line: 
  body: |
    #else
        strcpy(the_pCmdOption->m_prefix,".\\");
    #endif

  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9184"
  subtask_id: "1"
source_codes_1478: 
  created_at: 2010-07-05 17:19:45
  error_line: "274"
  body: |
    FunRepetitionDefineExc::FunRepetitionDefineExc(string in_useMsg)

  updated_at: 2011-05-13 10:35:08
  analyzed_source_path_id: "148"
  id: "10184"
  subtask_id: "10"
source_codes_1346: 
  created_at: 2010-07-05 17:18:42
  error_line: 
  body: |+
    {
    	Message = in_useMsg;
    }
    
    FunRepetitionDefineExc::~FunRepetitionDefineExc()  throw() {}
    
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "10052"
  subtask_id: "12"
source_codes_1214: 
  created_at: 2010-07-05 17:17:13
  error_line: "232"
  body: "\t/* Node??????`?F?b?N?ANULL????????A???????????????? */\n"
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9920"
  subtask_id: "2"
source_codes_900: 
  created_at: 2010-07-05 17:14:27
  error_line: "144"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9606"
  subtask_id: "9"
source_codes_215: 
  created_at: 2010-07-05 17:09:18
  error_line: "345"
  body: "    if(the_pOption->m_funcTrend){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8921"
  subtask_id: "5"
source_codes_347: 
  created_at: 2010-07-05 17:09:22
  error_line: "598"
  body: "    signal( SIGILL  , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9053"
  subtask_id: "5"
source_codes_479: 
  created_at: 2010-07-05 17:11:42
  error_line: "184"
  body: "    strcpy(the_pCmdOption->m_filePattern,\"**/*.[CcHh]\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9185"
  subtask_id: "1"
source_codes_1479: 
  created_at: 2010-07-05 17:19:45
  error_line: 
  body: |+
    {
    	Message = in_useMsg;
    }
    
    FunRepetitionDefineExc::~FunRepetitionDefineExc()  throw() {}
    
  updated_at: 2011-05-13 10:35:08
  analyzed_source_path_id: "148"
  id: "10185"
  subtask_id: "10"
source_codes_1347: 
  created_at: 2010-07-05 17:18:42
  error_line: 
  body: |+
    /*
    File:
       LCSAlgo.cpp
    Copyright:
       Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
       AnalyzeMe
    Abstract:
       LCS?Z?o?A???S???Y??
    Author:
       zhang-gh
    Date:
       2005/02/08
    REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 2.0.0.0$
    */
    
  updated_at: 2011-05-13 10:35:00
  analyzed_source_path_id: "137"
  id: "10053"
  subtask_id: "12"
source_codes_1215: 
  created_at: 2010-07-05 17:17:13
  error_line: 
  body: "\twhile (the_miTmp != NULL) {\n\
    \t\tTraceMem(\"\\n\\t%s [%ld size:%d] is not be free\", the_miTmp->m_name, the_miTmp->m_ps, the_miTmp->m_size);\n\
    \t\tthe_lTotalSize += the_miTmp->m_size;\n\
    \t\tfree(the_miTmp->m_ps);\n\
    \t\tthe_miTmp->m_ps = NULL;\n\
    \t\tthe_miPrev = the_miTmp;\n\
    \t\tthe_miTmp = the_miTmp->m_next;\n\
    \t\tfree(the_miPrev);\n\
    \t\tthe_miPrev = NULL;\n\
    \t}\n\
    \tthe_miHeader = NULL;\n\
    \tTraceMem(\"\\n\\nTotal size :%ld byte\", the_lTotalSize);\n\
    #define free NewFree\n\
    }\n\n"
  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9921"
  subtask_id: "2"
source_codes_901: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "    }\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9607"
  subtask_id: "9"
source_codes_216: 
  created_at: 2010-07-05 17:09:18
  error_line: "346"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8922"
  subtask_id: "5"
source_codes_348: 
  created_at: 2010-07-05 17:09:22
  error_line: "599"
  body: "    signal( SIGBUS  , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9054"
  subtask_id: "5"
source_codes_1348: 
  created_at: 2010-07-05 17:18:42
  error_line: "22"
  body: |
    #include "LCSAlgo.h"

  updated_at: 2011-05-13 10:35:00
  analyzed_source_path_id: "137"
  id: "10054"
  subtask_id: "12"
source_codes_1216: 
  created_at: 2010-07-05 17:17:13
  error_line: "248"
  body: |
    #endif  /* end of _DEBUG */

  updated_at: 2011-05-13 10:35:32
  analyzed_source_path_id: "160"
  id: "9922"
  subtask_id: "2"
source_codes_902: 
  created_at: 2010-07-05 17:14:27
  error_line: "146"
  body: "    memset(the_pMeasureItem,0,argc * sizeof(char *));\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9608"
  subtask_id: "9"
source_codes_217: 
  created_at: 2010-07-05 17:09:18
  error_line: "347"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8923"
  subtask_id: "5"
source_codes_349: 
  created_at: 2010-07-05 17:09:22
  error_line: 
  body: |
    /*    signal( SIGIOT  , (void *)AbortAnalyzeMe); */

  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9055"
  subtask_id: "5"
source_codes_1480: 
  created_at: 2010-07-05 17:20:39
  error_line: 
  body: |
    /*
    File:
        LanguageFactory.cpp
    Copyright:
        Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
        AnalyzeMe
    Abstract:
        ????Factory
    Author:
        luo-jirong
    Date:
        2005/02/08
    REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 2.0.0.0$
    */

  updated_at: 2011-05-13 10:35:44
  analyzed_source_path_id: "177"
  id: "10186"
  subtask_id: "8"
source_codes_1349: 
  created_at: 2010-07-05 17:18:42
  error_line: 
  body: |
    #include "common.h"

  updated_at: 2011-05-13 10:35:00
  analyzed_source_path_id: "137"
  id: "10055"
  subtask_id: "12"
source_codes_1217: 
  created_at: 2010-07-05 17:17:13
  error_line: "0"
  body: ""
  updated_at: 2011-05-13 10:35:31
  analyzed_source_path_id: "157"
  id: "9923"
  subtask_id: "2"
source_codes_903: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: |
    
    the_pOption = the_pAnzInfo->m_option;
    /* ?f?t?H???g?l??Option????the_pCmdOption??????? */
    the_pOption->m_version = OFF;
    the_pOption->m_help = OFF;
    the_pOption->m_verbos = OFF;
    #ifdef __GNUC__
    strcpy(the_pOption->m_prefix,"./");
    #else
    strcpy(the_pOption->m_prefix,".\\");
    #endif
    strcpy(the_pOption->m_filePattern,"**/*.[CcHh]");
    strcpy(the_pOption->m_symbolFile,"");
    strcpy(the_pOption->m_optionFile,"");
    the_pOption->m_fileLOC = ON;
    the_pOption->m_redundancy = OFF;
    the_pOption->m_funcNum = OFF;
    the_pOption->m_eloc = OFF;
    the_pOption->m_mccabe = OFF;
    the_pOption->m_similar = OFF;
    the_pOption->m_trend = OFF;
    the_pOption->m_funcTrend = OFF;
    the_pOption->m_symThresh = 70;
    the_pOption->m_minThresh = 2;
    
    /* ?R?}???h???C??????????Option????????????m?? */

  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9609"
  subtask_id: "9"
source_codes_480: 
  created_at: 2010-07-05 17:11:42
  error_line: "185"
  body: "    strcpy(the_pCmdOption->m_symbolFile,\"\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9186"
  subtask_id: "1"
source_codes_218: 
  created_at: 2010-07-05 17:09:18
  error_line: "348"
  body: "            strcat(the_szCurMetrics,\"????????\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8924"
  subtask_id: "5"
source_codes_1481: 
  created_at: 2010-07-05 17:20:39
  error_line: "22"
  body: |
    #include "LanguageFactory.h"

  updated_at: 2011-05-13 10:35:44
  analyzed_source_path_id: "177"
  id: "10187"
  subtask_id: "8"
source_codes_1218: 
  created_at: 2010-07-05 17:17:13
  error_line: "1"
  body: |
    /*

  updated_at: 2011-05-13 10:35:31
  analyzed_source_path_id: "157"
  id: "9924"
  subtask_id: "2"
source_codes_481: 
  created_at: 2010-07-05 17:11:42
  error_line: "186"
  body: "    strcpy(the_pCmdOption->m_optionFile,\"\");\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9187"
  subtask_id: "1"
source_codes_219: 
  created_at: 2010-07-05 17:09:18
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8925"
  subtask_id: "5"
source_codes_1482: 
  created_at: 2010-07-05 17:20:39
  error_line: "23"
  body: |
    #include "C_LanguageProduct.h"

  updated_at: 2011-05-13 10:35:44
  analyzed_source_path_id: "177"
  id: "10188"
  subtask_id: "8"
source_codes_1350: 
  created_at: 2010-07-05 17:18:42
  error_line: "24"
  body: |
    #include "AnalyzeMe.h"

  updated_at: 2011-05-13 10:35:00
  analyzed_source_path_id: "137"
  id: "10056"
  subtask_id: "12"
source_codes_1219: 
  created_at: 2010-07-05 17:17:13
  error_line: 
  body: |
    File:
        LanguageFactory.cpp
    Copyright:
        Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
        AnalyzeMe
    Abstract:
        ????Factory
    Author:
        luo-jirong
    Date:
        2005/02/08
    REVISION HISTORY:
    
    */

  updated_at: 2011-05-13 10:35:31
  analyzed_source_path_id: "157"
  id: "9925"
  subtask_id: "2"
source_codes_904: 
  created_at: 2010-07-05 17:14:27
  error_line: "173"
  body: "    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9610"
  subtask_id: "9"
source_codes_350: 
  created_at: 2010-07-05 17:09:22
  error_line: "601"
  body: "    signal( SIGSEGV , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9056"
  subtask_id: "5"
source_codes_482: 
  created_at: 2010-07-05 17:11:42
  error_line: 
  body: "    the_pCmdOption->m_fileLOC = ON;\r\n    the_pCmdOption->m_redundancy = OFF;\r\n    the_pCmdOption->m_funcNum = OFF;\r\n    the_pCmdOption->m_eloc = OFF;\r\n    the_pCmdOption->m_mccabe = OFF;\r\n    the_pCmdOption->m_similar = OFF;\r\n    the_pCmdOption->m_trend = OFF;\r\n    the_pCmdOption->m_funcTrend = OFF;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9188"
  subtask_id: "1"
source_codes_1483: 
  created_at: 2010-07-05 17:20:39
  error_line: "24"
  body: |
    #include "Asm_LanguageProduct.h"

  updated_at: 2011-05-13 10:35:44
  analyzed_source_path_id: "177"
  id: "10189"
  subtask_id: "8"
source_codes_1351: 
  created_at: 2010-07-05 17:18:42
  error_line: 
  body: |
    #include "FileInfo.h"
    #include "FunctionInfo.h"
    #include "MeasureFuncObject.h"
    #include "MemoryManagement.h"

  updated_at: 2011-05-13 10:35:00
  analyzed_source_path_id: "137"
  id: "10057"
  subtask_id: "12"
source_codes_905: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "    if(the_pCmdOption == NULL){\r\n        the_iRet = ANZ_ERR_MEMORY_FAILED;\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9611"
  subtask_id: "9"
source_codes_351: 
  created_at: 2010-07-05 17:09:22
  error_line: "602"
  body: "    signal( SIGSYS , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9057"
  subtask_id: "5"
source_codes_483: 
  created_at: 2010-07-05 17:11:42
  error_line: "195"
  body: "    the_pCmdOption->m_symThresh = 70;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9189"
  subtask_id: "1"
source_codes_1484: 
  created_at: 2010-07-05 17:20:39
  error_line: 
  body: |
    
    /// <summary>
    ///?v??????????????N???X??instance??????????
    /// </summary>
    /// <remarks>
    ///?v??????????Factory???????C?v??????????Product?????CFile??g???q???????C
    ///????v??????????????N???X??instance???????????B
    /// </remarks>
    /// <param name="pExtName">File??g???q</param>
    /// <returns>
    ///?@?v??????????????N???X??instance
    /// </returns>
    /// <exception cref="???O??">
    ///
    /// </exception>
    LanguageProduct* LanguageFactory::CreateProduct(const char* in_pExtName)
    {
    	Trace("LanguageFactory::CreateProduct() in\n");

  updated_at: 2011-05-13 10:35:44
  analyzed_source_path_id: "177"
  id: "10190"
  subtask_id: "8"
source_codes_1352: 
  created_at: 2010-07-05 17:18:42
  error_line: "29"
  body: |
    #include "AnzException.h"

  updated_at: 2011-05-13 10:35:00
  analyzed_source_path_id: "137"
  id: "10058"
  subtask_id: "12"
source_codes_1220: 
  created_at: 2010-07-05 17:17:13
  error_line: "18"
  body: |
    /*

  updated_at: 2011-05-13 10:35:31
  analyzed_source_path_id: "157"
  id: "9926"
  subtask_id: "2"
source_codes_906: 
  created_at: 2010-07-05 17:14:27
  error_line: "176"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9612"
  subtask_id: "9"
source_codes_220: 
  created_at: 2010-07-05 17:09:18
  error_line: "350"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8926"
  subtask_id: "5"
source_codes_352: 
  created_at: 2010-07-05 17:09:22
  error_line: 
  body: ""
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9058"
  subtask_id: "5"
source_codes_484: 
  created_at: 2010-07-05 17:11:42
  error_line: "196"
  body: "    the_pCmdOption->m_minThresh = 2;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9190"
  subtask_id: "1"
source_codes_1485: 
  created_at: 2010-07-05 17:20:39
  error_line: "43"
  body: "\tassert(in_pExtName != NULL);\r\n"
  updated_at: 2011-05-13 10:35:44
  analyzed_source_path_id: "177"
  id: "10191"
  subtask_id: "8"
source_codes_1353: 
  created_at: 2010-07-05 17:18:42
  error_line: 
  body: "\n\
    PCELL g_dummy;\n\
    #define DCELL g_dummy\n\
    unsigned int g_iUnitSize = sizeof(unsigned long)*8;\n\
    /**\n\
    *  GetEmbeddings\n\
    *  All Embeddings????????\n\
    *  @param  in_comm_Head,in_comm_Tail ?????v????????v???\n\
    *  @param  in_i,in_j\n\
    *  @param  in_lcsrev,in_curl\n\
    *  @param  in_head,in_pretail,in_tail\n\
    *  @param  in_len1,in_len2?@????n???????\n\
    *  @param  in_pStr1         ????n?????\n\
    *  @param  in_LCS_Lenght    LCS??Lenght\n\
    *  @param  io_LCSsCurNode   LCS??List??J?????gNode\n\
    *  @param  out_LCSsNum      LCS???\n\
    *  @return  \n\
    *           ANZ_SUCCESS:?????I??                                      \n\
    *           ANZ_ERROR  :????I??\n\
    *  @author zhang-gh\n\
    */\n\
    int LCSAlgo::GetEmbeddings(int in_comm_Head, int in_comm_Tail,\n\
    \t\t\t\t\t\t   int in_i, int in_j,\n\
    \t\t\t\t\t\t   PLCSPOS *in_lcsrev, int in_curl,\n\
    \t\t\t\t\t\t   PCELL **in_head, PCELL **in_pretail, PCELL **in_tail,\n\
    \t\t\t\t\t\t   int in_len1, int in_len2,    /* ????n??????? */\n\
    \t\t\t\t\t\t   char **in_pStr1,             /* ????n????? */\n\
    \t\t\t\t\t\t   int in_LCS_Lenght,           /* LCS??Lenght */\n\
    \t\t\t\t\t\t   PLCSLIST **io_LCSsCurNode,   /* LCS??List??J?????gNode */\n\
    \t\t\t\t\t\t   int *out_LCSsNum)         /* LCS??? */\n\
    {\n\
    \tchar **the_LCS;          /* ????LCS */\n\
    \tPLCSLIST the_LCSsTmpNode; /* LCS??List???Node */\n\
    \tPLCSLIST the_LCSsPreTailNode; /* LCS??List????Node????ONode */\n\
    \tPLCSPOS *the_lcsp;\n\
    \tPCELL the_adjp;\n\n\
    \t/* ????????? */\n\
    \tthe_LCS = NULL;\n\
    \tthe_LCSsTmpNode = NULL;\n\
    \tthe_LCSsPreTailNode = NULL;\n\
    \tthe_lcsp = NULL;\n\
    \tthe_adjp = NULL;\n\n\
    \t/* ?????J?n */\n\
    \tthe_adjp = in_head[in_i][in_j];\n\
    \tif (the_adjp == DCELL)\n\
    \t{\n\
    \t\tthe_adjp = in_tail[in_i][in_j];\n\
    \t}\n\
    \tif (the_adjp == DCELL)\n\
    \t{\n\
    \t\t/* ????LCS??????????m????? */\n\
    \t\tAnzMalloc(the_LCS, char**, sizeof(char *)*(in_LCS_Lenght + in_comm_Head + in_comm_Tail + 1));\n\
    \t\tif (the_LCS != NULL) {\n\
    \t\t\tmemset(the_LCS, 0, sizeof(char *)*(in_LCS_Lenght + in_comm_Head + in_comm_Tail + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tfor (the_lcsp = in_lcsrev + in_curl - 1; the_lcsp >= in_lcsrev; the_lcsp--) {\n\
    \t\t\t*(the_LCS + in_comm_Head + (in_LCS_Lenght - (the_lcsp - in_lcsrev) - 1)) = (*the_lcsp)->lcschar;\n\
    #if 0/* DEBUG?p */\n\n\
    \t\t\tprintf(\"%s^{%d}_{%d}\", (*the_lcsp)->lcschar, (*the_lcsp)->Apos, (*the_lcsp)->Bpos);\n\
    #endif\n\n\
    \t\t}\n\
    \t\t(**io_LCSsCurNode)->LCS = the_LCS;\n\
    #if 0/* DEBUG?p */\n\n\
    \t\tprintf(\"\\n\");\n\
    #endif\n\
    \t\t/* LCS??List?????Node????????? */\n\
    \t\tAnzMalloc(the_LCSsTmpNode, PLCSLIST, sizeof(ST_LCSLIST));\n\
    \t\tif (the_LCSsTmpNode != NULL) {\n\
    \t\t\tmemset(the_LCSsTmpNode, 0, sizeof(ST_LCSLIST));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\t(**io_LCSsCurNode)->next = the_LCSsTmpNode;\n\
    \t\t(**io_LCSsCurNode) = (**io_LCSsCurNode)->next;\n\
    \t\t/* LCS?????Count */\n\
    \t\t(*out_LCSsNum)++;\n\
    \t} else\n\
    \t{\n\
    \t\twhile (the_adjp != DCELL) {\n\
    \t\t\tin_lcsrev[in_curl]->lcschar = in_pStr1[the_adjp->i - 1];\n\
    \t\t\tin_lcsrev[in_curl]->Apos = the_adjp->i;\n\
    \t\t\tin_lcsrev[in_curl]->Bpos = the_adjp->j;\n\
    \t\t\tGetEmbeddings(in_comm_Head, in_comm_Tail,\n\
    \t\t\t\t\t\t  the_adjp->i - 1, the_adjp->j - 1,\n\
    \t\t\t\t\t\t  in_lcsrev, in_curl + 1,\n\
    \t\t\t\t\t\t  in_head, in_pretail, in_tail,\n\
    \t\t\t\t\t\t  in_len1, in_len2,\n\
    \t\t\t\t\t\t  in_pStr1,\n\
    \t\t\t\t\t\t  in_LCS_Lenght,\n\
    \t\t\t\t\t\t  io_LCSsCurNode,\n\
    \t\t\t\t\t\t  out_LCSsNum);\n\
    \t\t\tif (the_adjp == in_tail[in_i][in_j])\n\
    \t\t\t\tbreak;\n\
    \t\t\tif (the_adjp == in_pretail[in_i][in_j]) {\n\
    \t\t\t\tthe_adjp = in_tail[in_i][in_j];\n\
    \t\t\t} else {\n\
    \t\t\t\tthe_adjp = the_adjp->next;\n\
    \t\t\t}\n\
    \t\t}\n\
    \t}\n\
    \tif (in_i == in_len1 && in_j == in_len2)\n\
    \t{\n\
    #if 0/* DEBUG?p */\n\
    \t\t//printf(\"%d\\n\",the_count);\n\
    \t\t/* ????n????LCS??????p???? */\n\
    \t\t//*out_LCSsNum = the_count;\n\
    #endif\n\n\
    \t}\n\
    \treturn 0;\n\
    }\n\n\
    /**\n\
    *  GetAllDistinctLCSs\n\
    *  ????n????All Distinct LCS????????\n\
    *  @param  in_pStr1,in_pStr2 ????n??\n\
    *  @param  in_len1,in_len2?@ ????n???????\n\
    *  @param  io_LCSsHeadNode   LCS??List??w?b?_Node\n\
    *  @param  out_LCS_Lenght    LCS??Lenght\n\
    *  @param  out_LCSsNum       LCS???\n\
    *  @return  \n\
    *           ANZ_SUCCESS:?????I??                                      \n\
    *           ANZ_ERROR  :????I??\n\
    *  @author zhang-gh\n\
    */\n\
    int LCSAlgo::GetAllDistinctLCSs(char **in_pStr1, char **in_pStr2,        /* ????n?? */\n\
    \t\t\t\t\t\t\t\tconst int in_len1, const int in_len2,    /* ????n??????? */\n\
    \t\t\t\t\t\t\t\tPLCSLIST *io_LCSsHeadNode,    /* LCS??List??w?b?_Node */\n\
    \t\t\t\t\t\t\t\tint *out_LCS_Lenght,          /* LCS??Lenght */\n\
    \t\t\t\t\t\t\t\tint *out_LCSsNum)          /* LCS??? */\n\
    {\n\
    \tint the_i, the_j;\n\
    \tPCELL **the_head, **the_pretail, **the_tail;\n\
    \tPLCSPOS *the_lcsrev;\n\
    \tint **the_rank;\n\
    \tPCELL **the_p;\n\
    \tPLCSLIST *the_pLCSsCurNode; /* LCS??List??J?????gNode */\n\
    \tPLCSLIST the_LCSsPrevNode; /* LCS??List??ONode */\n\
    \tPLCSLIST the_pLCSsNextNode; /* LCS??List???Node */\n\n\
    \t/* ????????? */\n\
    \tthe_i = 0;\n\
    \tthe_j = 0;\n\
    \tthe_head = NULL;\n\
    \tthe_pretail = NULL;\n\
    \tthe_tail = NULL;\n\
    \tthe_lcsrev = NULL;\n\
    \tthe_rank = NULL;\n\
    \tthe_p = NULL;\n\
    \tthe_pLCSsCurNode = NULL;\n\
    \tthe_LCSsPrevNode = NULL;\n\
    \tthe_pLCSsNextNode = NULL;\n\n\
    \tint the_iMinLen = min(in_len1, in_len2);\n\
    \tint the_iComm_Head = 0;\n\
    \tint the_iComm_Tail = 0;\n\
    \tfor (the_i = 0;the_i < the_iMinLen;the_i++) {\n\
    \t\tif (strcmp(in_pStr1[the_i], in_pStr2[the_i]) == 0) {\n\
    \t\t\tthe_iComm_Head++;\n\
    \t\t} else {\n\
    \t\t\tbreak;\n\
    \t\t}\n\
    \t}\n\n\
    \tint the_iCurLine1 = in_len1 - 1;\n\
    \tint the_iCurLine2 = in_len2 - 1;\n\
    \twhile (in_pStr1[the_iCurLine1] != NULL &&\n\
    \t\t\tin_pStr2[the_iCurLine2] != NULL &&\n\
    \t\t\tthe_iCurLine1 > the_iComm_Head - 1 &&\n\
    \t\t\tthe_iCurLine2 > the_iComm_Head - 1) {\n\
    \t\tif (strcmp(in_pStr1[the_iCurLine1], in_pStr2[the_iCurLine2]) == 0) {\n\
    \t\t\tthe_iComm_Tail++;\n\
    \t\t} else {\n\
    \t\t\tbreak;\n\
    \t\t}\n\
    \t\tthe_iCurLine1--;\n\
    \t\tthe_iCurLine2--;\n\
    \t}\n\
    \tint the_iLen1 = in_len1 - the_iComm_Head - the_iComm_Tail;\n\
    \tint the_iLen2 = in_len2 - the_iComm_Head - the_iComm_Tail;\n\
    \tchar** the_pStr1 = in_pStr1 + the_iComm_Head;\n\
    \tchar** the_pStr2 = in_pStr2 + the_iComm_Head;\n\n\
    \t/* LCS??List??w?b?_Node???????? */\n\
    \tAnzMalloc(the_pLCSsCurNode, PLCSLIST *, sizeof(PLCSLIST *));\n\
    \tif (the_pLCSsCurNode != NULL) {\n\
    \t\tmemset(the_pLCSsCurNode, 0, sizeof(PLCSLIST *));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tAnzMalloc(*the_pLCSsCurNode, PLCSLIST, sizeof(ST_LCSLIST));\n\
    \tif (the_pLCSsCurNode != NULL) {\n\
    \t\tmemset(*the_pLCSsCurNode, 0, sizeof(ST_LCSLIST));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \t*io_LCSsHeadNode = *the_pLCSsCurNode;\n\n\
    \t/* ?O???[?o?????g_dummy??????? */\n\
    \tAnzMalloc(g_dummy, PCELL, sizeof(ST_CELL));\n\
    \tif (g_dummy != NULL) {\n\
    \t\tmemset(g_dummy, 0, sizeof(ST_CELL));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tg_dummy->i = 0;\n\
    \tg_dummy->j = 0;\n\n\
    \tAnzMalloc(the_p, PCELL**, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \tif (the_p != NULL) {\n\
    \t\tmemset(the_p, 0, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_p[the_i], PCELL*, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\tif (the_p[the_i] != NULL) {\n\
    \t\t\tmemset(the_p[the_i], 0, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tAnzMalloc(the_p[the_i][the_j], PCELL, sizeof(ST_CELL));\n\
    \t\t\tif (the_p[the_i][the_j] != NULL) {\n\
    \t\t\t\tmemset(the_p[the_i][the_j], 0, sizeof(ST_CELL));\n\
    \t\t\t} else {\n\
    \t\t\t\tthrow MemoryFailedExc();\n\
    \t\t\t}\n\
    \t\t\tthe_p[the_i][the_j]->i = the_i;\n\
    \t\t\tthe_p[the_i][the_j]->j = the_j;\n\
    \t\t\tthe_p[the_i][the_j]->next = DCELL;\n\
    \t\t}\n\
    \t}\n\
    \t//the_rank\n\
    \tAnzMalloc(the_rank, int **, sizeof(int*)*(the_iLen1 + 1));\n\
    \tif (the_rank != NULL) {\n\
    \t\tmemset(the_rank, 0, sizeof(int*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_rank[the_i], int *, sizeof(int)*(the_iLen2 + 1));\n\
    \t\tif (the_rank[the_i] != NULL) {\n\
    \t\t\tmemset(the_rank[the_i], 0, sizeof(int)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tthe_rank[the_i][the_j] = 0;\n\
    \t\t}\n\
    \t}\n\
    \t//the_head\n\
    \tAnzMalloc(the_head, PCELL **, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \tif (the_head != NULL) {\n\
    \t\tmemset(the_head, 0, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_head[the_i], PCELL *, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\tif (the_head[the_i] != NULL) {\n\
    \t\t\tmemset(the_head[the_i], 0, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tthe_head[the_i][the_j] = DCELL;\n\
    \t\t}\n\
    \t}\n\
    \t//the_pretail\n\
    \tAnzMalloc(the_pretail, PCELL **, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \tif (the_pretail != NULL) {\n\
    \t\tmemset(the_pretail, 0, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_pretail[the_i], PCELL *, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\tif (the_pretail[the_i] != NULL) {\n\
    \t\t\tmemset(the_pretail[the_i], 0, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tthe_pretail[the_i][the_j] = DCELL;\n\
    \t\t}\n\
    \t}\n\
    \t//the_tail\n\
    \tAnzMalloc(the_tail, PCELL **, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \tif (the_tail != NULL) {\n\
    \t\tmemset(the_tail, 0, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_tail[the_i], PCELL *, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\tif (the_tail[the_i] != NULL) {\n\
    \t\t\tmemset(the_tail[the_i], 0, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tthe_tail[the_i][the_j] = DCELL;\n\
    \t\t}\n\
    \t}\n\
    \t//compute gragh\n\
    \tfor (the_i = 1;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 1;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tif (strcmp(the_pStr1[the_i - 1], the_pStr2[the_j - 1]) == 0) {\n\
    \t\t\t\tthe_rank[the_i][the_j] = the_rank[the_i - 1][the_j - 1] + 1;\n\
    \t\t\t\tthe_tail[the_i][the_j] = the_p[the_i][the_j];\n\
    \t\t\t} else {\n\
    \t\t\t\tthe_rank[the_i][the_j] = MAX(the_rank[the_i - 1][the_j], the_rank[the_i][the_j - 1]);\n\
    \t\t\t\tif (the_rank[the_i][the_j] > 0) {\n\
    \t\t\t\t\tif (the_rank[the_i - 1][the_j] == the_rank[the_i][the_j]) {\n\
    \t\t\t\t\t\tthe_tail[the_i][the_j] = the_tail[the_i - 1][the_j];\n\
    \t\t\t\t\t}\n\
    \t\t\t\t\tif (the_rank[the_i][the_j - 1] == the_rank[the_i][the_j]) {\n\
    \t\t\t\t\t\tif (the_tail[the_i][the_j] == DCELL) {\n\
    \t\t\t\t\t\t\tthe_tail[the_i][the_j] = the_tail[the_i][the_j - 1];\n\
    \t\t\t\t\t\t} else {\n\
    \t\t\t\t\t\t\tif (the_tail[the_i][the_j]->i == the_tail[the_i][the_j - 1]->i) {\n\
    \t\t\t\t\t\t\t\tthe_pretail[the_i][the_j] = the_pretail[the_i][the_j - 1];\n\
    \t\t\t\t\t\t\t} else {\n\
    \t\t\t\t\t\t\t\tthe_pretail[the_i][the_j] = the_tail[the_i][the_j - 1];\n\
    \t\t\t\t\t\t\t}\n\
    \t\t\t\t\t\t\tif (the_tail[the_i][the_j]->j == the_pretail[the_i][the_j]->j) {\n\
    \t\t\t\t\t\t\t\tthe_tail[the_i][the_j] = the_pretail[the_i][the_j];\n\
    \t\t\t\t\t\t\t} else {\n\
    \t\t\t\t\t\t\t\tthe_pretail[the_i][the_j]->next = the_tail[the_i][the_j];\n\
    \t\t\t\t\t\t\t\tthe_head[the_i][the_j] = the_head[the_i][the_j - 1];\n\
    \t\t\t\t\t\t\t\tif (the_head[the_i][the_j] == DCELL) {\n\
    \t\t\t\t\t\t\t\t\tthe_head[the_i][the_j] = the_pretail[the_i][the_j];\n\
    \t\t\t\t\t\t\t\t}\n\
    \t\t\t\t\t\t\t}\n\
    \t\t\t\t\t\t}\n\
    \t\t\t\t\t}\n\
    \t\t\t\t}\n\
    \t\t\t}\n\
    \t\t} //end for the_j\n\
    \t} //end for the_i\n\n\
    \t//get LCSs and count\n\
    \t//lcsrev???????\n\
    \tAnzMalloc(the_lcsrev, PLCSPOS *, sizeof(PLCSPOS)*(the_rank[the_iLen1][the_iLen2]));\n\
    \tif (the_lcsrev != NULL) {\n\
    \t\tmemset(the_lcsrev, 0, sizeof(PLCSPOS)*(the_rank[the_iLen1][the_iLen2]));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_rank[the_iLen1][the_iLen2];the_i++) {\n\
    \t\tAnzMalloc(the_lcsrev[the_i], PLCSPOS, sizeof(ST_LCSCELL));\n\
    \t\tif (the_lcsrev[the_i] != NULL) {\n\
    \t\t\tmemset(the_lcsrev[the_i], 0, sizeof(ST_LCSCELL));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \t*out_LCS_Lenght = the_rank[the_iLen1][the_iLen2];\n\
    \tif (*out_LCS_Lenght != 0) { //?????v????????v??O???????LCS????????\n\
    \t\tGetEmbeddings(the_iComm_Head, the_iComm_Tail,\n\
    \t\t\t\t\t  the_iLen1, the_iLen2,\n\
    \t\t\t\t\t  the_lcsrev, 0,\n\
    \t\t\t\t\t  the_head, the_pretail, the_tail,\n\
    \t\t\t\t\t  the_iLen1, the_iLen2,\n\
    \t\t\t\t\t  the_pStr1,\n\
    \t\t\t\t\t  the_rank[the_iLen1][the_iLen2],\n\
    \t\t\t\t\t  &the_pLCSsCurNode,\n\
    \t\t\t\t\t  out_LCSsNum);\n\
    \t\t/* ?? ????Node???????? */\n\
    \t\t*the_pLCSsCurNode = *io_LCSsHeadNode;\n\
    \t\tthe_LCSsPrevNode = *io_LCSsHeadNode;\n\
    \t\tthe_pLCSsNextNode = *io_LCSsHeadNode;\n\
    \t\twhile (*the_pLCSsCurNode != NULL) {\n\
    \t\t\tthe_pLCSsNextNode = (*the_pLCSsCurNode)->next;\n\
    \t\t\tif (the_pLCSsNextNode == NULL) {\n\
    \t\t\t\tfree(*the_pLCSsCurNode);\n\
    \t\t\t\t*the_pLCSsCurNode = NULL;\n\
    \t\t\t\tif (the_LCSsPrevNode != NULL) {\n\
    \t\t\t\t\t(the_LCSsPrevNode)->next = NULL;\n\
    \t\t\t\t}\n\
    \t\t\t}\n\
    \t\t\tthe_LCSsPrevNode = *the_pLCSsCurNode;\n\
    \t\t\t*the_pLCSsCurNode = the_pLCSsNextNode;\n\
    \t\t}\n\n\
    \t\t// add common context\n\
    \t\t*the_pLCSsCurNode = *io_LCSsHeadNode;\n\
    \t\twhile (*the_pLCSsCurNode != NULL) {\n\
    \t\t\tfor (the_i = 0;the_i < the_iComm_Head;the_i++) {\n\
    \t\t\t\t((*the_pLCSsCurNode)->LCS)[the_i] = in_pStr1[the_i];\n\
    \t\t\t}\n\
    \t\t\tthe_i = the_iComm_Head + *out_LCS_Lenght;\n\
    \t\t\tfor (the_j = in_len1 - the_iComm_Tail;the_j < in_len1;the_j++) {\n\
    \t\t\t\t((*the_pLCSsCurNode)->LCS)[the_i] = in_pStr1[the_j];\n\
    \t\t\t\tthe_i++;\n\
    \t\t\t}\n\
    \t\t\t*the_pLCSsCurNode = (*the_pLCSsCurNode)->next;\n\
    \t\t}\n\
    \t\t*out_LCS_Lenght = *out_LCS_Lenght + the_iComm_Head + the_iComm_Tail;\n\
    \t} else if (the_iComm_Head + the_iComm_Tail > 0) { //?????v????????v??O???????LCS???????\n\
    \t\tchar ** the_LCS = NULL;\n\
    \t\tAnzMalloc(the_LCS, char**, sizeof(char *)*(the_iComm_Head + the_iComm_Tail + 1));\n\
    \t\tif (the_LCS != NULL) {\n\
    \t\t\tmemset(the_LCS, 0, sizeof(char *)*(the_iComm_Head + the_iComm_Tail + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tfor (the_i = 0;the_i < the_iComm_Head;the_i++) {\n\
    \t\t\tthe_LCS[the_i] = in_pStr1[the_i];\n\
    \t\t}\n\
    \t\tfor (the_j = in_len1 - the_iComm_Tail;the_j < in_len1;the_j++) {\n\
    \t\t\tthe_LCS[the_i] = in_pStr1[the_j];\n\
    \t\t\tthe_i++;\n\
    \t\t}\n\
    \t\t(*the_pLCSsCurNode)->LCS = the_LCS;\n\
    \t\t(*the_pLCSsCurNode)->next = NULL;\n\
    \t\t*out_LCS_Lenght = the_iComm_Head + the_iComm_Tail;\n\
    \t} else {\n\
    \t\tif (*the_pLCSsCurNode != NULL) {\n\
    \t\t\tfree(*the_pLCSsCurNode);\n\
    \t\t\t*the_pLCSsCurNode = NULL;\n\
    \t\t\t*io_LCSsHeadNode = NULL;\n\
    \t\t}\n\
    \t}\n\
    \t//Free memory\n\
    \tfor (the_i = 0;the_i < the_rank[the_iLen1][the_iLen2];the_i++) {\n\
    \t\tif (the_lcsrev[the_i] != NULL) {\n\
    \t\t\tfree(the_lcsrev[the_i]);\n\
    \t\t\tthe_lcsrev[the_i] = NULL;\n\
    \t\t}\n\
    \t}\n\n\
    \tif (the_lcsrev != NULL) {\n\
    \t\tfree(the_lcsrev);\n\
    \t\tthe_lcsrev = NULL;\n\
    \t}\n\
    \t//**the_head, **the_pretail, **the_tail;\n\
    \t//**the_rank;\n\
    \t//**the_p[the_i][the_j];\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tif (the_p[the_i][the_j] != NULL) {\n\
    \t\t\t\tfree(the_p[the_i][the_j]);\n\
    \t\t\t\tthe_p[the_i][the_j] = NULL;\n\
    \t\t\t}\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tif (*(the_head + the_i) != NULL) {\n\
    \t\t\tfree(*(the_head + the_i));\n\
    \t\t\t*(the_head + the_i) = NULL;\n\
    \t\t}\n\
    \t\tif (the_pretail[the_i] != NULL) {\n\
    \t\t\tfree(the_pretail[the_i]);\n\
    \t\t\tthe_pretail[the_i] = NULL;\n\
    \t\t}\n\
    \t\tif (the_tail[the_i] != NULL) {\n\
    \t\t\tfree(the_tail[the_i]);\n\
    \t\t\tthe_tail[the_i] = NULL;\n\
    \t\t}\n\
    \t\tif (the_rank[the_i] != NULL) {\n\
    \t\t\tfree(the_rank[the_i]);\n\
    \t\t\tthe_rank[the_i] = NULL;\n\
    \t\t}\n\
    \t\tif (the_p[the_i] != NULL) {\n\
    \t\t\tfree(the_p[the_i]);\n\
    \t\t\tthe_p[the_i] = NULL;\n\
    \t\t}\n\
    \t}\n\
    \tif (the_head != NULL) {\n\
    \t\tfree(the_head);\n\
    \t\tthe_head = NULL;\n\
    \t}\n\
    \tif (the_pretail != NULL) {\n\
    \t\tfree(the_pretail);\n\
    \t\tthe_pretail = NULL;\n\
    \t}\n\
    \tif (the_tail != NULL) {\n\
    \t\tfree(the_tail);\n\
    \t\tthe_tail = NULL;\n\
    \t}\n\
    \tif (the_rank != NULL) {\n\
    \t\tfree(the_rank);\n\
    \t\tthe_rank = NULL;\n\
    \t}\n\
    \tif (the_p != NULL) {\n\
    \t\tfree(the_p);\n\
    \t\tthe_p = NULL;\n\
    \t}\n\
    \tif (the_pLCSsCurNode != NULL) {\n\
    \t\tfree(the_pLCSsCurNode);\n\
    \t\tthe_pLCSsCurNode = NULL;\n\
    \t}\n\
    \tif (g_dummy != NULL) {\n\
    \t\tfree(g_dummy);\n\
    \t\tg_dummy = NULL;\n\
    \t}\n\
    \treturn 0;\n\
    }\n\n\
    ST_LCS_DAT * LCSAlgo::CreateLCS_DAT(MeasureFileObject* in_measureFileObj)\n\
    {\n\
    \tint the_iPairNo = 0;\t\t\t\t\t\t// ????y?A?????A????????y?A????r??????????\n\
    \tint the_iArrayNum = 0;\t\t\t\t\t\t// _ST_LCS_DAT???????y?A??\n\
    \tint the_iFuncPair = 0;\t\t\t\t\t\t// LCS??g????????\n\
    \tint the_iArray_Cur = 0;\t\t\t\t\t\t// ?J?????g?????z???????\n\
    \tint the_iBit_Cur = 0;\t\t\t\t\t\t// ?J?????g?????long?^????bit???u\n\
    \tint the_iArray_Next = 0;\t\t\t\t\t// ???????z???????\n\
    \tint the_iBit_Next = 0;\t\t\t\t\t\t// ???????long?^????bit???u\n\
    \tint the_iCurNo = 0;\t\t\t\t\t\t\t// ?J?????g?????z???????\n\
    \tint the_iNextNo = 0;\t\t\t\t\t\t// ???????????\n\
    \tint the_iLCSsNum = 0;\t\t\t\t\t\t// LCS???\n\
    \tint the_iLCS_Lenght = 0;\t\t\t\t\t// LCS??Lenght\n\
    \tPLCSLIST the_pLCSsHeadNode = NULL; /* LCS??List??w?b?_Node */\n\
    \tPLCSLIST the_pLCSsNextNode = NULL; /* ????n????LCS??List???????p??Node */\n\
    \tPLCSLIST the_pLCSsCurNode = NULL; /* LCS??List???????p?J?????gNode */\n\n\
    \tunsigned long the_iFuncNum = 0;\t\t\t\t//File????L?q??????????\n\n\
    \tST_LCS_DAT* pLcs_Dat_Head = NULL;\t\t\t//_ST_LCS_DAT??HeadNode\n\
    \tST_LCS_DAT* pLcs_Dat_Cur = NULL;\t\t\t//_ST_LCS_DAT??CurNode\n\
    \tST_LCS_DAT* pLcs_Dat_Pre = NULL;\t\t\t//_ST_LCS_DAT??PreNode\n\
    \tunsigned long *lPair = NULL;\n\
    \tunsigned long *pPair = NULL;\n\
    \tunsigned long lFir, lSec;\n\n\
    \tlFir = 1;\n\
    \tlSec = 1;\n\n\
    \t// ????v??FileInfo????????\n\
    \tif (in_measureFileObj == NULL) {\n\
    \t\treturn NULL;\n\
    \t}\n\
    \t// ????v??FunctionInfo????????\n\
    \tthe_iFuncNum = in_measureFileObj->GetCommonFileInfo()->GetFuncNum();\n\
    \tthe_iFuncPair = the_iFuncNum * (the_iFuncNum - 1) / 2;\n\
    \tthe_iArrayNum = the_iFuncNum / g_iUnitSize;\n\
    \tif (the_iFuncNum % g_iUnitSize != 0) {\n\
    \t\tthe_iArrayNum++;\n\
    \t}\n\n\
    \tin_measureFileObj->RewindFuncList();\n\
    \tMeasureFuncObject* the_pFuncCur = in_measureFileObj->GetCurrFuncObj();\n\
    \tMeasureFuncObject* the_pFuncNext = in_measureFileObj->GetCurrFuncObj();\n\n\
    \t/* ????????? */\n\
    \tthe_iLCSsNum = 0;\n\
    \tthe_iLCS_Lenght = 0;\n\
    \tthe_pLCSsNextNode = NULL;\n\
    \tthe_pLCSsHeadNode = NULL;\n\
    \tthe_pLCSsCurNode = NULL;\n\
    \twhile (in_measureFileObj->HasNextFunc()) {\n\
    \t\tthe_iNextNo = the_iCurNo + 1;\n\
    \t\tthe_iArray_Cur = the_iCurNo / g_iUnitSize;\n\
    \t\tthe_iBit_Cur = the_iCurNo % g_iUnitSize;\n\
    \t\t//\n\
    \t\tin_measureFileObj->MoveNextFunc();\n\
    \t\tthe_pFuncNext = in_measureFileObj->GetCurrFuncObj();\n\
    \t\tin_measureFileObj->MarkCurrFuncPos();\n\
    \t\twhile (the_pFuncNext != NULL) {\n\
    \t\t\t//*out_fileELOC = *out_fileELOC + the_pFuncNext->m_eloc;\n\
    \t\t\tthe_iArray_Next = the_iNextNo / g_iUnitSize;\n\
    \t\t\tthe_iBit_Next = the_iNextNo % g_iUnitSize;\n\n\
    \t\t\tthe_iLCSsNum = 0;\n\
    \t\t\tthe_iLCS_Lenght = 0;\n\
    \t\t\tthe_pLCSsHeadNode = NULL;\n\
    \t\t\t/* ????n????All Distinct LCS???????? */\n\
    \t\t\tGetAllDistinctLCSs(the_pFuncCur->GetCommFuncInfo()->GetExecContent(),\n\
    \t\t\t\t\t\t\t   the_pFuncNext->GetCommFuncInfo()->GetExecContent(),\n\
    \t\t\t\t\t\t\t   the_pFuncCur->GetCommFuncInfo()->GetExecLOC(),\n\
    \t\t\t\t\t\t\t   the_pFuncNext->GetCommFuncInfo()->GetExecLOC(),\n\
    \t\t\t\t\t\t\t   &the_pLCSsHeadNode,\n\
    \t\t\t\t\t\t\t   &the_iLCS_Lenght,\n\
    \t\t\t\t\t\t\t   &the_iLCSsNum);\n\
    \t\t\tthe_pLCSsCurNode = the_pLCSsHeadNode;\n\
    \t\t\t//while (the_pLCSsCurNode!=NULL)\n\
    \t\t\tif (the_pLCSsCurNode != NULL && the_iLCS_Lenght != 0) {\n\
    \t\t\t\t//\t\t\t\tif(the_iLCS_Lenght == 0){\n\
    \t\t\t\t//\t\t\t\t\tthe_pLCSsCurNode = the_pLCSsCurNode->next;\n\
    \t\t\t\t//\t\t\t\t\tcontinue;\n\
    \t\t\t\t//\t\t\t\t}\n\
    \t\t\t\tAnzMalloc(pLcs_Dat_Cur, ST_LCS_DAT*, sizeof(ST_LCS_DAT));\n\
    \t\t\t\tif (pLcs_Dat_Cur != NULL) {\n\
    \t\t\t\t\tmemset(pLcs_Dat_Cur, 0, sizeof(ST_LCS_DAT));\n\
    \t\t\t\t} else {\n\
    \t\t\t\t\tthrow MemoryFailedExc();\n\
    \t\t\t\t}\n\
    \t\t\t\tif (pLcs_Dat_Head == NULL) {\n\
    \t\t\t\t\tpLcs_Dat_Head = pLcs_Dat_Cur;\n\
    \t\t\t\t\tpLcs_Dat_Pre = pLcs_Dat_Cur;\n\
    \t\t\t\t} else {\n\
    \t\t\t\t\tpLcs_Dat_Pre->next = pLcs_Dat_Cur;\n\
    \t\t\t\t}\n\n\
    \t\t\t\tpLcs_Dat_Cur->LCS = the_pLCSsCurNode->LCS;\n\
    \t\t\t\tpLcs_Dat_Cur->length = the_iLCS_Lenght;\n\
    \t\t\t\tAnzMalloc(lPair, unsigned long*, sizeof(unsigned long)*(the_iArrayNum + 1));\n\
    \t\t\t\tif (lPair != NULL) {\n\
    \t\t\t\t\tmemset(lPair, 0, sizeof(unsigned long)*(the_iArrayNum + 1));\n\
    \t\t\t\t} else {\n\
    \t\t\t\t\tthrow MemoryFailedExc();\n\
    \t\t\t\t}\n\
    \t\t\t\tpPair = lPair;\n\
    \t\t\t\tlFir = 1, lSec = 1;\n\
    \t\t\t\tlFir = lFir << the_iBit_Cur;\n\
    \t\t\t\tlSec = lSec << the_iBit_Next;\n\
    \t\t\t\tif (the_iArray_Cur == the_iArray_Next) {\n\
    \t\t\t\t\tpPair[the_iArray_Cur] = lFir | lSec;\n\
    \t\t\t\t} else {\n\
    \t\t\t\t\tpPair[the_iArray_Cur] = lFir;\n\
    \t\t\t\t\tpPair[the_iArray_Next] = lSec;\n\
    \t\t\t\t}\n\
    \t\t\t\tpPair[the_iArrayNum] = NULL;\n\
    \t\t\t\tpLcs_Dat_Cur->funcPair = pPair;\n\
    \t\t\t\tpLcs_Dat_Cur->next = NULL;\n\
    \t\t\t\tpLcs_Dat_Cur->pairNo = the_iPairNo;\n\
    \t\t\t\tpLcs_Dat_Cur->bDelete = false;\n\
    \t\t\t\tpLcs_Dat_Pre = pLcs_Dat_Cur;\n\
    \t\t\t\tthe_pLCSsCurNode = the_pLCSsCurNode->next;\n\
    \t\t\t} //End of while (the_pLCSsCurNode!=NULL)\n\
    \t\t\tthe_pLCSsCurNode = the_pLCSsHeadNode;\n\
    \t\t\twhile (the_pLCSsCurNode != NULL) {\n\
    \t\t\t\tthe_pLCSsNextNode = the_pLCSsCurNode->next;\n\
    \t\t\t\tif (the_pLCSsCurNode != the_pLCSsHeadNode && the_pLCSsCurNode->LCS != NULL) {\n\
    \t\t\t\t\tfree(the_pLCSsCurNode->LCS);\n\
    \t\t\t\t}\n\
    \t\t\t\tfree(the_pLCSsCurNode);\n\
    \t\t\t\tthe_pLCSsCurNode = the_pLCSsNextNode;\n\
    \t\t\t}\n\
    \t\t\tthe_iNextNo++;\n\
    \t\t\tthe_iPairNo++;\n\
    \t\t\tin_measureFileObj->MoveNextFunc();\n\
    \t\t\tthe_pFuncNext = in_measureFileObj->GetCurrFuncObj();\n\n\
    \t\t} //End of while (the_pFuncNext != NULL)\n\
    \t\tthe_iCurNo++;\n\
    \t\t//\n\
    \t\tin_measureFileObj->RestoreMarkFuncPos();\n\
    \t\tthe_pFuncCur = in_measureFileObj->GetCurrFuncObj();\n\
    \t} //End of while (in_measureFileObj->HasNextFunc())\n\
    \treturn pLcs_Dat_Head;\n\
    }\n\n\
    LCSAlgo::LCSAlgo()\n\
    {}\n\n\
    LCSAlgo::~LCSAlgo()\n\
    {}\n\n\
    /**\n\
    *  ?????:GetLCSLength\n\
    *  ?T?v:?????LCS???v?Z\n\
    *  @param\n\
    *          in_pStr1      ?v?????1??s???e\n\
    *          in_pStr2      ?v?????2??s???e\n\
    *          in_len1       ?v?????1??s??\n\
    *          in_len2       ?v?????2??s??\n\
    *  @return\n\
    *          ANZ_SUCCESS          ?????I??    \n\
    *          ANZERR_MEMORY_FAILED ???????m????s  \n\
    *  @author luo-jirong\n\
    *  @modified by fan-jia 2005/02/06\n\
    */\n\
    unsigned int LCSAlgo::GetLCSLength(char** in_pStr1,\n\
    \t\t\t\t\t\t\t\t   char** in_pStr2,\n\
    \t\t\t\t\t\t\t\t   const int in_len1,\n\
    \t\t\t\t\t\t\t\t   const int in_len2)\n\
    {\n\
    \tregister int the_i = 0;     /* Loop?p */\n\
    \tregister int the_j = 0;     /* Loop?p */\n\
    \tunsigned int the_max = 0;   /* ?J?????g????l */\n\
    \tunsigned int *the_ps1 = NULL;  /* ???l???i?[?????z?? */\n\
    \tunsigned int *the_ps2 = NULL;   /* ???l???i?[?????z?? */\n\
    \tunsigned int *the_tmp = NULL;        /* Swap?p???Point */\n\
    \tunsigned int the_commonNum = 0;      /* ????s?? */\n\
    \tint the_iMaxLen = 0;        /* Item?????\xC2\x90? */\n\n\
    \tif (in_pStr1 == NULL || in_pStr2 == NULL) {\n\
    \t\treturn -1;\n\
    \t}\n\n\
    \tint the_iMinLen = min(in_len1, in_len2);\n\
    \tint the_iComm_Head = 0;\n\
    \tint the_iComm_Tail = 0;\n\
    \tfor (the_i = 0;the_i < the_iMinLen;the_i++) {\n\
    \t\tif (strcmp(in_pStr1[the_i], in_pStr2[the_i]) == 0) {\n\
    \t\t\tthe_iComm_Head++;\n\
    \t\t} else {\n\
    \t\t\tbreak;\n\
    \t\t}\n\
    \t}\n\n\
    \tint the_iCurLine1 = in_len1 - 1;\n\
    \tint the_iCurLine2 = in_len2 - 1;\n\
    \twhile (in_pStr1[the_iCurLine1] != NULL &&\n\
    \t\t\tin_pStr2[the_iCurLine2] != NULL &&\n\
    \t\t\tthe_iCurLine1 > the_iComm_Head - 1 &&\n\
    \t\t\tthe_iCurLine2 > the_iComm_Head - 1) {\n\
    \t\tif (strcmp(in_pStr1[the_iCurLine1], in_pStr2[the_iCurLine2]) == 0) {\n\
    \t\t\tthe_iComm_Tail++;\n\
    \t\t} else {\n\
    \t\t\tbreak;\n\
    \t\t}\n\
    \t\tthe_iCurLine1--;\n\
    \t\tthe_iCurLine2--;\n\
    \t}\n\n\
    \tint the_iLen1 = in_len1 - the_iComm_Head - the_iComm_Tail;\n\
    \tint the_iLen2 = in_len2 - the_iComm_Head - the_iComm_Tail;\n\
    \tchar** the_pStr1 = in_pStr1 + the_iComm_Head;\n\
    \tchar** the_pStr2 = in_pStr2 + the_iComm_Head;\n\
    \tthe_iMaxLen = the_iLen1 > the_iLen2 ? the_iLen1 : the_iLen2;\n\n\
    \tAnzMalloc(the_ps1, unsigned int*, sizeof(unsigned int) * (the_iMaxLen + 1));\n\
    \tAnzMalloc(the_ps2, unsigned int*, sizeof(unsigned int) * (the_iMaxLen + 1));\n\n\
    \tif (the_ps1 == NULL || the_ps2 == NULL) {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\n\
    \tmemset(the_ps1, 0, sizeof(int) * (the_iMaxLen + 1));\n\
    \tmemset(the_ps2, 0, sizeof(int) * (the_iMaxLen + 1));\n\n\
    \tfor (the_i = 0; the_i < the_iLen2; the_i++) {\n\
    \t\tfor (the_j = 0; the_j < the_iLen1; the_j++) {\n\
    \t\t\tif (the_pStr1[the_j] == NULL || the_pStr2[the_i] == NULL) {\n\
    \t\t\t\tthe_max = 0;\n\
    \t\t\t\tTrace(\"GetLCSLength:?????v?f??Point??A?h???X??NULL??????B\");\n\
    \t\t\t} else {\n\
    \t\t\t\tif ( strcmp( the_pStr1[the_j], the_pStr2[the_i]) == 0 )\n\
    \t\t\t\t\tthe_max = the_ps1[the_j] + 1;\n\
    \t\t\t\telse\n\
    \t\t\t\t\tthe_max = 0;\n\
    \t\t\t}\n\
    \t\t\tif (the_max < the_ps1[the_j + 1])\n\
    \t\t\t\tthe_max = the_ps1[the_j + 1];\n\
    \t\t\tif (the_max < the_ps2[the_j])\n\
    \t\t\t\tthe_max = the_ps2[the_j];\n\
    \t\t\tthe_ps2[the_j + 1] = the_max;\n\
    \t\t}\n\
    \t\tthe_tmp = the_ps1;\n\
    \t\tthe_ps1 = the_ps2;\n\
    \t\tthe_ps2 = the_tmp;\n\
    \t}\n\n\
    \tthe_commonNum = the_ps1[ the_iLen1] + the_iComm_Head + the_iComm_Tail;\n\n\
    \tif (the_ps1 != NULL) {\n\
    \t\tfree(the_ps1);\n\
    \t\tthe_ps1 = NULL;\n\
    \t}\n\
    \tif (the_ps2 != NULL) {\n\
    \t\tfree(the_ps2);\n\
    \t\tthe_ps2 = NULL;\n\
    \t}\n\
    \treturn the_commonNum;\n\
    }\n\n\
    void LCSAlgo::RemoveLCS_DAT(ST_LCS_DAT *in_pLCS_DAT)\n\
    {\n\
    \tST_LCS_DAT* the_pCurLCS_DAT = in_pLCS_DAT;\n\
    \tST_LCS_DAT* the_pNextLCS_DAT = in_pLCS_DAT;\n\n\
    \twhile (the_pCurLCS_DAT) {\n\
    \t\tthe_pNextLCS_DAT = the_pCurLCS_DAT->next;\n\
    \t\t//free the_pCurLCS_DAT\n\
    \t\tif (the_pCurLCS_DAT->funcPair != NULL) {\n\
    \t\t\tfree(the_pCurLCS_DAT->funcPair);\n\
    \t\t\tthe_pCurLCS_DAT->funcPair = NULL;\n\
    \t\t}\n\
    \t\tif (the_pCurLCS_DAT->LCS != NULL) {\n\
    \t\t\tfree(the_pCurLCS_DAT->LCS);\n\
    \t\t\tthe_pCurLCS_DAT->LCS = NULL;\n\
    \t\t}\n\
    \t\tif (the_pCurLCS_DAT != NULL) {\n\
    \t\t\tfree(the_pCurLCS_DAT);\n\
    \t\t\tthe_pCurLCS_DAT = NULL;\n\
    \t\t}\n\
    \t\tthe_pCurLCS_DAT = the_pNextLCS_DAT;\n\
    \t}\n\
    }\n\n"
  updated_at: 2011-05-13 10:35:00
  analyzed_source_path_id: "137"
  id: "10059"
  subtask_id: "12"
source_codes_1221: 
  created_at: 2010-07-05 17:17:13
  error_line: 
  body: "    $AnalyzeMe 2.0.0.0$\r\n\
    */\r\n\
    \r\n"
  updated_at: 2011-05-13 10:35:31
  analyzed_source_path_id: "157"
  id: "9927"
  subtask_id: "2"
source_codes_907: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "    }\r\n    memset(the_pCmdOption,'\\0',sizeof(ST_Option));\r\n    /* ?f?t?H???g?l??Option????the_pCmdOption??????? */\r\n    the_pCmdOption->m_version = OFF;\r\n    the_pCmdOption->m_help = OFF;\r\n    the_pCmdOption->m_verbos = OFF;\r\n\
    #ifdef __GNUC__\r\n    strcpy(the_pCmdOption->m_prefix,\"./\");\r\n\
    #else\r\n    strcpy(the_pCmdOption->m_prefix,\".\\\\\");\r\n\
    #endif\r\n    strcpy(the_pCmdOption->m_filePattern,\"**/*.[CcHh]\");\r\n    strcpy(the_pCmdOption->m_symbolFile,\"\");\r\n    strcpy(the_pCmdOption->m_optionFile,\"\");\r\n    the_pCmdOption->m_fileLOC = ON;\r\n    the_pCmdOption->m_redundancy = OFF;\r\n    the_pCmdOption->m_funcNum = OFF;\r\n    the_pCmdOption->m_eloc = OFF;\r\n    the_pCmdOption->m_mccabe = OFF;\r\n    the_pCmdOption->m_similar = OFF;\r\n    the_pCmdOption->m_trend = OFF;\r\n    the_pCmdOption->m_funcTrend = OFF;\r\n    the_pCmdOption->m_symThresh = 70;\r\n    the_pCmdOption->m_minThresh = 2;\r\n\
    \r\n    /* ?R?}???h???C??????????? */\r\n    the_iRet = AnalyzeCmdLine(argc,argv,the_pCmdOption,the_pMeasureItem);\r\n    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9613"
  subtask_id: "9"
source_codes_221: 
  created_at: 2010-07-05 17:09:18
  error_line: "351"
  body: "            strcat(the_szCurMetrics,\"????????\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8927"
  subtask_id: "5"
source_codes_353: 
  created_at: 2010-07-05 17:09:22
  error_line: "604"
  body: "    signal( SIGINT  , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9059"
  subtask_id: "5"
source_codes_485: 
  created_at: 2010-07-05 17:11:42
  error_line: 
  body: |
    
    /* ?R?}???h???C??????????? */
    the_iRet = AnalyzeCmdLine(argc,argv,the_pCmdOption,the_pMeasureItem);

  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9191"
  subtask_id: "1"
source_codes_1486: 
  created_at: 2010-07-05 17:20:39
  error_line: 
  body: "\tif (in_pExtName == NULL) {\r\n\
    \t\treturn NULL;\r\n\
    \t}\r\n\
    \r\n\
    \tLanguageProduct * the_pLangProd = NULL;\r\n\
    \tif (strcmp(in_pExtName, \"c\") == 0 ||\r\n\
    \t\t\tstrcmp(in_pExtName, \"C\") == 0 ||\r\n\
    \t\t\tstrcmp(in_pExtName, \"h\") == 0 ||\r\n\
    \t\t\tstrcmp(in_pExtName, \"H\") == 0) {\r\n\
    \t\tthe_pLangProd = C_LanguageProduct::GetInstance();\r\n\
    #ifdef ANALYZEME_CPP_SUPPORT\r\n\
    \t} else if (strcmp(in_pExtName, \"cpp\") == 0 || // C++???????????(K.Maruya) \r\n\
    \t\t\t\tstrcmp(in_pExtName, \"CPP\") == 0 || \r\n\
    \t\t\t\tstrcmp(in_pExtName, \"cxx\") == 0 ||\r\n\
    \t\t\t\tstrcmp(in_pExtName, \"CXX\") == 0) {\r\n\
    \t\tthe_pLangProd = C_LanguageProduct::GetInstance();\r\n\
    #endif\r\n\
    \t} else if (strcmp(in_pExtName, \"s\") == 0 || strcmp(in_pExtName, \"S\") == 0 ) {\r\n\
    \t\tthe_pLangProd = Asm_LanguageProduct::GetInstance();\r\n\
    \t} else if (strcmp(in_pExtName, \"asm\") == 0 || strcmp(in_pExtName, \"ASM\") == 0 ) {\r\n\
    \t\tthe_pLangProd = Asm_LanguageProduct::GetInstance();\r\n\
    \t} else {\r\n\
    \t\tthe_pLangProd = Asm_LanguageProduct::GetInstance();\r\n\
    \t}\r\n\
    \r\n\
    \tTrace(\"LanguageFactory::CreateProduct() out\\n\");\r\n\
    \treturn the_pLangProd;\r\n\
    }\r\n\
    \r\n\
    LanguageFactory::LanguageFactory()\r\n\
    {\r\n\
    \tTrace(\"LanguageFactory::LanguageFactory() in\\n\");\r\n\
    \tTrace(\"LanguageFactory::LanguageFactory() out\\n\");\r\n\
    }\r\n\
    \r\n\
    LanguageFactory::~LanguageFactory()\r\n\
    {\r\n\
    \tTrace(\"LanguageFactory::LanguageFactory() in\\n\");\r\n\
    \tTrace(\"LanguageFactory::LanguageFactory() out\\n\");\r\n\
    }\r\n\
    \r\n\
    \r\n\n"
  updated_at: 2011-05-13 10:35:44
  analyzed_source_path_id: "177"
  id: "10192"
  subtask_id: "8"
source_codes_1354: 
  created_at: 2010-07-05 17:18:42
  error_line: 
  body: |+
    /*
    File:
       LanguageProduct.cpp
    Copyright:
       Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
       AnalyzeMe
    Abstract:
       ?????v???_?N?g
    Author:
       luo-jirong
    Date:
       2005/02/08
    REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 2.0.0.0$
    */
    
  updated_at: 2011-05-13 10:34:58
  analyzed_source_path_id: "133"
  id: "10060"
  subtask_id: "12"
source_codes_1222: 
  created_at: 2010-07-05 17:17:13
  error_line: "22"
  body: |
    #include "LanguageFactory.h"

  updated_at: 2011-05-13 10:35:31
  analyzed_source_path_id: "157"
  id: "9928"
  subtask_id: "2"
source_codes_908: 
  created_at: 2010-07-05 17:14:27
  error_line: "205"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9614"
  subtask_id: "9"
source_codes_222: 
  created_at: 2010-07-05 17:09:18
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8928"
  subtask_id: "5"
source_codes_354: 
  created_at: 2010-07-05 17:09:22
  error_line: "605"
  body: "    signal( SIGQUIT , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9060"
  subtask_id: "5"
source_codes_486: 
  created_at: 2010-07-05 17:11:42
  error_line: "200"
  body: "    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9192"
  subtask_id: "1"
source_codes_1487: 
  created_at: 2010-07-05 17:20:39
  error_line: 
  body: |+
    /*
    File:
       LCSAlgo.cpp
    Copyright:
       Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
       AnalyzeMe
    Abstract:
       LCS?Z?o?A???S???Y??
    Author:
       zhang-gh
    Date:
       2005/02/08
    REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 2.0.0.0$
    */
    
  updated_at: 2011-05-13 10:35:45
  analyzed_source_path_id: "180"
  id: "10193"
  subtask_id: "8"
source_codes_1355: 
  created_at: 2010-07-05 17:18:42
  error_line: "22"
  body: |
    #include "LanguageProduct.h"

  updated_at: 2011-05-13 10:34:58
  analyzed_source_path_id: "133"
  id: "10061"
  subtask_id: "12"
source_codes_1223: 
  created_at: 2010-07-05 17:17:13
  error_line: 
  body: |+
    #include "C_LanguageProduct.h"
    #include "Asm_LanguageProduct.h"
    
    /// <summary>
    ///?v??????????????N???X??instance??????????
    /// </summary>
    /// <remarks>
    ///?v??????????Factory???????C?v??????????Product?????CFile??g???q???????C
    ///????v??????????????N???X??instance???????????B
    /// </remarks>
    /// <param name="pExtName">File??g???q</param>
    /// <returns>
    ///?@?v??????????????N???X??instance
    /// </returns>
    /// <exception cref="???O??">
    ///
    /// </exception>
    LanguageProduct* LanguageFactory::CreateProduct(const char* in_pExtName)
    {
    	Trace("LanguageFactory::CreateProduct() in\n");
    	assert(in_pExtName != NULL);
    	if (in_pExtName == NULL) {
    		return NULL;
    	}
    
    	LanguageProduct * the_pLangProd = NULL;
    	if (strcmp(in_pExtName, "c") == 0 ||
    			strcmp(in_pExtName, "C") == 0 ||
    			strcmp(in_pExtName, "h") == 0 ||
    			strcmp(in_pExtName, "H") == 0) {
    		the_pLangProd = C_LanguageProduct::GetInstance();
    #ifdef ANALYZEME_CPP_SUPPORT
    	} else if (strcmp(in_pExtName, "cpp") == 0 || // C++???????????(K.Maruya) 
    				strcmp(in_pExtName, "CPP") == 0 || 
    				strcmp(in_pExtName, "cxx") == 0 ||
    				strcmp(in_pExtName, "CXX") == 0) {
    		the_pLangProd = C_LanguageProduct::GetInstance();
    #endif
    	} else if (strcmp(in_pExtName, "s") == 0 || strcmp(in_pExtName, "S") == 0 ) {
    		the_pLangProd = Asm_LanguageProduct::GetInstance();
    	} else if (strcmp(in_pExtName, "asm") == 0 || strcmp(in_pExtName, "ASM") == 0 ) {
    		the_pLangProd = Asm_LanguageProduct::GetInstance();
    	} else {
    		the_pLangProd = Asm_LanguageProduct::GetInstance();
    	}
    
    	Trace("LanguageFactory::CreateProduct() out\n");
    	return the_pLangProd;
    }
    
    LanguageFactory::LanguageFactory()
    {
    	Trace("LanguageFactory::LanguageFactory() in\n");
    	Trace("LanguageFactory::LanguageFactory() out\n");
    }
    
    LanguageFactory::~LanguageFactory()
    {
    	Trace("LanguageFactory::LanguageFactory() in\n");
    	Trace("LanguageFactory::LanguageFactory() out\n");
    }
    
    
    
  updated_at: 2011-05-13 10:35:31
  analyzed_source_path_id: "157"
  id: "9929"
  subtask_id: "2"
source_codes_909: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "    }\r\n    if(g_bOutTime) {\r\n        ftime(&the_st);\r\n    }\r\n\
    \r\n    /* Option??????????? */\r\n    the_iRet = SetOption(the_pAnzInfo,the_pCmdOption);\r\n    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9615"
  subtask_id: "9"
source_codes_223: 
  created_at: 2010-07-05 17:09:19
  error_line: "353"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8929"
  subtask_id: "5"
source_codes_355: 
  created_at: 2010-07-05 17:09:22
  error_line: "606"
  body: "    signal( SIGKILL , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9061"
  subtask_id: "5"
source_codes_487: 
  created_at: 2010-07-05 17:11:42
  error_line: "201"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9193"
  subtask_id: "1"
source_codes_224: 
  created_at: 2010-07-05 17:09:19
  error_line: "354"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8930"
  subtask_id: "5"
source_codes_356: 
  created_at: 2010-07-05 17:09:22
  error_line: "607"
  body: "    signal( SIGTERM , (void *)AbortAnalyzeMe);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9062"
  subtask_id: "5"
source_codes_488: 
  created_at: 2010-07-05 17:11:42
  error_line: 
  body: "    }\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9194"
  subtask_id: "1"
source_codes_1488: 
  created_at: 2010-07-05 17:20:39
  error_line: "22"
  body: |
    #include "LCSAlgo.h"

  updated_at: 2011-05-13 10:35:45
  analyzed_source_path_id: "180"
  id: "10194"
  subtask_id: "8"
source_codes_1356: 
  created_at: 2010-07-05 17:18:42
  error_line: 
  body: |
    
    /// <summary>
    ///Total?s?A???s?s?A?????s?A?R?????g?s??|?C???g????
    /// </summary>
    /// <remarks>
    ///	Total?s?A???s?s?A?????s?A?R?????g?s??|?C???g????
    /// </remarks>
    /// <param name="io_fileInfo">?v?????File</param>
    /// <returns>
    ///?@
    /// </returns>
    /// <exception cref="MemoryFailedExc">
    /// Memory Failed
    /// </exception>
    int LanguageProduct::MakeLOCInfo(FileInfo* io_fileInfo)
    {
    	/* ????? */
    	int the_iTotaLOCNum = 0;    /* the_pTotaLOC??z???? */
    	int the_iExecLOCNum = 0;    /* the_pExecLOC??z???? */
    	int the_iComtLOCNum = 0;    /* the_pComtLOC??z???? */
    	int the_iBlankLOCNum = 0;   /* the_pBlankLOC??z????*/

  updated_at: 2011-05-13 10:34:58
  analyzed_source_path_id: "133"
  id: "10062"
  subtask_id: "12"
source_codes_1224: 
  created_at: 2010-07-05 17:17:13
  error_line: "0"
  body: ""
  updated_at: 2011-05-13 10:35:31
  analyzed_source_path_id: "156"
  id: "9930"
  subtask_id: "2"
source_codes_910: 
  created_at: 2010-07-05 17:14:27
  error_line: "214"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9616"
  subtask_id: "9"
source_codes_225: 
  created_at: 2010-07-05 17:09:19
  error_line: "355"
  body: "            strcat(the_szCurMetrics,\"?????X??\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8931"
  subtask_id: "5"
source_codes_357: 
  created_at: 2010-07-05 17:09:22
  error_line: 
  body: |
    #else
        SetConsoleCtrlHandler(AbortAnalyzeMe, 1);
    #endif
        return;
    }
    
    /**
    *  ResetTrendPath
    *  ????p?X????????
    *  @param
    *         io_pPath  input Path
    *  @return
    *         ???
    *  @author luo-jirong

  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9063"
  subtask_id: "5"
source_codes_489: 
  created_at: 2010-07-05 17:11:42
  error_line: "203"
  body: "    if(g_bOutTime) {\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9195"
  subtask_id: "1"
source_codes_1489: 
  created_at: 2010-07-05 17:20:39
  error_line: 
  body: |
    #include "common.h"

  updated_at: 2011-05-13 10:35:45
  analyzed_source_path_id: "180"
  id: "10195"
  subtask_id: "8"
source_codes_1357: 
  created_at: 2010-07-05 17:18:43
  error_line: "44"
  body: "\tchar** the_pTotaLOC = NULL; /* File??LOC(???s)???P */\n"
  updated_at: 2011-05-13 10:34:58
  analyzed_source_path_id: "133"
  id: "10063"
  subtask_id: "12"
source_codes_1225: 
  created_at: 2010-07-05 17:17:13
  error_line: "1"
  body: |
    /*

  updated_at: 2011-05-13 10:35:31
  analyzed_source_path_id: "156"
  id: "9931"
  subtask_id: "2"
source_codes_911: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "    }\r\n    /* ?v?????????????? */\r\n    the_iRet = GetMeasureType(the_pOption,&the_iMeasureType);\r\n    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9617"
  subtask_id: "9"
source_codes_226: 
  created_at: 2010-07-05 17:09:19
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8932"
  subtask_id: "5"
source_codes_358: 
  created_at: 2010-07-05 17:09:22
  error_line: "622"
  body: |
    */

  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9064"
  subtask_id: "5"
source_codes_1358: 
  created_at: 2010-07-05 17:18:43
  error_line: 
  body: "\tchar** the_pExecLOC = NULL; /* LOC(???s)???P */\n\
    \tchar** the_pComtLOC = NULL; /* LOC(?????s */\n\
    \tchar** the_pBlankLOC = NULL; /* LOC(Comment ?s) ???P */\n\
    \tST_LineAttr* the_pTempLineAttr = NULL; /* ?J?????g?t?@?C???w?b?_?[?m?[?h?????|?C???g */\n\n\
    \t/* ???[?J??????????? */\n\n\
    \tTrace(\"MakeLOCInfo() in\\n\");\n\
    \t/*?v?????t?@?C????s???????????????*/\n\
    \tif (io_fileInfo == NULL) {\n\
    \t\treturn 0;\n\
    \t}\n\
    \tthe_pTempLineAttr = io_fileInfo->GetLineAttr();\n\n\
    \ttry {\n\
    \t\tAnzMalloc(the_pTotaLOC, char**, sizeof(char*)*(io_fileInfo->GetTotalLOC() + 1));\n\
    \t\tif (the_pTotaLOC == NULL) {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tmemset(the_pTotaLOC, '\\0', sizeof(char*)*(io_fileInfo->GetTotalLOC() + 1));\n\
    \t\tAnzMalloc(the_pExecLOC, char**, sizeof(char*)*(io_fileInfo->GetExecLOC() + 1));\n\
    \t\tif (the_pExecLOC == NULL) {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tmemset(the_pExecLOC, '\\0', sizeof(char*)*(io_fileInfo->GetExecLOC() + 1));\n\
    \t\tAnzMalloc(the_pComtLOC, char**, sizeof(char*)*(io_fileInfo->GetCommentLOC() + 1));\n\
    \t\tif (the_pComtLOC == NULL) {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tmemset(the_pComtLOC, '\\0', sizeof(char*)*(io_fileInfo->GetCommentLOC() + 1));\n\
    \t\tAnzMalloc(the_pBlankLOC, char**, sizeof(char*)*(io_fileInfo->GetBlankLOC() + 1));\n\
    \t\tif (the_pBlankLOC == NULL) {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tmemset(the_pBlankLOC, '\\0', sizeof(char*)*(io_fileInfo->GetBlankLOC() + 1));\n\
    \t\twhile (the_pTempLineAttr != NULL) {\n\n\
    \t\t\t/*?R?????g?s??|?C???g????*/\n\
    \t\t\tif (the_pTempLineAttr->m_attr1.IFL == 1) {\n\
    \t\t\t\t*(the_pComtLOC + the_iComtLOCNum) = the_pTempLineAttr->m_prow;\n\
    \t\t\t\tthe_iComtLOCNum++;\n\
    \t\t\t}\n\n\
    \t\t\t/*?????s??|?C???g????*/\n\
    \t\t\telse if (the_pTempLineAttr->m_attr.BL == 1) {\n\
    \t\t\t\t*(the_pBlankLOC + the_iBlankLOCNum) = the_pTempLineAttr->m_prow;\n\
    \t\t\t\tthe_iBlankLOCNum++;\n\
    \t\t\t}\n\n\
    \t\t\t/*?R?????g?s??|?C???g????*/\n\
    \t\t\telse if (the_pTempLineAttr->m_attr.CL == 1) {\n\
    \t\t\t\t*(the_pComtLOC + the_iComtLOCNum) = the_pTempLineAttr->m_prow;\n\
    \t\t\t\tthe_iComtLOCNum++;\n\
    \t\t\t}\n\n\
    \t\t\t/*???s?s??|?C???g????*/\n\
    \t\t\telse {\n\
    \t\t\t\t*(the_pExecLOC + the_iExecLOCNum) = the_pTempLineAttr->m_prow;\n\
    \t\t\t\tthe_iExecLOCNum++;\n\
    \t\t\t}\n\n\
    \t\t\t/*Total?s??|?C???g????*/\n\
    \t\t\t*(the_pTotaLOC + the_iTotaLOCNum) = the_pTempLineAttr->m_prow;\n\
    \t\t\tthe_iTotaLOCNum++;\n\
    \t\t\tthe_pTempLineAttr = the_pTempLineAttr->next;\n\
    \t\t}\n\n\
    \t\t/*LOC(???s)??????????*/\n\
    \t\tio_fileInfo->SetTotalContent(the_pTotaLOC);\n\n\
    \t\t/*LOC(???s)???????*/\n\
    \t\tio_fileInfo->SetExecContent(the_pExecLOC);\n\n\
    \t\t/*LOC(Comment?s)???????*/\n\
    \t\tio_fileInfo->SetCommentContent(the_pComtLOC);\n\n\
    \t\t/*LOC(?????s)???????*/\n\
    \t\tio_fileInfo->SetBlankContent(the_pBlankLOC);\n\
    \t}\n\
    \t/*????????????????s????????B*/\n\
    \tcatch (MemoryFailedExc &e) {\n\
    \t\tthrow e;\n\
    \t}\n\
    \tTrace(\"MakeLOCInfo() out\\n\");\n\
    \treturn 0;\n\
    }\n\n"
  updated_at: 2011-05-13 10:34:58
  analyzed_source_path_id: "133"
  id: "10064"
  subtask_id: "12"
source_codes_1226: 
  created_at: 2010-07-05 17:17:13
  error_line: 
  body: |+
    File:
       LanguageProduct.cpp
    Copyright:
       Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
       AnalyzeMe
    Abstract:
       ?????v???_?N?g
    Author:
       luo-jirong
    Date:
       2005/02/08
    REVISION HISTORY:
    
    */
    
  updated_at: 2011-05-13 10:35:31
  analyzed_source_path_id: "156"
  id: "9932"
  subtask_id: "2"
source_codes_912: 
  created_at: 2010-07-05 17:14:27
  error_line: "219"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9618"
  subtask_id: "9"
source_codes_227: 
  created_at: 2010-07-05 17:09:19
  error_line: "357"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8933"
  subtask_id: "5"
source_codes_359: 
  created_at: 2010-07-05 17:09:22
  error_line: "623"
  body: |
    int ResetTrendPath(char *io_pPath)

  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9065"
  subtask_id: "5"
source_codes_1490: 
  created_at: 2010-07-05 17:20:39
  error_line: "24"
  body: |
    #include "AnalyzeMe.h"

  updated_at: 2011-05-13 10:35:45
  analyzed_source_path_id: "180"
  id: "10196"
  subtask_id: "8"
source_codes_1359: 
  created_at: 2010-07-05 17:19:41
  error_line: 
  body: |
    /*
    File:
        LanguageFactory.cpp
    Copyright:
        Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
        AnalyzeMe
    Abstract:
        ????Factory
    Author:
        luo-jirong
    Date:
        2005/02/08
    REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 2.0.0.0$
    */

  updated_at: 2011-05-13 10:35:05
  analyzed_source_path_id: "144"
  id: "10065"
  subtask_id: "10"
source_codes_1227: 
  created_at: 2010-07-05 17:17:13
  error_line: "18"
  body: |
    /*

  updated_at: 2011-05-13 10:35:31
  analyzed_source_path_id: "156"
  id: "9933"
  subtask_id: "2"
source_codes_913: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "    }\r\n    /* ?R?}???h???C??????????Option??????????????? */\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9619"
  subtask_id: "9"
source_codes_490: 
  created_at: 2010-07-05 17:11:42
  error_line: "204"
  body: "        ftime(&the_st);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9196"
  subtask_id: "1"
source_codes_228: 
  created_at: 2010-07-05 17:09:19
  error_line: "358"
  body: "            strcat(the_szCurMetrics,\"?????X??\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8934"
  subtask_id: "5"
source_codes_1491: 
  created_at: 2010-07-05 17:20:39
  error_line: 
  body: |
    #include "FileInfo.h"
    #include "FunctionInfo.h"
    #include "MeasureFuncObject.h"
    #include "MemoryManagement.h"

  updated_at: 2011-05-13 10:35:45
  analyzed_source_path_id: "180"
  id: "10197"
  subtask_id: "8"
source_codes_1228: 
  created_at: 2010-07-05 17:17:13
  error_line: 
  body: "    $AnalyzeMe 2.0.0.0$\n\
    */\n\n"
  updated_at: 2011-05-13 10:35:31
  analyzed_source_path_id: "156"
  id: "9934"
  subtask_id: "2"
source_codes_914: 
  created_at: 2010-07-05 17:14:27
  error_line: "222"
  body: "    if(the_pCmdOption != NULL){\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9620"
  subtask_id: "9"
source_codes_491: 
  created_at: 2010-07-05 17:11:42
  error_line: 
  body: "    }\r\n\
    \r\n    /* Option??????????? */\r\n    the_iRet = SetOption(the_pAnzInfo,the_pCmdOption);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9197"
  subtask_id: "1"
source_codes_229: 
  created_at: 2010-07-05 17:09:19
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8935"
  subtask_id: "5"
source_codes_1492: 
  created_at: 2010-07-05 17:20:39
  error_line: "29"
  body: |
    #include "AnzException.h"

  updated_at: 2011-05-13 10:35:45
  analyzed_source_path_id: "180"
  id: "10198"
  subtask_id: "8"
source_codes_1360: 
  created_at: 2010-07-05 17:19:41
  error_line: "22"
  body: |
    #include "LanguageFactory.h"

  updated_at: 2011-05-13 10:35:05
  analyzed_source_path_id: "144"
  id: "10066"
  subtask_id: "10"
source_codes_1229: 
  created_at: 2010-07-05 17:17:13
  error_line: "22"
  body: |
    #include "LanguageProduct.h"

  updated_at: 2011-05-13 10:35:31
  analyzed_source_path_id: "156"
  id: "9935"
  subtask_id: "2"
source_codes_492: 
  created_at: 2010-07-05 17:11:42
  error_line: "209"
  body: "    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9198"
  subtask_id: "1"
source_codes_360: 
  created_at: 2010-07-05 17:09:22
  error_line: 
  body: |
    {

  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9066"
  subtask_id: "5"
source_codes_1493: 
  created_at: 2010-07-05 17:20:39
  error_line: 
  body: "\n\
    PCELL g_dummy;\n\
    #define DCELL g_dummy\n\
    unsigned int g_iUnitSize = sizeof(unsigned long)*8;\n\
    /**\n\
    *  GetEmbeddings\n\
    *  All Embeddings????????\n\
    *  @param  in_comm_Head,in_comm_Tail ?????v????????v???\n\
    *  @param  in_i,in_j\n\
    *  @param  in_lcsrev,in_curl\n\
    *  @param  in_head,in_pretail,in_tail\n\
    *  @param  in_len1,in_len2?@????n???????\n\
    *  @param  in_pStr1         ????n?????\n\
    *  @param  in_LCS_Lenght    LCS??Lenght\n\
    *  @param  io_LCSsCurNode   LCS??List??J?????gNode\n\
    *  @param  out_LCSsNum      LCS???\n\
    *  @return  \n\
    *           ANZ_SUCCESS:?????I??                                      \n\
    *           ANZ_ERROR  :????I??\n\
    *  @author zhang-gh\n\
    */\n\
    int LCSAlgo::GetEmbeddings(int in_comm_Head, int in_comm_Tail,\n\
    \t\t\t\t\t\t   int in_i, int in_j,\n\
    \t\t\t\t\t\t   PLCSPOS *in_lcsrev, int in_curl,\n\
    \t\t\t\t\t\t   PCELL **in_head, PCELL **in_pretail, PCELL **in_tail,\n\
    \t\t\t\t\t\t   int in_len1, int in_len2,    /* ????n??????? */\n\
    \t\t\t\t\t\t   char **in_pStr1,             /* ????n????? */\n\
    \t\t\t\t\t\t   int in_LCS_Lenght,           /* LCS??Lenght */\n\
    \t\t\t\t\t\t   PLCSLIST **io_LCSsCurNode,   /* LCS??List??J?????gNode */\n\
    \t\t\t\t\t\t   int *out_LCSsNum)         /* LCS??? */\n\
    {\n\
    \tchar **the_LCS;          /* ????LCS */\n\
    \tPLCSLIST the_LCSsTmpNode; /* LCS??List???Node */\n\
    \tPLCSLIST the_LCSsPreTailNode; /* LCS??List????Node????ONode */\n\
    \tPLCSPOS *the_lcsp;\n\
    \tPCELL the_adjp;\n\n\
    \t/* ????????? */\n\
    \tthe_LCS = NULL;\n\
    \tthe_LCSsTmpNode = NULL;\n\
    \tthe_LCSsPreTailNode = NULL;\n\
    \tthe_lcsp = NULL;\n\
    \tthe_adjp = NULL;\n\n\
    \t/* ?????J?n */\n\
    \tthe_adjp = in_head[in_i][in_j];\n\
    \tif (the_adjp == DCELL)\n\
    \t{\n\
    \t\tthe_adjp = in_tail[in_i][in_j];\n\
    \t}\n\
    \tif (the_adjp == DCELL)\n\
    \t{\n\
    \t\t/* ????LCS??????????m????? */\n\
    \t\tAnzMalloc(the_LCS, char**, sizeof(char *)*(in_LCS_Lenght + in_comm_Head + in_comm_Tail + 1));\n\
    \t\tif (the_LCS != NULL) {\n\
    \t\t\tmemset(the_LCS, 0, sizeof(char *)*(in_LCS_Lenght + in_comm_Head + in_comm_Tail + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tfor (the_lcsp = in_lcsrev + in_curl - 1; the_lcsp >= in_lcsrev; the_lcsp--) {\n\
    \t\t\t*(the_LCS + in_comm_Head + (in_LCS_Lenght - (the_lcsp - in_lcsrev) - 1)) = (*the_lcsp)->lcschar;\n\
    #if 0/* DEBUG?p */\n\n\
    \t\t\tprintf(\"%s^{%d}_{%d}\", (*the_lcsp)->lcschar, (*the_lcsp)->Apos, (*the_lcsp)->Bpos);\n\
    #endif\n\n\
    \t\t}\n\
    \t\t(**io_LCSsCurNode)->LCS = the_LCS;\n\
    #if 0/* DEBUG?p */\n\n\
    \t\tprintf(\"\\n\");\n\
    #endif\n\
    \t\t/* LCS??List?????Node????????? */\n\
    \t\tAnzMalloc(the_LCSsTmpNode, PLCSLIST, sizeof(ST_LCSLIST));\n\
    \t\tif (the_LCSsTmpNode != NULL) {\n\
    \t\t\tmemset(the_LCSsTmpNode, 0, sizeof(ST_LCSLIST));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\t(**io_LCSsCurNode)->next = the_LCSsTmpNode;\n\
    \t\t(**io_LCSsCurNode) = (**io_LCSsCurNode)->next;\n\
    \t\t/* LCS?????Count */\n\
    \t\t(*out_LCSsNum)++;\n\
    \t} else\n\
    \t{\n\
    \t\twhile (the_adjp != DCELL) {\n\
    \t\t\tin_lcsrev[in_curl]->lcschar = in_pStr1[the_adjp->i - 1];\n\
    \t\t\tin_lcsrev[in_curl]->Apos = the_adjp->i;\n\
    \t\t\tin_lcsrev[in_curl]->Bpos = the_adjp->j;\n\
    \t\t\tGetEmbeddings(in_comm_Head, in_comm_Tail,\n\
    \t\t\t\t\t\t  the_adjp->i - 1, the_adjp->j - 1,\n\
    \t\t\t\t\t\t  in_lcsrev, in_curl + 1,\n\
    \t\t\t\t\t\t  in_head, in_pretail, in_tail,\n\
    \t\t\t\t\t\t  in_len1, in_len2,\n\
    \t\t\t\t\t\t  in_pStr1,\n\
    \t\t\t\t\t\t  in_LCS_Lenght,\n\
    \t\t\t\t\t\t  io_LCSsCurNode,\n\
    \t\t\t\t\t\t  out_LCSsNum);\n\
    \t\t\tif (the_adjp == in_tail[in_i][in_j])\n\
    \t\t\t\tbreak;\n\
    \t\t\tif (the_adjp == in_pretail[in_i][in_j]) {\n\
    \t\t\t\tthe_adjp = in_tail[in_i][in_j];\n\
    \t\t\t} else {\n\
    \t\t\t\tthe_adjp = the_adjp->next;\n\
    \t\t\t}\n\
    \t\t}\n\
    \t}\n\
    \tif (in_i == in_len1 && in_j == in_len2)\n\
    \t{\n\
    #if 0/* DEBUG?p */\n\
    \t\t//printf(\"%d\\n\",the_count);\n\
    \t\t/* ????n????LCS??????p???? */\n\
    \t\t//*out_LCSsNum = the_count;\n\
    #endif\n\n\
    \t}\n\
    \treturn 0;\n\
    }\n\n\
    /**\n\
    *  GetAllDistinctLCSs\n\
    *  ????n????All Distinct LCS????????\n\
    *  @param  in_pStr1,in_pStr2 ????n??\n\
    *  @param  in_len1,in_len2?@ ????n???????\n\
    *  @param  io_LCSsHeadNode   LCS??List??w?b?_Node\n\
    *  @param  out_LCS_Lenght    LCS??Lenght\n\
    *  @param  out_LCSsNum       LCS???\n\
    *  @return  \n\
    *           ANZ_SUCCESS:?????I??                                      \n\
    *           ANZ_ERROR  :????I??\n\
    *  @author zhang-gh\n\
    */\n\
    int LCSAlgo::GetAllDistinctLCSs(char **in_pStr1, char **in_pStr2,        /* ????n?? */\n\
    \t\t\t\t\t\t\t\tconst int in_len1, const int in_len2,    /* ????n??????? */\n\
    \t\t\t\t\t\t\t\tPLCSLIST *io_LCSsHeadNode,    /* LCS??List??w?b?_Node */\n\
    \t\t\t\t\t\t\t\tint *out_LCS_Lenght,          /* LCS??Lenght */\n\
    \t\t\t\t\t\t\t\tint *out_LCSsNum)          /* LCS??? */\n\
    {\n\
    \tint the_i, the_j;\n\
    \tPCELL **the_head, **the_pretail, **the_tail;\n\
    \tPLCSPOS *the_lcsrev;\n\
    \tint **the_rank;\n\
    \tPCELL **the_p;\n\
    \tPLCSLIST *the_pLCSsCurNode; /* LCS??List??J?????gNode */\n\
    \tPLCSLIST the_LCSsPrevNode; /* LCS??List??ONode */\n\
    \tPLCSLIST the_pLCSsNextNode; /* LCS??List???Node */\n\n\
    \t/* ????????? */\n\
    \tthe_i = 0;\n\
    \tthe_j = 0;\n\
    \tthe_head = NULL;\n\
    \tthe_pretail = NULL;\n\
    \tthe_tail = NULL;\n\
    \tthe_lcsrev = NULL;\n\
    \tthe_rank = NULL;\n\
    \tthe_p = NULL;\n\
    \tthe_pLCSsCurNode = NULL;\n\
    \tthe_LCSsPrevNode = NULL;\n\
    \tthe_pLCSsNextNode = NULL;\n\n\
    \tint the_iMinLen = min(in_len1, in_len2);\n\
    \tint the_iComm_Head = 0;\n\
    \tint the_iComm_Tail = 0;\n\
    \tfor (the_i = 0;the_i < the_iMinLen;the_i++) {\n\
    \t\tif (strcmp(in_pStr1[the_i], in_pStr2[the_i]) == 0) {\n\
    \t\t\tthe_iComm_Head++;\n\
    \t\t} else {\n\
    \t\t\tbreak;\n\
    \t\t}\n\
    \t}\n\n\
    \tint the_iCurLine1 = in_len1 - 1;\n\
    \tint the_iCurLine2 = in_len2 - 1;\n\
    \twhile (in_pStr1[the_iCurLine1] != NULL &&\n\
    \t\t\tin_pStr2[the_iCurLine2] != NULL &&\n\
    \t\t\tthe_iCurLine1 > the_iComm_Head - 1 &&\n\
    \t\t\tthe_iCurLine2 > the_iComm_Head - 1) {\n\
    \t\tif (strcmp(in_pStr1[the_iCurLine1], in_pStr2[the_iCurLine2]) == 0) {\n\
    \t\t\tthe_iComm_Tail++;\n\
    \t\t} else {\n\
    \t\t\tbreak;\n\
    \t\t}\n\
    \t\tthe_iCurLine1--;\n\
    \t\tthe_iCurLine2--;\n\
    \t}\n\
    \tint the_iLen1 = in_len1 - the_iComm_Head - the_iComm_Tail;\n\
    \tint the_iLen2 = in_len2 - the_iComm_Head - the_iComm_Tail;\n\
    \tchar** the_pStr1 = in_pStr1 + the_iComm_Head;\n\
    \tchar** the_pStr2 = in_pStr2 + the_iComm_Head;\n\n\
    \t/* LCS??List??w?b?_Node???????? */\n\
    \tAnzMalloc(the_pLCSsCurNode, PLCSLIST *, sizeof(PLCSLIST *));\n\
    \tif (the_pLCSsCurNode != NULL) {\n\
    \t\tmemset(the_pLCSsCurNode, 0, sizeof(PLCSLIST *));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tAnzMalloc(*the_pLCSsCurNode, PLCSLIST, sizeof(ST_LCSLIST));\n\
    \tif (the_pLCSsCurNode != NULL) {\n\
    \t\tmemset(*the_pLCSsCurNode, 0, sizeof(ST_LCSLIST));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \t*io_LCSsHeadNode = *the_pLCSsCurNode;\n\n\
    \t/* ?O???[?o?????g_dummy??????? */\n\
    \tAnzMalloc(g_dummy, PCELL, sizeof(ST_CELL));\n\
    \tif (g_dummy != NULL) {\n\
    \t\tmemset(g_dummy, 0, sizeof(ST_CELL));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tg_dummy->i = 0;\n\
    \tg_dummy->j = 0;\n\n\
    \tAnzMalloc(the_p, PCELL**, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \tif (the_p != NULL) {\n\
    \t\tmemset(the_p, 0, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_p[the_i], PCELL*, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\tif (the_p[the_i] != NULL) {\n\
    \t\t\tmemset(the_p[the_i], 0, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tAnzMalloc(the_p[the_i][the_j], PCELL, sizeof(ST_CELL));\n\
    \t\t\tif (the_p[the_i][the_j] != NULL) {\n\
    \t\t\t\tmemset(the_p[the_i][the_j], 0, sizeof(ST_CELL));\n\
    \t\t\t} else {\n\
    \t\t\t\tthrow MemoryFailedExc();\n\
    \t\t\t}\n\
    \t\t\tthe_p[the_i][the_j]->i = the_i;\n\
    \t\t\tthe_p[the_i][the_j]->j = the_j;\n\
    \t\t\tthe_p[the_i][the_j]->next = DCELL;\n\
    \t\t}\n\
    \t}\n\
    \t//the_rank\n\
    \tAnzMalloc(the_rank, int **, sizeof(int*)*(the_iLen1 + 1));\n\
    \tif (the_rank != NULL) {\n\
    \t\tmemset(the_rank, 0, sizeof(int*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_rank[the_i], int *, sizeof(int)*(the_iLen2 + 1));\n\
    \t\tif (the_rank[the_i] != NULL) {\n\
    \t\t\tmemset(the_rank[the_i], 0, sizeof(int)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tthe_rank[the_i][the_j] = 0;\n\
    \t\t}\n\
    \t}\n\
    \t//the_head\n\
    \tAnzMalloc(the_head, PCELL **, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \tif (the_head != NULL) {\n\
    \t\tmemset(the_head, 0, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_head[the_i], PCELL *, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\tif (the_head[the_i] != NULL) {\n\
    \t\t\tmemset(the_head[the_i], 0, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tthe_head[the_i][the_j] = DCELL;\n\
    \t\t}\n\
    \t}\n\
    \t//the_pretail\n\
    \tAnzMalloc(the_pretail, PCELL **, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \tif (the_pretail != NULL) {\n\
    \t\tmemset(the_pretail, 0, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_pretail[the_i], PCELL *, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\tif (the_pretail[the_i] != NULL) {\n\
    \t\t\tmemset(the_pretail[the_i], 0, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tthe_pretail[the_i][the_j] = DCELL;\n\
    \t\t}\n\
    \t}\n\
    \t//the_tail\n\
    \tAnzMalloc(the_tail, PCELL **, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \tif (the_tail != NULL) {\n\
    \t\tmemset(the_tail, 0, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_tail[the_i], PCELL *, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\tif (the_tail[the_i] != NULL) {\n\
    \t\t\tmemset(the_tail[the_i], 0, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tthe_tail[the_i][the_j] = DCELL;\n\
    \t\t}\n\
    \t}\n\
    \t//compute gragh\n\
    \tfor (the_i = 1;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 1;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tif (strcmp(the_pStr1[the_i - 1], the_pStr2[the_j - 1]) == 0) {\n\
    \t\t\t\tthe_rank[the_i][the_j] = the_rank[the_i - 1][the_j - 1] + 1;\n\
    \t\t\t\tthe_tail[the_i][the_j] = the_p[the_i][the_j];\n\
    \t\t\t} else {\n\
    \t\t\t\tthe_rank[the_i][the_j] = MAX(the_rank[the_i - 1][the_j], the_rank[the_i][the_j - 1]);\n\
    \t\t\t\tif (the_rank[the_i][the_j] > 0) {\n\
    \t\t\t\t\tif (the_rank[the_i - 1][the_j] == the_rank[the_i][the_j]) {\n\
    \t\t\t\t\t\tthe_tail[the_i][the_j] = the_tail[the_i - 1][the_j];\n\
    \t\t\t\t\t}\n\
    \t\t\t\t\tif (the_rank[the_i][the_j - 1] == the_rank[the_i][the_j]) {\n\
    \t\t\t\t\t\tif (the_tail[the_i][the_j] == DCELL) {\n\
    \t\t\t\t\t\t\tthe_tail[the_i][the_j] = the_tail[the_i][the_j - 1];\n\
    \t\t\t\t\t\t} else {\n\
    \t\t\t\t\t\t\tif (the_tail[the_i][the_j]->i == the_tail[the_i][the_j - 1]->i) {\n\
    \t\t\t\t\t\t\t\tthe_pretail[the_i][the_j] = the_pretail[the_i][the_j - 1];\n\
    \t\t\t\t\t\t\t} else {\n\
    \t\t\t\t\t\t\t\tthe_pretail[the_i][the_j] = the_tail[the_i][the_j - 1];\n\
    \t\t\t\t\t\t\t}\n\
    \t\t\t\t\t\t\tif (the_tail[the_i][the_j]->j == the_pretail[the_i][the_j]->j) {\n\
    \t\t\t\t\t\t\t\tthe_tail[the_i][the_j] = the_pretail[the_i][the_j];\n\
    \t\t\t\t\t\t\t} else {\n\
    \t\t\t\t\t\t\t\tthe_pretail[the_i][the_j]->next = the_tail[the_i][the_j];\n\
    \t\t\t\t\t\t\t\tthe_head[the_i][the_j] = the_head[the_i][the_j - 1];\n\
    \t\t\t\t\t\t\t\tif (the_head[the_i][the_j] == DCELL) {\n\
    \t\t\t\t\t\t\t\t\tthe_head[the_i][the_j] = the_pretail[the_i][the_j];\n\
    \t\t\t\t\t\t\t\t}\n\
    \t\t\t\t\t\t\t}\n\
    \t\t\t\t\t\t}\n\
    \t\t\t\t\t}\n\
    \t\t\t\t}\n\
    \t\t\t}\n\
    \t\t} //end for the_j\n\
    \t} //end for the_i\n\n\
    \t//get LCSs and count\n\
    \t//lcsrev???????\n\
    \tAnzMalloc(the_lcsrev, PLCSPOS *, sizeof(PLCSPOS)*(the_rank[the_iLen1][the_iLen2]));\n\
    \tif (the_lcsrev != NULL) {\n\
    \t\tmemset(the_lcsrev, 0, sizeof(PLCSPOS)*(the_rank[the_iLen1][the_iLen2]));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_rank[the_iLen1][the_iLen2];the_i++) {\n\
    \t\tAnzMalloc(the_lcsrev[the_i], PLCSPOS, sizeof(ST_LCSCELL));\n\
    \t\tif (the_lcsrev[the_i] != NULL) {\n\
    \t\t\tmemset(the_lcsrev[the_i], 0, sizeof(ST_LCSCELL));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \t*out_LCS_Lenght = the_rank[the_iLen1][the_iLen2];\n\
    \tif (*out_LCS_Lenght != 0) { //?????v????????v??O???????LCS????????\n\
    \t\tGetEmbeddings(the_iComm_Head, the_iComm_Tail,\n\
    \t\t\t\t\t  the_iLen1, the_iLen2,\n\
    \t\t\t\t\t  the_lcsrev, 0,\n\
    \t\t\t\t\t  the_head, the_pretail, the_tail,\n\
    \t\t\t\t\t  the_iLen1, the_iLen2,\n\
    \t\t\t\t\t  the_pStr1,\n\
    \t\t\t\t\t  the_rank[the_iLen1][the_iLen2],\n\
    \t\t\t\t\t  &the_pLCSsCurNode,\n\
    \t\t\t\t\t  out_LCSsNum);\n\
    \t\t/* ?? ????Node???????? */\n\
    \t\t*the_pLCSsCurNode = *io_LCSsHeadNode;\n\
    \t\tthe_LCSsPrevNode = *io_LCSsHeadNode;\n\
    \t\tthe_pLCSsNextNode = *io_LCSsHeadNode;\n\
    \t\twhile (*the_pLCSsCurNode != NULL) {\n\
    \t\t\tthe_pLCSsNextNode = (*the_pLCSsCurNode)->next;\n\
    \t\t\tif (the_pLCSsNextNode == NULL) {\n\
    \t\t\t\tfree(*the_pLCSsCurNode);\n\
    \t\t\t\t*the_pLCSsCurNode = NULL;\n\
    \t\t\t\tif (the_LCSsPrevNode != NULL) {\n\
    \t\t\t\t\t(the_LCSsPrevNode)->next = NULL;\n\
    \t\t\t\t}\n\
    \t\t\t}\n\
    \t\t\tthe_LCSsPrevNode = *the_pLCSsCurNode;\n\
    \t\t\t*the_pLCSsCurNode = the_pLCSsNextNode;\n\
    \t\t}\n\n\
    \t\t// add common context\n\
    \t\t*the_pLCSsCurNode = *io_LCSsHeadNode;\n\
    \t\twhile (*the_pLCSsCurNode != NULL) {\n\
    \t\t\tfor (the_i = 0;the_i < the_iComm_Head;the_i++) {\n\
    \t\t\t\t((*the_pLCSsCurNode)->LCS)[the_i] = in_pStr1[the_i];\n\
    \t\t\t}\n\
    \t\t\tthe_i = the_iComm_Head + *out_LCS_Lenght;\n\
    \t\t\tfor (the_j = in_len1 - the_iComm_Tail;the_j < in_len1;the_j++) {\n\
    \t\t\t\t((*the_pLCSsCurNode)->LCS)[the_i] = in_pStr1[the_j];\n\
    \t\t\t\tthe_i++;\n\
    \t\t\t}\n\
    \t\t\t*the_pLCSsCurNode = (*the_pLCSsCurNode)->next;\n\
    \t\t}\n\
    \t\t*out_LCS_Lenght = *out_LCS_Lenght + the_iComm_Head + the_iComm_Tail;\n\
    \t} else if (the_iComm_Head + the_iComm_Tail > 0) { //?????v????????v??O???????LCS???????\n\
    \t\tchar ** the_LCS = NULL;\n\
    \t\tAnzMalloc(the_LCS, char**, sizeof(char *)*(the_iComm_Head + the_iComm_Tail + 1));\n\
    \t\tif (the_LCS != NULL) {\n\
    \t\t\tmemset(the_LCS, 0, sizeof(char *)*(the_iComm_Head + the_iComm_Tail + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tfor (the_i = 0;the_i < the_iComm_Head;the_i++) {\n\
    \t\t\tthe_LCS[the_i] = in_pStr1[the_i];\n\
    \t\t}\n\
    \t\tfor (the_j = in_len1 - the_iComm_Tail;the_j < in_len1;the_j++) {\n\
    \t\t\tthe_LCS[the_i] = in_pStr1[the_j];\n\
    \t\t\tthe_i++;\n\
    \t\t}\n\
    \t\t(*the_pLCSsCurNode)->LCS = the_LCS;\n\
    \t\t(*the_pLCSsCurNode)->next = NULL;\n\
    \t\t*out_LCS_Lenght = the_iComm_Head + the_iComm_Tail;\n\
    \t} else {\n\
    \t\tif (*the_pLCSsCurNode != NULL) {\n\
    \t\t\tfree(*the_pLCSsCurNode);\n\
    \t\t\t*the_pLCSsCurNode = NULL;\n\
    \t\t\t*io_LCSsHeadNode = NULL;\n\
    \t\t}\n\
    \t}\n\
    \t//Free memory\n\
    \tfor (the_i = 0;the_i < the_rank[the_iLen1][the_iLen2];the_i++) {\n\
    \t\tif (the_lcsrev[the_i] != NULL) {\n\
    \t\t\tfree(the_lcsrev[the_i]);\n\
    \t\t\tthe_lcsrev[the_i] = NULL;\n\
    \t\t}\n\
    \t}\n\n\
    \tif (the_lcsrev != NULL) {\n\
    \t\tfree(the_lcsrev);\n\
    \t\tthe_lcsrev = NULL;\n\
    \t}\n\
    \t//**the_head, **the_pretail, **the_tail;\n\
    \t//**the_rank;\n\
    \t//**the_p[the_i][the_j];\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tif (the_p[the_i][the_j] != NULL) {\n\
    \t\t\t\tfree(the_p[the_i][the_j]);\n\
    \t\t\t\tthe_p[the_i][the_j] = NULL;\n\
    \t\t\t}\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tif (*(the_head + the_i) != NULL) {\n\
    \t\t\tfree(*(the_head + the_i));\n\
    \t\t\t*(the_head + the_i) = NULL;\n\
    \t\t}\n\
    \t\tif (the_pretail[the_i] != NULL) {\n\
    \t\t\tfree(the_pretail[the_i]);\n\
    \t\t\tthe_pretail[the_i] = NULL;\n\
    \t\t}\n\
    \t\tif (the_tail[the_i] != NULL) {\n\
    \t\t\tfree(the_tail[the_i]);\n\
    \t\t\tthe_tail[the_i] = NULL;\n\
    \t\t}\n\
    \t\tif (the_rank[the_i] != NULL) {\n\
    \t\t\tfree(the_rank[the_i]);\n\
    \t\t\tthe_rank[the_i] = NULL;\n\
    \t\t}\n\
    \t\tif (the_p[the_i] != NULL) {\n\
    \t\t\tfree(the_p[the_i]);\n\
    \t\t\tthe_p[the_i] = NULL;\n\
    \t\t}\n\
    \t}\n\
    \tif (the_head != NULL) {\n\
    \t\tfree(the_head);\n\
    \t\tthe_head = NULL;\n\
    \t}\n\
    \tif (the_pretail != NULL) {\n\
    \t\tfree(the_pretail);\n\
    \t\tthe_pretail = NULL;\n\
    \t}\n\
    \tif (the_tail != NULL) {\n\
    \t\tfree(the_tail);\n\
    \t\tthe_tail = NULL;\n\
    \t}\n\
    \tif (the_rank != NULL) {\n\
    \t\tfree(the_rank);\n\
    \t\tthe_rank = NULL;\n\
    \t}\n\
    \tif (the_p != NULL) {\n\
    \t\tfree(the_p);\n\
    \t\tthe_p = NULL;\n\
    \t}\n\
    \tif (the_pLCSsCurNode != NULL) {\n\
    \t\tfree(the_pLCSsCurNode);\n\
    \t\tthe_pLCSsCurNode = NULL;\n\
    \t}\n\
    \tif (g_dummy != NULL) {\n\
    \t\tfree(g_dummy);\n\
    \t\tg_dummy = NULL;\n\
    \t}\n\
    \treturn 0;\n\
    }\n\n\
    ST_LCS_DAT * LCSAlgo::CreateLCS_DAT(MeasureFileObject* in_measureFileObj)\n\
    {\n\
    \tint the_iPairNo = 0;\t\t\t\t\t\t// ????y?A?????A????????y?A????r??????????\n\
    \tint the_iArrayNum = 0;\t\t\t\t\t\t// _ST_LCS_DAT???????y?A??\n\
    \tint the_iFuncPair = 0;\t\t\t\t\t\t// LCS??g????????\n\
    \tint the_iArray_Cur = 0;\t\t\t\t\t\t// ?J?????g?????z???????\n\
    \tint the_iBit_Cur = 0;\t\t\t\t\t\t// ?J?????g?????long?^????bit???u\n\
    \tint the_iArray_Next = 0;\t\t\t\t\t// ???????z???????\n\
    \tint the_iBit_Next = 0;\t\t\t\t\t\t// ???????long?^????bit???u\n\
    \tint the_iCurNo = 0;\t\t\t\t\t\t\t// ?J?????g?????z???????\n\
    \tint the_iNextNo = 0;\t\t\t\t\t\t// ???????????\n\
    \tint the_iLCSsNum = 0;\t\t\t\t\t\t// LCS???\n\
    \tint the_iLCS_Lenght = 0;\t\t\t\t\t// LCS??Lenght\n\
    \tPLCSLIST the_pLCSsHeadNode = NULL; /* LCS??List??w?b?_Node */\n\
    \tPLCSLIST the_pLCSsNextNode = NULL; /* ????n????LCS??List???????p??Node */\n\
    \tPLCSLIST the_pLCSsCurNode = NULL; /* LCS??List???????p?J?????gNode */\n\n\
    \tunsigned long the_iFuncNum = 0;\t\t\t\t//File????L?q??????????\n\n\
    \tST_LCS_DAT* pLcs_Dat_Head = NULL;\t\t\t//_ST_LCS_DAT??HeadNode\n\
    \tST_LCS_DAT* pLcs_Dat_Cur = NULL;\t\t\t//_ST_LCS_DAT??CurNode\n\
    \tST_LCS_DAT* pLcs_Dat_Pre = NULL;\t\t\t//_ST_LCS_DAT??PreNode\n\
    \tunsigned long *lPair = NULL;\n\
    \tunsigned long *pPair = NULL;\n\
    \tunsigned long lFir, lSec;\n\n\
    \tlFir = 1;\n\
    \tlSec = 1;\n\n\
    \t// ????v??FileInfo????????\n\
    \tif (in_measureFileObj == NULL) {\n\
    \t\treturn NULL;\n\
    \t}\n\
    \t// ????v??FunctionInfo????????\n\
    \tthe_iFuncNum = in_measureFileObj->GetCommonFileInfo()->GetFuncNum();\n\
    \tthe_iFuncPair = the_iFuncNum * (the_iFuncNum - 1) / 2;\n\
    \tthe_iArrayNum = the_iFuncNum / g_iUnitSize;\n\
    \tif (the_iFuncNum % g_iUnitSize != 0) {\n\
    \t\tthe_iArrayNum++;\n\
    \t}\n\n\
    \tin_measureFileObj->RewindFuncList();\n\
    \tMeasureFuncObject* the_pFuncCur = in_measureFileObj->GetCurrFuncObj();\n\
    \tMeasureFuncObject* the_pFuncNext = in_measureFileObj->GetCurrFuncObj();\n\n\
    \t/* ????????? */\n\
    \tthe_iLCSsNum = 0;\n\
    \tthe_iLCS_Lenght = 0;\n\
    \tthe_pLCSsNextNode = NULL;\n\
    \tthe_pLCSsHeadNode = NULL;\n\
    \tthe_pLCSsCurNode = NULL;\n\
    \twhile (in_measureFileObj->HasNextFunc()) {\n\
    \t\tthe_iNextNo = the_iCurNo + 1;\n\
    \t\tthe_iArray_Cur = the_iCurNo / g_iUnitSize;\n\
    \t\tthe_iBit_Cur = the_iCurNo % g_iUnitSize;\n\
    \t\t//\n\
    \t\tin_measureFileObj->MoveNextFunc();\n\
    \t\tthe_pFuncNext = in_measureFileObj->GetCurrFuncObj();\n\
    \t\tin_measureFileObj->MarkCurrFuncPos();\n\
    \t\twhile (the_pFuncNext != NULL) {\n\
    \t\t\t//*out_fileELOC = *out_fileELOC + the_pFuncNext->m_eloc;\n\
    \t\t\tthe_iArray_Next = the_iNextNo / g_iUnitSize;\n\
    \t\t\tthe_iBit_Next = the_iNextNo % g_iUnitSize;\n\n\
    \t\t\tthe_iLCSsNum = 0;\n\
    \t\t\tthe_iLCS_Lenght = 0;\n\
    \t\t\tthe_pLCSsHeadNode = NULL;\n\
    \t\t\t/* ????n????All Distinct LCS???????? */\n\
    \t\t\tGetAllDistinctLCSs(the_pFuncCur->GetCommFuncInfo()->GetExecContent(),\n\
    \t\t\t\t\t\t\t   the_pFuncNext->GetCommFuncInfo()->GetExecContent(),\n\
    \t\t\t\t\t\t\t   the_pFuncCur->GetCommFuncInfo()->GetExecLOC(),\n\
    \t\t\t\t\t\t\t   the_pFuncNext->GetCommFuncInfo()->GetExecLOC(),\n\
    \t\t\t\t\t\t\t   &the_pLCSsHeadNode,\n\
    \t\t\t\t\t\t\t   &the_iLCS_Lenght,\n\
    \t\t\t\t\t\t\t   &the_iLCSsNum);\n\
    \t\t\tthe_pLCSsCurNode = the_pLCSsHeadNode;\n\
    \t\t\t//while (the_pLCSsCurNode!=NULL)\n\
    \t\t\tif (the_pLCSsCurNode != NULL && the_iLCS_Lenght != 0) {\n\
    \t\t\t\t//\t\t\t\tif(the_iLCS_Lenght == 0){\n\
    \t\t\t\t//\t\t\t\t\tthe_pLCSsCurNode = the_pLCSsCurNode->next;\n\
    \t\t\t\t//\t\t\t\t\tcontinue;\n\
    \t\t\t\t//\t\t\t\t}\n\
    \t\t\t\tAnzMalloc(pLcs_Dat_Cur, ST_LCS_DAT*, sizeof(ST_LCS_DAT));\n\
    \t\t\t\tif (pLcs_Dat_Cur != NULL) {\n\
    \t\t\t\t\tmemset(pLcs_Dat_Cur, 0, sizeof(ST_LCS_DAT));\n\
    \t\t\t\t} else {\n\
    \t\t\t\t\tthrow MemoryFailedExc();\n\
    \t\t\t\t}\n\
    \t\t\t\tif (pLcs_Dat_Head == NULL) {\n\
    \t\t\t\t\tpLcs_Dat_Head = pLcs_Dat_Cur;\n\
    \t\t\t\t\tpLcs_Dat_Pre = pLcs_Dat_Cur;\n\
    \t\t\t\t} else {\n\
    \t\t\t\t\tpLcs_Dat_Pre->next = pLcs_Dat_Cur;\n\
    \t\t\t\t}\n\n\
    \t\t\t\tpLcs_Dat_Cur->LCS = the_pLCSsCurNode->LCS;\n\
    \t\t\t\tpLcs_Dat_Cur->length = the_iLCS_Lenght;\n\
    \t\t\t\tAnzMalloc(lPair, unsigned long*, sizeof(unsigned long)*(the_iArrayNum + 1));\n\
    \t\t\t\tif (lPair != NULL) {\n\
    \t\t\t\t\tmemset(lPair, 0, sizeof(unsigned long)*(the_iArrayNum + 1));\n\
    \t\t\t\t} else {\n\
    \t\t\t\t\tthrow MemoryFailedExc();\n\
    \t\t\t\t}\n\
    \t\t\t\tpPair = lPair;\n\
    \t\t\t\tlFir = 1, lSec = 1;\n\
    \t\t\t\tlFir = lFir << the_iBit_Cur;\n\
    \t\t\t\tlSec = lSec << the_iBit_Next;\n\
    \t\t\t\tif (the_iArray_Cur == the_iArray_Next) {\n\
    \t\t\t\t\tpPair[the_iArray_Cur] = lFir | lSec;\n\
    \t\t\t\t} else {\n\
    \t\t\t\t\tpPair[the_iArray_Cur] = lFir;\n\
    \t\t\t\t\tpPair[the_iArray_Next] = lSec;\n\
    \t\t\t\t}\n\
    \t\t\t\tpPair[the_iArrayNum] = NULL;\n\
    \t\t\t\tpLcs_Dat_Cur->funcPair = pPair;\n\
    \t\t\t\tpLcs_Dat_Cur->next = NULL;\n\
    \t\t\t\tpLcs_Dat_Cur->pairNo = the_iPairNo;\n\
    \t\t\t\tpLcs_Dat_Cur->bDelete = false;\n\
    \t\t\t\tpLcs_Dat_Pre = pLcs_Dat_Cur;\n\
    \t\t\t\tthe_pLCSsCurNode = the_pLCSsCurNode->next;\n\
    \t\t\t} //End of while (the_pLCSsCurNode!=NULL)\n\
    \t\t\tthe_pLCSsCurNode = the_pLCSsHeadNode;\n\
    \t\t\twhile (the_pLCSsCurNode != NULL) {\n\
    \t\t\t\tthe_pLCSsNextNode = the_pLCSsCurNode->next;\n\
    \t\t\t\tif (the_pLCSsCurNode != the_pLCSsHeadNode && the_pLCSsCurNode->LCS != NULL) {\n\
    \t\t\t\t\tfree(the_pLCSsCurNode->LCS);\n\
    \t\t\t\t}\n\
    \t\t\t\tfree(the_pLCSsCurNode);\n\
    \t\t\t\tthe_pLCSsCurNode = the_pLCSsNextNode;\n\
    \t\t\t}\n\
    \t\t\tthe_iNextNo++;\n\
    \t\t\tthe_iPairNo++;\n\
    \t\t\tin_measureFileObj->MoveNextFunc();\n\
    \t\t\tthe_pFuncNext = in_measureFileObj->GetCurrFuncObj();\n\n\
    \t\t} //End of while (the_pFuncNext != NULL)\n\
    \t\tthe_iCurNo++;\n\
    \t\t//\n\
    \t\tin_measureFileObj->RestoreMarkFuncPos();\n\
    \t\tthe_pFuncCur = in_measureFileObj->GetCurrFuncObj();\n\
    \t} //End of while (in_measureFileObj->HasNextFunc())\n\
    \treturn pLcs_Dat_Head;\n\
    }\n\n\
    LCSAlgo::LCSAlgo()\n\
    {}\n\n\
    LCSAlgo::~LCSAlgo()\n\
    {}\n\n\
    /**\n\
    *  ?????:GetLCSLength\n\
    *  ?T?v:?????LCS???v?Z\n\
    *  @param\n\
    *          in_pStr1      ?v?????1??s???e\n\
    *          in_pStr2      ?v?????2??s???e\n\
    *          in_len1       ?v?????1??s??\n\
    *          in_len2       ?v?????2??s??\n\
    *  @return\n\
    *          ANZ_SUCCESS          ?????I??    \n\
    *          ANZERR_MEMORY_FAILED ???????m????s  \n\
    *  @author luo-jirong\n\
    *  @modified by fan-jia 2005/02/06\n\
    */\n\
    unsigned int LCSAlgo::GetLCSLength(char** in_pStr1,\n\
    \t\t\t\t\t\t\t\t   char** in_pStr2,\n\
    \t\t\t\t\t\t\t\t   const int in_len1,\n\
    \t\t\t\t\t\t\t\t   const int in_len2)\n\
    {\n\
    \tregister int the_i = 0;     /* Loop?p */\n\
    \tregister int the_j = 0;     /* Loop?p */\n\
    \tunsigned int the_max = 0;   /* ?J?????g????l */\n\
    \tunsigned int *the_ps1 = NULL;  /* ???l???i?[?????z?? */\n\
    \tunsigned int *the_ps2 = NULL;   /* ???l???i?[?????z?? */\n\
    \tunsigned int *the_tmp = NULL;        /* Swap?p???Point */\n\
    \tunsigned int the_commonNum = 0;      /* ????s?? */\n\
    \tint the_iMaxLen = 0;        /* Item?????\xC2\x90? */\n\n\
    \tif (in_pStr1 == NULL || in_pStr2 == NULL) {\n\
    \t\treturn -1;\n\
    \t}\n\n\
    \tint the_iMinLen = min(in_len1, in_len2);\n\
    \tint the_iComm_Head = 0;\n\
    \tint the_iComm_Tail = 0;\n\
    \tfor (the_i = 0;the_i < the_iMinLen;the_i++) {\n\
    \t\tif (strcmp(in_pStr1[the_i], in_pStr2[the_i]) == 0) {\n\
    \t\t\tthe_iComm_Head++;\n\
    \t\t} else {\n\
    \t\t\tbreak;\n\
    \t\t}\n\
    \t}\n\n\
    \tint the_iCurLine1 = in_len1 - 1;\n\
    \tint the_iCurLine2 = in_len2 - 1;\n\
    \twhile (in_pStr1[the_iCurLine1] != NULL &&\n\
    \t\t\tin_pStr2[the_iCurLine2] != NULL &&\n\
    \t\t\tthe_iCurLine1 > the_iComm_Head - 1 &&\n\
    \t\t\tthe_iCurLine2 > the_iComm_Head - 1) {\n\
    \t\tif (strcmp(in_pStr1[the_iCurLine1], in_pStr2[the_iCurLine2]) == 0) {\n\
    \t\t\tthe_iComm_Tail++;\n\
    \t\t} else {\n\
    \t\t\tbreak;\n\
    \t\t}\n\
    \t\tthe_iCurLine1--;\n\
    \t\tthe_iCurLine2--;\n\
    \t}\n\n\
    \tint the_iLen1 = in_len1 - the_iComm_Head - the_iComm_Tail;\n\
    \tint the_iLen2 = in_len2 - the_iComm_Head - the_iComm_Tail;\n\
    \tchar** the_pStr1 = in_pStr1 + the_iComm_Head;\n\
    \tchar** the_pStr2 = in_pStr2 + the_iComm_Head;\n\
    \tthe_iMaxLen = the_iLen1 > the_iLen2 ? the_iLen1 : the_iLen2;\n\n\
    \tAnzMalloc(the_ps1, unsigned int*, sizeof(unsigned int) * (the_iMaxLen + 1));\n\
    \tAnzMalloc(the_ps2, unsigned int*, sizeof(unsigned int) * (the_iMaxLen + 1));\n\n\
    \tif (the_ps1 == NULL || the_ps2 == NULL) {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\n\
    \tmemset(the_ps1, 0, sizeof(int) * (the_iMaxLen + 1));\n\
    \tmemset(the_ps2, 0, sizeof(int) * (the_iMaxLen + 1));\n\n\
    \tfor (the_i = 0; the_i < the_iLen2; the_i++) {\n\
    \t\tfor (the_j = 0; the_j < the_iLen1; the_j++) {\n\
    \t\t\tif (the_pStr1[the_j] == NULL || the_pStr2[the_i] == NULL) {\n\
    \t\t\t\tthe_max = 0;\n\
    \t\t\t\tTrace(\"GetLCSLength:?????v?f??Point??A?h???X??NULL??????B\");\n\
    \t\t\t} else {\n\
    \t\t\t\tif ( strcmp( the_pStr1[the_j], the_pStr2[the_i]) == 0 )\n\
    \t\t\t\t\tthe_max = the_ps1[the_j] + 1;\n\
    \t\t\t\telse\n\
    \t\t\t\t\tthe_max = 0;\n\
    \t\t\t}\n\
    \t\t\tif (the_max < the_ps1[the_j + 1])\n\
    \t\t\t\tthe_max = the_ps1[the_j + 1];\n\
    \t\t\tif (the_max < the_ps2[the_j])\n\
    \t\t\t\tthe_max = the_ps2[the_j];\n\
    \t\t\tthe_ps2[the_j + 1] = the_max;\n\
    \t\t}\n\
    \t\tthe_tmp = the_ps1;\n\
    \t\tthe_ps1 = the_ps2;\n\
    \t\tthe_ps2 = the_tmp;\n\
    \t}\n\n\
    \tthe_commonNum = the_ps1[ the_iLen1] + the_iComm_Head + the_iComm_Tail;\n\n\
    \tif (the_ps1 != NULL) {\n\
    \t\tfree(the_ps1);\n\
    \t\tthe_ps1 = NULL;\n\
    \t}\n\
    \tif (the_ps2 != NULL) {\n\
    \t\tfree(the_ps2);\n\
    \t\tthe_ps2 = NULL;\n\
    \t}\n\
    \treturn the_commonNum;\n\
    }\n\n\
    void LCSAlgo::RemoveLCS_DAT(ST_LCS_DAT *in_pLCS_DAT)\n\
    {\n\
    \tST_LCS_DAT* the_pCurLCS_DAT = in_pLCS_DAT;\n\
    \tST_LCS_DAT* the_pNextLCS_DAT = in_pLCS_DAT;\n\n\
    \twhile (the_pCurLCS_DAT) {\n\
    \t\tthe_pNextLCS_DAT = the_pCurLCS_DAT->next;\n\
    \t\t//free the_pCurLCS_DAT\n\
    \t\tif (the_pCurLCS_DAT->funcPair != NULL) {\n\
    \t\t\tfree(the_pCurLCS_DAT->funcPair);\n\
    \t\t\tthe_pCurLCS_DAT->funcPair = NULL;\n\
    \t\t}\n\
    \t\tif (the_pCurLCS_DAT->LCS != NULL) {\n\
    \t\t\tfree(the_pCurLCS_DAT->LCS);\n\
    \t\t\tthe_pCurLCS_DAT->LCS = NULL;\n\
    \t\t}\n\
    \t\tif (the_pCurLCS_DAT != NULL) {\n\
    \t\t\tfree(the_pCurLCS_DAT);\n\
    \t\t\tthe_pCurLCS_DAT = NULL;\n\
    \t\t}\n\
    \t\tthe_pCurLCS_DAT = the_pNextLCS_DAT;\n\
    \t}\n\
    }\n\n"
  updated_at: 2011-05-13 10:35:45
  analyzed_source_path_id: "180"
  id: "10199"
  subtask_id: "8"
source_codes_1361: 
  created_at: 2010-07-05 17:19:42
  error_line: "23"
  body: |
    #include "C_LanguageProduct.h"

  updated_at: 2011-05-13 10:35:05
  analyzed_source_path_id: "144"
  id: "10067"
  subtask_id: "10"
source_codes_915: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "        free(the_pCmdOption);\r\n        the_pCmdOption = NULL;\r\n    }\r\n    /* ?v???????`?F?b?N???? */\r\n    the_iRet = CheckMeasureItem(the_pMeasureItem,the_iMeasureType);\r\n    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9621"
  subtask_id: "9"
source_codes_493: 
  created_at: 2010-07-05 17:11:42
  error_line: "210"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9199"
  subtask_id: "1"
source_codes_361: 
  created_at: 2010-07-05 17:09:22
  error_line: "625"
  body: "        char the_szFullPath[MAX_PATH];\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9067"
  subtask_id: "5"
source_codes_1494: 
  created_at: 2010-07-05 17:20:39
  error_line: 
  body: |+
    /*
    File:
       Preprocessor.cpp
    Copyright:
       Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
       AnalyzeMe
    Abstract:
       ?O????
    Author:
       tong-huixin
    Date:
       2005/02/08
    REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 2.0.0.0$
    */
    
  updated_at: 2011-05-13 10:35:43
  analyzed_source_path_id: "175"
  id: "10200"
  subtask_id: "8"
source_codes_1362: 
  created_at: 2010-07-05 17:19:42
  error_line: "24"
  body: |
    #include "Asm_LanguageProduct.h"

  updated_at: 2011-05-13 10:35:05
  analyzed_source_path_id: "144"
  id: "10068"
  subtask_id: "10"
source_codes_1230: 
  created_at: 2010-07-05 17:17:13
  error_line: 
  body: |+
    
    /// <summary>
    ///Total?s?A???s?s?A?????s?A?R?????g?s??|?C???g????
    /// </summary>
    /// <remarks>
    ///	Total?s?A???s?s?A?????s?A?R?????g?s??|?C???g????
    /// </remarks>
    /// <param name="io_fileInfo">?v?????File</param>
    /// <returns>
    ///?@
    /// </returns>
    /// <exception cref="MemoryFailedExc">
    /// Memory Failed
    /// </exception>
    int LanguageProduct::MakeLOCInfo(FileInfo* io_fileInfo)
    {
    	/* ????? */
    	int the_iTotaLOCNum = 0;    /* the_pTotaLOC??z???? */
    	int the_iExecLOCNum = 0;    /* the_pExecLOC??z???? */
    	int the_iComtLOCNum = 0;    /* the_pComtLOC??z???? */
    	int the_iBlankLOCNum = 0;   /* the_pBlankLOC??z????*/
    	char** the_pTotaLOC = NULL; /* File??LOC(???s)???P */
    	char** the_pExecLOC = NULL; /* LOC(???s)???P */
    	char** the_pComtLOC = NULL; /* LOC(?????s */
    	char** the_pBlankLOC = NULL; /* LOC(Comment ?s) ???P */
    	ST_LineAttr* the_pTempLineAttr = NULL; /* ?J?????g?t?@?C???w?b?_?[?m?[?h?????|?C???g */
    
    	/* ???[?J??????????? */
    
    	Trace("MakeLOCInfo() in\n");
    	/*?v?????t?@?C????s???????????????*/
    	if (io_fileInfo == NULL) {
    		return 0;
    	}
    	the_pTempLineAttr = io_fileInfo->GetLineAttr();
    
    	try {
    		AnzMalloc(the_pTotaLOC, char**, sizeof(char*)*(io_fileInfo->GetTotalLOC() + 1));
    		if (the_pTotaLOC == NULL) {
    			throw MemoryFailedExc();
    		}
    		memset(the_pTotaLOC, '\0', sizeof(char*)*(io_fileInfo->GetTotalLOC() + 1));
    		AnzMalloc(the_pExecLOC, char**, sizeof(char*)*(io_fileInfo->GetExecLOC() + 1));
    		if (the_pExecLOC == NULL) {
    			throw MemoryFailedExc();
    		}
    		memset(the_pExecLOC, '\0', sizeof(char*)*(io_fileInfo->GetExecLOC() + 1));
    		AnzMalloc(the_pComtLOC, char**, sizeof(char*)*(io_fileInfo->GetCommentLOC() + 1));
    		if (the_pComtLOC == NULL) {
    			throw MemoryFailedExc();
    		}
    		memset(the_pComtLOC, '\0', sizeof(char*)*(io_fileInfo->GetCommentLOC() + 1));
    		AnzMalloc(the_pBlankLOC, char**, sizeof(char*)*(io_fileInfo->GetBlankLOC() + 1));
    		if (the_pBlankLOC == NULL) {
    			throw MemoryFailedExc();
    		}
    		memset(the_pBlankLOC, '\0', sizeof(char*)*(io_fileInfo->GetBlankLOC() + 1));
    		while (the_pTempLineAttr != NULL) {
    
    			/*?R?????g?s??|?C???g????*/
    			if (the_pTempLineAttr->m_attr1.IFL == 1) {
    				*(the_pComtLOC + the_iComtLOCNum) = the_pTempLineAttr->m_prow;
    				the_iComtLOCNum++;
    			}
    
    			/*?????s??|?C???g????*/
    			else if (the_pTempLineAttr->m_attr.BL == 1) {
    				*(the_pBlankLOC + the_iBlankLOCNum) = the_pTempLineAttr->m_prow;
    				the_iBlankLOCNum++;
    			}
    
    			/*?R?????g?s??|?C???g????*/
    			else if (the_pTempLineAttr->m_attr.CL == 1) {
    				*(the_pComtLOC + the_iComtLOCNum) = the_pTempLineAttr->m_prow;
    				the_iComtLOCNum++;
    			}
    
    			/*???s?s??|?C???g????*/
    			else {
    				*(the_pExecLOC + the_iExecLOCNum) = the_pTempLineAttr->m_prow;
    				the_iExecLOCNum++;
    			}
    
    			/*Total?s??|?C???g????*/
    			*(the_pTotaLOC + the_iTotaLOCNum) = the_pTempLineAttr->m_prow;
    			the_iTotaLOCNum++;
    			the_pTempLineAttr = the_pTempLineAttr->next;
    		}
    
    		/*LOC(???s)??????????*/
    		io_fileInfo->SetTotalContent(the_pTotaLOC);
    
    		/*LOC(???s)???????*/
    		io_fileInfo->SetExecContent(the_pExecLOC);
    
    		/*LOC(Comment?s)???????*/
    		io_fileInfo->SetCommentContent(the_pComtLOC);
    
    		/*LOC(?????s)???????*/
    		io_fileInfo->SetBlankContent(the_pBlankLOC);
    	}
    	/*????????????????s????????B*/
    	catch (MemoryFailedExc &e) {
    		throw e;
    	}
    	Trace("MakeLOCInfo() out\n");
    	return 0;
    }
    
  updated_at: 2011-05-13 10:35:31
  analyzed_source_path_id: "156"
  id: "9936"
  subtask_id: "2"
source_codes_916: 
  created_at: 2010-07-05 17:14:27
  error_line: "229"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9622"
  subtask_id: "9"
source_codes_494: 
  created_at: 2010-07-05 17:11:42
  error_line: 
  body: "    }\r\n    /* ?v?????????????? */\r\n    the_iRet = GetMeasureType(the_pOption,&the_iMeasureType);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9200"
  subtask_id: "1"
source_codes_230: 
  created_at: 2010-07-05 17:09:19
  error_line: "360"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8936"
  subtask_id: "5"
source_codes_362: 
  created_at: 2010-07-05 17:09:22
  error_line: "626"
  body: "        char the_szCurPath[MAX_PATH];\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9068"
  subtask_id: "5"
source_codes_1495: 
  created_at: 2010-07-05 17:20:39
  error_line: "22"
  body: |
    #include "Preprocessor.h"

  updated_at: 2011-05-13 10:35:43
  analyzed_source_path_id: "175"
  id: "10201"
  subtask_id: "8"
source_codes_1363: 
  created_at: 2010-07-05 17:19:42
  error_line: 
  body: |
    
    /// <summary>
    ///?v??????????????N???X??instance??????????
    /// </summary>
    /// <remarks>
    ///?v??????????Factory???????C?v??????????Product?????CFile??g???q???????C
    ///????v??????????????N???X??instance???????????B
    /// </remarks>
    /// <param name="pExtName">File??g???q</param>
    /// <returns>
    ///?@?v??????????????N???X??instance
    /// </returns>
    /// <exception cref="???O??">
    ///
    /// </exception>
    LanguageProduct* LanguageFactory::CreateProduct(const char* in_pExtName)
    {
    	Trace("LanguageFactory::CreateProduct() in\n");

  updated_at: 2011-05-13 10:35:05
  analyzed_source_path_id: "144"
  id: "10069"
  subtask_id: "10"
source_codes_1231: 
  created_at: 2010-07-05 17:17:13
  error_line: "0"
  body: ""
  updated_at: 2011-05-13 10:35:31
  analyzed_source_path_id: "155"
  id: "9937"
  subtask_id: "2"
source_codes_917: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "    }\r\n   \r\n    /* ????????t?@?C????? */\r\n    if(the_iMeasureType == ANZ_TREND_MEASURE)    {\r\n        int the_iType = -1;\r\n        int the_pPos = -1;\r\n        isDirOrFile(*the_pMeasureItem,&the_iType);\r\n        if(the_iType == ANZ_FILE) {\r\n            g_bTrendFile = true;\r\n            /* the_pMeasureItme??Path?????????? */\r\n            GetPathPos(*the_pMeasureItem,&the_pPos);\r\n            g_szNVPath[the_pPos] = '\\0';\r\n            if(the_pPos > 0) \n\
    \t\t{\r\n                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;\r\n            }\r\n\
    \r\n            GetPathPos(*(the_pMeasureItem + 1),&the_pPos);\r\n            g_szOVPath[the_pPos] = '\\0';\r\n            if(the_pPos > 0) {\r\n                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;\r\n            }\r\n            /* g_szNVPath?Ag_szOVPath??????p?X???X???? */\r\n            the_iRet = ResetTrendPath(g_szNVPath);\r\n            the_iRet = ResetTrendPath(g_szOVPath);\r\n            if(the_iRet != ANZ_SUCCESS) {\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9623"
  subtask_id: "9"
source_codes_495: 
  created_at: 2010-07-05 17:11:42
  error_line: "214"
  body: "    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9201"
  subtask_id: "1"
source_codes_231: 
  created_at: 2010-07-05 17:09:19
  error_line: "361"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8937"
  subtask_id: "5"
source_codes_363: 
  created_at: 2010-07-05 17:09:22
  error_line: "627"
  body: "        int the_iRet = ANZ_SUCCESS;\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9069"
  subtask_id: "5"
source_codes_1496: 
  created_at: 2010-07-05 17:20:39
  error_line: 
  body: |+
    
    Preprocessor::Preprocessor()
    {
    	/* ?J?????g?t?@?C????o?[?W?????????????? */
    	verState = COMMVERSION;
    }
    
    Preprocessor::~Preprocessor()
    {}
    
    /**
    *  DeleteSeriesBlank
    *  ?A??????????????????
    *  @author tong-huixin
    */
    void Preprocessor::DeleteSeriesBlank(ST_LineAttr* in_pLineAttr)
    {}
    
    
    //?O?????C?h???????N???X???????\?b?h???????????K?v??????B
    int Preprocessor::Process()
    {
    	return 0;
    }
    
    int Preprocessor::SetMeasureFileObject(MeasureFileObject* in_pMeasureFileObject)
    {
    	m_pMeasureFileObject = in_pMeasureFileObject;
    	return 0;
    }
    
    int Preprocessor::WriteToFile()
    {
    
    	return 0;
    }
    
    
    /* ?G???[??????????? */
    void Preprocessor::SetErrorInfo(char* in_pErrorType, char* in_pErrorFile, int in_iLineNum)
    {
    	Trace("SetErrorInfo() in\n");
    	if (in_pErrorType == NULL || in_pErrorFile == NULL) {
    		return ;
    	}
    	AnzMalloc(m_errorInfo, ST_ErrorInfo*, sizeof(ST_ErrorInfo));
    	if (m_errorInfo != NULL) {
    		memset(m_errorInfo, 0, sizeof(ST_ErrorInfo));
    		AnzMalloc(m_errorInfo->ErrorType, char*, strlen(in_pErrorType) + 1);
    		if (m_errorInfo->ErrorType != NULL) {
    			memset(m_errorInfo->ErrorType, '\0', strlen(in_pErrorType) + 1);
    			strcpy(m_errorInfo->ErrorType, in_pErrorType);
    		}
    		AnzMalloc(m_errorInfo->ErrorFile, char*, strlen(in_pErrorFile) + 1);
    		if (m_errorInfo->ErrorType != NULL) {
    			memset(m_errorInfo->ErrorFile, '\0', strlen(in_pErrorFile) + 1);
    			strcpy(m_errorInfo->ErrorFile, in_pErrorFile);
    		}
    		m_errorInfo->LineNum = in_iLineNum;
    		AnalyzeMe::GetInstance()->GetMeasObjErrInstance()->Add(m_errorInfo);
    	}
    	Trace("SetErrorInfo() out\n");
    }
    
  updated_at: 2011-05-13 10:35:43
  analyzed_source_path_id: "175"
  id: "10202"
  subtask_id: "8"
source_codes_1364: 
  created_at: 2010-07-05 17:19:42
  error_line: "43"
  body: "\tassert(in_pExtName != NULL);\r\n"
  updated_at: 2011-05-13 10:35:05
  analyzed_source_path_id: "144"
  id: "10070"
  subtask_id: "10"
source_codes_1232: 
  created_at: 2010-07-05 17:17:13
  error_line: "1"
  body: |
    /*

  updated_at: 2011-05-13 10:35:31
  analyzed_source_path_id: "155"
  id: "9938"
  subtask_id: "2"
source_codes_1100: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"File?????(2)\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9806"
  subtask_id: "7"
source_codes_918: 
  created_at: 2010-07-05 17:14:27
  error_line: "256"
  body: "                goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9624"
  subtask_id: "9"
source_codes_496: 
  created_at: 2010-07-05 17:11:42
  error_line: "215"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9202"
  subtask_id: "1"
source_codes_100: 
  created_at: 2010-07-05 17:09:13
  error_line: "184"
  body: "    strcpy(the_pCmdOption->m_filePattern,\"**/*.[CcHh]\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8806"
  subtask_id: "5"
source_codes_232: 
  created_at: 2010-07-05 17:09:19
  error_line: "362"
  body: "            strcat(the_szCurMetrics,\"File?????(2)\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8938"
  subtask_id: "5"
source_codes_364: 
  created_at: 2010-07-05 17:09:22
  error_line: 
  body: |
    #ifdef __GNUC__
            /* ?J?????gDir??????Dir??????? */

  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9070"
  subtask_id: "5"
source_codes_1497: 
  created_at: 2010-07-05 17:20:40
  error_line: 
  body: |+
    /*
    File:
       LanguageProduct.cpp
    Copyright:
       Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
       AnalyzeMe
    Abstract:
       ?????v???_?N?g
    Author:
       luo-jirong
    Date:
       2005/02/08
    REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 2.0.0.0$
    */
    
  updated_at: 2011-05-13 10:35:44
  analyzed_source_path_id: "176"
  id: "10203"
  subtask_id: "8"
source_codes_1365: 
  created_at: 2010-07-05 17:19:42
  error_line: 
  body: "\tif (in_pExtName == NULL) {\r\n\
    \t\treturn NULL;\r\n\
    \t}\r\n\
    \r\n\
    \tLanguageProduct * the_pLangProd = NULL;\r\n\
    \tif (strcmp(in_pExtName, \"c\") == 0 ||\r\n\
    \t\t\tstrcmp(in_pExtName, \"C\") == 0 ||\r\n\
    \t\t\tstrcmp(in_pExtName, \"h\") == 0 ||\r\n\
    \t\t\tstrcmp(in_pExtName, \"H\") == 0) {\r\n\
    \t\tthe_pLangProd = C_LanguageProduct::GetInstance();\r\n\
    #ifdef ANALYZEME_CPP_SUPPORT\r\n\
    \t} else if (strcmp(in_pExtName, \"cpp\") == 0 || // C++???????????(K.Maruya) \r\n\
    \t\t\t\tstrcmp(in_pExtName, \"CPP\") == 0 || \r\n\
    \t\t\t\tstrcmp(in_pExtName, \"cxx\") == 0 ||\r\n\
    \t\t\t\tstrcmp(in_pExtName, \"CXX\") == 0) {\r\n\
    \t\tthe_pLangProd = C_LanguageProduct::GetInstance();\r\n\
    #endif\r\n\
    \t} else if (strcmp(in_pExtName, \"s\") == 0 || strcmp(in_pExtName, \"S\") == 0 ) {\r\n\
    \t\tthe_pLangProd = Asm_LanguageProduct::GetInstance();\r\n\
    \t} else if (strcmp(in_pExtName, \"asm\") == 0 || strcmp(in_pExtName, \"ASM\") == 0 ) {\r\n\
    \t\tthe_pLangProd = Asm_LanguageProduct::GetInstance();\r\n\
    \t} else {\r\n\
    \t\tthe_pLangProd = Asm_LanguageProduct::GetInstance();\r\n\
    \t}\r\n\
    \r\n\
    \tTrace(\"LanguageFactory::CreateProduct() out\\n\");\r\n\
    \treturn the_pLangProd;\r\n\
    }\r\n\
    \r\n\
    LanguageFactory::LanguageFactory()\r\n\
    {\r\n\
    \tTrace(\"LanguageFactory::LanguageFactory() in\\n\");\r\n\
    \tTrace(\"LanguageFactory::LanguageFactory() out\\n\");\r\n\
    }\r\n\
    \r\n\
    LanguageFactory::~LanguageFactory()\r\n\
    {\r\n\
    \tTrace(\"LanguageFactory::LanguageFactory() in\\n\");\r\n\
    \tTrace(\"LanguageFactory::LanguageFactory() out\\n\");\r\n\
    }\r\n\
    \r\n\
    \r\n\n"
  updated_at: 2011-05-13 10:35:05
  analyzed_source_path_id: "144"
  id: "10071"
  subtask_id: "10"
source_codes_1233: 
  created_at: 2010-07-05 17:17:13
  error_line: 
  body: |+
    File:
       Preprocessor.cpp
    Copyright:
       Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
       AnalyzeMe
    Abstract:
       ?O????
    Author:
       tong-huixin
    Date:
       2005/02/08
    REVISION HISTORY:
    
    */
    
  updated_at: 2011-05-13 10:35:31
  analyzed_source_path_id: "155"
  id: "9939"
  subtask_id: "2"
source_codes_1101: 
  created_at: 2010-07-05 17:15:31
  error_line: "364"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9807"
  subtask_id: "7"
source_codes_919: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "            }\r\n        }\r\n    }\r\n    /* ?v?????File??List???????? */\r\n    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);\r\n    if(the_iRet == ANZ_NO_MEASURE_FILES){\r\n        printf(\"%s\\n\",MSG_NO_FILES);\r\n    }\r\n    if(the_iRet == ANZ_ERR_MEMORY_FAILED){\r\n        printf(\"%s\\n\",MSG_MOMORY_FAILED);\r\n    }\r\n    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9625"
  subtask_id: "9"
source_codes_101: 
  created_at: 2010-07-05 17:09:13
  error_line: "185"
  body: "    strcpy(the_pCmdOption->m_symbolFile,\"\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8807"
  subtask_id: "5"
source_codes_233: 
  created_at: 2010-07-05 17:09:20
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8939"
  subtask_id: "5"
source_codes_365: 
  created_at: 2010-07-05 17:09:22
  error_line: "630"
  body: "        if(io_pPath[0] != '/') {\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9071"
  subtask_id: "5"
source_codes_497: 
  created_at: 2010-07-05 17:11:42
  error_line: 
  body: "    }\r\n    /* ?R?}???h???C??????????Option??????????????? */\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9203"
  subtask_id: "1"
source_codes_1498: 
  created_at: 2010-07-05 17:20:40
  error_line: "22"
  body: |
    #include "LanguageProduct.h"

  updated_at: 2011-05-13 10:35:44
  analyzed_source_path_id: "176"
  id: "10204"
  subtask_id: "8"
source_codes_1366: 
  created_at: 2010-07-05 17:19:42
  error_line: 
  body: |+
    /*
    File:
       Preprocessor.cpp
    Copyright:
       Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
       AnalyzeMe
    Abstract:
       ?O????
    Author:
       tong-huixin
    Date:
       2005/02/08
    REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 2.0.0.0$
    */
    
  updated_at: 2011-05-13 10:35:03
  analyzed_source_path_id: "142"
  id: "10072"
  subtask_id: "10"
source_codes_1234: 
  created_at: 2010-07-05 17:17:13
  error_line: "18"
  body: |
    /*

  updated_at: 2011-05-13 10:35:31
  analyzed_source_path_id: "155"
  id: "9940"
  subtask_id: "2"
source_codes_1102: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "            strcat(the_szCurMetrics,\"File?????(2)\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9808"
  subtask_id: "7"
source_codes_102: 
  created_at: 2010-07-05 17:09:13
  error_line: "186"
  body: "    strcpy(the_pCmdOption->m_optionFile,\"\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8808"
  subtask_id: "5"
source_codes_234: 
  created_at: 2010-07-05 17:09:20
  error_line: "364"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8940"
  subtask_id: "5"
source_codes_366: 
  created_at: 2010-07-05 17:09:22
  error_line: "631"
  body: "            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9072"
  subtask_id: "5"
source_codes_498: 
  created_at: 2010-07-05 17:11:42
  error_line: "218"
  body: "    if(the_pCmdOption != NULL){\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9204"
  subtask_id: "1"
source_codes_920: 
  created_at: 2010-07-05 17:14:27
  error_line: "269"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9626"
  subtask_id: "9"
source_codes_103: 
  created_at: 2010-07-05 17:09:13
  error_line: 
  body: "    the_pCmdOption->m_fileLOC = ON;\r\n    the_pCmdOption->m_redundancy = OFF;\r\n    the_pCmdOption->m_funcNum = OFF;\r\n    the_pCmdOption->m_eloc = OFF;\r\n    the_pCmdOption->m_mccabe = OFF;\r\n    the_pCmdOption->m_similar = OFF;\r\n    the_pCmdOption->m_trend = OFF;\r\n    the_pCmdOption->m_funcTrend = OFF;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8809"
  subtask_id: "5"
source_codes_235: 
  created_at: 2010-07-05 17:09:20
  error_line: "365"
  body: "            strcat(the_szCurMetrics,\"File?????(2)\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8941"
  subtask_id: "5"
source_codes_367: 
  created_at: 2010-07-05 17:09:22
  error_line: 
  body: "                the_iRet = ANZ_ERROR;\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9073"
  subtask_id: "5"
source_codes_499: 
  created_at: 2010-07-05 17:11:42
  error_line: 
  body: "        free(the_pCmdOption);\r\n        the_pCmdOption = NULL;\r\n    }\r\n    /* ?v???????`?F?b?N???? */\r\n    the_iRet = CheckMeasureItem(the_pMeasureItem,the_iMeasureType);\r\n"
  updated_at: 2011-05-13 10:35:29
  analyzed_source_path_id: "151"
  id: "9205"
  subtask_id: "1"
source_codes_1499: 
  created_at: 2010-07-05 17:20:40
  error_line: 
  body: |
    
    /// <summary>
    ///Total?s?A???s?s?A?????s?A?R?????g?s??|?C???g????
    /// </summary>
    /// <remarks>
    ///	Total?s?A???s?s?A?????s?A?R?????g?s??|?C???g????
    /// </remarks>
    /// <param name="io_fileInfo">?v?????File</param>
    /// <returns>
    ///?@
    /// </returns>
    /// <exception cref="MemoryFailedExc">
    /// Memory Failed
    /// </exception>
    int LanguageProduct::MakeLOCInfo(FileInfo* io_fileInfo)
    {
    	/* ????? */
    	int the_iTotaLOCNum = 0;    /* the_pTotaLOC??z???? */
    	int the_iExecLOCNum = 0;    /* the_pExecLOC??z???? */
    	int the_iComtLOCNum = 0;    /* the_pComtLOC??z???? */
    	int the_iBlankLOCNum = 0;   /* the_pBlankLOC??z????*/

  updated_at: 2011-05-13 10:35:44
  analyzed_source_path_id: "176"
  id: "10205"
  subtask_id: "8"
source_codes_1367: 
  created_at: 2010-07-05 17:19:42
  error_line: "22"
  body: |
    #include "Preprocessor.h"

  updated_at: 2011-05-13 10:35:03
  analyzed_source_path_id: "142"
  id: "10073"
  subtask_id: "10"
source_codes_1235: 
  created_at: 2010-07-05 17:17:13
  error_line: 
  body: "    $AnalyzeMe 2.0.0.0$\n\
    */\n\n"
  updated_at: 2011-05-13 10:35:31
  analyzed_source_path_id: "155"
  id: "9941"
  subtask_id: "2"
source_codes_1103: 
  created_at: 2010-07-05 17:15:31
  error_line: "367"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9809"
  subtask_id: "7"
source_codes_921: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "    }\r\n    /* ?o?R???????????? */\r\n    /* FileLOC?v??Option???w?????? */\r\n    if(the_pOption->m_fileLOC == ON){\r\n        strcat(the_szCurMetrics,\"FileLOC\");\r\n    }\r\n    /* File???x?v??Option???w?????? */\r\n    if(the_pOption->m_redundancy == ON){\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9627"
  subtask_id: "9"
source_codes_104: 
  created_at: 2010-07-05 17:09:13
  error_line: "195"
  body: "    the_pCmdOption->m_symThresh = 70;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8810"
  subtask_id: "5"
source_codes_236: 
  created_at: 2010-07-05 17:09:20
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8942"
  subtask_id: "5"
source_codes_368: 
  created_at: 2010-07-05 17:09:22
  error_line: "633"
  body: "                goto EXIT;\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9074"
  subtask_id: "5"
source_codes_1368: 
  created_at: 2010-07-05 17:19:42
  error_line: 
  body: |+
    
    Preprocessor::Preprocessor()
    {
    	/* ?J?????g?t?@?C????o?[?W?????????????? */
    	verState = COMMVERSION;
    }
    
    Preprocessor::~Preprocessor()
    {}
    
    /**
    *  DeleteSeriesBlank
    *  ?A??????????????????
    *  @author tong-huixin
    */
    void Preprocessor::DeleteSeriesBlank(ST_LineAttr* in_pLineAttr)
    {}
    
    
    //?O?????C?h???????N???X???????\?b?h???????????K?v??????B
    int Preprocessor::Process()
    {
    	return 0;
    }
    
    int Preprocessor::SetMeasureFileObject(MeasureFileObject* in_pMeasureFileObject)
    {
    	m_pMeasureFileObject = in_pMeasureFileObject;
    	return 0;
    }
    
    int Preprocessor::WriteToFile()
    {
    
    	return 0;
    }
    
    
    /* ?G???[??????????? */
    void Preprocessor::SetErrorInfo(char* in_pErrorType, char* in_pErrorFile, int in_iLineNum)
    {
    	Trace("SetErrorInfo() in\n");
    	if (in_pErrorType == NULL || in_pErrorFile == NULL) {
    		return ;
    	}
    	AnzMalloc(m_errorInfo, ST_ErrorInfo*, sizeof(ST_ErrorInfo));
    	if (m_errorInfo != NULL) {
    		memset(m_errorInfo, 0, sizeof(ST_ErrorInfo));
    		AnzMalloc(m_errorInfo->ErrorType, char*, strlen(in_pErrorType) + 1);
    		if (m_errorInfo->ErrorType != NULL) {
    			memset(m_errorInfo->ErrorType, '\0', strlen(in_pErrorType) + 1);
    			strcpy(m_errorInfo->ErrorType, in_pErrorType);
    		}
    		AnzMalloc(m_errorInfo->ErrorFile, char*, strlen(in_pErrorFile) + 1);
    		if (m_errorInfo->ErrorType != NULL) {
    			memset(m_errorInfo->ErrorFile, '\0', strlen(in_pErrorFile) + 1);
    			strcpy(m_errorInfo->ErrorFile, in_pErrorFile);
    		}
    		m_errorInfo->LineNum = in_iLineNum;
    		AnalyzeMe::GetInstance()->GetMeasObjErrInstance()->Add(m_errorInfo);
    	}
    	Trace("SetErrorInfo() out\n");
    }
    
  updated_at: 2011-05-13 10:35:03
  analyzed_source_path_id: "142"
  id: "10074"
  subtask_id: "10"
source_codes_1236: 
  created_at: 2010-07-05 17:17:13
  error_line: "22"
  body: |
    #include "Preprocessor.h"

  updated_at: 2011-05-13 10:35:31
  analyzed_source_path_id: "155"
  id: "9942"
  subtask_id: "2"
source_codes_1104: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"File??X??(2)\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9810"
  subtask_id: "7"
source_codes_922: 
  created_at: 2010-07-05 17:14:27
  error_line: "278"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9628"
  subtask_id: "9"
source_codes_105: 
  created_at: 2010-07-05 17:09:13
  error_line: "196"
  body: "    the_pCmdOption->m_minThresh = 2;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8811"
  subtask_id: "5"
source_codes_237: 
  created_at: 2010-07-05 17:09:20
  error_line: "367"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8943"
  subtask_id: "5"
source_codes_369: 
  created_at: 2010-07-05 17:09:22
  error_line: 
  body: "            }\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9075"
  subtask_id: "5"
source_codes_1369: 
  created_at: 2010-07-05 17:19:42
  error_line: 
  body: |+
    /*
    File:
       LCSAlgo.cpp
    Copyright:
       Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
       AnalyzeMe
    Abstract:
       LCS?Z?o?A???S???Y??
    Author:
       zhang-gh
    Date:
       2005/02/08
    REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 2.0.0.0$
    */
    
  updated_at: 2011-05-13 10:35:05
  analyzed_source_path_id: "147"
  id: "10075"
  subtask_id: "10"
source_codes_1237: 
  created_at: 2010-07-05 17:17:13
  error_line: 
  body: |+
    
    Preprocessor::Preprocessor()
    {
    	/* ?J?????g?t?@?C????o?[?W?????????????? */
    	verState = COMMVERSION;
    }
    
    Preprocessor::~Preprocessor()
    {}
    
    /**
    *  DeleteSeriesBlank
    *  ?A??????????????????
    *  @author tong-huixin
    */
    void Preprocessor::DeleteSeriesBlank(ST_LineAttr* in_pLineAttr)
    {}
    
    
    //?O?????C?h???????N???X???????\?b?h???????????K?v??????B
    int Preprocessor::Process()
    {
    	return 0;
    }
    
    int Preprocessor::SetMeasureFileObject(MeasureFileObject* in_pMeasureFileObject)
    {
    	m_pMeasureFileObject = in_pMeasureFileObject;
    	return 0;
    }
    
    int Preprocessor::WriteToFile()
    {
    
    	return 0;
    }
    
    
    /* ?G???[??????????? */
    void Preprocessor::SetErrorInfo(char* in_pErrorType, char* in_pErrorFile, int in_iLineNum)
    {
    	Trace("SetErrorInfo() in\n");
    	if (in_pErrorType == NULL || in_pErrorFile == NULL) {
    		return ;
    	}
    	AnzMalloc(m_errorInfo, ST_ErrorInfo*, sizeof(ST_ErrorInfo));
    	if (m_errorInfo != NULL) {
    		memset(m_errorInfo, 0, sizeof(ST_ErrorInfo));
    		AnzMalloc(m_errorInfo->ErrorType, char*, strlen(in_pErrorType) + 1);
    		if (m_errorInfo->ErrorType != NULL) {
    			memset(m_errorInfo->ErrorType, '\0', strlen(in_pErrorType) + 1);
    			strcpy(m_errorInfo->ErrorType, in_pErrorType);
    		}
    		AnzMalloc(m_errorInfo->ErrorFile, char*, strlen(in_pErrorFile) + 1);
    		if (m_errorInfo->ErrorType != NULL) {
    			memset(m_errorInfo->ErrorFile, '\0', strlen(in_pErrorFile) + 1);
    			strcpy(m_errorInfo->ErrorFile, in_pErrorFile);
    		}
    		m_errorInfo->LineNum = in_iLineNum;
    		AnalyzeMe::GetInstance()->GetMeasObjErrInstance()->Add(m_errorInfo);
    	}
    	Trace("SetErrorInfo() out\n");
    }
    
  updated_at: 2011-05-13 10:35:31
  analyzed_source_path_id: "155"
  id: "9943"
  subtask_id: "2"
source_codes_1105: 
  created_at: 2010-07-05 17:15:31
  error_line: "371"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9811"
  subtask_id: "7"
source_codes_923: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"File???x\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9629"
  subtask_id: "9"
source_codes_106: 
  created_at: 2010-07-05 17:09:13
  error_line: 
  body: |
    
    /* ?R?}???h???C??????????? */
    the_iRet = AnalyzeCmdLine(argc,argv,the_pCmdOption,the_pMeasureItem);

  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8812"
  subtask_id: "5"
source_codes_238: 
  created_at: 2010-07-05 17:09:20
  error_line: "368"
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8944"
  subtask_id: "5"
source_codes_1238: 
  created_at: 2010-07-05 17:18:39
  error_line: 
  body: |+
    /*
    File:
       Preprocessor.cpp
    Copyright:
       Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
       AnalyzeMe
    Abstract:
       ?O????
    Author:
       tong-huixin
    Date:
       2005/02/08
    REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 2.0.0.0$
    */
    
  updated_at: 2011-05-13 10:34:58
  analyzed_source_path_id: "132"
  id: "9944"
  subtask_id: "12"
source_codes_1106: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "            strcat(the_szCurMetrics,\"File??X??(2)\");\r\n        }\r\n\
    \r\n    }\r\n    /* ?v???J?n,?o?R???????o????? */\r\n    if(the_pOption->m_verbos == ON ){\r\n        /* ?o?R???????o????? */\r\n        printf(\"%s%s\\n\",the_szCurMetrics,MSG_METRIC_START);\r\n    }\r\n\
    \r\n    /* ?v???O?A?K?v??v??????File???J?? */\r\n    the_iRet = OpenResultFile(the_pOption);\r\n    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9812"
  subtask_id: "7"
source_codes_924: 
  created_at: 2010-07-05 17:14:27
  error_line: "282"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9630"
  subtask_id: "9"
source_codes_107: 
  created_at: 2010-07-05 17:09:13
  error_line: "200"
  body: "    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8813"
  subtask_id: "5"
source_codes_239: 
  created_at: 2010-07-05 17:09:20
  error_line: "369"
  body: "            strcat(the_szCurMetrics,\"File??X??(2)\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8945"
  subtask_id: "5"
source_codes_1370: 
  created_at: 2010-07-05 17:19:42
  error_line: "22"
  body: |
    #include "LCSAlgo.h"

  updated_at: 2011-05-13 10:35:05
  analyzed_source_path_id: "147"
  id: "10076"
  subtask_id: "10"
source_codes_1239: 
  created_at: 2010-07-05 17:18:39
  error_line: "22"
  body: |
    #include "Preprocessor.h"

  updated_at: 2011-05-13 10:34:58
  analyzed_source_path_id: "132"
  id: "9945"
  subtask_id: "12"
source_codes_1107: 
  created_at: 2010-07-05 17:15:31
  error_line: "385"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9813"
  subtask_id: "7"
source_codes_925: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "            strcat(the_szCurMetrics,\"File???x\");\r\n        }\r\n    }\r\n    /* ??????v??Option???w?????? */\r\n    if(the_pOption->m_funcNum){\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9631"
  subtask_id: "9"
source_codes_370: 
  created_at: 2010-07-05 17:09:22
  error_line: "635"
  body: "            if(strcmp(io_pPath,\"\") != 0) {\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9076"
  subtask_id: "5"
source_codes_108: 
  created_at: 2010-07-05 17:09:13
  error_line: "201"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8814"
  subtask_id: "5"
source_codes_1371: 
  created_at: 2010-07-05 17:19:42
  error_line: 
  body: |
    #include "common.h"

  updated_at: 2011-05-13 10:35:05
  analyzed_source_path_id: "147"
  id: "10077"
  subtask_id: "10"
source_codes_1108: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "    }\r\n\
    \r\n    /* ?v???O?A?K?v??v?????????????O???[?o?????????????m?? */\r\n    the_iRet = AllocResultMemory(the_pOption);\r\n    if(the_iRet != ANZ_SUCCESS){\r\n        FreeResultMemory(the_pOption);\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9814"
  subtask_id: "7"
source_codes_371: 
  created_at: 2010-07-05 17:09:23
  error_line: "636"
  body: "                sprintf(the_szFullPath,\"%s/%s\",the_szCurPath,io_pPath);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9077"
  subtask_id: "5"
source_codes_109: 
  created_at: 2010-07-05 17:09:13
  error_line: 
  body: "    }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8815"
  subtask_id: "5"
source_codes_1372: 
  created_at: 2010-07-05 17:19:42
  error_line: "24"
  body: |
    #include "AnalyzeMe.h"

  updated_at: 2011-05-13 10:35:05
  analyzed_source_path_id: "147"
  id: "10078"
  subtask_id: "10"
source_codes_1240: 
  created_at: 2010-07-05 17:18:39
  error_line: 
  body: |+
    
    Preprocessor::Preprocessor()
    {
    	/* ?J?????g?t?@?C????o?[?W?????????????? */
    	verState = COMMVERSION;
    }
    
    Preprocessor::~Preprocessor()
    {}
    
    /**
    *  DeleteSeriesBlank
    *  ?A??????????????????
    *  @author tong-huixin
    */
    void Preprocessor::DeleteSeriesBlank(ST_LineAttr* in_pLineAttr)
    {}
    
    
    //?O?????C?h???????N???X???????\?b?h???????????K?v??????B
    int Preprocessor::Process()
    {
    	return 0;
    }
    
    int Preprocessor::SetMeasureFileObject(MeasureFileObject* in_pMeasureFileObject)
    {
    	m_pMeasureFileObject = in_pMeasureFileObject;
    	return 0;
    }
    
    int Preprocessor::WriteToFile()
    {
    
    	return 0;
    }
    
    
    /* ?G???[??????????? */
    void Preprocessor::SetErrorInfo(char* in_pErrorType, char* in_pErrorFile, int in_iLineNum)
    {
    	Trace("SetErrorInfo() in\n");
    	if (in_pErrorType == NULL || in_pErrorFile == NULL) {
    		return ;
    	}
    	AnzMalloc(m_errorInfo, ST_ErrorInfo*, sizeof(ST_ErrorInfo));
    	if (m_errorInfo != NULL) {
    		memset(m_errorInfo, 0, sizeof(ST_ErrorInfo));
    		AnzMalloc(m_errorInfo->ErrorType, char*, strlen(in_pErrorType) + 1);
    		if (m_errorInfo->ErrorType != NULL) {
    			memset(m_errorInfo->ErrorType, '\0', strlen(in_pErrorType) + 1);
    			strcpy(m_errorInfo->ErrorType, in_pErrorType);
    		}
    		AnzMalloc(m_errorInfo->ErrorFile, char*, strlen(in_pErrorFile) + 1);
    		if (m_errorInfo->ErrorType != NULL) {
    			memset(m_errorInfo->ErrorFile, '\0', strlen(in_pErrorFile) + 1);
    			strcpy(m_errorInfo->ErrorFile, in_pErrorFile);
    		}
    		m_errorInfo->LineNum = in_iLineNum;
    		AnalyzeMe::GetInstance()->GetMeasObjErrInstance()->Add(m_errorInfo);
    	}
    	Trace("SetErrorInfo() out\n");
    }
    
  updated_at: 2011-05-13 10:34:58
  analyzed_source_path_id: "132"
  id: "9946"
  subtask_id: "12"
source_codes_1109: 
  created_at: 2010-07-05 17:15:31
  error_line: "392"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9815"
  subtask_id: "7"
source_codes_926: 
  created_at: 2010-07-05 17:14:27
  error_line: "288"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9632"
  subtask_id: "9"
source_codes_240: 
  created_at: 2010-07-05 17:09:20
  error_line: 
  body: "        }\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8946"
  subtask_id: "5"
source_codes_372: 
  created_at: 2010-07-05 17:09:23
  error_line: 
  body: "            }\r\n        }\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9078"
  subtask_id: "5"
source_codes_1373: 
  created_at: 2010-07-05 17:19:42
  error_line: 
  body: |
    #include "FileInfo.h"
    #include "FunctionInfo.h"
    #include "MeasureFuncObject.h"
    #include "MemoryManagement.h"

  updated_at: 2011-05-13 10:35:05
  analyzed_source_path_id: "147"
  id: "10079"
  subtask_id: "10"
source_codes_1241: 
  created_at: 2010-07-05 17:18:39
  error_line: 
  body: |
    /*
    File:
        LanguageFactory.cpp
    Copyright:
        Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
        AnalyzeMe
    Abstract:
        ????Factory
    Author:
        luo-jirong
    Date:
        2005/02/08
    REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 2.0.0.0$
    */

  updated_at: 2011-05-13 10:34:59
  analyzed_source_path_id: "134"
  id: "9947"
  subtask_id: "12"
source_codes_927: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"?????\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9633"
  subtask_id: "9"
source_codes_241: 
  created_at: 2010-07-05 17:09:20
  error_line: "371"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8947"
  subtask_id: "5"
source_codes_373: 
  created_at: 2010-07-05 17:09:23
  error_line: "639"
  body: "        else {\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9079"
  subtask_id: "5"
source_codes_1374: 
  created_at: 2010-07-05 17:19:42
  error_line: "29"
  body: |
    #include "AnzException.h"

  updated_at: 2011-05-13 10:35:05
  analyzed_source_path_id: "147"
  id: "10080"
  subtask_id: "10"
source_codes_1242: 
  created_at: 2010-07-05 17:18:39
  error_line: "22"
  body: |
    #include "LanguageFactory.h"

  updated_at: 2011-05-13 10:34:59
  analyzed_source_path_id: "134"
  id: "9948"
  subtask_id: "12"
source_codes_1110: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "    }\r\n\
    \r\n    /* ?v?????? */\r\n    /* ????v?? */\r\n    if(the_iMeasureType == ANZ_COMMON_MEASURE){\r\n        /* ????v??File??????}?N?????????? */\r\n        the_iRet = GetProcMacro(the_pAnzInfo,ANZ_COMMON_MEASURE);\r\n        if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9816"
  subtask_id: "7"
source_codes_928: 
  created_at: 2010-07-05 17:14:27
  error_line: "292"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9634"
  subtask_id: "9"
source_codes_110: 
  created_at: 2010-07-05 17:09:13
  error_line: "203"
  body: "    if(g_bOutTime) {\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8816"
  subtask_id: "5"
source_codes_242: 
  created_at: 2010-07-05 17:09:20
  error_line: "372"
  body: "            strcat(the_szCurMetrics,\"File??X??(2)\");\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8948"
  subtask_id: "5"
source_codes_374: 
  created_at: 2010-07-05 17:09:23
  error_line: "640"
  body: "            goto EXIT;\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9080"
  subtask_id: "5"
source_codes_1375: 
  created_at: 2010-07-05 17:19:42
  error_line: 
  body: "\n\
    PCELL g_dummy;\n\
    #define DCELL g_dummy\n\
    unsigned int g_iUnitSize = sizeof(unsigned long)*8;\n\
    /**\n\
    *  GetEmbeddings\n\
    *  All Embeddings????????\n\
    *  @param  in_comm_Head,in_comm_Tail ?????v????????v???\n\
    *  @param  in_i,in_j\n\
    *  @param  in_lcsrev,in_curl\n\
    *  @param  in_head,in_pretail,in_tail\n\
    *  @param  in_len1,in_len2?@????n???????\n\
    *  @param  in_pStr1         ????n?????\n\
    *  @param  in_LCS_Lenght    LCS??Lenght\n\
    *  @param  io_LCSsCurNode   LCS??List??J?????gNode\n\
    *  @param  out_LCSsNum      LCS???\n\
    *  @return  \n\
    *           ANZ_SUCCESS:?????I??                                      \n\
    *           ANZ_ERROR  :????I??\n\
    *  @author zhang-gh\n\
    */\n\
    int LCSAlgo::GetEmbeddings(int in_comm_Head, int in_comm_Tail,\n\
    \t\t\t\t\t\t   int in_i, int in_j,\n\
    \t\t\t\t\t\t   PLCSPOS *in_lcsrev, int in_curl,\n\
    \t\t\t\t\t\t   PCELL **in_head, PCELL **in_pretail, PCELL **in_tail,\n\
    \t\t\t\t\t\t   int in_len1, int in_len2,    /* ????n??????? */\n\
    \t\t\t\t\t\t   char **in_pStr1,             /* ????n????? */\n\
    \t\t\t\t\t\t   int in_LCS_Lenght,           /* LCS??Lenght */\n\
    \t\t\t\t\t\t   PLCSLIST **io_LCSsCurNode,   /* LCS??List??J?????gNode */\n\
    \t\t\t\t\t\t   int *out_LCSsNum)         /* LCS??? */\n\
    {\n\
    \tchar **the_LCS;          /* ????LCS */\n\
    \tPLCSLIST the_LCSsTmpNode; /* LCS??List???Node */\n\
    \tPLCSLIST the_LCSsPreTailNode; /* LCS??List????Node????ONode */\n\
    \tPLCSPOS *the_lcsp;\n\
    \tPCELL the_adjp;\n\n\
    \t/* ????????? */\n\
    \tthe_LCS = NULL;\n\
    \tthe_LCSsTmpNode = NULL;\n\
    \tthe_LCSsPreTailNode = NULL;\n\
    \tthe_lcsp = NULL;\n\
    \tthe_adjp = NULL;\n\n\
    \t/* ?????J?n */\n\
    \tthe_adjp = in_head[in_i][in_j];\n\
    \tif (the_adjp == DCELL)\n\
    \t{\n\
    \t\tthe_adjp = in_tail[in_i][in_j];\n\
    \t}\n\
    \tif (the_adjp == DCELL)\n\
    \t{\n\
    \t\t/* ????LCS??????????m????? */\n\
    \t\tAnzMalloc(the_LCS, char**, sizeof(char *)*(in_LCS_Lenght + in_comm_Head + in_comm_Tail + 1));\n\
    \t\tif (the_LCS != NULL) {\n\
    \t\t\tmemset(the_LCS, 0, sizeof(char *)*(in_LCS_Lenght + in_comm_Head + in_comm_Tail + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tfor (the_lcsp = in_lcsrev + in_curl - 1; the_lcsp >= in_lcsrev; the_lcsp--) {\n\
    \t\t\t*(the_LCS + in_comm_Head + (in_LCS_Lenght - (the_lcsp - in_lcsrev) - 1)) = (*the_lcsp)->lcschar;\n\
    #if 0/* DEBUG?p */\n\n\
    \t\t\tprintf(\"%s^{%d}_{%d}\", (*the_lcsp)->lcschar, (*the_lcsp)->Apos, (*the_lcsp)->Bpos);\n\
    #endif\n\n\
    \t\t}\n\
    \t\t(**io_LCSsCurNode)->LCS = the_LCS;\n\
    #if 0/* DEBUG?p */\n\n\
    \t\tprintf(\"\\n\");\n\
    #endif\n\
    \t\t/* LCS??List?????Node????????? */\n\
    \t\tAnzMalloc(the_LCSsTmpNode, PLCSLIST, sizeof(ST_LCSLIST));\n\
    \t\tif (the_LCSsTmpNode != NULL) {\n\
    \t\t\tmemset(the_LCSsTmpNode, 0, sizeof(ST_LCSLIST));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\t(**io_LCSsCurNode)->next = the_LCSsTmpNode;\n\
    \t\t(**io_LCSsCurNode) = (**io_LCSsCurNode)->next;\n\
    \t\t/* LCS?????Count */\n\
    \t\t(*out_LCSsNum)++;\n\
    \t} else\n\
    \t{\n\
    \t\twhile (the_adjp != DCELL) {\n\
    \t\t\tin_lcsrev[in_curl]->lcschar = in_pStr1[the_adjp->i - 1];\n\
    \t\t\tin_lcsrev[in_curl]->Apos = the_adjp->i;\n\
    \t\t\tin_lcsrev[in_curl]->Bpos = the_adjp->j;\n\
    \t\t\tGetEmbeddings(in_comm_Head, in_comm_Tail,\n\
    \t\t\t\t\t\t  the_adjp->i - 1, the_adjp->j - 1,\n\
    \t\t\t\t\t\t  in_lcsrev, in_curl + 1,\n\
    \t\t\t\t\t\t  in_head, in_pretail, in_tail,\n\
    \t\t\t\t\t\t  in_len1, in_len2,\n\
    \t\t\t\t\t\t  in_pStr1,\n\
    \t\t\t\t\t\t  in_LCS_Lenght,\n\
    \t\t\t\t\t\t  io_LCSsCurNode,\n\
    \t\t\t\t\t\t  out_LCSsNum);\n\
    \t\t\tif (the_adjp == in_tail[in_i][in_j])\n\
    \t\t\t\tbreak;\n\
    \t\t\tif (the_adjp == in_pretail[in_i][in_j]) {\n\
    \t\t\t\tthe_adjp = in_tail[in_i][in_j];\n\
    \t\t\t} else {\n\
    \t\t\t\tthe_adjp = the_adjp->next;\n\
    \t\t\t}\n\
    \t\t}\n\
    \t}\n\
    \tif (in_i == in_len1 && in_j == in_len2)\n\
    \t{\n\
    #if 0/* DEBUG?p */\n\
    \t\t//printf(\"%d\\n\",the_count);\n\
    \t\t/* ????n????LCS??????p???? */\n\
    \t\t//*out_LCSsNum = the_count;\n\
    #endif\n\n\
    \t}\n\
    \treturn 0;\n\
    }\n\n\
    /**\n\
    *  GetAllDistinctLCSs\n\
    *  ????n????All Distinct LCS????????\n\
    *  @param  in_pStr1,in_pStr2 ????n??\n\
    *  @param  in_len1,in_len2?@ ????n???????\n\
    *  @param  io_LCSsHeadNode   LCS??List??w?b?_Node\n\
    *  @param  out_LCS_Lenght    LCS??Lenght\n\
    *  @param  out_LCSsNum       LCS???\n\
    *  @return  \n\
    *           ANZ_SUCCESS:?????I??                                      \n\
    *           ANZ_ERROR  :????I??\n\
    *  @author zhang-gh\n\
    */\n\
    int LCSAlgo::GetAllDistinctLCSs(char **in_pStr1, char **in_pStr2,        /* ????n?? */\n\
    \t\t\t\t\t\t\t\tconst int in_len1, const int in_len2,    /* ????n??????? */\n\
    \t\t\t\t\t\t\t\tPLCSLIST *io_LCSsHeadNode,    /* LCS??List??w?b?_Node */\n\
    \t\t\t\t\t\t\t\tint *out_LCS_Lenght,          /* LCS??Lenght */\n\
    \t\t\t\t\t\t\t\tint *out_LCSsNum)          /* LCS??? */\n\
    {\n\
    \tint the_i, the_j;\n\
    \tPCELL **the_head, **the_pretail, **the_tail;\n\
    \tPLCSPOS *the_lcsrev;\n\
    \tint **the_rank;\n\
    \tPCELL **the_p;\n\
    \tPLCSLIST *the_pLCSsCurNode; /* LCS??List??J?????gNode */\n\
    \tPLCSLIST the_LCSsPrevNode; /* LCS??List??ONode */\n\
    \tPLCSLIST the_pLCSsNextNode; /* LCS??List???Node */\n\n\
    \t/* ????????? */\n\
    \tthe_i = 0;\n\
    \tthe_j = 0;\n\
    \tthe_head = NULL;\n\
    \tthe_pretail = NULL;\n\
    \tthe_tail = NULL;\n\
    \tthe_lcsrev = NULL;\n\
    \tthe_rank = NULL;\n\
    \tthe_p = NULL;\n\
    \tthe_pLCSsCurNode = NULL;\n\
    \tthe_LCSsPrevNode = NULL;\n\
    \tthe_pLCSsNextNode = NULL;\n\n\
    \tint the_iMinLen = min(in_len1, in_len2);\n\
    \tint the_iComm_Head = 0;\n\
    \tint the_iComm_Tail = 0;\n\
    \tfor (the_i = 0;the_i < the_iMinLen;the_i++) {\n\
    \t\tif (strcmp(in_pStr1[the_i], in_pStr2[the_i]) == 0) {\n\
    \t\t\tthe_iComm_Head++;\n\
    \t\t} else {\n\
    \t\t\tbreak;\n\
    \t\t}\n\
    \t}\n\n\
    \tint the_iCurLine1 = in_len1 - 1;\n\
    \tint the_iCurLine2 = in_len2 - 1;\n\
    \twhile (in_pStr1[the_iCurLine1] != NULL &&\n\
    \t\t\tin_pStr2[the_iCurLine2] != NULL &&\n\
    \t\t\tthe_iCurLine1 > the_iComm_Head - 1 &&\n\
    \t\t\tthe_iCurLine2 > the_iComm_Head - 1) {\n\
    \t\tif (strcmp(in_pStr1[the_iCurLine1], in_pStr2[the_iCurLine2]) == 0) {\n\
    \t\t\tthe_iComm_Tail++;\n\
    \t\t} else {\n\
    \t\t\tbreak;\n\
    \t\t}\n\
    \t\tthe_iCurLine1--;\n\
    \t\tthe_iCurLine2--;\n\
    \t}\n\
    \tint the_iLen1 = in_len1 - the_iComm_Head - the_iComm_Tail;\n\
    \tint the_iLen2 = in_len2 - the_iComm_Head - the_iComm_Tail;\n\
    \tchar** the_pStr1 = in_pStr1 + the_iComm_Head;\n\
    \tchar** the_pStr2 = in_pStr2 + the_iComm_Head;\n\n\
    \t/* LCS??List??w?b?_Node???????? */\n\
    \tAnzMalloc(the_pLCSsCurNode, PLCSLIST *, sizeof(PLCSLIST *));\n\
    \tif (the_pLCSsCurNode != NULL) {\n\
    \t\tmemset(the_pLCSsCurNode, 0, sizeof(PLCSLIST *));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tAnzMalloc(*the_pLCSsCurNode, PLCSLIST, sizeof(ST_LCSLIST));\n\
    \tif (the_pLCSsCurNode != NULL) {\n\
    \t\tmemset(*the_pLCSsCurNode, 0, sizeof(ST_LCSLIST));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \t*io_LCSsHeadNode = *the_pLCSsCurNode;\n\n\
    \t/* ?O???[?o?????g_dummy??????? */\n\
    \tAnzMalloc(g_dummy, PCELL, sizeof(ST_CELL));\n\
    \tif (g_dummy != NULL) {\n\
    \t\tmemset(g_dummy, 0, sizeof(ST_CELL));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tg_dummy->i = 0;\n\
    \tg_dummy->j = 0;\n\n\
    \tAnzMalloc(the_p, PCELL**, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \tif (the_p != NULL) {\n\
    \t\tmemset(the_p, 0, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_p[the_i], PCELL*, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\tif (the_p[the_i] != NULL) {\n\
    \t\t\tmemset(the_p[the_i], 0, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tAnzMalloc(the_p[the_i][the_j], PCELL, sizeof(ST_CELL));\n\
    \t\t\tif (the_p[the_i][the_j] != NULL) {\n\
    \t\t\t\tmemset(the_p[the_i][the_j], 0, sizeof(ST_CELL));\n\
    \t\t\t} else {\n\
    \t\t\t\tthrow MemoryFailedExc();\n\
    \t\t\t}\n\
    \t\t\tthe_p[the_i][the_j]->i = the_i;\n\
    \t\t\tthe_p[the_i][the_j]->j = the_j;\n\
    \t\t\tthe_p[the_i][the_j]->next = DCELL;\n\
    \t\t}\n\
    \t}\n\
    \t//the_rank\n\
    \tAnzMalloc(the_rank, int **, sizeof(int*)*(the_iLen1 + 1));\n\
    \tif (the_rank != NULL) {\n\
    \t\tmemset(the_rank, 0, sizeof(int*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_rank[the_i], int *, sizeof(int)*(the_iLen2 + 1));\n\
    \t\tif (the_rank[the_i] != NULL) {\n\
    \t\t\tmemset(the_rank[the_i], 0, sizeof(int)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tthe_rank[the_i][the_j] = 0;\n\
    \t\t}\n\
    \t}\n\
    \t//the_head\n\
    \tAnzMalloc(the_head, PCELL **, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \tif (the_head != NULL) {\n\
    \t\tmemset(the_head, 0, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_head[the_i], PCELL *, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\tif (the_head[the_i] != NULL) {\n\
    \t\t\tmemset(the_head[the_i], 0, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tthe_head[the_i][the_j] = DCELL;\n\
    \t\t}\n\
    \t}\n\
    \t//the_pretail\n\
    \tAnzMalloc(the_pretail, PCELL **, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \tif (the_pretail != NULL) {\n\
    \t\tmemset(the_pretail, 0, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_pretail[the_i], PCELL *, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\tif (the_pretail[the_i] != NULL) {\n\
    \t\t\tmemset(the_pretail[the_i], 0, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tthe_pretail[the_i][the_j] = DCELL;\n\
    \t\t}\n\
    \t}\n\
    \t//the_tail\n\
    \tAnzMalloc(the_tail, PCELL **, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \tif (the_tail != NULL) {\n\
    \t\tmemset(the_tail, 0, sizeof(PCELL*)*(the_iLen1 + 1));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tAnzMalloc(the_tail[the_i], PCELL *, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\tif (the_tail[the_i] != NULL) {\n\
    \t\t\tmemset(the_tail[the_i], 0, sizeof(PCELL)*(the_iLen2 + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tthe_tail[the_i][the_j] = DCELL;\n\
    \t\t}\n\
    \t}\n\
    \t//compute gragh\n\
    \tfor (the_i = 1;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 1;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tif (strcmp(the_pStr1[the_i - 1], the_pStr2[the_j - 1]) == 0) {\n\
    \t\t\t\tthe_rank[the_i][the_j] = the_rank[the_i - 1][the_j - 1] + 1;\n\
    \t\t\t\tthe_tail[the_i][the_j] = the_p[the_i][the_j];\n\
    \t\t\t} else {\n\
    \t\t\t\tthe_rank[the_i][the_j] = MAX(the_rank[the_i - 1][the_j], the_rank[the_i][the_j - 1]);\n\
    \t\t\t\tif (the_rank[the_i][the_j] > 0) {\n\
    \t\t\t\t\tif (the_rank[the_i - 1][the_j] == the_rank[the_i][the_j]) {\n\
    \t\t\t\t\t\tthe_tail[the_i][the_j] = the_tail[the_i - 1][the_j];\n\
    \t\t\t\t\t}\n\
    \t\t\t\t\tif (the_rank[the_i][the_j - 1] == the_rank[the_i][the_j]) {\n\
    \t\t\t\t\t\tif (the_tail[the_i][the_j] == DCELL) {\n\
    \t\t\t\t\t\t\tthe_tail[the_i][the_j] = the_tail[the_i][the_j - 1];\n\
    \t\t\t\t\t\t} else {\n\
    \t\t\t\t\t\t\tif (the_tail[the_i][the_j]->i == the_tail[the_i][the_j - 1]->i) {\n\
    \t\t\t\t\t\t\t\tthe_pretail[the_i][the_j] = the_pretail[the_i][the_j - 1];\n\
    \t\t\t\t\t\t\t} else {\n\
    \t\t\t\t\t\t\t\tthe_pretail[the_i][the_j] = the_tail[the_i][the_j - 1];\n\
    \t\t\t\t\t\t\t}\n\
    \t\t\t\t\t\t\tif (the_tail[the_i][the_j]->j == the_pretail[the_i][the_j]->j) {\n\
    \t\t\t\t\t\t\t\tthe_tail[the_i][the_j] = the_pretail[the_i][the_j];\n\
    \t\t\t\t\t\t\t} else {\n\
    \t\t\t\t\t\t\t\tthe_pretail[the_i][the_j]->next = the_tail[the_i][the_j];\n\
    \t\t\t\t\t\t\t\tthe_head[the_i][the_j] = the_head[the_i][the_j - 1];\n\
    \t\t\t\t\t\t\t\tif (the_head[the_i][the_j] == DCELL) {\n\
    \t\t\t\t\t\t\t\t\tthe_head[the_i][the_j] = the_pretail[the_i][the_j];\n\
    \t\t\t\t\t\t\t\t}\n\
    \t\t\t\t\t\t\t}\n\
    \t\t\t\t\t\t}\n\
    \t\t\t\t\t}\n\
    \t\t\t\t}\n\
    \t\t\t}\n\
    \t\t} //end for the_j\n\
    \t} //end for the_i\n\n\
    \t//get LCSs and count\n\
    \t//lcsrev???????\n\
    \tAnzMalloc(the_lcsrev, PLCSPOS *, sizeof(PLCSPOS)*(the_rank[the_iLen1][the_iLen2]));\n\
    \tif (the_lcsrev != NULL) {\n\
    \t\tmemset(the_lcsrev, 0, sizeof(PLCSPOS)*(the_rank[the_iLen1][the_iLen2]));\n\
    \t} else {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_rank[the_iLen1][the_iLen2];the_i++) {\n\
    \t\tAnzMalloc(the_lcsrev[the_i], PLCSPOS, sizeof(ST_LCSCELL));\n\
    \t\tif (the_lcsrev[the_i] != NULL) {\n\
    \t\t\tmemset(the_lcsrev[the_i], 0, sizeof(ST_LCSCELL));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t}\n\
    \t*out_LCS_Lenght = the_rank[the_iLen1][the_iLen2];\n\
    \tif (*out_LCS_Lenght != 0) { //?????v????????v??O???????LCS????????\n\
    \t\tGetEmbeddings(the_iComm_Head, the_iComm_Tail,\n\
    \t\t\t\t\t  the_iLen1, the_iLen2,\n\
    \t\t\t\t\t  the_lcsrev, 0,\n\
    \t\t\t\t\t  the_head, the_pretail, the_tail,\n\
    \t\t\t\t\t  the_iLen1, the_iLen2,\n\
    \t\t\t\t\t  the_pStr1,\n\
    \t\t\t\t\t  the_rank[the_iLen1][the_iLen2],\n\
    \t\t\t\t\t  &the_pLCSsCurNode,\n\
    \t\t\t\t\t  out_LCSsNum);\n\
    \t\t/* ?? ????Node???????? */\n\
    \t\t*the_pLCSsCurNode = *io_LCSsHeadNode;\n\
    \t\tthe_LCSsPrevNode = *io_LCSsHeadNode;\n\
    \t\tthe_pLCSsNextNode = *io_LCSsHeadNode;\n\
    \t\twhile (*the_pLCSsCurNode != NULL) {\n\
    \t\t\tthe_pLCSsNextNode = (*the_pLCSsCurNode)->next;\n\
    \t\t\tif (the_pLCSsNextNode == NULL) {\n\
    \t\t\t\tfree(*the_pLCSsCurNode);\n\
    \t\t\t\t*the_pLCSsCurNode = NULL;\n\
    \t\t\t\tif (the_LCSsPrevNode != NULL) {\n\
    \t\t\t\t\t(the_LCSsPrevNode)->next = NULL;\n\
    \t\t\t\t}\n\
    \t\t\t}\n\
    \t\t\tthe_LCSsPrevNode = *the_pLCSsCurNode;\n\
    \t\t\t*the_pLCSsCurNode = the_pLCSsNextNode;\n\
    \t\t}\n\n\
    \t\t// add common context\n\
    \t\t*the_pLCSsCurNode = *io_LCSsHeadNode;\n\
    \t\twhile (*the_pLCSsCurNode != NULL) {\n\
    \t\t\tfor (the_i = 0;the_i < the_iComm_Head;the_i++) {\n\
    \t\t\t\t((*the_pLCSsCurNode)->LCS)[the_i] = in_pStr1[the_i];\n\
    \t\t\t}\n\
    \t\t\tthe_i = the_iComm_Head + *out_LCS_Lenght;\n\
    \t\t\tfor (the_j = in_len1 - the_iComm_Tail;the_j < in_len1;the_j++) {\n\
    \t\t\t\t((*the_pLCSsCurNode)->LCS)[the_i] = in_pStr1[the_j];\n\
    \t\t\t\tthe_i++;\n\
    \t\t\t}\n\
    \t\t\t*the_pLCSsCurNode = (*the_pLCSsCurNode)->next;\n\
    \t\t}\n\
    \t\t*out_LCS_Lenght = *out_LCS_Lenght + the_iComm_Head + the_iComm_Tail;\n\
    \t} else if (the_iComm_Head + the_iComm_Tail > 0) { //?????v????????v??O???????LCS???????\n\
    \t\tchar ** the_LCS = NULL;\n\
    \t\tAnzMalloc(the_LCS, char**, sizeof(char *)*(the_iComm_Head + the_iComm_Tail + 1));\n\
    \t\tif (the_LCS != NULL) {\n\
    \t\t\tmemset(the_LCS, 0, sizeof(char *)*(the_iComm_Head + the_iComm_Tail + 1));\n\
    \t\t} else {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tfor (the_i = 0;the_i < the_iComm_Head;the_i++) {\n\
    \t\t\tthe_LCS[the_i] = in_pStr1[the_i];\n\
    \t\t}\n\
    \t\tfor (the_j = in_len1 - the_iComm_Tail;the_j < in_len1;the_j++) {\n\
    \t\t\tthe_LCS[the_i] = in_pStr1[the_j];\n\
    \t\t\tthe_i++;\n\
    \t\t}\n\
    \t\t(*the_pLCSsCurNode)->LCS = the_LCS;\n\
    \t\t(*the_pLCSsCurNode)->next = NULL;\n\
    \t\t*out_LCS_Lenght = the_iComm_Head + the_iComm_Tail;\n\
    \t} else {\n\
    \t\tif (*the_pLCSsCurNode != NULL) {\n\
    \t\t\tfree(*the_pLCSsCurNode);\n\
    \t\t\t*the_pLCSsCurNode = NULL;\n\
    \t\t\t*io_LCSsHeadNode = NULL;\n\
    \t\t}\n\
    \t}\n\
    \t//Free memory\n\
    \tfor (the_i = 0;the_i < the_rank[the_iLen1][the_iLen2];the_i++) {\n\
    \t\tif (the_lcsrev[the_i] != NULL) {\n\
    \t\t\tfree(the_lcsrev[the_i]);\n\
    \t\t\tthe_lcsrev[the_i] = NULL;\n\
    \t\t}\n\
    \t}\n\n\
    \tif (the_lcsrev != NULL) {\n\
    \t\tfree(the_lcsrev);\n\
    \t\tthe_lcsrev = NULL;\n\
    \t}\n\
    \t//**the_head, **the_pretail, **the_tail;\n\
    \t//**the_rank;\n\
    \t//**the_p[the_i][the_j];\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tfor (the_j = 0;the_j < the_iLen2 + 1;the_j++) {\n\
    \t\t\tif (the_p[the_i][the_j] != NULL) {\n\
    \t\t\t\tfree(the_p[the_i][the_j]);\n\
    \t\t\t\tthe_p[the_i][the_j] = NULL;\n\
    \t\t\t}\n\
    \t\t}\n\
    \t}\n\
    \tfor (the_i = 0;the_i < the_iLen1 + 1;the_i++) {\n\
    \t\tif (*(the_head + the_i) != NULL) {\n\
    \t\t\tfree(*(the_head + the_i));\n\
    \t\t\t*(the_head + the_i) = NULL;\n\
    \t\t}\n\
    \t\tif (the_pretail[the_i] != NULL) {\n\
    \t\t\tfree(the_pretail[the_i]);\n\
    \t\t\tthe_pretail[the_i] = NULL;\n\
    \t\t}\n\
    \t\tif (the_tail[the_i] != NULL) {\n\
    \t\t\tfree(the_tail[the_i]);\n\
    \t\t\tthe_tail[the_i] = NULL;\n\
    \t\t}\n\
    \t\tif (the_rank[the_i] != NULL) {\n\
    \t\t\tfree(the_rank[the_i]);\n\
    \t\t\tthe_rank[the_i] = NULL;\n\
    \t\t}\n\
    \t\tif (the_p[the_i] != NULL) {\n\
    \t\t\tfree(the_p[the_i]);\n\
    \t\t\tthe_p[the_i] = NULL;\n\
    \t\t}\n\
    \t}\n\
    \tif (the_head != NULL) {\n\
    \t\tfree(the_head);\n\
    \t\tthe_head = NULL;\n\
    \t}\n\
    \tif (the_pretail != NULL) {\n\
    \t\tfree(the_pretail);\n\
    \t\tthe_pretail = NULL;\n\
    \t}\n\
    \tif (the_tail != NULL) {\n\
    \t\tfree(the_tail);\n\
    \t\tthe_tail = NULL;\n\
    \t}\n\
    \tif (the_rank != NULL) {\n\
    \t\tfree(the_rank);\n\
    \t\tthe_rank = NULL;\n\
    \t}\n\
    \tif (the_p != NULL) {\n\
    \t\tfree(the_p);\n\
    \t\tthe_p = NULL;\n\
    \t}\n\
    \tif (the_pLCSsCurNode != NULL) {\n\
    \t\tfree(the_pLCSsCurNode);\n\
    \t\tthe_pLCSsCurNode = NULL;\n\
    \t}\n\
    \tif (g_dummy != NULL) {\n\
    \t\tfree(g_dummy);\n\
    \t\tg_dummy = NULL;\n\
    \t}\n\
    \treturn 0;\n\
    }\n\n\
    ST_LCS_DAT * LCSAlgo::CreateLCS_DAT(MeasureFileObject* in_measureFileObj)\n\
    {\n\
    \tint the_iPairNo = 0;\t\t\t\t\t\t// ????y?A?????A????????y?A????r??????????\n\
    \tint the_iArrayNum = 0;\t\t\t\t\t\t// _ST_LCS_DAT???????y?A??\n\
    \tint the_iFuncPair = 0;\t\t\t\t\t\t// LCS??g????????\n\
    \tint the_iArray_Cur = 0;\t\t\t\t\t\t// ?J?????g?????z???????\n\
    \tint the_iBit_Cur = 0;\t\t\t\t\t\t// ?J?????g?????long?^????bit???u\n\
    \tint the_iArray_Next = 0;\t\t\t\t\t// ???????z???????\n\
    \tint the_iBit_Next = 0;\t\t\t\t\t\t// ???????long?^????bit???u\n\
    \tint the_iCurNo = 0;\t\t\t\t\t\t\t// ?J?????g?????z???????\n\
    \tint the_iNextNo = 0;\t\t\t\t\t\t// ???????????\n\
    \tint the_iLCSsNum = 0;\t\t\t\t\t\t// LCS???\n\
    \tint the_iLCS_Lenght = 0;\t\t\t\t\t// LCS??Lenght\n\
    \tPLCSLIST the_pLCSsHeadNode = NULL; /* LCS??List??w?b?_Node */\n\
    \tPLCSLIST the_pLCSsNextNode = NULL; /* ????n????LCS??List???????p??Node */\n\
    \tPLCSLIST the_pLCSsCurNode = NULL; /* LCS??List???????p?J?????gNode */\n\n\
    \tunsigned long the_iFuncNum = 0;\t\t\t\t//File????L?q??????????\n\n\
    \tST_LCS_DAT* pLcs_Dat_Head = NULL;\t\t\t//_ST_LCS_DAT??HeadNode\n\
    \tST_LCS_DAT* pLcs_Dat_Cur = NULL;\t\t\t//_ST_LCS_DAT??CurNode\n\
    \tST_LCS_DAT* pLcs_Dat_Pre = NULL;\t\t\t//_ST_LCS_DAT??PreNode\n\
    \tunsigned long *lPair = NULL;\n\
    \tunsigned long *pPair = NULL;\n\
    \tunsigned long lFir, lSec;\n\n\
    \tlFir = 1;\n\
    \tlSec = 1;\n\n\
    \t// ????v??FileInfo????????\n\
    \tif (in_measureFileObj == NULL) {\n\
    \t\treturn NULL;\n\
    \t}\n\
    \t// ????v??FunctionInfo????????\n\
    \tthe_iFuncNum = in_measureFileObj->GetCommonFileInfo()->GetFuncNum();\n\
    \tthe_iFuncPair = the_iFuncNum * (the_iFuncNum - 1) / 2;\n\
    \tthe_iArrayNum = the_iFuncNum / g_iUnitSize;\n\
    \tif (the_iFuncNum % g_iUnitSize != 0) {\n\
    \t\tthe_iArrayNum++;\n\
    \t}\n\n\
    \tin_measureFileObj->RewindFuncList();\n\
    \tMeasureFuncObject* the_pFuncCur = in_measureFileObj->GetCurrFuncObj();\n\
    \tMeasureFuncObject* the_pFuncNext = in_measureFileObj->GetCurrFuncObj();\n\n\
    \t/* ????????? */\n\
    \tthe_iLCSsNum = 0;\n\
    \tthe_iLCS_Lenght = 0;\n\
    \tthe_pLCSsNextNode = NULL;\n\
    \tthe_pLCSsHeadNode = NULL;\n\
    \tthe_pLCSsCurNode = NULL;\n\
    \twhile (in_measureFileObj->HasNextFunc()) {\n\
    \t\tthe_iNextNo = the_iCurNo + 1;\n\
    \t\tthe_iArray_Cur = the_iCurNo / g_iUnitSize;\n\
    \t\tthe_iBit_Cur = the_iCurNo % g_iUnitSize;\n\
    \t\t//\n\
    \t\tin_measureFileObj->MoveNextFunc();\n\
    \t\tthe_pFuncNext = in_measureFileObj->GetCurrFuncObj();\n\
    \t\tin_measureFileObj->MarkCurrFuncPos();\n\
    \t\twhile (the_pFuncNext != NULL) {\n\
    \t\t\t//*out_fileELOC = *out_fileELOC + the_pFuncNext->m_eloc;\n\
    \t\t\tthe_iArray_Next = the_iNextNo / g_iUnitSize;\n\
    \t\t\tthe_iBit_Next = the_iNextNo % g_iUnitSize;\n\n\
    \t\t\tthe_iLCSsNum = 0;\n\
    \t\t\tthe_iLCS_Lenght = 0;\n\
    \t\t\tthe_pLCSsHeadNode = NULL;\n\
    \t\t\t/* ????n????All Distinct LCS???????? */\n\
    \t\t\tGetAllDistinctLCSs(the_pFuncCur->GetCommFuncInfo()->GetExecContent(),\n\
    \t\t\t\t\t\t\t   the_pFuncNext->GetCommFuncInfo()->GetExecContent(),\n\
    \t\t\t\t\t\t\t   the_pFuncCur->GetCommFuncInfo()->GetExecLOC(),\n\
    \t\t\t\t\t\t\t   the_pFuncNext->GetCommFuncInfo()->GetExecLOC(),\n\
    \t\t\t\t\t\t\t   &the_pLCSsHeadNode,\n\
    \t\t\t\t\t\t\t   &the_iLCS_Lenght,\n\
    \t\t\t\t\t\t\t   &the_iLCSsNum);\n\
    \t\t\tthe_pLCSsCurNode = the_pLCSsHeadNode;\n\
    \t\t\t//while (the_pLCSsCurNode!=NULL)\n\
    \t\t\tif (the_pLCSsCurNode != NULL && the_iLCS_Lenght != 0) {\n\
    \t\t\t\t//\t\t\t\tif(the_iLCS_Lenght == 0){\n\
    \t\t\t\t//\t\t\t\t\tthe_pLCSsCurNode = the_pLCSsCurNode->next;\n\
    \t\t\t\t//\t\t\t\t\tcontinue;\n\
    \t\t\t\t//\t\t\t\t}\n\
    \t\t\t\tAnzMalloc(pLcs_Dat_Cur, ST_LCS_DAT*, sizeof(ST_LCS_DAT));\n\
    \t\t\t\tif (pLcs_Dat_Cur != NULL) {\n\
    \t\t\t\t\tmemset(pLcs_Dat_Cur, 0, sizeof(ST_LCS_DAT));\n\
    \t\t\t\t} else {\n\
    \t\t\t\t\tthrow MemoryFailedExc();\n\
    \t\t\t\t}\n\
    \t\t\t\tif (pLcs_Dat_Head == NULL) {\n\
    \t\t\t\t\tpLcs_Dat_Head = pLcs_Dat_Cur;\n\
    \t\t\t\t\tpLcs_Dat_Pre = pLcs_Dat_Cur;\n\
    \t\t\t\t} else {\n\
    \t\t\t\t\tpLcs_Dat_Pre->next = pLcs_Dat_Cur;\n\
    \t\t\t\t}\n\n\
    \t\t\t\tpLcs_Dat_Cur->LCS = the_pLCSsCurNode->LCS;\n\
    \t\t\t\tpLcs_Dat_Cur->length = the_iLCS_Lenght;\n\
    \t\t\t\tAnzMalloc(lPair, unsigned long*, sizeof(unsigned long)*(the_iArrayNum + 1));\n\
    \t\t\t\tif (lPair != NULL) {\n\
    \t\t\t\t\tmemset(lPair, 0, sizeof(unsigned long)*(the_iArrayNum + 1));\n\
    \t\t\t\t} else {\n\
    \t\t\t\t\tthrow MemoryFailedExc();\n\
    \t\t\t\t}\n\
    \t\t\t\tpPair = lPair;\n\
    \t\t\t\tlFir = 1, lSec = 1;\n\
    \t\t\t\tlFir = lFir << the_iBit_Cur;\n\
    \t\t\t\tlSec = lSec << the_iBit_Next;\n\
    \t\t\t\tif (the_iArray_Cur == the_iArray_Next) {\n\
    \t\t\t\t\tpPair[the_iArray_Cur] = lFir | lSec;\n\
    \t\t\t\t} else {\n\
    \t\t\t\t\tpPair[the_iArray_Cur] = lFir;\n\
    \t\t\t\t\tpPair[the_iArray_Next] = lSec;\n\
    \t\t\t\t}\n\
    \t\t\t\tpPair[the_iArrayNum] = NULL;\n\
    \t\t\t\tpLcs_Dat_Cur->funcPair = pPair;\n\
    \t\t\t\tpLcs_Dat_Cur->next = NULL;\n\
    \t\t\t\tpLcs_Dat_Cur->pairNo = the_iPairNo;\n\
    \t\t\t\tpLcs_Dat_Cur->bDelete = false;\n\
    \t\t\t\tpLcs_Dat_Pre = pLcs_Dat_Cur;\n\
    \t\t\t\tthe_pLCSsCurNode = the_pLCSsCurNode->next;\n\
    \t\t\t} //End of while (the_pLCSsCurNode!=NULL)\n\
    \t\t\tthe_pLCSsCurNode = the_pLCSsHeadNode;\n\
    \t\t\twhile (the_pLCSsCurNode != NULL) {\n\
    \t\t\t\tthe_pLCSsNextNode = the_pLCSsCurNode->next;\n\
    \t\t\t\tif (the_pLCSsCurNode != the_pLCSsHeadNode && the_pLCSsCurNode->LCS != NULL) {\n\
    \t\t\t\t\tfree(the_pLCSsCurNode->LCS);\n\
    \t\t\t\t}\n\
    \t\t\t\tfree(the_pLCSsCurNode);\n\
    \t\t\t\tthe_pLCSsCurNode = the_pLCSsNextNode;\n\
    \t\t\t}\n\
    \t\t\tthe_iNextNo++;\n\
    \t\t\tthe_iPairNo++;\n\
    \t\t\tin_measureFileObj->MoveNextFunc();\n\
    \t\t\tthe_pFuncNext = in_measureFileObj->GetCurrFuncObj();\n\n\
    \t\t} //End of while (the_pFuncNext != NULL)\n\
    \t\tthe_iCurNo++;\n\
    \t\t//\n\
    \t\tin_measureFileObj->RestoreMarkFuncPos();\n\
    \t\tthe_pFuncCur = in_measureFileObj->GetCurrFuncObj();\n\
    \t} //End of while (in_measureFileObj->HasNextFunc())\n\
    \treturn pLcs_Dat_Head;\n\
    }\n\n\
    LCSAlgo::LCSAlgo()\n\
    {}\n\n\
    LCSAlgo::~LCSAlgo()\n\
    {}\n\n\
    /**\n\
    *  ?????:GetLCSLength\n\
    *  ?T?v:?????LCS???v?Z\n\
    *  @param\n\
    *          in_pStr1      ?v?????1??s???e\n\
    *          in_pStr2      ?v?????2??s???e\n\
    *          in_len1       ?v?????1??s??\n\
    *          in_len2       ?v?????2??s??\n\
    *  @return\n\
    *          ANZ_SUCCESS          ?????I??    \n\
    *          ANZERR_MEMORY_FAILED ???????m????s  \n\
    *  @author luo-jirong\n\
    *  @modified by fan-jia 2005/02/06\n\
    */\n\
    unsigned int LCSAlgo::GetLCSLength(char** in_pStr1,\n\
    \t\t\t\t\t\t\t\t   char** in_pStr2,\n\
    \t\t\t\t\t\t\t\t   const int in_len1,\n\
    \t\t\t\t\t\t\t\t   const int in_len2)\n\
    {\n\
    \tregister int the_i = 0;     /* Loop?p */\n\
    \tregister int the_j = 0;     /* Loop?p */\n\
    \tunsigned int the_max = 0;   /* ?J?????g????l */\n\
    \tunsigned int *the_ps1 = NULL;  /* ???l???i?[?????z?? */\n\
    \tunsigned int *the_ps2 = NULL;   /* ???l???i?[?????z?? */\n\
    \tunsigned int *the_tmp = NULL;        /* Swap?p???Point */\n\
    \tunsigned int the_commonNum = 0;      /* ????s?? */\n\
    \tint the_iMaxLen = 0;        /* Item?????\xC2\x90? */\n\n\
    \tif (in_pStr1 == NULL || in_pStr2 == NULL) {\n\
    \t\treturn -1;\n\
    \t}\n\n\
    \tint the_iMinLen = min(in_len1, in_len2);\n\
    \tint the_iComm_Head = 0;\n\
    \tint the_iComm_Tail = 0;\n\
    \tfor (the_i = 0;the_i < the_iMinLen;the_i++) {\n\
    \t\tif (strcmp(in_pStr1[the_i], in_pStr2[the_i]) == 0) {\n\
    \t\t\tthe_iComm_Head++;\n\
    \t\t} else {\n\
    \t\t\tbreak;\n\
    \t\t}\n\
    \t}\n\n\
    \tint the_iCurLine1 = in_len1 - 1;\n\
    \tint the_iCurLine2 = in_len2 - 1;\n\
    \twhile (in_pStr1[the_iCurLine1] != NULL &&\n\
    \t\t\tin_pStr2[the_iCurLine2] != NULL &&\n\
    \t\t\tthe_iCurLine1 > the_iComm_Head - 1 &&\n\
    \t\t\tthe_iCurLine2 > the_iComm_Head - 1) {\n\
    \t\tif (strcmp(in_pStr1[the_iCurLine1], in_pStr2[the_iCurLine2]) == 0) {\n\
    \t\t\tthe_iComm_Tail++;\n\
    \t\t} else {\n\
    \t\t\tbreak;\n\
    \t\t}\n\
    \t\tthe_iCurLine1--;\n\
    \t\tthe_iCurLine2--;\n\
    \t}\n\n\
    \tint the_iLen1 = in_len1 - the_iComm_Head - the_iComm_Tail;\n\
    \tint the_iLen2 = in_len2 - the_iComm_Head - the_iComm_Tail;\n\
    \tchar** the_pStr1 = in_pStr1 + the_iComm_Head;\n\
    \tchar** the_pStr2 = in_pStr2 + the_iComm_Head;\n\
    \tthe_iMaxLen = the_iLen1 > the_iLen2 ? the_iLen1 : the_iLen2;\n\n\
    \tAnzMalloc(the_ps1, unsigned int*, sizeof(unsigned int) * (the_iMaxLen + 1));\n\
    \tAnzMalloc(the_ps2, unsigned int*, sizeof(unsigned int) * (the_iMaxLen + 1));\n\n\
    \tif (the_ps1 == NULL || the_ps2 == NULL) {\n\
    \t\tthrow MemoryFailedExc();\n\
    \t}\n\n\
    \tmemset(the_ps1, 0, sizeof(int) * (the_iMaxLen + 1));\n\
    \tmemset(the_ps2, 0, sizeof(int) * (the_iMaxLen + 1));\n\n\
    \tfor (the_i = 0; the_i < the_iLen2; the_i++) {\n\
    \t\tfor (the_j = 0; the_j < the_iLen1; the_j++) {\n\
    \t\t\tif (the_pStr1[the_j] == NULL || the_pStr2[the_i] == NULL) {\n\
    \t\t\t\tthe_max = 0;\n\
    \t\t\t\tTrace(\"GetLCSLength:?????v?f??Point??A?h???X??NULL??????B\");\n\
    \t\t\t} else {\n\
    \t\t\t\tif ( strcmp( the_pStr1[the_j], the_pStr2[the_i]) == 0 )\n\
    \t\t\t\t\tthe_max = the_ps1[the_j] + 1;\n\
    \t\t\t\telse\n\
    \t\t\t\t\tthe_max = 0;\n\
    \t\t\t}\n\
    \t\t\tif (the_max < the_ps1[the_j + 1])\n\
    \t\t\t\tthe_max = the_ps1[the_j + 1];\n\
    \t\t\tif (the_max < the_ps2[the_j])\n\
    \t\t\t\tthe_max = the_ps2[the_j];\n\
    \t\t\tthe_ps2[the_j + 1] = the_max;\n\
    \t\t}\n\
    \t\tthe_tmp = the_ps1;\n\
    \t\tthe_ps1 = the_ps2;\n\
    \t\tthe_ps2 = the_tmp;\n\
    \t}\n\n\
    \tthe_commonNum = the_ps1[ the_iLen1] + the_iComm_Head + the_iComm_Tail;\n\n\
    \tif (the_ps1 != NULL) {\n\
    \t\tfree(the_ps1);\n\
    \t\tthe_ps1 = NULL;\n\
    \t}\n\
    \tif (the_ps2 != NULL) {\n\
    \t\tfree(the_ps2);\n\
    \t\tthe_ps2 = NULL;\n\
    \t}\n\
    \treturn the_commonNum;\n\
    }\n\n\
    void LCSAlgo::RemoveLCS_DAT(ST_LCS_DAT *in_pLCS_DAT)\n\
    {\n\
    \tST_LCS_DAT* the_pCurLCS_DAT = in_pLCS_DAT;\n\
    \tST_LCS_DAT* the_pNextLCS_DAT = in_pLCS_DAT;\n\n\
    \twhile (the_pCurLCS_DAT) {\n\
    \t\tthe_pNextLCS_DAT = the_pCurLCS_DAT->next;\n\
    \t\t//free the_pCurLCS_DAT\n\
    \t\tif (the_pCurLCS_DAT->funcPair != NULL) {\n\
    \t\t\tfree(the_pCurLCS_DAT->funcPair);\n\
    \t\t\tthe_pCurLCS_DAT->funcPair = NULL;\n\
    \t\t}\n\
    \t\tif (the_pCurLCS_DAT->LCS != NULL) {\n\
    \t\t\tfree(the_pCurLCS_DAT->LCS);\n\
    \t\t\tthe_pCurLCS_DAT->LCS = NULL;\n\
    \t\t}\n\
    \t\tif (the_pCurLCS_DAT != NULL) {\n\
    \t\t\tfree(the_pCurLCS_DAT);\n\
    \t\t\tthe_pCurLCS_DAT = NULL;\n\
    \t\t}\n\
    \t\tthe_pCurLCS_DAT = the_pNextLCS_DAT;\n\
    \t}\n\
    }\n\n"
  updated_at: 2011-05-13 10:35:05
  analyzed_source_path_id: "147"
  id: "10081"
  subtask_id: "10"
source_codes_1243: 
  created_at: 2010-07-05 17:18:40
  error_line: "23"
  body: |
    #include "C_LanguageProduct.h"

  updated_at: 2011-05-13 10:34:59
  analyzed_source_path_id: "134"
  id: "9949"
  subtask_id: "12"
source_codes_1111: 
  created_at: 2010-07-05 17:15:31
  error_line: "401"
  body: "            goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9817"
  subtask_id: "7"
source_codes_929: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?????\");\r\n        }\r\n    }\r\n    /* ELOC?v??Option???w?????? */\r\n    if(the_pOption->m_eloc){\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9635"
  subtask_id: "9"
source_codes_111: 
  created_at: 2010-07-05 17:09:13
  error_line: "204"
  body: "        ftime(&the_st);\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8817"
  subtask_id: "5"
source_codes_243: 
  created_at: 2010-07-05 17:09:20
  error_line: 
  body: "        }\r\n\
    \r\n    }\r\n    /* ?v???J?n,?o?R???????o????? */\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8949"
  subtask_id: "5"
source_codes_375: 
  created_at: 2010-07-05 17:09:23
  error_line: 
  body: "        }\r\n\
    #else\r\n        /* ?J?????gDir??????Dir??????? */\r\n        if((io_pPath[1] == ':' && io_pPath[2] == '\\\\') ||\r\n            (io_pPath[0] == '\\\\')) {\r\n            goto EXIT;\r\n        }\r\n        else {\r\n            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {\r\n                the_iRet = ANZ_ERROR;\r\n                goto EXIT;\r\n            }\r\n            if(strcmp(io_pPath,\"\") != 0) {\r\n                sprintf(the_szFullPath,\"%s\\\\%s\",the_szCurPath,io_pPath);\r\n            }\r\n        }\r\n\
    #endif\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9081"
  subtask_id: "5"
source_codes_1376: 
  created_at: 2010-07-05 17:19:42
  error_line: 
  body: |+
    /*
    File:
       LanguageProduct.cpp
    Copyright:
       Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
       AnalyzeMe
    Abstract:
       ?????v???_?N?g
    Author:
       luo-jirong
    Date:
       2005/02/08
    REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 2.0.0.0$
    */
    
  updated_at: 2011-05-13 10:35:04
  analyzed_source_path_id: "143"
  id: "10082"
  subtask_id: "10"
source_codes_1244: 
  created_at: 2010-07-05 17:18:40
  error_line: "24"
  body: |
    #include "Asm_LanguageProduct.h"

  updated_at: 2011-05-13 10:34:59
  analyzed_source_path_id: "134"
  id: "9950"
  subtask_id: "12"
source_codes_1112: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "        }\r\n        the_iRet = CommomMeasure(the_pAnzInfo);\r\n        if(the_iRet != ANZ_SUCCESS){\r\n            printf(\"%s%s\\n\",the_szCurMetrics,MSG_METRIC_ERROR);\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9818"
  subtask_id: "7"
source_codes_112: 
  created_at: 2010-07-05 17:09:13
  error_line: 
  body: "    }\r\n\
    \r\n    /* Option??????????? */\r\n    the_iRet = SetOption(the_pAnzInfo,the_pCmdOption);\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8818"
  subtask_id: "5"
source_codes_244: 
  created_at: 2010-07-05 17:09:20
  error_line: "377"
  body: "    if(the_pOption->m_verbos == ON ){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8950"
  subtask_id: "5"
source_codes_376: 
  created_at: 2010-07-05 17:09:23
  error_line: "658"
  body: "        strcpy(io_pPath,the_szFullPath);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9082"
  subtask_id: "5"
source_codes_1377: 
  created_at: 2010-07-05 17:19:43
  error_line: "22"
  body: |
    #include "LanguageProduct.h"

  updated_at: 2011-05-13 10:35:04
  analyzed_source_path_id: "143"
  id: "10083"
  subtask_id: "10"
source_codes_1245: 
  created_at: 2010-07-05 17:18:40
  error_line: 
  body: |
    
    /// <summary>
    ///?v??????????????N???X??instance??????????
    /// </summary>
    /// <remarks>
    ///?v??????????Factory???????C?v??????????Product?????CFile??g???q???????C
    ///????v??????????????N???X??instance???????????B
    /// </remarks>
    /// <param name="pExtName">File??g???q</param>
    /// <returns>
    ///?@?v??????????????N???X??instance
    /// </returns>
    /// <exception cref="???O??">
    ///
    /// </exception>
    LanguageProduct* LanguageFactory::CreateProduct(const char* in_pExtName)
    {
    	Trace("LanguageFactory::CreateProduct() in\n");

  updated_at: 2011-05-13 10:34:59
  analyzed_source_path_id: "134"
  id: "9951"
  subtask_id: "12"
source_codes_1113: 
  created_at: 2010-07-05 17:15:31
  error_line: "406"
  body: "            goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9819"
  subtask_id: "7"
source_codes_930: 
  created_at: 2010-07-05 17:14:27
  error_line: "298"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9636"
  subtask_id: "9"
source_codes_113: 
  created_at: 2010-07-05 17:09:13
  error_line: "209"
  body: "    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8819"
  subtask_id: "5"
source_codes_245: 
  created_at: 2010-07-05 17:09:20
  error_line: 
  body: "        /* ?o?R???????o????? */\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8951"
  subtask_id: "5"
source_codes_377: 
  created_at: 2010-07-05 17:09:23
  error_line: "659"
  body: |
    EXIT:

  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9083"
  subtask_id: "5"
source_codes_931: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"???ELOC\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9637"
  subtask_id: "9"
source_codes_114: 
  created_at: 2010-07-05 17:09:13
  error_line: "210"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8820"
  subtask_id: "5"
source_codes_246: 
  created_at: 2010-07-05 17:09:20
  error_line: "379"
  body: "        printf(\"%s%s\\n\",the_szCurMetrics,MSG_METRIC_START);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8952"
  subtask_id: "5"
source_codes_378: 
  created_at: 2010-07-05 17:09:23
  error_line: "660"
  body: "        return the_iRet;\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9084"
  subtask_id: "5"
source_codes_1378: 
  created_at: 2010-07-05 17:19:43
  error_line: 
  body: |
    
    /// <summary>
    ///Total?s?A???s?s?A?????s?A?R?????g?s??|?C???g????
    /// </summary>
    /// <remarks>
    ///	Total?s?A???s?s?A?????s?A?R?????g?s??|?C???g????
    /// </remarks>
    /// <param name="io_fileInfo">?v?????File</param>
    /// <returns>
    ///?@
    /// </returns>
    /// <exception cref="MemoryFailedExc">
    /// Memory Failed
    /// </exception>
    int LanguageProduct::MakeLOCInfo(FileInfo* io_fileInfo)
    {
    	/* ????? */
    	int the_iTotaLOCNum = 0;    /* the_pTotaLOC??z???? */
    	int the_iExecLOCNum = 0;    /* the_pExecLOC??z???? */
    	int the_iComtLOCNum = 0;    /* the_pComtLOC??z???? */
    	int the_iBlankLOCNum = 0;   /* the_pBlankLOC??z????*/

  updated_at: 2011-05-13 10:35:04
  analyzed_source_path_id: "143"
  id: "10084"
  subtask_id: "10"
source_codes_1246: 
  created_at: 2010-07-05 17:18:40
  error_line: "43"
  body: "\tassert(in_pExtName != NULL);\r\n"
  updated_at: 2011-05-13 10:34:59
  analyzed_source_path_id: "134"
  id: "9952"
  subtask_id: "12"
source_codes_1114: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "        }\r\n    }\r\n    /* ?????v?? */\r\n    if(the_iMeasureType == ANZ_TREND_MEASURE){\r\n        /* ?????v??File??????}?N?????????? */\r\n        the_iRet = GetProcMacro(the_pAnzInfo,ANZ_TREND_MEASURE);\r\n        if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9820"
  subtask_id: "7"
source_codes_932: 
  created_at: 2010-07-05 17:14:27
  error_line: "302"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9638"
  subtask_id: "9"
source_codes_800: 
  created_at: 2010-07-05 17:13:49
  error_line: "279"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9506"
  subtask_id: "11"
source_codes_115: 
  created_at: 2010-07-05 17:09:13
  error_line: 
  body: "    }\r\n    /* ?v?????????????? */\r\n    the_iRet = GetMeasureType(the_pOption,&the_iMeasureType);\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8821"
  subtask_id: "5"
source_codes_247: 
  created_at: 2010-07-05 17:09:20
  error_line: 
  body: "    }\r\n\
    \r\n    /* ?v???O?A?K?v??v??????File???J?? */\r\n    the_iRet = OpenResultFile(the_pOption);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8953"
  subtask_id: "5"
source_codes_379: 
  created_at: 2010-07-05 17:09:23
  error_line: 
  body: |+
    }
    
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "9085"
  subtask_id: "5"
source_codes_1379: 
  created_at: 2010-07-05 17:19:43
  error_line: "44"
  body: "\tchar** the_pTotaLOC = NULL; /* File??LOC(???s)???P */\n"
  updated_at: 2011-05-13 10:35:04
  analyzed_source_path_id: "143"
  id: "10085"
  subtask_id: "10"
source_codes_1247: 
  created_at: 2010-07-05 17:18:40
  error_line: 
  body: "\tif (in_pExtName == NULL) {\r\n\
    \t\treturn NULL;\r\n\
    \t}\r\n\
    \r\n\
    \tLanguageProduct * the_pLangProd = NULL;\r\n\
    \tif (strcmp(in_pExtName, \"c\") == 0 ||\r\n\
    \t\t\tstrcmp(in_pExtName, \"C\") == 0 ||\r\n\
    \t\t\tstrcmp(in_pExtName, \"h\") == 0 ||\r\n\
    \t\t\tstrcmp(in_pExtName, \"H\") == 0) {\r\n\
    \t\tthe_pLangProd = C_LanguageProduct::GetInstance();\r\n\
    #ifdef ANALYZEME_CPP_SUPPORT\r\n\
    \t} else if (strcmp(in_pExtName, \"cpp\") == 0 || // C++???????????(K.Maruya) \r\n\
    \t\t\t\tstrcmp(in_pExtName, \"CPP\") == 0 || \r\n\
    \t\t\t\tstrcmp(in_pExtName, \"cxx\") == 0 ||\r\n\
    \t\t\t\tstrcmp(in_pExtName, \"CXX\") == 0) {\r\n\
    \t\tthe_pLangProd = C_LanguageProduct::GetInstance();\r\n\
    #endif\r\n\
    \t} else if (strcmp(in_pExtName, \"s\") == 0 || strcmp(in_pExtName, \"S\") == 0 ) {\r\n\
    \t\tthe_pLangProd = Asm_LanguageProduct::GetInstance();\r\n\
    \t} else if (strcmp(in_pExtName, \"asm\") == 0 || strcmp(in_pExtName, \"ASM\") == 0 ) {\r\n\
    \t\tthe_pLangProd = Asm_LanguageProduct::GetInstance();\r\n\
    \t} else {\r\n\
    \t\tthe_pLangProd = Asm_LanguageProduct::GetInstance();\r\n\
    \t}\r\n\
    \r\n\
    \tTrace(\"LanguageFactory::CreateProduct() out\\n\");\r\n\
    \treturn the_pLangProd;\r\n\
    }\r\n\
    \r\n\
    LanguageFactory::LanguageFactory()\r\n\
    {\r\n\
    \tTrace(\"LanguageFactory::LanguageFactory() in\\n\");\r\n\
    \tTrace(\"LanguageFactory::LanguageFactory() out\\n\");\r\n\
    }\r\n\
    \r\n\
    LanguageFactory::~LanguageFactory()\r\n\
    {\r\n\
    \tTrace(\"LanguageFactory::LanguageFactory() in\\n\");\r\n\
    \tTrace(\"LanguageFactory::LanguageFactory() out\\n\");\r\n\
    }\r\n\
    \r\n\
    \r\n\n"
  updated_at: 2011-05-13 10:34:59
  analyzed_source_path_id: "134"
  id: "9953"
  subtask_id: "12"
source_codes_1115: 
  created_at: 2010-07-05 17:15:31
  error_line: "414"
  body: "            goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9821"
  subtask_id: "7"
source_codes_933: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "            strcat(the_szCurMetrics,\"???ELOC\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9639"
  subtask_id: "9"
source_codes_801: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"?????\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9507"
  subtask_id: "11"
source_codes_116: 
  created_at: 2010-07-05 17:09:13
  error_line: "214"
  body: "    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8822"
  subtask_id: "5"
source_codes_248: 
  created_at: 2010-07-05 17:09:20
  error_line: "384"
  body: "    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8954"
  subtask_id: "5"
source_codes_1248: 
  created_at: 2010-07-05 17:18:40
  error_line: 
  body: |+
    /*
    File:
       AnzException.cpp
    Copyright:
       Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
       AnalyzeMe
    Abstract:
       AnalyzeMe????O????
    Author:
       Tong-huixin
    Date:
       2005/02/08
    REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 2.0.0.0$
    */
    
    
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9954"
  subtask_id: "12"
source_codes_1116: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "        }\r\n        the_iRet = TrendMeasure(the_pAnzInfo);\r\n        if(the_iRet != ANZ_SUCCESS){\r\n            printf(\"%s%s\\n\",the_szCurMetrics,MSG_METRIC_ERROR);\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9822"
  subtask_id: "7"
source_codes_934: 
  created_at: 2010-07-05 17:14:27
  error_line: "305"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9640"
  subtask_id: "9"
source_codes_802: 
  created_at: 2010-07-05 17:13:49
  error_line: "283"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9508"
  subtask_id: "11"
source_codes_117: 
  created_at: 2010-07-05 17:09:13
  error_line: "215"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8823"
  subtask_id: "5"
source_codes_249: 
  created_at: 2010-07-05 17:09:20
  error_line: "385"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8955"
  subtask_id: "5"
source_codes_1380: 
  created_at: 2010-07-05 17:19:43
  error_line: 
  body: "\tchar** the_pExecLOC = NULL; /* LOC(???s)???P */\n\
    \tchar** the_pComtLOC = NULL; /* LOC(?????s */\n\
    \tchar** the_pBlankLOC = NULL; /* LOC(Comment ?s) ???P */\n\
    \tST_LineAttr* the_pTempLineAttr = NULL; /* ?J?????g?t?@?C???w?b?_?[?m?[?h?????|?C???g */\n\n\
    \t/* ???[?J??????????? */\n\n\
    \tTrace(\"MakeLOCInfo() in\\n\");\n\
    \t/*?v?????t?@?C????s???????????????*/\n\
    \tif (io_fileInfo == NULL) {\n\
    \t\treturn 0;\n\
    \t}\n\
    \tthe_pTempLineAttr = io_fileInfo->GetLineAttr();\n\n\
    \ttry {\n\
    \t\tAnzMalloc(the_pTotaLOC, char**, sizeof(char*)*(io_fileInfo->GetTotalLOC() + 1));\n\
    \t\tif (the_pTotaLOC == NULL) {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tmemset(the_pTotaLOC, '\\0', sizeof(char*)*(io_fileInfo->GetTotalLOC() + 1));\n\
    \t\tAnzMalloc(the_pExecLOC, char**, sizeof(char*)*(io_fileInfo->GetExecLOC() + 1));\n\
    \t\tif (the_pExecLOC == NULL) {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tmemset(the_pExecLOC, '\\0', sizeof(char*)*(io_fileInfo->GetExecLOC() + 1));\n\
    \t\tAnzMalloc(the_pComtLOC, char**, sizeof(char*)*(io_fileInfo->GetCommentLOC() + 1));\n\
    \t\tif (the_pComtLOC == NULL) {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tmemset(the_pComtLOC, '\\0', sizeof(char*)*(io_fileInfo->GetCommentLOC() + 1));\n\
    \t\tAnzMalloc(the_pBlankLOC, char**, sizeof(char*)*(io_fileInfo->GetBlankLOC() + 1));\n\
    \t\tif (the_pBlankLOC == NULL) {\n\
    \t\t\tthrow MemoryFailedExc();\n\
    \t\t}\n\
    \t\tmemset(the_pBlankLOC, '\\0', sizeof(char*)*(io_fileInfo->GetBlankLOC() + 1));\n\
    \t\twhile (the_pTempLineAttr != NULL) {\n\n\
    \t\t\t/*?R?????g?s??|?C???g????*/\n\
    \t\t\tif (the_pTempLineAttr->m_attr1.IFL == 1) {\n\
    \t\t\t\t*(the_pComtLOC + the_iComtLOCNum) = the_pTempLineAttr->m_prow;\n\
    \t\t\t\tthe_iComtLOCNum++;\n\
    \t\t\t}\n\n\
    \t\t\t/*?????s??|?C???g????*/\n\
    \t\t\telse if (the_pTempLineAttr->m_attr.BL == 1) {\n\
    \t\t\t\t*(the_pBlankLOC + the_iBlankLOCNum) = the_pTempLineAttr->m_prow;\n\
    \t\t\t\tthe_iBlankLOCNum++;\n\
    \t\t\t}\n\n\
    \t\t\t/*?R?????g?s??|?C???g????*/\n\
    \t\t\telse if (the_pTempLineAttr->m_attr.CL == 1) {\n\
    \t\t\t\t*(the_pComtLOC + the_iComtLOCNum) = the_pTempLineAttr->m_prow;\n\
    \t\t\t\tthe_iComtLOCNum++;\n\
    \t\t\t}\n\n\
    \t\t\t/*???s?s??|?C???g????*/\n\
    \t\t\telse {\n\
    \t\t\t\t*(the_pExecLOC + the_iExecLOCNum) = the_pTempLineAttr->m_prow;\n\
    \t\t\t\tthe_iExecLOCNum++;\n\
    \t\t\t}\n\n\
    \t\t\t/*Total?s??|?C???g????*/\n\
    \t\t\t*(the_pTotaLOC + the_iTotaLOCNum) = the_pTempLineAttr->m_prow;\n\
    \t\t\tthe_iTotaLOCNum++;\n\
    \t\t\tthe_pTempLineAttr = the_pTempLineAttr->next;\n\
    \t\t}\n\n\
    \t\t/*LOC(???s)??????????*/\n\
    \t\tio_fileInfo->SetTotalContent(the_pTotaLOC);\n\n\
    \t\t/*LOC(???s)???????*/\n\
    \t\tio_fileInfo->SetExecContent(the_pExecLOC);\n\n\
    \t\t/*LOC(Comment?s)???????*/\n\
    \t\tio_fileInfo->SetCommentContent(the_pComtLOC);\n\n\
    \t\t/*LOC(?????s)???????*/\n\
    \t\tio_fileInfo->SetBlankContent(the_pBlankLOC);\n\
    \t}\n\
    \t/*????????????????s????????B*/\n\
    \tcatch (MemoryFailedExc &e) {\n\
    \t\tthrow e;\n\
    \t}\n\
    \tTrace(\"MakeLOCInfo() out\\n\");\n\
    \treturn 0;\n\
    }\n\n"
  updated_at: 2011-05-13 10:35:04
  analyzed_source_path_id: "143"
  id: "10086"
  subtask_id: "10"
source_codes_1249: 
  created_at: 2010-07-05 17:18:40
  error_line: "23"
  body: |
    #include "AnzException.h"

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9955"
  subtask_id: "12"
source_codes_1117: 
  created_at: 2010-07-05 17:15:31
  error_line: "419"
  body: "            goto EXIT;\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9823"
  subtask_id: "7"
source_codes_935: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"FileELOC\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9641"
  subtask_id: "9"
source_codes_803: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?????\");\r\n        }\r\n    }\r\n    /* ELOC?v??Option???w?????? */\r\n    if(the_pOption->m_eloc){\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9509"
  subtask_id: "11"
source_codes_380: 
  created_at: 2010-07-05 17:11:40
  error_line: "1"
  body: |
    /*

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9086"
  subtask_id: "1"
source_codes_118: 
  created_at: 2010-07-05 17:09:13
  error_line: 
  body: "    }\r\n    /* ?R?}???h???C??????????Option??????????????? */\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8824"
  subtask_id: "5"
source_codes_1381: 
  created_at: 2010-07-05 17:19:43
  error_line: 
  body: |+
    /*
    File:
       AnzException.cpp
    Copyright:
       Copyright (C) 2005 TOSHIBA CORPORATION. All Rights Reserved.
    Product:
       AnalyzeMe
    Abstract:
       AnalyzeMe????O????
    Author:
       Tong-huixin
    Date:
       2005/02/08
    REVISION HISTORY:
    
    */
    
    /*
        $AnalyzeMe 2.0.0.0$
    */
    
    
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10087"
  subtask_id: "10"
source_codes_1118: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "        }\r\n    }\r\n\
    \r\n    /* ?o?R???????o????? */\r\n    if(the_pOption->m_verbos == ON){\r\n        if(the_pAnzInfo->m_err == NULL){\r\n            printf(\"%s%s\\n\",the_szCurMetrics,MSG_METRIC_NORMAL);\r\n        }\r\n        else{\r\n            printf(\"%s%s%s\\n\",MSG_MEASURE_FILE_ERROR,the_szCurMetrics,MSG_METRIC_NORMAL);\r\n        }\r\n    }\r\n\
    \r\n\
    EXIT:;\r\n    /* Error File???o????? */\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9824"
  subtask_id: "7"
source_codes_936: 
  created_at: 2010-07-05 17:14:27
  error_line: "309"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9642"
  subtask_id: "9"
source_codes_804: 
  created_at: 2010-07-05 17:13:49
  error_line: "289"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9510"
  subtask_id: "11"
source_codes_381: 
  created_at: 2010-07-05 17:11:40
  error_line: 
  body: " File:\r\n      analyzeme.c\r\n Copyright:\r\n      Copyright (C) 2004 TOSHIBA CORPORATION. All Rights Reserved.\r\n Product:\r\n      AnalyzeMe\r\n Abstract:\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9087"
  subtask_id: "1"
source_codes_119: 
  created_at: 2010-07-05 17:09:13
  error_line: "218"
  body: "    if(the_pCmdOption != NULL){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8825"
  subtask_id: "5"
source_codes_1382: 
  created_at: 2010-07-05 17:19:43
  error_line: "23"
  body: |
    #include "AnzException.h"

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10088"
  subtask_id: "10"
source_codes_1250: 
  created_at: 2010-07-05 17:18:40
  error_line: 
  body: ""
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9956"
  subtask_id: "12"
source_codes_1119: 
  created_at: 2010-07-05 17:15:31
  error_line: "435"
  body: "    the_iRet = OutErrorFile(the_pAnzInfo->m_err);\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9825"
  subtask_id: "7"
source_codes_250: 
  created_at: 2010-07-05 17:09:20
  error_line: 
  body: "    }\r\n\
    \r\n    /* ?v???O?A?K?v??v?????????????O???[?o?????????????m?? */\r\n    the_iRet = AllocResultMemory(the_pOption);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8956"
  subtask_id: "5"
source_codes_382: 
  created_at: 2010-07-05 17:11:40
  error_line: "9"
  body: "      AnalyzeMe????C??????????`????\r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9088"
  subtask_id: "1"
source_codes_1383: 
  created_at: 2010-07-05 17:19:43
  error_line: 
  body: ""
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10089"
  subtask_id: "10"
source_codes_1251: 
  created_at: 2010-07-05 17:18:40
  error_line: "25"
  body: |
    AnzException::AnzException()

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9957"
  subtask_id: "12"
source_codes_937: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "            strcat(the_szCurMetrics,\"FileELOC\");\r\n        }\r\n    }\r\n\
    \r\n    /* ???G?x?v??Option???w?????? */\r\n    if(the_pOption->m_redundancy){\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9643"
  subtask_id: "9"
source_codes_805: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"???ELOC\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9511"
  subtask_id: "11"
source_codes_251: 
  created_at: 2010-07-05 17:09:20
  error_line: "390"
  body: "    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8957"
  subtask_id: "5"
source_codes_383: 
  created_at: 2010-07-05 17:11:40
  error_line: 
  body: " Author:\r\n      zhang-gh\r\n Date:\r\n      2004/08/20\r\n REVISION HISTORY:\r\n\
    \r\n"
  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9089"
  subtask_id: "1"
source_codes_1384: 
  created_at: 2010-07-05 17:19:43
  error_line: "25"
  body: |
    AnzException::AnzException()

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10090"
  subtask_id: "10"
source_codes_1252: 
  created_at: 2010-07-05 17:18:40
  error_line: 
  body: |+
    {}
    
  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9958"
  subtask_id: "12"
source_codes_1120: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "    if(the_iRet == ANZ_ERR_MEMORY_FAILED){\r\n        printf(\"%s\\n\",MSG_MOMORY_FAILED);\r\n    }\r\n\
    \r\n    /* ???????????????? */\r\n    /* ?R?}???h???C??????????Option??????????????? */\r\n    if(the_pCmdOption != NULL){\r\n        free(the_pCmdOption);\r\n        the_pCmdOption = NULL;\r\n    }\r\n    /* ?v?????List?????????? */\r\n    if(the_pMeasureItem != NULL) {\r\n        free(the_pMeasureItem);\r\n        the_pMeasureItem = NULL;\r\n    }\r\n\
    \r\n    /* AnalyzeMe????\\?[?X?????????? */\r\n    FreeAllResourc(the_pAnzInfo);\r\n\
    \r\n    if(g_bOutTime) {\r\n        ftime(&the_ed);\r\n        printf(\"\\nTotal times:%ld ms\\n\",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));\r\n    }\r\n\
    \r\n\
    #ifdef _DEBUG\r\n  CheckAllMem();\r\n  DestoryMemMan();\r\n\
    #endif\r\n    return the_iRet;\r\n\
    }\r\n\
    /**\r\n\
    *  AbortAnalyzeMe\r\n\
    *  AnalyzeMe Abort\r\n\
    *  @param\r\n\
    *  @return\r\n\
    *          ???\r\n\
    *  @author zhang-gh\r\n\
    */\r\n\
    #ifdef __GNUC__\r\n\
    void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )\r\n\
    #else\r\n\
    BOOL WINAPI AbortAnalyzeMe(DWORD dwCtrlType)\r\n\
    #endif\r\n\
    {\r\n    char the_errMsg[128]; /* ?G???[???b?Z?[?W */\r\n\
    #ifdef __GNUC__\r\n    /*  Signal */\r\n    switch(sig){\r\n    case SIGINT :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGINT(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGQUIT :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGQUIT(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGKILL :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGKILL(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGTERM :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGTERM(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGFPE :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGFPE(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGILL :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGILL(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGBUS :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGBUS(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGSEGV :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGSEGV(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case SIGSYS :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=SIGSYS(%d)\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    default :\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort Signal=%d\\n\",sig );\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n    }\r\n\
    \r\n    /* AnalyzeMe????\\?[?X?????????? */\r\n    FreeAllResourc(g_pAnzInfo);\r\n\
    #ifdef _DEBUG\r\n    CheckAllMem();\r\n    DestoryMemMan();\r\n\
    #endif\r\n    /* Signal Check */\r\n    switch(sig){\r\n    case SIGINT :\r\n    case SIGQUIT :\r\n    case SIGKILL :\r\n    case SIGTERM :\r\n        exit(0) ;\r\n    case SIGFPE :\r\n    case SIGILL :\r\n    case SIGBUS :\r\n\
    /*    case SIGIOT :*/\r\n    case SIGSEGV :\r\n    case SIGSYS :\r\n        abort() ;\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9826"
  subtask_id: "7"
source_codes_938: 
  created_at: 2010-07-05 17:14:27
  error_line: "316"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9644"
  subtask_id: "9"
source_codes_806: 
  created_at: 2010-07-05 17:13:49
  error_line: "293"
  body: "        else{\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9512"
  subtask_id: "11"
source_codes_252: 
  created_at: 2010-07-05 17:09:20
  error_line: 
  body: "        FreeResultMemory(the_pOption);\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8958"
  subtask_id: "5"
source_codes_384: 
  created_at: 2010-07-05 17:11:40
  error_line: "16"
  body: |
    */

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9090"
  subtask_id: "1"
source_codes_120: 
  created_at: 2010-07-05 17:09:13
  error_line: 
  body: "        free(the_pCmdOption);\r\n        the_pCmdOption = NULL;\r\n    }\r\n    /* ?v???????`?F?b?N???? */\r\n    the_iRet = CheckMeasureItem(the_pMeasureItem,the_iMeasureType);\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8826"
  subtask_id: "5"
source_codes_1385: 
  created_at: 2010-07-05 17:19:43
  error_line: 
  body: |+
    {}
    
  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10091"
  subtask_id: "10"
source_codes_1253: 
  created_at: 2010-07-05 17:18:40
  error_line: "28"
  body: |
    AnzException::AnzException(string in_useMsg)

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9959"
  subtask_id: "12"
source_codes_1121: 
  created_at: 2010-07-05 17:15:31
  error_line: "545"
  body: "    }\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9827"
  subtask_id: "7"
source_codes_939: 
  created_at: 2010-07-05 17:14:27
  error_line: 
  body: "            strcat(the_szCurMetrics,\"?A\");\r\n            strcat(the_szCurMetrics,\"McCabe????G?x\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:38
  analyzed_source_path_id: "168"
  id: "9645"
  subtask_id: "9"
source_codes_807: 
  created_at: 2010-07-05 17:13:49
  error_line: 
  body: "            strcat(the_szCurMetrics,\"???ELOC\");\r\n        }\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9513"
  subtask_id: "11"
source_codes_253: 
  created_at: 2010-07-05 17:09:20
  error_line: "392"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8959"
  subtask_id: "5"
source_codes_385: 
  created_at: 2010-07-05 17:11:40
  error_line: 
  body: |
    
    /*
        $AnalyzeMe 1.0.0.1$

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9091"
  subtask_id: "1"
source_codes_121: 
  created_at: 2010-07-05 17:09:13
  error_line: "224"
  body: "    if(the_iRet != ANZ_SUCCESS){\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8827"
  subtask_id: "5"
source_codes_1386: 
  created_at: 2010-07-05 17:19:43
  error_line: "28"
  body: |
    AnzException::AnzException(string in_useMsg)

  updated_at: 2011-05-13 10:35:07
  analyzed_source_path_id: "148"
  id: "10092"
  subtask_id: "10"
source_codes_1254: 
  created_at: 2010-07-05 17:18:40
  error_line: 
  body: |
    {}
    
    AnzException::~AnzException() throw() {}
    
    /* CommandLineExc */

  updated_at: 2011-05-13 10:35:02
  analyzed_source_path_id: "138"
  id: "9960"
  subtask_id: "12"
source_codes_1122: 
  created_at: 2010-07-05 17:15:31
  error_line: 
  body: "    exit(0) ;\r\n\
    #else\r\n    switch(dwCtrlType){\r\n    case CTRL_C_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Ctrl + C pressed!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case CTRL_BREAK_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Ctrl + Break pressed!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case CTRL_CLOSE_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Console Closed!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case CTRL_LOGOFF_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Windows is logoff!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    case CTRL_SHUTDOWN_EVENT:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Windows is shutdown!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    default:\r\n        sprintf(the_errMsg,\"AnalyzeMe Abort by Unknowe event!\\n\");\r\n        fprintf(g_fpErrorFile,\"%s\\n\",the_errMsg);\r\n        break;\r\n    }\r\n    /* AnalyzeMe????\\?[?X?????????? */\r\n    FreeAllResourc(g_pAnzInfo);\r\n\
    #ifdef _DEBUG\r\n    CheckAllMem();\r\n    DestoryMemMan();\r\n\
    #endif\r\n    ExitProcess(0);\r\n    return 0;\r\n\
    #endif\r\n\
    }\r\n\
    /**\r\n\
    *  SetSignal\r\n\
    *  ?V?O?????n???h???o?^\r\n\
    *  @param\r\n\
    *         ???\r\n\
    *  @return\r\n\
    *         ???\r\n\
    *  @author zhang-gh\r\n\
    */\r\n\
    void SetSignal()\r\n"
  updated_at: 2011-05-13 10:35:42
  analyzed_source_path_id: "171"
  id: "9828"
  subtask_id: "7"
source_codes_808: 
  created_at: 2010-07-05 17:13:49
  error_line: "296"
  body: "        if(strcmp(the_szCurMetrics,\"\") != 0){\r\n"
  updated_at: 2011-05-13 10:35:36
  analyzed_source_path_id: "165"
  id: "9514"
  subtask_id: "11"
source_codes_254: 
  created_at: 2010-07-05 17:09:20
  error_line: 
  body: "    }\r\n\
    \r\n    /* ?v?????? */\r\n    /* ????v?? */\r\n"
  updated_at: 2011-05-13 10:34:55
  analyzed_source_path_id: "118"
  id: "8960"
  subtask_id: "5"
source_codes_386: 
  created_at: 2010-07-05 17:11:40
  error_line: "20"
  body: |
    */

  updated_at: 2011-05-13 10:35:28
  analyzed_source_path_id: "151"
  id: "9092"
  subtask_id: "1"
source_codes_122: 
  created_at: 2010-07-05 17:09:13
  error_line: "225"
  body: "        goto EXIT;\r\n"
  updated_at: 2011-05-13 10:34:54
  analyzed_source_path_id: "118"
  id: "8828"
  subtask_id: "5"
