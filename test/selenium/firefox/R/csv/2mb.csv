"ID","Directory","Source name","File name","Line number","Character number","Rule number","Warning message","Code","Reference","Comment","Status"
3871,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",1,1,240,"[E] This file contains the control-M character at the end of a line.","    1:	/*
",,"description for warning (3871)","Registered"
3872,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",9,16,288,"[I] Source file '/home/www/TOSCANA_dev/BackEnd/AnalyzeTaskManager/work/1/work/sample_c_cpp/sample_c/src/analyzeme.c' has comments containing characters which are not members of the basic source character set.","    9:	      AnalyzeMeのメイン関数を定義する
",,"description for warning (3872)","Registered"
3873,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",16,2,2017,"Comment spans more than one line.","   16:	*/
",,"description for warning (3873)","Registered"
3874,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",20,2,2017,"Comment spans more than one line.","   20:	*/
",,"description for warning (3874)","Registered"
3875,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",21,1,838,"File has already been included directly from this file.","   21:	#include ""analyzeme.h""
",,"description for warning (3875)","Registered"
3876,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",21,1,839,"File has already been included indirectly from this file.","   21:	#include ""analyzeme.h""
",,"description for warning (3876)","Registered"
3877,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",21,23,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   21:	#include ""analyzeme.h""
",,"description for warning (3877)","Registered"
3878,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",22,1,839,"File has already been included indirectly from this file.","   22:	#include ""common.h""
",,"description for warning (3878)","Registered"
3879,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",23,1,839,"File has already been included indirectly from this file.","   23:	#include ""memory_manage.h""
",,"description for warning (3879)","Registered"
3880,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",23,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   23:	#include ""memory_manage.h""
",,"description for warning (3880)","Registered"
3881,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",24,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   24:	#include ""parse_cmdline.h""
",,,
3882,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",25,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   25:	#include ""common_measure.h""
",,,
3883,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",26,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   26:	#include ""trend_measure.h""
",,,
3884,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",27,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   27:	#include ""make_file_list.h""
",,,
3885,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",29,31,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   29:	#include ""get_process_macro.h""
",,,
3886,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",30,1,839,"File has already been included indirectly from this file.","   30:	#include &lt;signal.h&gt;
",,,
3887,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
3888,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
3889,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,13,3211,"The global identifier 'TRACEFILE' is defined but not used.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
3890,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,13,3408,"TRACEFILE' has external linkage but is being defined without any previous declaration.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
3891,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",36,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
3892,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",36,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
3893,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",36,13,3408,"APPLOGFILE' has external linkage but is being defined without any previous declaration.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
3894,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",44,7,3408,"g_fpLogFile' has external linkage but is being defined without any previous declaration.","   44:	FILE *g_fpLogFile = NULL;       /* Log File pointer */
",,,
3895,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",46,7,3211,"The global identifier 'g_fpTraceFile' is defined but not used.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
3896,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",46,7,3408,"g_fpTraceFile' has external linkage but is being defined without any previous declaration.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
3897,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",48,7,3408,"g_fpErrorFile' has external linkage but is being defined without any previous declaration.","   48:	FILE *g_fpErrorFile = NULL;
",,,
3898,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",50,6,3408,"g_bTrace' has external linkage but is being defined without any previous declaration.","   50:	bool g_bTrace           = false;    /* Trace flag */
",,,
3899,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",51,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
3900,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",51,6,3408,"g_szNVPath' has external linkage but is being defined without any previous declaration.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
3901,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",51,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
3902,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",52,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
3903,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",52,6,3408,"g_szOVPath' has external linkage but is being defined without any previous declaration.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
3904,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",52,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
3905,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",53,6,3408,"g_bTrendFile' has external linkage but is being defined without any previous declaration.","   53:	bool g_bTrendFile = false;
",,,
3906,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",55,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   55:	char *g_optionFileCont = NULL;
",,,
3907,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",55,7,3211,"The global identifier 'g_optionFileCont' is defined but not used.","   55:	char *g_optionFileCont = NULL;
",,,
3908,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",55,7,3408,"g_optionFileCont' has external linkage but is being defined without any previous declaration.","   55:	char *g_optionFileCont = NULL;
",,,
3909,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",57,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   57:	char *g_symbolFileCont = NULL;
",,,
3910,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",57,7,3211,"The global identifier 'g_symbolFileCont' is defined but not used.","   57:	char *g_symbolFileCont = NULL;
",,,
3911,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",57,7,3408,"g_symbolFileCont' has external linkage but is being defined without any previous declaration.","   57:	char *g_symbolFileCont = NULL;
",,,
3912,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",58,6,3408,"g_bOutTime' has external linkage but is being defined without any previous declaration.","   58:	bool g_bOutTime = false;
",,,
3913,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",59,15,3408,"g_pAnzInfo' has external linkage but is being defined without any previous declaration.","   59:	ST_AnalyzeMe *g_pAnzInfo;  /* AnalyzeMe管理情報 */
",,,
3914,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",69,2,2017,"Comment spans more than one line.","   69:	*/
",,,
3915,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",70,14,3227,"The parameter 'argc' is never modified and so it could be declared with the 'const' qualifier.","   70:	int main(int argc,char * argv[])
",,,
3916,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",70,19,3625,"Type 'char' has been used in the declaration of an object or a function.","   70:	int main(int argc,char * argv[])
",,,
3917,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",70,26,344,"K&amp;R compilers do not support function prototypes.","   70:	int main(int argc,char * argv[])
",,,
3918,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",75,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
3919,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",75,28,2211,"the_pMeasureItem' is not aligned with the previously declared identifier.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
3920,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
3921,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,10,2211,"the_szCurMetrics' is not aligned with the previously declared identifier.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
3922,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,10,3604,"Local arrays and structures cannot be initialised in K&amp;R C.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
3923,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,44,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
3924,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",80,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   80:	    char *the_pTrace = NULL;
",,,
3925,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",80,11,2211,"the_pTrace' is not aligned with the previously declared identifier.","   80:	    char *the_pTrace = NULL;
",,,
3926,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",80,11,3197,"The initialiser for 'the_pTrace' is always modified before being used.","   80:	    char *the_pTrace = NULL;
",,,
3927,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",81,25,2211,"the_st' is not aligned with the previously declared identifier.","   81:	    struct timeb the_st ;
",,,
3928,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",89,5,3198,"The value assigned to 'the_pAnzInfo' is always modified before being used.","   89:	    the_pAnzInfo = NULL;
",,,
3929,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",91,5,3198,"The value assigned to 'the_iRet' is always modified before being used.","   91:	    the_iRet = ANZ_SUCCESS;
",,,
3930,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",101,25,3122,"Hard-coded 'magic' string literal.","  101:	    the_pTrace = getenv(""AnzTrace"");
",,,
3931,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",102,28,2209,"This brace style is not consistent with 'exdented' style.","  102:	    if(the_pTrace != NULL) {
",,,
3932,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,306,"[I] Cast between a pointer to object and an integral type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3933,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,310,"Casting to different object pointer type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3934,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3935,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,489,"Increment or decrement operation performed on pointer.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3936,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__result' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3937,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3938,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3939,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3940,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3941,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3942,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3943,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3944,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3945,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3946,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3947,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,2100,"Integral promotion : unsigned char promoted to signed int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3948,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3949,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3112,"This statement has no side-effect - it can be removed.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3950,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3122,"Hard-coded 'magic' string literal.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3951,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3200,"__builtin_strcmp' returns a value which is not being used.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3952,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3953,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3954,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3955,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3956,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3957,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3958,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3959,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3960,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3961,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3325,"This control expression has a constant 'false' value.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3962,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3326,"An assignment operator is being used in a boolean expression.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3963,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3964,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3965,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3966,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3967,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3968,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3969,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3970,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3971,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3972,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3973,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3974,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3975,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3976,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3977,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3978,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3979,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3980,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3981,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3982,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3983,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3984,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3985,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3986,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3416,"This boolean expression contains side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3987,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3417,"The comma operator has been used outside a for-loop header.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3988,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3446,"The result operands of this conditional operator generate side effects","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3989,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3631,"Type 'char' has been used in a cast.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3990,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3760,"Implicit conversion: int to unsigned int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3991,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,35,3209,"__builtin_strcmp()' returns a value which is always ignored.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3992,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3993,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3994,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,36,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3995,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,43,2209,"This brace style is not consistent with 'exdented' style.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3996,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,43,3201,"This statement is unreachable.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3997,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",113,6,2017,"Comment spans more than one line.","  113:	    */
",,,
3998,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",114,36,3122,"Hard-coded 'magic' string literal.","  114:	    g_fpLogFile = fopen(APPLOGFILE,""w"");
",,,
3999,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",115,28,2209,"This brace style is not consistent with 'exdented' style.","  115:	    if(g_fpLogFile == NULL){
",,,
4000,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",116,9,3200,"printf' returns a value which is not being used.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
4001,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",116,16,3122,"Hard-coded 'magic' string literal.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
4002,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",120,5,702,"Result of sizeof operator is not explicitly cast.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
4003,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",120,63,3430,"Macro argument expression requires parentheses.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
4004,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",121,29,2209,"This brace style is not consistent with 'exdented' style.","  121:	    if(the_pAnzInfo == NULL){
",,,
4005,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",122,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  122:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
4006,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",123,18,2001,"A 'goto' statement has been used.","  123:	        goto EXIT;
",,,
4007,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",125,5,702,"Result of sizeof operator is not explicitly cast.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
4008,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",125,5,3200,"memset' returns a value which is not being used.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
4009,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",128,5,702,"Result of sizeof operator is not explicitly cast.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
4010,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",128,67,3430,"Macro argument expression requires parentheses.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
4011,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",129,39,2209,"This brace style is not consistent with 'exdented' style.","  129:	    if(the_pAnzInfo-&gt;m_option == NULL){
",,,
4012,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",130,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  130:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
4013,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",131,18,2001,"A 'goto' statement has been used.","  131:	        goto EXIT;
",,,
4014,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",133,5,702,"Result of sizeof operator is not explicitly cast.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
4015,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",133,5,3200,"memset' returns a value which is not being used.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
4016,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,702,"Result of sizeof operator is not explicitly cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
4017,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,3631,"Type 'char' has been used in a cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
4018,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,3633,"Type 'char' has been used in the operand of the sizeof operator.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
4019,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,3760,"Implicit conversion: int to unsigned int.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
4020,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",138,34,2209,"This brace style is not consistent with 'exdented' style.","  138:	    if(the_pMeasureItem == NULL) {
",,,
4021,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",139,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  139:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
4022,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",140,18,2001,"A 'goto' statement has been used.","  140:	        goto EXIT;
",,,
4023,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,5,702,"Result of sizeof operator is not explicitly cast.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
4024,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,5,3200,"memset' returns a value which is not being used.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
4025,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,36,3760,"Implicit conversion: int to unsigned int.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
4026,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,45,3633,"Type 'char' has been used in the operand of the sizeof operator.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
4027,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",150,5,3200,"strcpy' returns a value which is not being used.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
4028,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",150,34,3122,"Hard-coded 'magic' string literal.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
4029,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",154,5,3200,"strcpy' returns a value which is not being used.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
4030,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",154,39,3122,"Hard-coded 'magic' string literal.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
4031,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",155,5,3200,"strcpy' returns a value which is not being used.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
4032,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",155,38,3122,"Hard-coded 'magic' string literal.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
4033,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",156,5,3200,"strcpy' returns a value which is not being used.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
4034,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",156,38,3122,"Hard-coded 'magic' string literal.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
4035,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",165,32,3120,"Hard-coded 'magic' integer constant '70'.","  165:	    the_pOption-&gt;m_symThresh = 70;
",,,
4036,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",166,32,3120,"Hard-coded 'magic' integer constant '2'.","  166:	    the_pOption-&gt;m_minThresh = 2;
",,,
4037,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",169,5,702,"Result of sizeof operator is not explicitly cast.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
4038,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",169,59,3430,"Macro argument expression requires parentheses.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
4039,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",170,31,2209,"This brace style is not consistent with 'exdented' style.","  170:	    if(the_pCmdOption == NULL){
",,,
4040,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",171,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  171:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
4041,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",172,18,2001,"A 'goto' statement has been used.","  172:	        goto EXIT;
",,,
4042,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",174,5,702,"Result of sizeof operator is not explicitly cast.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
4043,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",174,5,3200,"memset' returns a value which is not being used.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
4044,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",180,5,3200,"strcpy' returns a value which is not being used.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
4045,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",180,37,3122,"Hard-coded 'magic' string literal.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
4046,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",184,5,3200,"strcpy' returns a value which is not being used.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
4047,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",184,42,3122,"Hard-coded 'magic' string literal.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
4048,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",185,5,3200,"strcpy' returns a value which is not being used.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
4049,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",185,41,3122,"Hard-coded 'magic' string literal.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
4050,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",186,5,3200,"strcpy' returns a value which is not being used.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
4051,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",186,41,3122,"Hard-coded 'magic' string literal.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
4052,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",195,35,3120,"Hard-coded 'magic' integer constant '70'.","  195:	    the_pCmdOption-&gt;m_symThresh = 70;
",,,
4053,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",196,35,3120,"Hard-coded 'magic' integer constant '2'.","  196:	    the_pCmdOption-&gt;m_minThresh = 2;
",,,
4054,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",200,32,2209,"This brace style is not consistent with 'exdented' style.","  200:	    if(the_iRet != ANZ_SUCCESS){
",,,
4055,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",201,18,2001,"A 'goto' statement has been used.","  201:	        goto EXIT;
",,,
4056,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",203,8,3344,"Value of control expression is not derived from an explicit logical operation.","  203:	    if(g_bOutTime) {
",,,
4057,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",203,20,2209,"This brace style is not consistent with 'exdented' style.","  203:	    if(g_bOutTime) {
",,,
4058,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",204,9,3200,"ftime' returns a value which is not being used.","  204:	        ftime(&amp;the_st);
",,,
4059,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",209,32,2209,"This brace style is not consistent with 'exdented' style.","  209:	    if(the_iRet != ANZ_SUCCESS){
",,,
4060,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",210,18,2001,"A 'goto' statement has been used.","  210:	        goto EXIT;
",,,
4061,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",214,32,2209,"This brace style is not consistent with 'exdented' style.","  214:	    if(the_iRet != ANZ_SUCCESS){
",,,
4062,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",215,18,2001,"A 'goto' statement has been used.","  215:	        goto EXIT;
",,,
4063,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",218,23,3355,"The result of this logical operation is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
4064,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",218,23,3358,"The value of this 'if' control expression is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
4065,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",218,31,2209,"This brace style is not consistent with 'exdented' style.","  218:	    if(the_pCmdOption != NULL){
",,,
4066,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",224,32,2209,"This brace style is not consistent with 'exdented' style.","  224:	    if(the_iRet != ANZ_SUCCESS){
",,,
4067,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",225,18,2001,"A 'goto' statement has been used.","  225:	        goto EXIT;
",,,
4068,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",229,32,2209,"This brace style is not consistent with 'exdented' style.","  229:	    if(the_iRet != ANZ_SUCCESS){
",,,
4069,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",230,18,2001,"A 'goto' statement has been used.","  230:	        goto EXIT;
",,,
4070,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",233,47,2209,"This brace style is not consistent with 'exdented' style.","  233:	    if(the_iMeasureType == ANZ_TREND_MEASURE) {
",,,
4071,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",234,13,3220,"Identifier declared at a nested level of block scope.","  234:	        int the_iType = -1;
",,,
4072,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",235,13,3220,"Identifier declared at a nested level of block scope.","  235:	        int the_pPos = -1;
",,,
4073,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",236,9,3200,"isDirOrFile' returns a value which is not being used.","  236:	        isDirOrFile(*the_pMeasureItem,&amp;the_iType);
",,,
4074,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",237,35,2209,"This brace style is not consistent with 'exdented' style.","  237:	        if(the_iType == ANZ_FILE) {
",,,
4075,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",242,30,2209,"This brace style is not consistent with 'exdented' style.","  242:	            if(the_pPos &gt; 0) {
",,,
4076,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",243,55,488,"Performing pointer arithmetic.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
4077,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",243,66,489,"Increment or decrement operation performed on pointer.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
4078,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",246,43,489,"Increment or decrement operation performed on pointer.","  246:	            GetPathPos(*(the_pMeasureItem + 1),&amp;the_pPos);
",,,
4079,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",248,30,2209,"This brace style is not consistent with 'exdented' style.","  248:	            if(the_pPos &gt; 0) {
",,,
4080,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,36,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
4081,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,42,3501,"This could be read as an old-style assignment operator. Spaces are needed to make it more readable.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
4082,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,61,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
4083,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,66,488,"Performing pointer arithmetic.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
4084,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,77,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
4085,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",252,13,3198,"The value assigned to 'the_iRet' is always modified before being used.","  252:	            the_iRet = ResetTrendPath(g_szNVPath);
",,,
4086,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",254,41,2209,"This brace style is not consistent with 'exdented' style.","  254:	            if(the_iRet != ANZ_SUCCESS) {
",,,
4087,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",255,26,2001,"A 'goto' statement has been used.","  255:	                goto EXIT;
",,,
4088,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",260,51,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
4089,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",260,57,3631,"Type 'char' has been used in a cast.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
4090,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",261,41,2209,"This brace style is not consistent with 'exdented' style.","  261:	    if(the_iRet == ANZ_NO_MEASURE_FILES){
",,,
4091,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",262,9,3200,"printf' returns a value which is not being used.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
4092,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",262,16,3122,"Hard-coded 'magic' string literal.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
4093,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",264,42,2209,"This brace style is not consistent with 'exdented' style.","  264:	    if(the_iRet == ANZ_ERR_MEMORY_FAILED){
",,,
4094,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",265,9,3200,"printf' returns a value which is not being used.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
4095,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",265,16,3122,"Hard-coded 'magic' string literal.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
4096,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",267,32,2209,"This brace style is not consistent with 'exdented' style.","  267:	    if(the_iRet != ANZ_SUCCESS){
",,,
4097,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",268,18,2001,"A 'goto' statement has been used.","  268:	        goto EXIT;
",,,
4098,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",272,37,2209,"This brace style is not consistent with 'exdented' style.","  272:	    if(the_pOption-&gt;m_fileLOC == ON){
",,,
4099,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",273,9,3200,"strcat' returns a value which is not being used.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
4100,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",273,33,3122,"Hard-coded 'magic' string literal.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
4101,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",276,40,2209,"This brace style is not consistent with 'exdented' style.","  276:	    if(the_pOption-&gt;m_redundancy == ON){
",,,
4102,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,306,"[I] Cast between a pointer to object and an integral type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4103,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,310,"Casting to different object pointer type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4104,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4105,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,489,"Increment or decrement operation performed on pointer.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4106,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__result' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4107,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4108,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4109,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4110,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4111,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4112,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4113,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4114,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4115,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4116,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4117,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,2100,"Integral promotion : unsigned char promoted to signed int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4118,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4119,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3112,"This statement has no side-effect - it can be removed.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4120,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3122,"Hard-coded 'magic' string literal.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4121,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3200,"__builtin_strcmp' returns a value which is not being used.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4122,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4123,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4124,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4125,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4126,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4127,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4128,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4129,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4130,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4131,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3326,"An assignment operator is being used in a boolean expression.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4132,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3346,"This 'if' control expression has a constant 'true' value.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4133,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4134,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4135,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4136,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4137,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4138,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4139,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4140,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4141,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4142,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4143,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4144,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4145,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4146,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4147,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4148,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4149,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4150,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4151,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4152,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4153,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4154,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4155,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4156,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3416,"This boolean expression contains side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4157,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3417,"The comma operator has been used outside a for-loop header.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4158,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3446,"The result operands of this conditional operator generate side effects","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4159,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3631,"Type 'char' has been used in a cast.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4160,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3760,"Implicit conversion: int to unsigned int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4161,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4162,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4163,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4164,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,45,2209,"This brace style is not consistent with 'exdented' style.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4165,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",278,13,3200,"strcat' returns a value which is not being used.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
4166,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",278,37,3122,"Hard-coded 'magic' string literal.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
4167,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",278,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
4168,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",279,13,3200,"strcat' returns a value which is not being used.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
4169,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",279,37,3122,"Hard-coded 'magic' string literal.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
4170,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",279,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
4171,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",281,13,2209,"This brace style is not consistent with 'exdented' style.","  281:	        else{
",,,
4172,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",281,13,3201,"This statement is unreachable.","  281:	        else{
",,,
4173,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",282,13,3200,"strcat' returns a value which is not being used.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
4174,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",282,37,3122,"Hard-coded 'magic' string literal.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
4175,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",282,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
4176,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",286,8,3344,"Value of control expression is not derived from an explicit logical operation.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
4177,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",286,31,2209,"This brace style is not consistent with 'exdented' style.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
4178,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,306,"[I] Cast between a pointer to object and an integral type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4179,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,310,"Casting to different object pointer type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4180,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4181,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,489,"Increment or decrement operation performed on pointer.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4182,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__result' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4183,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4184,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4185,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4186,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4187,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4188,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4189,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4190,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4191,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4192,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4193,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,2100,"Integral promotion : unsigned char promoted to signed int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4194,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4195,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3112,"This statement has no side-effect - it can be removed.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4196,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3122,"Hard-coded 'magic' string literal.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4197,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3200,"__builtin_strcmp' returns a value which is not being used.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4198,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4199,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4200,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4201,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4202,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4203,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4204,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4205,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4206,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4207,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3326,"An assignment operator is being used in a boolean expression.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4208,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3346,"This 'if' control expression has a constant 'true' value.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4209,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4210,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4211,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4212,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4213,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4214,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4215,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4216,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4217,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4218,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4219,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4220,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4221,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4222,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4223,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4224,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4225,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4226,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4227,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4228,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4229,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4230,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4231,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4232,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3416,"This boolean expression contains side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4233,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3417,"The comma operator has been used outside a for-loop header.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4234,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3446,"The result operands of this conditional operator generate side effects","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4235,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3631,"Type 'char' has been used in a cast.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4236,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3760,"Implicit conversion: int to unsigned int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4237,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4238,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4239,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4240,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,45,2209,"This brace style is not consistent with 'exdented' style.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4241,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",288,13,3200,"strcat' returns a value which is not being used.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
4242,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",288,37,3122,"Hard-coded 'magic' string literal.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
4243,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",288,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
4244,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",289,13,3200,"strcat' returns a value which is not being used.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
4245,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",289,37,3122,"Hard-coded 'magic' string literal.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
4246,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",289,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
4247,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",291,13,2209,"This brace style is not consistent with 'exdented' style.","  291:	        else{
",,,
4248,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",291,13,3201,"This statement is unreachable.","  291:	        else{
",,,
4249,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",292,13,3200,"strcat' returns a value which is not being used.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
4250,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",292,37,3122,"Hard-coded 'magic' string literal.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
4251,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",292,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
4252,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",296,8,3344,"Value of control expression is not derived from an explicit logical operation.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
4253,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",296,28,2209,"This brace style is not consistent with 'exdented' style.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
4254,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,306,"[I] Cast between a pointer to object and an integral type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4255,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,310,"Casting to different object pointer type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4256,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4257,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,489,"Increment or decrement operation performed on pointer.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4258,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__result' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4259,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4260,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4261,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4262,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4263,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4264,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4265,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4266,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4267,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4268,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4269,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,2100,"Integral promotion : unsigned char promoted to signed int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4270,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4271,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3112,"This statement has no side-effect - it can be removed.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4272,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3122,"Hard-coded 'magic' string literal.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4273,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3200,"__builtin_strcmp' returns a value which is not being used.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4274,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4275,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4276,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4277,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4278,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4279,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4280,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4281,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4282,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4283,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3326,"An assignment operator is being used in a boolean expression.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4284,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3346,"This 'if' control expression has a constant 'true' value.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4285,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4286,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4287,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4288,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4289,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4290,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4291,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4292,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4293,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4294,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4295,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4296,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4297,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4298,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4299,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4300,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4301,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4302,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4303,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4304,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4305,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4306,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4307,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4308,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3416,"This boolean expression contains side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4309,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3417,"The comma operator has been used outside a for-loop header.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4310,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3446,"The result operands of this conditional operator generate side effects","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4311,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3631,"Type 'char' has been used in a cast.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4312,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3760,"Implicit conversion: int to unsigned int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4313,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4314,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4315,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4316,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,45,2209,"This brace style is not consistent with 'exdented' style.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4317,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",298,13,3200,"strcat' returns a value which is not being used.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
4318,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",298,37,3122,"Hard-coded 'magic' string literal.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
4319,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",298,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
4320,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",299,13,3200,"strcat' returns a value which is not being used.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
4321,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",299,37,3122,"Hard-coded 'magic' string literal.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
4322,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",299,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
4323,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",301,13,2209,"This brace style is not consistent with 'exdented' style.","  301:	        else{
",,,
4324,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",301,13,3201,"This statement is unreachable.","  301:	        else{
",,,
4325,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",302,13,3200,"strcat' returns a value which is not being used.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
4326,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",302,37,3122,"Hard-coded 'magic' string literal.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
4327,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",302,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
4328,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,306,"[I] Cast between a pointer to object and an integral type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4329,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,310,"Casting to different object pointer type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4330,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4331,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,489,"Increment or decrement operation performed on pointer.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4332,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__result' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4333,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4334,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4335,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4336,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4337,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4338,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4339,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4340,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4341,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4342,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4343,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,2100,"Integral promotion : unsigned char promoted to signed int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4344,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4345,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3112,"This statement has no side-effect - it can be removed.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4346,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3122,"Hard-coded 'magic' string literal.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4347,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3200,"__builtin_strcmp' returns a value which is not being used.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4348,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4349,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4350,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4351,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4352,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4353,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4354,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4355,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4356,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4357,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3326,"An assignment operator is being used in a boolean expression.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4358,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3346,"This 'if' control expression has a constant 'true' value.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4359,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4360,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4361,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4362,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4363,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4364,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4365,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4366,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4367,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4368,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4369,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4370,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4371,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4372,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4373,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4374,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4375,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4376,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4377,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4378,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4379,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4380,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4381,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4382,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3416,"This boolean expression contains side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4383,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3417,"The comma operator has been used outside a for-loop header.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4384,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3446,"The result operands of this conditional operator generate side effects","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4385,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3631,"Type 'char' has been used in a cast.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4386,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3760,"Implicit conversion: int to unsigned int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4387,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4388,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4389,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4390,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,45,2209,"This brace style is not consistent with 'exdented' style.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4391,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",305,13,3200,"strcat' returns a value which is not being used.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
4392,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",305,37,3122,"Hard-coded 'magic' string literal.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
4393,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",305,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
4394,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",306,13,3200,"strcat' returns a value which is not being used.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
4395,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",306,37,3122,"Hard-coded 'magic' string literal.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
4396,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",308,13,2209,"This brace style is not consistent with 'exdented' style.","  308:	        else{
",,,
4397,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",308,13,3201,"This statement is unreachable.","  308:	        else{
",,,
4398,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",309,13,3200,"strcat' returns a value which is not being used.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
4399,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",309,37,3122,"Hard-coded 'magic' string literal.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
4400,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",314,8,3344,"Value of control expression is not derived from an explicit logical operation.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
4401,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",314,34,2209,"This brace style is not consistent with 'exdented' style.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
4402,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,306,"[I] Cast between a pointer to object and an integral type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4403,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,310,"Casting to different object pointer type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4404,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4405,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,489,"Increment or decrement operation performed on pointer.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4406,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__result' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4407,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4408,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4409,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4410,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4411,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4412,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4413,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4414,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4415,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4416,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4417,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,2100,"Integral promotion : unsigned char promoted to signed int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4418,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4419,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3112,"This statement has no side-effect - it can be removed.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4420,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3122,"Hard-coded 'magic' string literal.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4421,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3200,"__builtin_strcmp' returns a value which is not being used.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4422,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4423,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4424,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4425,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4426,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4427,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4428,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4429,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4430,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4431,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3326,"An assignment operator is being used in a boolean expression.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4432,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3346,"This 'if' control expression has a constant 'true' value.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4433,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4434,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4435,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4436,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4437,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4438,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4439,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4440,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4441,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4442,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4443,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4444,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4445,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4446,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4447,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4448,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4449,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4450,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4451,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4452,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4453,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4454,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4455,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4456,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3416,"This boolean expression contains side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4457,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3417,"The comma operator has been used outside a for-loop header.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4458,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3446,"The result operands of this conditional operator generate side effects","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4459,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3631,"Type 'char' has been used in a cast.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4460,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3760,"Implicit conversion: int to unsigned int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4461,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4462,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4463,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4464,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,45,2209,"This brace style is not consistent with 'exdented' style.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4465,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",316,13,3200,"strcat' returns a value which is not being used.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
4466,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",316,37,3122,"Hard-coded 'magic' string literal.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
4467,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",316,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
4468,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",317,13,3200,"strcat' returns a value which is not being used.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
4469,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",317,37,3122,"Hard-coded 'magic' string literal.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
4470,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",317,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
4471,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",319,13,2209,"This brace style is not consistent with 'exdented' style.","  319:	        else{
",,,
4472,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",319,13,3201,"This statement is unreachable.","  319:	        else{
",,,
4473,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",320,13,3200,"strcat' returns a value which is not being used.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
4474,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",320,37,3122,"Hard-coded 'magic' string literal.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
4475,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",320,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
4476,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,306,"[I] Cast between a pointer to object and an integral type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4477,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,310,"Casting to different object pointer type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4478,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4479,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,489,"Increment or decrement operation performed on pointer.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4480,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__result' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4481,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4482,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4483,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4484,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4485,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4486,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4487,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4488,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4489,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4490,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4491,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,2100,"Integral promotion : unsigned char promoted to signed int.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4492,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4493,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3112,"This statement has no side-effect - it can be removed.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4494,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3122,"Hard-coded 'magic' string literal.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4495,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3200,"__builtin_strcmp' returns a value which is not being used.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4496,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4497,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4498,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4499,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4500,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4501,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4502,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4503,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4504,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4505,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3326,"An assignment operator is being used in a boolean expression.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4506,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3346,"This 'if' control expression has a constant 'true' value.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4507,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4508,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4509,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4510,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4511,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4512,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4513,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4514,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4515,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4516,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4517,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4518,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4519,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4520,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4521,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4522,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4523,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4524,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4525,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4526,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4527,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4528,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4529,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4530,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3416,"This boolean expression contains side effects.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4531,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3417,"The comma operator has been used outside a for-loop header.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4532,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3446,"The result operands of this conditional operator generate side effects","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4533,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3631,"Type 'char' has been used in a cast.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4534,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3760,"Implicit conversion: int to unsigned int.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4535,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4536,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4537,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4538,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,45,2209,"This brace style is not consistent with 'exdented' style.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4539,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",324,13,3200,"strcat' returns a value which is not being used.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
4540,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",324,37,3122,"Hard-coded 'magic' string literal.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
4541,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",324,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
4542,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",325,13,3200,"strcat' returns a value which is not being used.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
4543,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",325,37,3122,"Hard-coded 'magic' string literal.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
4544,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",325,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
4545,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",327,13,2209,"This brace style is not consistent with 'exdented' style.","  327:	        else{
",,,
4546,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",327,13,3201,"This statement is unreachable.","  327:	        else{
",,,
4547,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",328,13,3200,"strcat' returns a value which is not being used.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
4548,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",328,37,3122,"Hard-coded 'magic' string literal.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
4549,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",328,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
4550,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",333,8,3344,"Value of control expression is not derived from an explicit logical operation.","  333:	    if(the_pOption-&gt;m_trend){
",,,
4551,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",333,29,2209,"This brace style is not consistent with 'exdented' style.","  333:	    if(the_pOption-&gt;m_trend){
",,,
4552,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,306,"[I] Cast between a pointer to object and an integral type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4553,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,310,"Casting to different object pointer type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4554,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4555,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,489,"Increment or decrement operation performed on pointer.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4556,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__result' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4557,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4558,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4559,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4560,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4561,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4562,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4563,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4564,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4565,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4566,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4567,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,2100,"Integral promotion : unsigned char promoted to signed int.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4568,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4569,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3112,"This statement has no side-effect - it can be removed.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4570,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3122,"Hard-coded 'magic' string literal.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4571,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3200,"__builtin_strcmp' returns a value which is not being used.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4572,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4573,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4574,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4575,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4576,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4577,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4578,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4579,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4580,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4581,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3326,"An assignment operator is being used in a boolean expression.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4582,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3346,"This 'if' control expression has a constant 'true' value.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4583,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4584,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4585,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4586,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4587,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4588,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4589,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4590,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4591,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4592,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4593,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4594,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4595,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4596,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4597,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4598,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4599,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4600,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4601,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4602,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4603,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4604,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4605,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4606,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3416,"This boolean expression contains side effects.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4607,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3417,"The comma operator has been used outside a for-loop header.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4608,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3446,"The result operands of this conditional operator generate side effects","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4609,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3631,"Type 'char' has been used in a cast.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4610,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3760,"Implicit conversion: int to unsigned int.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4611,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4612,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4613,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4614,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,45,2209,"This brace style is not consistent with 'exdented' style.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4615,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",335,13,3200,"strcat' returns a value which is not being used.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
4616,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",335,37,3122,"Hard-coded 'magic' string literal.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
4617,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",335,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
4618,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",336,13,3200,"strcat' returns a value which is not being used.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
4619,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",336,37,3122,"Hard-coded 'magic' string literal.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
4620,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",336,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
4621,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",338,13,2209,"This brace style is not consistent with 'exdented' style.","  338:	        else{
",,,
4622,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",338,13,3201,"This statement is unreachable.","  338:	        else{
",,,
4623,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",339,13,3200,"strcat' returns a value which is not being used.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
4624,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",339,37,3122,"Hard-coded 'magic' string literal.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
4625,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",339,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
4626,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",341,9,3200,"strcat' returns a value which is not being used.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
4627,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",341,33,3122,"Hard-coded 'magic' string literal.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
4628,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",341,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
4629,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",345,8,3344,"Value of control expression is not derived from an explicit logical operation.","  345:	    if(the_pOption-&gt;m_funcTrend){
",,,
4630,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",345,33,2209,"This brace style is not consistent with 'exdented' style.","  345:	    if(the_pOption-&gt;m_funcTrend){
",,,
4631,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,306,"[I] Cast between a pointer to object and an integral type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4632,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,310,"Casting to different object pointer type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4633,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4634,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,489,"Increment or decrement operation performed on pointer.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4635,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__result' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4636,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4637,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4638,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4639,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4640,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4641,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4642,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4643,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4644,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4645,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4646,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,2100,"Integral promotion : unsigned char promoted to signed int.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4647,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4648,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3112,"This statement has no side-effect - it can be removed.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4649,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3122,"Hard-coded 'magic' string literal.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4650,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3200,"__builtin_strcmp' returns a value which is not being used.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4651,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4652,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4653,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4654,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4655,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4656,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4657,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4658,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4659,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4660,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3326,"An assignment operator is being used in a boolean expression.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4661,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3346,"This 'if' control expression has a constant 'true' value.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4662,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4663,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4664,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4665,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4666,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4667,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4668,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4669,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4670,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4671,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4672,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4673,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4674,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4675,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4676,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4677,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4678,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4679,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4680,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4681,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4682,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4683,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4684,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4685,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3416,"This boolean expression contains side effects.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4686,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3417,"The comma operator has been used outside a for-loop header.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4687,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3446,"The result operands of this conditional operator generate side effects","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4688,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3631,"Type 'char' has been used in a cast.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4689,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3760,"Implicit conversion: int to unsigned int.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4690,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4691,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4692,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4693,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,45,2209,"This brace style is not consistent with 'exdented' style.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4694,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",347,13,3200,"strcat' returns a value which is not being used.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
4695,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",347,37,3122,"Hard-coded 'magic' string literal.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
4696,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",347,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
4697,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",348,13,3200,"strcat' returns a value which is not being used.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
4698,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",348,37,3122,"Hard-coded 'magic' string literal.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
4699,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",348,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
4700,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",350,13,2209,"This brace style is not consistent with 'exdented' style.","  350:	        else{
",,,
4701,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",350,13,3201,"This statement is unreachable.","  350:	        else{
",,,
4702,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",351,13,3200,"strcat' returns a value which is not being used.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
4703,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",351,37,3122,"Hard-coded 'magic' string literal.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
4704,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",351,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
4705,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,306,"[I] Cast between a pointer to object and an integral type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4706,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,310,"Casting to different object pointer type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4707,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4708,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,489,"Increment or decrement operation performed on pointer.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4709,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__result' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4710,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4711,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4712,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4713,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4714,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4715,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4716,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4717,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4718,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4719,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4720,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,2100,"Integral promotion : unsigned char promoted to signed int.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4721,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4722,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3112,"This statement has no side-effect - it can be removed.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4723,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3122,"Hard-coded 'magic' string literal.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4724,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3200,"__builtin_strcmp' returns a value which is not being used.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4725,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4726,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4727,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4728,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4729,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4730,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4731,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4732,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4733,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4734,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3326,"An assignment operator is being used in a boolean expression.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4735,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3346,"This 'if' control expression has a constant 'true' value.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4736,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4737,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4738,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4739,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4740,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4741,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4742,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4743,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4744,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4745,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4746,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4747,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4748,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4749,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4750,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4751,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4752,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4753,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4754,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4755,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4756,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4757,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4758,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4759,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3416,"This boolean expression contains side effects.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4760,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3417,"The comma operator has been used outside a for-loop header.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4761,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3446,"The result operands of this conditional operator generate side effects","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4762,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3631,"Type 'char' has been used in a cast.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4763,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3760,"Implicit conversion: int to unsigned int.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4764,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4765,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4766,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4767,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,45,2209,"This brace style is not consistent with 'exdented' style.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4768,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",354,13,3200,"strcat' returns a value which is not being used.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
4769,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",354,37,3122,"Hard-coded 'magic' string literal.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
4770,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",354,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
4771,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",355,13,3200,"strcat' returns a value which is not being used.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
4772,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",355,37,3122,"Hard-coded 'magic' string literal.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
4773,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",355,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
4774,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",357,13,2209,"This brace style is not consistent with 'exdented' style.","  357:	        else{
",,,
4775,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",357,13,3201,"This statement is unreachable.","  357:	        else{
",,,
4776,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",358,13,3200,"strcat' returns a value which is not being used.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
4777,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",358,37,3122,"Hard-coded 'magic' string literal.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
4778,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",358,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
4779,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,306,"[I] Cast between a pointer to object and an integral type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4780,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,310,"Casting to different object pointer type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4781,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4782,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,489,"Increment or decrement operation performed on pointer.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4783,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__result' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4784,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4785,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4786,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4787,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4788,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4789,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4790,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4791,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4792,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4793,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4794,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,2100,"Integral promotion : unsigned char promoted to signed int.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4795,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4796,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3112,"This statement has no side-effect - it can be removed.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4797,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3122,"Hard-coded 'magic' string literal.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4798,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3200,"__builtin_strcmp' returns a value which is not being used.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4799,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4800,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4801,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4802,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4803,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4804,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4805,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4806,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4807,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4808,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3326,"An assignment operator is being used in a boolean expression.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4809,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3346,"This 'if' control expression has a constant 'true' value.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4810,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4811,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4812,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4813,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4814,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4815,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4816,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4817,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4818,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4819,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4820,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4821,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4822,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4823,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4824,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4825,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4826,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4827,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4828,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4829,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4830,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4831,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4832,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4833,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3416,"This boolean expression contains side effects.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4834,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3417,"The comma operator has been used outside a for-loop header.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4835,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3446,"The result operands of this conditional operator generate side effects","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4836,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3631,"Type 'char' has been used in a cast.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4837,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3760,"Implicit conversion: int to unsigned int.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4838,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4839,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4840,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4841,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,45,2209,"This brace style is not consistent with 'exdented' style.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4842,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",361,13,3200,"strcat' returns a value which is not being used.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
4843,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",361,37,3122,"Hard-coded 'magic' string literal.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
4844,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",361,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
4845,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",362,13,3200,"strcat' returns a value which is not being used.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
4846,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",362,37,3122,"Hard-coded 'magic' string literal.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
4847,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",362,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
4848,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",364,13,2209,"This brace style is not consistent with 'exdented' style.","  364:	        else{
",,,
4849,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",364,13,3201,"This statement is unreachable.","  364:	        else{
",,,
4850,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",365,13,3200,"strcat' returns a value which is not being used.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
4851,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",365,37,3122,"Hard-coded 'magic' string literal.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
4852,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",365,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
4853,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,306,"[I] Cast between a pointer to object and an integral type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4854,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,310,"Casting to different object pointer type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4855,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4856,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,489,"Increment or decrement operation performed on pointer.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4857,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__result' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4858,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4859,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4860,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4861,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4862,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4863,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4864,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4865,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4866,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4867,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4868,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,2100,"Integral promotion : unsigned char promoted to signed int.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4869,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4870,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3112,"This statement has no side-effect - it can be removed.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4871,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3122,"Hard-coded 'magic' string literal.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4872,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3200,"__builtin_strcmp' returns a value which is not being used.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4873,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4874,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4875,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4876,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4877,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4878,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4879,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4880,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4881,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4882,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3326,"An assignment operator is being used in a boolean expression.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4883,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3346,"This 'if' control expression has a constant 'true' value.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4884,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4885,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4886,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4887,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4888,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4889,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4890,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4891,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4892,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4893,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4894,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4895,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4896,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4897,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4898,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4899,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4900,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4901,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4902,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4903,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4904,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4905,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4906,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4907,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3416,"This boolean expression contains side effects.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4908,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3417,"The comma operator has been used outside a for-loop header.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4909,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3446,"The result operands of this conditional operator generate side effects","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4910,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3631,"Type 'char' has been used in a cast.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4911,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3760,"Implicit conversion: int to unsigned int.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4912,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4913,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4914,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4915,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,45,2209,"This brace style is not consistent with 'exdented' style.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4916,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",368,13,3200,"strcat' returns a value which is not being used.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
4917,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",368,37,3122,"Hard-coded 'magic' string literal.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
4918,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",368,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
4919,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",369,13,3200,"strcat' returns a value which is not being used.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
4920,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",369,37,3122,"Hard-coded 'magic' string literal.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
4921,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",369,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
4922,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",371,13,2209,"This brace style is not consistent with 'exdented' style.","  371:	        else{
",,,
4923,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",371,13,3201,"This statement is unreachable.","  371:	        else{
",,,
4924,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",372,13,3200,"strcat' returns a value which is not being used.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
4925,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",372,37,3122,"Hard-coded 'magic' string literal.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
4926,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",372,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
4927,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",377,37,2209,"This brace style is not consistent with 'exdented' style.","  377:	    if(the_pOption-&gt;m_verbos == ON ){
",,,
4928,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",379,9,3200,"printf' returns a value which is not being used.","  379:	        printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_START);
",,,
4929,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",379,16,3122,"Hard-coded 'magic' string literal.","  379:	        printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_START);
",,,
4930,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",384,32,2209,"This brace style is not consistent with 'exdented' style.","  384:	    if(the_iRet != ANZ_SUCCESS){
",,,
4931,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",385,18,2001,"A 'goto' statement has been used.","  385:	        goto EXIT;
",,,
4932,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",390,32,2209,"This brace style is not consistent with 'exdented' style.","  390:	    if(the_iRet != ANZ_SUCCESS){
",,,
4933,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",392,18,2001,"A 'goto' statement has been used.","  392:	        goto EXIT;
",,,
4934,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",397,47,2209,"This brace style is not consistent with 'exdented' style.","  397:	    if(the_iMeasureType == ANZ_COMMON_MEASURE){
",,,
4935,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",400,36,2209,"This brace style is not consistent with 'exdented' style.","  400:	        if(the_iRet != ANZ_SUCCESS){
",,,
4936,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",401,22,2001,"A 'goto' statement has been used.","  401:	            goto EXIT;
",,,
4937,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",404,36,2209,"This brace style is not consistent with 'exdented' style.","  404:	        if(the_iRet != ANZ_SUCCESS){
",,,
4938,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",405,13,3200,"printf' returns a value which is not being used.","  405:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
4939,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",405,20,3122,"Hard-coded 'magic' string literal.","  405:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
4940,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",406,22,2001,"A 'goto' statement has been used.","  406:	            goto EXIT;
",,,
4941,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",410,46,2209,"This brace style is not consistent with 'exdented' style.","  410:	    if(the_iMeasureType == ANZ_TREND_MEASURE){
",,,
4942,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",413,36,2209,"This brace style is not consistent with 'exdented' style.","  413:	        if(the_iRet != ANZ_SUCCESS){
",,,
4943,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",414,22,2001,"A 'goto' statement has been used.","  414:	            goto EXIT;
",,,
4944,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",417,36,2209,"This brace style is not consistent with 'exdented' style.","  417:	        if(the_iRet != ANZ_SUCCESS){
",,,
4945,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",418,13,3200,"printf' returns a value which is not being used.","  418:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
4946,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",418,20,3122,"Hard-coded 'magic' string literal.","  418:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
4947,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",419,22,2001,"A 'goto' statement has been used.","  419:	            goto EXIT;
",,,
4948,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",424,36,2209,"This brace style is not consistent with 'exdented' style.","  424:	    if(the_pOption-&gt;m_verbos == ON){
",,,
4949,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",425,40,2209,"This brace style is not consistent with 'exdented' style.","  425:	        if(the_pAnzInfo-&gt;m_err == NULL){
",,,
4950,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",426,13,3200,"printf' returns a value which is not being used.","  426:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
4951,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",426,20,3122,"Hard-coded 'magic' string literal.","  426:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
4952,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",428,13,2209,"This brace style is not consistent with 'exdented' style.","  428:	        else{
",,,
4953,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",429,13,3200,"printf' returns a value which is not being used.","  429:	            printf(""%s%s%s\n"",MSG_MEASURE_FILE_ERROR,the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
4954,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",429,20,3122,"Hard-coded 'magic' string literal.","  429:	            printf(""%s%s%s\n"",MSG_MEASURE_FILE_ERROR,the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
4955,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,1,2015,"This label is not a case or default label for a switch statement.","  433:	EXIT:;
",,,
4956,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,1,2201,"This indentation is not consistent with previous indentation in this file.","  433:	EXIT:;
",,,
4957,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,6,3109,"Empty statement (';' on its own) - if this is deliberate, it is best to put ';' on a line by itself.","  433:	EXIT:;
",,,
4958,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,6,3139,"Null statement is obscured by code or comment on the same line.","  433:	EXIT:;
",,,
4959,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",435,29,505,"[U] Dereferencing pointer value that is apparently NULL.","  435:	    the_iRet = OutErrorFile(the_pAnzInfo-&gt;m_err);
",,,
4960,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",436,42,2209,"This brace style is not consistent with 'exdented' style.","  436:	    if(the_iRet == ANZ_ERR_MEMORY_FAILED){
",,,
4961,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",437,9,3200,"printf' returns a value which is not being used.","  437:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
4962,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",437,16,3122,"Hard-coded 'magic' string literal.","  437:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
4963,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",442,31,2209,"This brace style is not consistent with 'exdented' style.","  442:	    if(the_pCmdOption != NULL){
",,,
4964,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",444,9,3199,"The value of 'the_pCmdOption' is never used following this assignment.","  444:	        the_pCmdOption = NULL;
",,,
4965,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",447,34,2209,"This brace style is not consistent with 'exdented' style.","  447:	    if(the_pMeasureItem != NULL) {
",,,
4966,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",449,9,3199,"The value of 'the_pMeasureItem' is never used following this assignment.","  449:	        the_pMeasureItem = NULL;
",,,
4967,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",455,8,3344,"Value of control expression is not derived from an explicit logical operation.","  455:	    if(g_bOutTime) {
",,,
4968,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",455,20,2209,"This brace style is not consistent with 'exdented' style.","  455:	    if(g_bOutTime) {
",,,
4969,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",456,9,3200,"ftime' returns a value which is not being used.","  456:	        ftime(&amp;the_ed);
",,,
4970,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,9,3200,"printf' returns a value which is not being used.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
4971,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,9,3395,"Operators in the set + - * / with different precedence have been used. Extra parentheses recommended.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
4972,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,9,3401,"Possible precedence confusion: extra parentheses are recommended here.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
4973,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,16,3122,"Hard-coded 'magic' string literal.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
4974,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,69,1253,"Unsuffixed integer constant implicitly converted to another type.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
4975,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,71,3120,"Hard-coded 'magic' integer constant '1000'.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
4976,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,94,2101,"Integral promotion : unsigned short promoted to signed int.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
4977,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",473,2,2017,"Comment spans more than one line.","  473:	*/
",,,
4978,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,26,3227,"The parameter 'sig' is never modified and so it could be declared with the 'const' qualifier.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
4979,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,35,3206,"The parameter 'code' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
4980,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,47,3206,"The parameter 'scp' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
4981,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,53,3625,"Type 'char' has been used in the declaration of an object or a function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
4982,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,59,344,"K&amp;R compilers do not support function prototypes.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
4983,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,59,3206,"The parameter 'addr' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
4984,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",480,5,3625,"Type 'char' has been used in the declaration of an object or a function.","  480:	    char the_errMsg[128]; /* エラーメッセージ */
",,,
4985,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",480,21,3132,"Hard coded 'magic' number '128' used to define the size of an array.","  480:	    char the_errMsg[128]; /* エラーメッセージ */
",,,
4986,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",483,16,2209,"This brace style is not consistent with 'exdented' style.","  483:	    switch(sig){
",,,
4987,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",485,9,3200,"sprintf' returns a value which is not being used.","  485:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGINT(%d)\n"",sig );
",,,
4988,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",485,28,3122,"Hard-coded 'magic' string literal.","  485:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGINT(%d)\n"",sig );
",,,
4989,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",486,9,3200,"fprintf' returns a value which is not being used.","  486:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
4990,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",486,31,3122,"Hard-coded 'magic' string literal.","  486:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
4991,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",489,9,3200,"sprintf' returns a value which is not being used.","  489:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGQUIT(%d)\n"",sig );
",,,
4992,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",489,28,3122,"Hard-coded 'magic' string literal.","  489:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGQUIT(%d)\n"",sig );
",,,
4993,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",490,9,3200,"fprintf' returns a value which is not being used.","  490:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
4994,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",490,31,3122,"Hard-coded 'magic' string literal.","  490:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
4995,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",493,9,3200,"sprintf' returns a value which is not being used.","  493:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGKILL(%d)\n"",sig );
",,,
4996,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",493,28,3122,"Hard-coded 'magic' string literal.","  493:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGKILL(%d)\n"",sig );
",,,
4997,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",494,9,3200,"fprintf' returns a value which is not being used.","  494:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
4998,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",494,31,3122,"Hard-coded 'magic' string literal.","  494:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
4999,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",497,9,3200,"sprintf' returns a value which is not being used.","  497:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGTERM(%d)\n"",sig );
",,,
5000,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",497,28,3122,"Hard-coded 'magic' string literal.","  497:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGTERM(%d)\n"",sig );
",,,
5001,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",498,9,3200,"fprintf' returns a value which is not being used.","  498:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5002,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",498,31,3122,"Hard-coded 'magic' string literal.","  498:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5003,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",501,9,3200,"sprintf' returns a value which is not being used.","  501:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGFPE(%d)\n"",sig );
",,,
5004,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",501,28,3122,"Hard-coded 'magic' string literal.","  501:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGFPE(%d)\n"",sig );
",,,
5005,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",502,9,3200,"fprintf' returns a value which is not being used.","  502:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5006,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",502,31,3122,"Hard-coded 'magic' string literal.","  502:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5007,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",505,9,3200,"sprintf' returns a value which is not being used.","  505:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGILL(%d)\n"",sig );
",,,
5008,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",505,28,3122,"Hard-coded 'magic' string literal.","  505:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGILL(%d)\n"",sig );
",,,
5009,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",506,9,3200,"fprintf' returns a value which is not being used.","  506:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5010,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",506,31,3122,"Hard-coded 'magic' string literal.","  506:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5011,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",509,9,3200,"sprintf' returns a value which is not being used.","  509:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGBUS(%d)\n"",sig );
",,,
5012,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",509,28,3122,"Hard-coded 'magic' string literal.","  509:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGBUS(%d)\n"",sig );
",,,
5013,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",510,9,3200,"fprintf' returns a value which is not being used.","  510:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5014,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",510,31,3122,"Hard-coded 'magic' string literal.","  510:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5015,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",513,9,3200,"sprintf' returns a value which is not being used.","  513:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSEGV(%d)\n"",sig );
",,,
5016,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",513,28,3122,"Hard-coded 'magic' string literal.","  513:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSEGV(%d)\n"",sig );
",,,
5017,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",514,9,3200,"fprintf' returns a value which is not being used.","  514:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5018,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",514,31,3122,"Hard-coded 'magic' string literal.","  514:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5019,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",517,9,3200,"sprintf' returns a value which is not being used.","  517:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSYS(%d)\n"",sig );
",,,
5020,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",517,28,3122,"Hard-coded 'magic' string literal.","  517:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSYS(%d)\n"",sig );
",,,
5021,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",518,9,3200,"fprintf' returns a value which is not being used.","  518:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5022,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",518,31,3122,"Hard-coded 'magic' string literal.","  518:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5023,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",521,9,3200,"sprintf' returns a value which is not being used.","  521:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=%d\n"",sig );
",,,
5024,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",521,28,3122,"Hard-coded 'magic' string literal.","  521:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=%d\n"",sig );
",,,
5025,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",522,9,3200,"fprintf' returns a value which is not being used.","  522:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5026,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",522,31,3122,"Hard-coded 'magic' string literal.","  522:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5027,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",532,16,2209,"This brace style is not consistent with 'exdented' style.","  532:	    switch(sig){
",,,
5028,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",538,10,2003,"The preceding non-empty 'case' or 'default' clause does not end with an explicit 'break' or 'return' statement.","  538:	    case SIGFPE :
",,,
5029,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",545,5,2002,"No 'default' case found in this 'switch' statement.","  545:	    }
",,,
5030,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",592,2,2017,"Comment spans more than one line.","  592:	*/
",,,
5031,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",594,1,3007,"""void"" has been omitted when defining a function with no parameters.","  594:	{
",,,
5032,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,5,428,"Function identifier is not followed by () but a function call may be intended.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
5033,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,5,3200,"signal' returns a value which is not being used.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
5034,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,23,432,"[C] Argument is not a compatible pointer type.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
5035,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,24,307,"[u] Cast between a pointer to object and a pointer to function.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
5036,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,5,428,"Function identifier is not followed by () but a function call may be intended.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
5037,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,5,3200,"signal' returns a value which is not being used.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
5038,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,23,432,"[C] Argument is not a compatible pointer type.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
5039,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,24,307,"[u] Cast between a pointer to object and a pointer to function.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
5040,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,5,428,"Function identifier is not followed by () but a function call may be intended.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
5041,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,5,3200,"signal' returns a value which is not being used.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
5042,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,23,432,"[C] Argument is not a compatible pointer type.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
5043,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,24,307,"[u] Cast between a pointer to object and a pointer to function.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
5044,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,5,428,"Function identifier is not followed by () but a function call may be intended.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
5045,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,5,3200,"signal' returns a value which is not being used.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
5046,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,23,432,"[C] Argument is not a compatible pointer type.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
5047,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,24,307,"[u] Cast between a pointer to object and a pointer to function.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
5048,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,5,428,"Function identifier is not followed by () but a function call may be intended.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
5049,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,5,3200,"signal' returns a value which is not being used.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
5050,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,22,432,"[C] Argument is not a compatible pointer type.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
5051,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,23,307,"[u] Cast between a pointer to object and a pointer to function.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
5052,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,5,428,"Function identifier is not followed by () but a function call may be intended.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
5053,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,5,3200,"signal' returns a value which is not being used.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
5054,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,23,432,"[C] Argument is not a compatible pointer type.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
5055,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,24,307,"[u] Cast between a pointer to object and a pointer to function.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
5056,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,5,428,"Function identifier is not followed by () but a function call may be intended.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
5057,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,5,3200,"signal' returns a value which is not being used.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
5058,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,23,432,"[C] Argument is not a compatible pointer type.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
5059,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,24,307,"[u] Cast between a pointer to object and a pointer to function.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
5060,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,5,428,"Function identifier is not followed by () but a function call may be intended.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
5061,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,5,3200,"signal' returns a value which is not being used.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
5062,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,23,432,"[C] Argument is not a compatible pointer type.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
5063,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,24,307,"[u] Cast between a pointer to object and a pointer to function.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
5064,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,5,428,"Function identifier is not followed by () but a function call may be intended.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
5065,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,5,3200,"signal' returns a value which is not being used.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
5066,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,23,432,"[C] Argument is not a compatible pointer type.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
5067,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,24,307,"[u] Cast between a pointer to object and a pointer to function.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
5068,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",622,2,2017,"Comment spans more than one line.","  622:	*/
",,,
5069,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",623,20,3625,"Type 'char' has been used in the declaration of an object or a function.","  623:	int ResetTrendPath(char *io_pPath)
",,,
5070,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",623,26,344,"K&amp;R compilers do not support function prototypes.","  623:	int ResetTrendPath(char *io_pPath)
",,,
5071,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",623,26,3227,"The parameter 'io_pPath' is never modified and so it could be declared with the 'const' qualifier.","  623:	int ResetTrendPath(char *io_pPath)
",,,
5072,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",625,9,2201,"This indentation is not consistent with previous indentation in this file.","  625:	        char the_szFullPath[MAX_PATH];
",,,
5073,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",625,9,3625,"Type 'char' has been used in the declaration of an object or a function.","  625:	        char the_szFullPath[MAX_PATH];
",,,
5074,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",626,9,2201,"This indentation is not consistent with previous indentation in this file.","  626:	        char the_szCurPath[MAX_PATH];
",,,
5075,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",626,9,3625,"Type 'char' has been used in the declaration of an object or a function.","  626:	        char the_szCurPath[MAX_PATH];
",,,
5076,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",627,9,2201,"This indentation is not consistent with previous indentation in this file.","  627:	        int the_iRet = ANZ_SUCCESS;
",,,
5077,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",627,13,2211,"the_iRet' is not aligned with the previously declared identifier.","  627:	        int the_iRet = ANZ_SUCCESS;
",,,
5078,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,9,2201,"This indentation is not consistent with previous indentation in this file.","  630:	        if(io_pPath[0] != '/') {
",,,
5079,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,20,506,"Dereferencing pointer value that is possibly NULL.","  630:	        if(io_pPath[0] != '/') {
",,,
5080,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,24,2106,"Integral promotion : plain char promoted to signed int.","  630:	        if(io_pPath[0] != '/') {
",,,
5081,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,27,3123,"Hard coded 'magic' character constant '/'.","  630:	        if(io_pPath[0] != '/') {
",,,
5082,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,32,2209,"This brace style is not consistent with 'exdented' style.","  630:	        if(io_pPath[0] != '/') {
",,,
5083,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",631,16,3416,"This boolean expression contains side effects.","  631:	            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {
",,,
5084,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",631,56,2209,"This brace style is not consistent with 'exdented' style.","  631:	            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {
",,,
5085,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",633,26,2001,"A 'goto' statement has been used.","  633:	                goto EXIT;
",,,
5086,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,306,"[I] Cast between a pointer to object and an integral type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5087,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,310,"Casting to different object pointer type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5088,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5089,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,489,"Increment or decrement operation performed on pointer.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5090,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,506,"Dereferencing pointer value that is possibly NULL.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5091,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,510,"Arithmetic operation on pointer value that is possibly NULL.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5092,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__result' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5093,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s1' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5094,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5095,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s2' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5096,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5097,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5098,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5099,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1251,"Suffixed integer constant causes implicit conversion of other operand.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5100,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1253,"Unsuffixed integer constant implicitly converted to another type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5101,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1302,"__builtin_constant_p()' must be declared before use in C++.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5102,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1302,"__builtin_strcmp()' must be declared before use in C++.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5103,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,2100,"Integral promotion : unsigned char promoted to signed int.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5104,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5105,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3112,"This statement has no side-effect - it can be removed.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5106,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3122,"Hard-coded 'magic' string literal.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5107,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3200,"__builtin_strcmp' returns a value which is not being used.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5108,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5109,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5110,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5111,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5112,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5113,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5114,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5115,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5116,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5117,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3326,"An assignment operator is being used in a boolean expression.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5118,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3346,"This 'if' control expression has a constant 'true' value.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5119,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5120,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5121,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5122,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5123,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5124,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5125,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5126,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5127,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5128,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5129,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5130,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5131,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5132,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5133,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5134,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5135,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5136,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5137,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5138,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5139,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5140,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3401,"Possible precedence confusion: extra parentheses are recommended here.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5141,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5142,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3416,"This boolean expression contains side effects.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5143,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3417,"The comma operator has been used outside a for-loop header.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5144,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3446,"The result operands of this conditional operator generate side effects","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5145,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3631,"Type 'char' has been used in a cast.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5146,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3760,"Implicit conversion: int to unsigned int.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5147,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5148,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5149,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,36,1251,"Suffixed integer constant causes implicit conversion of other operand.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5150,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,42,2209,"This brace style is not consistent with 'exdented' style.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5151,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",636,17,3200,"sprintf' returns a value which is not being used.","  636:	                sprintf(the_szFullPath,""%s/%s"",the_szCurPath,io_pPath);
",,,
5152,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",636,40,3122,"Hard-coded 'magic' string literal.","  636:	                sprintf(the_szFullPath,""%s/%s"",the_szCurPath,io_pPath);
",,,
5153,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",639,9,2201,"This indentation is not consistent with previous indentation in this file.","  639:	        else {
",,,
5154,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",639,14,2209,"This brace style is not consistent with 'exdented' style.","  639:	        else {
",,,
5155,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",640,22,2001,"A 'goto' statement has been used.","  640:	            goto EXIT;
",,,
5156,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",658,9,2201,"This indentation is not consistent with previous indentation in this file.","  658:	        strcpy(io_pPath,the_szFullPath);
",,,
5157,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",658,9,3200,"strcpy' returns a value which is not being used.","  658:	        strcpy(io_pPath,the_szFullPath);
",,,
5158,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",659,1,2015,"This label is not a case or default label for a switch statement.","  659:	EXIT:
",,,
5159,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",659,1,2201,"This indentation is not consistent with previous indentation in this file.","  659:	EXIT:
",,,
5160,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",660,9,2201,"This indentation is not consistent with previous indentation in this file.","  660:	        return the_iRet;
",,,
5161,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",1,1,240,"[E] This file contains the control-M character at the end of a line.","    1:	/*
",,,
5162,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",9,16,288,"[I] Source file '/home/www/TOSCANA_dev/BackEnd/AnalyzeTaskManager/work/1/work/sample_c_cpp/sample_c/src/analyzeme.c' has comments containing characters which are not members of the basic source character set.","    9:	      AnalyzeMeのメイン関数を定義する
",,,
5163,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",16,2,2017,"Comment spans more than one line.","   16:	*/
",,,
5164,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",20,2,2017,"Comment spans more than one line.","   20:	*/
",,,
5165,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",21,1,838,"File has already been included directly from this file.","   21:	#include ""analyzeme.h""
",,,
5166,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",21,1,839,"File has already been included indirectly from this file.","   21:	#include ""analyzeme.h""
",,,
5167,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",21,23,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   21:	#include ""analyzeme.h""
",,,
5168,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",22,1,839,"File has already been included indirectly from this file.","   22:	#include ""common.h""
",,,
5169,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",23,1,839,"File has already been included indirectly from this file.","   23:	#include ""memory_manage.h""
",,,
5170,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",23,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   23:	#include ""memory_manage.h""
",,,
5171,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",24,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   24:	#include ""parse_cmdline.h""
",,,
5172,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",25,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   25:	#include ""common_measure.h""
",,,
5173,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",26,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   26:	#include ""trend_measure.h""
",,,
5174,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",27,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   27:	#include ""make_file_list.h""
",,,
5175,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",29,31,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   29:	#include ""get_process_macro.h""
",,,
5176,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",30,1,839,"File has already been included indirectly from this file.","   30:	#include &lt;signal.h&gt;
",,,
5177,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",35,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
5178,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",35,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
5179,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",35,13,3211,"The global identifier 'TRACEFILE' is defined but not used.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
5180,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",35,13,3408,"TRACEFILE' has external linkage but is being defined without any previous declaration.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
5181,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",36,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
5182,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",36,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
5183,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",36,13,3408,"APPLOGFILE' has external linkage but is being defined without any previous declaration.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
5184,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",44,7,3408,"g_fpLogFile' has external linkage but is being defined without any previous declaration.","   44:	FILE *g_fpLogFile = NULL;       /* Log File pointer */
",,,
5185,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",46,7,3211,"The global identifier 'g_fpTraceFile' is defined but not used.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
5186,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",46,7,3408,"g_fpTraceFile' has external linkage but is being defined without any previous declaration.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
5187,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",48,7,3408,"g_fpErrorFile' has external linkage but is being defined without any previous declaration.","   48:	FILE *g_fpErrorFile = NULL;
",,,
5188,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",50,6,3408,"g_bTrace' has external linkage but is being defined without any previous declaration.","   50:	bool g_bTrace           = false;    /* Trace flag */
",,,
5189,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",51,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
5190,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",51,6,3408,"g_szNVPath' has external linkage but is being defined without any previous declaration.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
5191,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",51,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
5192,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",52,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
5193,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",52,6,3408,"g_szOVPath' has external linkage but is being defined without any previous declaration.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
5194,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",52,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
5195,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",53,6,3408,"g_bTrendFile' has external linkage but is being defined without any previous declaration.","   53:	bool g_bTrendFile = false;
",,,
5196,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",55,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   55:	char *g_optionFileCont = NULL;
",,,
5197,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",55,7,3211,"The global identifier 'g_optionFileCont' is defined but not used.","   55:	char *g_optionFileCont = NULL;
",,,
5198,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",55,7,3408,"g_optionFileCont' has external linkage but is being defined without any previous declaration.","   55:	char *g_optionFileCont = NULL;
",,,
5199,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",57,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   57:	char *g_symbolFileCont = NULL;
",,,
5200,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",57,7,3211,"The global identifier 'g_symbolFileCont' is defined but not used.","   57:	char *g_symbolFileCont = NULL;
",,,
5201,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",57,7,3408,"g_symbolFileCont' has external linkage but is being defined without any previous declaration.","   57:	char *g_symbolFileCont = NULL;
",,,
5202,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",58,6,3408,"g_bOutTime' has external linkage but is being defined without any previous declaration.","   58:	bool g_bOutTime = false;
",,,
5203,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",59,15,3408,"g_pAnzInfo' has external linkage but is being defined without any previous declaration.","   59:	ST_AnalyzeMe *g_pAnzInfo;  /* AnalyzeMe管理情報 */
",,,
5204,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",69,2,2017,"Comment spans more than one line.","   69:	*/
",,,
5205,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",70,14,3227,"The parameter 'argc' is never modified and so it could be declared with the 'const' qualifier.","   70:	int main(int argc,char * argv[])
",,,
5206,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",70,19,3625,"Type 'char' has been used in the declaration of an object or a function.","   70:	int main(int argc,char * argv[])
",,,
5207,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",70,26,344,"K&amp;R compilers do not support function prototypes.","   70:	int main(int argc,char * argv[])
",,,
5208,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",75,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
5209,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",75,28,2211,"the_pMeasureItem' is not aligned with the previously declared identifier.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
5210,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",76,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
5211,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",76,10,2211,"the_szCurMetrics' is not aligned with the previously declared identifier.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
5212,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",76,10,3604,"Local arrays and structures cannot be initialised in K&amp;R C.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
5213,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",76,44,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
5214,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",80,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   80:	    char *the_pTrace = NULL;
",,,
5215,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",80,11,2211,"the_pTrace' is not aligned with the previously declared identifier.","   80:	    char *the_pTrace = NULL;
",,,
5216,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",80,11,3197,"The initialiser for 'the_pTrace' is always modified before being used.","   80:	    char *the_pTrace = NULL;
",,,
5217,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",81,25,2211,"the_st' is not aligned with the previously declared identifier.","   81:	    struct timeb the_st ;
",,,
5218,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",89,5,3198,"The value assigned to 'the_pAnzInfo' is always modified before being used.","   89:	    the_pAnzInfo = NULL;
",,,
5219,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",91,5,3198,"The value assigned to 'the_iRet' is always modified before being used.","   91:	    the_iRet = ANZ_SUCCESS;
",,,
5220,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",101,25,3122,"Hard-coded 'magic' string literal.","  101:	    the_pTrace = getenv(""AnzTrace"");
",,,
5221,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",102,28,2209,"This brace style is not consistent with 'exdented' style.","  102:	    if(the_pTrace != NULL) {
",,,
5222,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,306,"[I] Cast between a pointer to object and an integral type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5223,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,310,"Casting to different object pointer type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5224,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5225,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,489,"Increment or decrement operation performed on pointer.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5226,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__result' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5227,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5228,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5229,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5230,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5231,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5232,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5233,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5234,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5235,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5236,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5237,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,2100,"Integral promotion : unsigned char promoted to signed int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5238,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5239,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3112,"This statement has no side-effect - it can be removed.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5240,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3122,"Hard-coded 'magic' string literal.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5241,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3200,"__builtin_strcmp' returns a value which is not being used.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5242,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5243,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5244,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5245,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5246,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5247,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5248,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5249,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5250,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5251,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3325,"This control expression has a constant 'false' value.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5252,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3326,"An assignment operator is being used in a boolean expression.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5253,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5254,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5255,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5256,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5257,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5258,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5259,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5260,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5261,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5262,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5263,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5264,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5265,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5266,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5267,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5268,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5269,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5270,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5271,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5272,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5273,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5274,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5275,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5276,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3416,"This boolean expression contains side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5277,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3417,"The comma operator has been used outside a for-loop header.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5278,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3446,"The result operands of this conditional operator generate side effects","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5279,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3631,"Type 'char' has been used in a cast.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5280,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3760,"Implicit conversion: int to unsigned int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5281,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,35,3209,"__builtin_strcmp()' returns a value which is always ignored.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5282,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5283,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5284,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,36,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5285,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,43,2209,"This brace style is not consistent with 'exdented' style.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5286,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,43,3201,"This statement is unreachable.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5287,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",113,6,2017,"Comment spans more than one line.","  113:	    */
",,,
5288,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",114,36,3122,"Hard-coded 'magic' string literal.","  114:	    g_fpLogFile = fopen(APPLOGFILE,""w"");
",,,
5289,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",115,28,2209,"This brace style is not consistent with 'exdented' style.","  115:	    if(g_fpLogFile == NULL){
",,,
5290,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",116,9,3200,"printf' returns a value which is not being used.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
5291,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",116,16,3122,"Hard-coded 'magic' string literal.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
5292,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",120,5,702,"Result of sizeof operator is not explicitly cast.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
5293,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",120,63,3430,"Macro argument expression requires parentheses.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
5294,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",121,29,2209,"This brace style is not consistent with 'exdented' style.","  121:	    if(the_pAnzInfo == NULL){
",,,
5295,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",122,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  122:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
5296,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",123,18,2001,"A 'goto' statement has been used.","  123:	        goto EXIT;
",,,
5297,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",125,5,702,"Result of sizeof operator is not explicitly cast.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
5298,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",125,5,3200,"memset' returns a value which is not being used.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
5299,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",128,5,702,"Result of sizeof operator is not explicitly cast.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
5300,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",128,67,3430,"Macro argument expression requires parentheses.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
5301,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",129,39,2209,"This brace style is not consistent with 'exdented' style.","  129:	    if(the_pAnzInfo-&gt;m_option == NULL){
",,,
5302,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",130,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  130:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
5303,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",131,18,2001,"A 'goto' statement has been used.","  131:	        goto EXIT;
",,,
5304,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",133,5,702,"Result of sizeof operator is not explicitly cast.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
5305,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",133,5,3200,"memset' returns a value which is not being used.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
5306,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",137,5,702,"Result of sizeof operator is not explicitly cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
5307,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",137,5,3631,"Type 'char' has been used in a cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
5308,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",137,5,3633,"Type 'char' has been used in the operand of the sizeof operator.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
5309,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",137,5,3760,"Implicit conversion: int to unsigned int.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
5310,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",138,34,2209,"This brace style is not consistent with 'exdented' style.","  138:	    if(the_pMeasureItem == NULL) {
",,,
5311,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",139,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  139:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
5312,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",140,18,2001,"A 'goto' statement has been used.","  140:	        goto EXIT;
",,,
5313,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",142,5,702,"Result of sizeof operator is not explicitly cast.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
5314,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",142,5,3200,"memset' returns a value which is not being used.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
5315,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",142,36,3760,"Implicit conversion: int to unsigned int.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
5316,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",142,45,3633,"Type 'char' has been used in the operand of the sizeof operator.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
5317,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",150,5,3200,"strcpy' returns a value which is not being used.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
5318,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",150,34,3122,"Hard-coded 'magic' string literal.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
5319,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",154,5,3200,"strcpy' returns a value which is not being used.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
5320,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",154,39,3122,"Hard-coded 'magic' string literal.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
5321,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",155,5,3200,"strcpy' returns a value which is not being used.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
5322,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",155,38,3122,"Hard-coded 'magic' string literal.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
5323,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",156,5,3200,"strcpy' returns a value which is not being used.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
5324,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",156,38,3122,"Hard-coded 'magic' string literal.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
5325,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",165,32,3120,"Hard-coded 'magic' integer constant '70'.","  165:	    the_pOption-&gt;m_symThresh = 70;
",,,
5326,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",166,32,3120,"Hard-coded 'magic' integer constant '2'.","  166:	    the_pOption-&gt;m_minThresh = 2;
",,,
5327,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",169,5,702,"Result of sizeof operator is not explicitly cast.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
5328,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",169,59,3430,"Macro argument expression requires parentheses.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
5329,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",170,31,2209,"This brace style is not consistent with 'exdented' style.","  170:	    if(the_pCmdOption == NULL){
",,,
5330,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",171,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  171:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
5331,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",172,18,2001,"A 'goto' statement has been used.","  172:	        goto EXIT;
",,,
5332,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",174,5,702,"Result of sizeof operator is not explicitly cast.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
5333,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",174,5,3200,"memset' returns a value which is not being used.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
5334,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",180,5,3200,"strcpy' returns a value which is not being used.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
5335,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",180,37,3122,"Hard-coded 'magic' string literal.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
5336,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",184,5,3200,"strcpy' returns a value which is not being used.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
5337,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",184,42,3122,"Hard-coded 'magic' string literal.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
5338,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",185,5,3200,"strcpy' returns a value which is not being used.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
5339,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",185,41,3122,"Hard-coded 'magic' string literal.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
5340,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",186,5,3200,"strcpy' returns a value which is not being used.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
5341,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",186,41,3122,"Hard-coded 'magic' string literal.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
5342,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",195,35,3120,"Hard-coded 'magic' integer constant '70'.","  195:	    the_pCmdOption-&gt;m_symThresh = 70;
",,,
5343,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",196,35,3120,"Hard-coded 'magic' integer constant '2'.","  196:	    the_pCmdOption-&gt;m_minThresh = 2;
",,,
5344,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",200,32,2209,"This brace style is not consistent with 'exdented' style.","  200:	    if(the_iRet != ANZ_SUCCESS){
",,,
5345,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",201,18,2001,"A 'goto' statement has been used.","  201:	        goto EXIT;
",,,
5346,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",203,8,3344,"Value of control expression is not derived from an explicit logical operation.","  203:	    if(g_bOutTime) {
",,,
5347,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",203,20,2209,"This brace style is not consistent with 'exdented' style.","  203:	    if(g_bOutTime) {
",,,
5348,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",204,9,3200,"ftime' returns a value which is not being used.","  204:	        ftime(&amp;the_st);
",,,
5349,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",209,32,2209,"This brace style is not consistent with 'exdented' style.","  209:	    if(the_iRet != ANZ_SUCCESS){
",,,
5350,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",210,18,2001,"A 'goto' statement has been used.","  210:	        goto EXIT;
",,,
5351,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",214,32,2209,"This brace style is not consistent with 'exdented' style.","  214:	    if(the_iRet != ANZ_SUCCESS){
",,,
5352,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",215,18,2001,"A 'goto' statement has been used.","  215:	        goto EXIT;
",,,
5353,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",218,23,3355,"The result of this logical operation is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
5354,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",218,23,3358,"The value of this 'if' control expression is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
5355,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",218,31,2209,"This brace style is not consistent with 'exdented' style.","  218:	    if(the_pCmdOption != NULL){
",,,
5356,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",224,32,2209,"This brace style is not consistent with 'exdented' style.","  224:	    if(the_iRet != ANZ_SUCCESS){
",,,
5357,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",225,18,2001,"A 'goto' statement has been used.","  225:	        goto EXIT;
",,,
5358,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",229,32,2209,"This brace style is not consistent with 'exdented' style.","  229:	    if(the_iRet != ANZ_SUCCESS){
",,,
5359,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",230,18,2001,"A 'goto' statement has been used.","  230:	        goto EXIT;
",,,
5360,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",233,47,2209,"This brace style is not consistent with 'exdented' style.","  233:	    if(the_iMeasureType == ANZ_TREND_MEASURE) {
",,,
5361,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",234,13,3220,"Identifier declared at a nested level of block scope.","  234:	        int the_iType = -1;
",,,
5362,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",235,13,3220,"Identifier declared at a nested level of block scope.","  235:	        int the_pPos = -1;
",,,
5363,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",236,9,3200,"isDirOrFile' returns a value which is not being used.","  236:	        isDirOrFile(*the_pMeasureItem,&amp;the_iType);
",,,
5364,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",237,35,2209,"This brace style is not consistent with 'exdented' style.","  237:	        if(the_iType == ANZ_FILE) {
",,,
5365,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",242,30,2209,"This brace style is not consistent with 'exdented' style.","  242:	            if(the_pPos &gt; 0) {
",,,
5366,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",243,55,488,"Performing pointer arithmetic.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
5367,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",243,66,489,"Increment or decrement operation performed on pointer.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
5368,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",246,43,489,"Increment or decrement operation performed on pointer.","  246:	            GetPathPos(*(the_pMeasureItem + 1),&amp;the_pPos);
",,,
5369,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",248,30,2209,"This brace style is not consistent with 'exdented' style.","  248:	            if(the_pPos &gt; 0) {
",,,
5370,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,36,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
5371,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,42,3501,"This could be read as an old-style assignment operator. Spaces are needed to make it more readable.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
5372,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,61,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
5373,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,66,488,"Performing pointer arithmetic.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
5374,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,77,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
5375,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",252,13,3198,"The value assigned to 'the_iRet' is always modified before being used.","  252:	            the_iRet = ResetTrendPath(g_szNVPath);
",,,
5376,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",254,41,2209,"This brace style is not consistent with 'exdented' style.","  254:	            if(the_iRet != ANZ_SUCCESS) {
",,,
5377,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",255,26,2001,"A 'goto' statement has been used.","  255:	                goto EXIT;
",,,
5378,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",260,51,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
5379,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",260,57,3631,"Type 'char' has been used in a cast.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
5380,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",261,41,2209,"This brace style is not consistent with 'exdented' style.","  261:	    if(the_iRet == ANZ_NO_MEASURE_FILES){
",,,
5381,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",262,9,3200,"printf' returns a value which is not being used.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
5382,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",262,16,3122,"Hard-coded 'magic' string literal.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
5383,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",264,42,2209,"This brace style is not consistent with 'exdented' style.","  264:	    if(the_iRet == ANZ_ERR_MEMORY_FAILED){
",,,
5384,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",265,9,3200,"printf' returns a value which is not being used.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
5385,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",265,16,3122,"Hard-coded 'magic' string literal.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
5386,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",267,32,2209,"This brace style is not consistent with 'exdented' style.","  267:	    if(the_iRet != ANZ_SUCCESS){
",,,
5387,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",268,18,2001,"A 'goto' statement has been used.","  268:	        goto EXIT;
",,,
5388,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",272,37,2209,"This brace style is not consistent with 'exdented' style.","  272:	    if(the_pOption-&gt;m_fileLOC == ON){
",,,
5389,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",273,9,3200,"strcat' returns a value which is not being used.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
5390,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",273,33,3122,"Hard-coded 'magic' string literal.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
5391,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",276,40,2209,"This brace style is not consistent with 'exdented' style.","  276:	    if(the_pOption-&gt;m_redundancy == ON){
",,,
5392,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,306,"[I] Cast between a pointer to object and an integral type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5393,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,310,"Casting to different object pointer type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5394,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5395,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,489,"Increment or decrement operation performed on pointer.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5396,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__result' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5397,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5398,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5399,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5400,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5401,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5402,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5403,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5404,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5405,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5406,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5407,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,2100,"Integral promotion : unsigned char promoted to signed int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5408,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5409,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3112,"This statement has no side-effect - it can be removed.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5410,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3122,"Hard-coded 'magic' string literal.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5411,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3200,"__builtin_strcmp' returns a value which is not being used.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5412,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5413,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5414,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5415,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5416,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5417,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5418,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5419,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5420,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5421,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3326,"An assignment operator is being used in a boolean expression.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5422,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3346,"This 'if' control expression has a constant 'true' value.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5423,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5424,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5425,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5426,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5427,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5428,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5429,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5430,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5431,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5432,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5433,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5434,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5435,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5436,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5437,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5438,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5439,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5440,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5441,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5442,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5443,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5444,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5445,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5446,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3416,"This boolean expression contains side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5447,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3417,"The comma operator has been used outside a for-loop header.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5448,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3446,"The result operands of this conditional operator generate side effects","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5449,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3631,"Type 'char' has been used in a cast.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5450,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3760,"Implicit conversion: int to unsigned int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5451,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5452,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5453,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5454,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,45,2209,"This brace style is not consistent with 'exdented' style.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5455,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",278,13,3200,"strcat' returns a value which is not being used.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
5456,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",278,37,3122,"Hard-coded 'magic' string literal.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
5457,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",278,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
5458,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",279,13,3200,"strcat' returns a value which is not being used.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
5459,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",279,37,3122,"Hard-coded 'magic' string literal.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
5460,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",279,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
5461,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",281,13,2209,"This brace style is not consistent with 'exdented' style.","  281:	        else{
",,,
5462,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",281,13,3201,"This statement is unreachable.","  281:	        else{
",,,
5463,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",282,13,3200,"strcat' returns a value which is not being used.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
5464,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",282,37,3122,"Hard-coded 'magic' string literal.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
5465,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",282,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
5466,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",286,8,3344,"Value of control expression is not derived from an explicit logical operation.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
5467,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",286,31,2209,"This brace style is not consistent with 'exdented' style.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
5468,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,306,"[I] Cast between a pointer to object and an integral type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5469,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,310,"Casting to different object pointer type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5470,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5471,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,489,"Increment or decrement operation performed on pointer.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5472,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__result' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5473,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5474,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5475,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5476,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5477,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5478,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5479,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5480,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5481,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5482,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5483,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,2100,"Integral promotion : unsigned char promoted to signed int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5484,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5485,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3112,"This statement has no side-effect - it can be removed.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5486,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3122,"Hard-coded 'magic' string literal.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5487,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3200,"__builtin_strcmp' returns a value which is not being used.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5488,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5489,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5490,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5491,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5492,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5493,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5494,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5495,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5496,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5497,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3326,"An assignment operator is being used in a boolean expression.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5498,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3346,"This 'if' control expression has a constant 'true' value.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5499,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5500,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5501,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5502,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5503,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5504,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5505,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5506,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5507,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5508,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5509,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5510,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5511,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5512,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5513,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5514,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5515,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5516,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5517,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5518,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5519,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5520,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5521,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5522,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3416,"This boolean expression contains side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5523,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3417,"The comma operator has been used outside a for-loop header.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5524,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3446,"The result operands of this conditional operator generate side effects","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5525,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3631,"Type 'char' has been used in a cast.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5526,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3760,"Implicit conversion: int to unsigned int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5527,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5528,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5529,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5530,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,45,2209,"This brace style is not consistent with 'exdented' style.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5531,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",288,13,3200,"strcat' returns a value which is not being used.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
5532,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",288,37,3122,"Hard-coded 'magic' string literal.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
5533,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",288,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
5534,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",289,13,3200,"strcat' returns a value which is not being used.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
5535,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",289,37,3122,"Hard-coded 'magic' string literal.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
5536,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",289,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
5537,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",291,13,2209,"This brace style is not consistent with 'exdented' style.","  291:	        else{
",,,
5538,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",291,13,3201,"This statement is unreachable.","  291:	        else{
",,,
5539,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",292,13,3200,"strcat' returns a value which is not being used.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
5540,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",292,37,3122,"Hard-coded 'magic' string literal.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
5541,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",292,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
5542,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",296,8,3344,"Value of control expression is not derived from an explicit logical operation.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
5543,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",296,28,2209,"This brace style is not consistent with 'exdented' style.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
5544,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,306,"[I] Cast between a pointer to object and an integral type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5545,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,310,"Casting to different object pointer type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5546,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5547,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,489,"Increment or decrement operation performed on pointer.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5548,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__result' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5549,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5550,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5551,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5552,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5553,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5554,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5555,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5556,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5557,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5558,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5559,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,2100,"Integral promotion : unsigned char promoted to signed int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5560,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5561,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3112,"This statement has no side-effect - it can be removed.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5562,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3122,"Hard-coded 'magic' string literal.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5563,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3200,"__builtin_strcmp' returns a value which is not being used.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5564,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5565,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5566,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5567,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5568,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5569,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5570,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5571,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5572,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5573,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3326,"An assignment operator is being used in a boolean expression.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5574,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3346,"This 'if' control expression has a constant 'true' value.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5575,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5576,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5577,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5578,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5579,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5580,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5581,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5582,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5583,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5584,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5585,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5586,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5587,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5588,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5589,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5590,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5591,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5592,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5593,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5594,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5595,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5596,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5597,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5598,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3416,"This boolean expression contains side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5599,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3417,"The comma operator has been used outside a for-loop header.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5600,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3446,"The result operands of this conditional operator generate side effects","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5601,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3631,"Type 'char' has been used in a cast.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5602,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3760,"Implicit conversion: int to unsigned int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5603,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5604,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5605,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5606,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,45,2209,"This brace style is not consistent with 'exdented' style.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5607,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",298,13,3200,"strcat' returns a value which is not being used.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
5608,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",298,37,3122,"Hard-coded 'magic' string literal.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
5609,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",298,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
5610,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",299,13,3200,"strcat' returns a value which is not being used.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
5611,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",299,37,3122,"Hard-coded 'magic' string literal.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
5612,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",299,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
5613,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",301,13,2209,"This brace style is not consistent with 'exdented' style.","  301:	        else{
",,,
5614,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",301,13,3201,"This statement is unreachable.","  301:	        else{
",,,
5615,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",302,13,3200,"strcat' returns a value which is not being used.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
5616,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",302,37,3122,"Hard-coded 'magic' string literal.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
5617,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",302,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
5618,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,306,"[I] Cast between a pointer to object and an integral type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5619,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,310,"Casting to different object pointer type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5620,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5621,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,489,"Increment or decrement operation performed on pointer.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5622,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__result' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5623,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5624,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5625,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5626,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5627,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5628,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5629,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5630,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5631,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5632,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5633,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,2100,"Integral promotion : unsigned char promoted to signed int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5634,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5635,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3112,"This statement has no side-effect - it can be removed.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5636,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3122,"Hard-coded 'magic' string literal.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5637,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3200,"__builtin_strcmp' returns a value which is not being used.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5638,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5639,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5640,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5641,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5642,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5643,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5644,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5645,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5646,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5647,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3326,"An assignment operator is being used in a boolean expression.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5648,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3346,"This 'if' control expression has a constant 'true' value.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5649,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5650,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5651,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5652,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5653,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5654,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5655,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5656,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5657,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5658,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5659,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5660,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5661,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5662,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5663,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5664,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5665,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5666,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5667,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5668,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5669,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5670,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5671,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5672,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3416,"This boolean expression contains side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5673,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3417,"The comma operator has been used outside a for-loop header.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5674,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3446,"The result operands of this conditional operator generate side effects","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5675,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3631,"Type 'char' has been used in a cast.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5676,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3760,"Implicit conversion: int to unsigned int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5677,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5678,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5679,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5680,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,45,2209,"This brace style is not consistent with 'exdented' style.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5681,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",305,13,3200,"strcat' returns a value which is not being used.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
5682,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",305,37,3122,"Hard-coded 'magic' string literal.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
5683,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",305,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
5684,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",306,13,3200,"strcat' returns a value which is not being used.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
5685,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",306,37,3122,"Hard-coded 'magic' string literal.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
5686,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",308,13,2209,"This brace style is not consistent with 'exdented' style.","  308:	        else{
",,,
5687,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",308,13,3201,"This statement is unreachable.","  308:	        else{
",,,
5688,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",309,13,3200,"strcat' returns a value which is not being used.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
5689,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",309,37,3122,"Hard-coded 'magic' string literal.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
5690,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",314,8,3344,"Value of control expression is not derived from an explicit logical operation.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
5691,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",314,34,2209,"This brace style is not consistent with 'exdented' style.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
5692,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,306,"[I] Cast between a pointer to object and an integral type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5693,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,310,"Casting to different object pointer type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5694,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5695,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,489,"Increment or decrement operation performed on pointer.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5696,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__result' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5697,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5698,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5699,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5700,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5701,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5702,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5703,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5704,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5705,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5706,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5707,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,2100,"Integral promotion : unsigned char promoted to signed int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5708,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5709,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3112,"This statement has no side-effect - it can be removed.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5710,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3122,"Hard-coded 'magic' string literal.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5711,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3200,"__builtin_strcmp' returns a value which is not being used.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5712,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5713,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5714,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5715,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5716,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5717,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5718,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5719,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5720,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5721,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3326,"An assignment operator is being used in a boolean expression.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5722,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3346,"This 'if' control expression has a constant 'true' value.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5723,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5724,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5725,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5726,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5727,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5728,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5729,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5730,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5731,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5732,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5733,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5734,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5735,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5736,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5737,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5738,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5739,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5740,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5741,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5742,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5743,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5744,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5745,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5746,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3416,"This boolean expression contains side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5747,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3417,"The comma operator has been used outside a for-loop header.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5748,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3446,"The result operands of this conditional operator generate side effects","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5749,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3631,"Type 'char' has been used in a cast.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5750,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3760,"Implicit conversion: int to unsigned int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5751,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5752,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5753,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5754,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,45,2209,"This brace style is not consistent with 'exdented' style.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5755,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",316,13,3200,"strcat' returns a value which is not being used.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
5756,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",316,37,3122,"Hard-coded 'magic' string literal.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
5757,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",316,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
5758,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",317,13,3200,"strcat' returns a value which is not being used.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
5759,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",317,37,3122,"Hard-coded 'magic' string literal.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
5760,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",317,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
5761,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",319,13,2209,"This brace style is not consistent with 'exdented' style.","  319:	        else{
",,,
5762,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",319,13,3201,"This statement is unreachable.","  319:	        else{
",,,
5763,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",320,13,3200,"strcat' returns a value which is not being used.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
5764,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",320,37,3122,"Hard-coded 'magic' string literal.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
5765,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",320,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
5766,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,306,"[I] Cast between a pointer to object and an integral type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5767,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,310,"Casting to different object pointer type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5768,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5769,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,489,"Increment or decrement operation performed on pointer.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5770,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__result' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5771,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5772,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5773,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5774,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5775,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5776,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5777,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5778,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5779,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5780,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5781,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,2100,"Integral promotion : unsigned char promoted to signed int.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5782,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5783,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3112,"This statement has no side-effect - it can be removed.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5784,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3122,"Hard-coded 'magic' string literal.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5785,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3200,"__builtin_strcmp' returns a value which is not being used.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5786,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5787,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5788,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5789,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5790,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5791,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5792,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5793,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5794,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5795,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3326,"An assignment operator is being used in a boolean expression.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5796,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3346,"This 'if' control expression has a constant 'true' value.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5797,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5798,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5799,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5800,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5801,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5802,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5803,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5804,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5805,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",1,1,240,"[E] This file contains the control-M character at the end of a line.","    1:	/*
",,"description for warning (3871)","Registered"
5806,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",9,16,288,"[I] Source file '/home/www/TOSCANA_dev/BackEnd/AnalyzeTaskManager/work/1/work/sample_c_cpp/sample_c/src/analyzeme.c' has comments containing characters which are not members of the basic source character set.","    9:	      AnalyzeMeのメイン関数を定義する
",,"description for warning (3872)","Registered"
5807,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",16,2,2017,"Comment spans more than one line.","   16:	*/
",,"description for warning (3873)","Registered"
5808,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",20,2,2017,"Comment spans more than one line.","   20:	*/
",,"description for warning (3874)","Registered"
5809,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",21,1,838,"File has already been included directly from this file.","   21:	#include ""analyzeme.h""
",,"description for warning (3875)","Registered"
5810,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",21,1,839,"File has already been included indirectly from this file.","   21:	#include ""analyzeme.h""
",,"description for warning (3876)","Registered"
5811,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",21,23,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   21:	#include ""analyzeme.h""
",,"description for warning (3877)","Registered"
5812,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",22,1,839,"File has already been included indirectly from this file.","   22:	#include ""common.h""
",,"description for warning (3878)","Registered"
5813,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",23,1,839,"File has already been included indirectly from this file.","   23:	#include ""memory_manage.h""
",,"description for warning (3879)","Registered"
5814,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",23,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   23:	#include ""memory_manage.h""
",,"description for warning (3880)","Registered"
5815,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",24,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   24:	#include ""parse_cmdline.h""
",,,
5816,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",25,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   25:	#include ""common_measure.h""
",,,
5817,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",26,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   26:	#include ""trend_measure.h""
",,,
5818,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",27,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   27:	#include ""make_file_list.h""
",,,
5819,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",29,31,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   29:	#include ""get_process_macro.h""
",,,
5820,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",30,1,839,"File has already been included indirectly from this file.","   30:	#include &lt;signal.h&gt;
",,,
5821,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
5822,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
5823,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,13,3211,"The global identifier 'TRACEFILE' is defined but not used.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
5824,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,13,3408,"TRACEFILE' has external linkage but is being defined without any previous declaration.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
5825,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",36,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
5826,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",36,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
5827,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",36,13,3408,"APPLOGFILE' has external linkage but is being defined without any previous declaration.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
5828,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",44,7,3408,"g_fpLogFile' has external linkage but is being defined without any previous declaration.","   44:	FILE *g_fpLogFile = NULL;       /* Log File pointer */
",,,
5829,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",46,7,3211,"The global identifier 'g_fpTraceFile' is defined but not used.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
5830,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",46,7,3408,"g_fpTraceFile' has external linkage but is being defined without any previous declaration.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
5831,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",48,7,3408,"g_fpErrorFile' has external linkage but is being defined without any previous declaration.","   48:	FILE *g_fpErrorFile = NULL;
",,,
5832,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",50,6,3408,"g_bTrace' has external linkage but is being defined without any previous declaration.","   50:	bool g_bTrace           = false;    /* Trace flag */
",,,
5833,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",51,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
5834,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",51,6,3408,"g_szNVPath' has external linkage but is being defined without any previous declaration.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
5835,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",51,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
5836,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",52,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
5837,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",52,6,3408,"g_szOVPath' has external linkage but is being defined without any previous declaration.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
5838,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",52,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
5839,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",53,6,3408,"g_bTrendFile' has external linkage but is being defined without any previous declaration.","   53:	bool g_bTrendFile = false;
",,,
5840,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",55,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   55:	char *g_optionFileCont = NULL;
",,,
5841,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",55,7,3211,"The global identifier 'g_optionFileCont' is defined but not used.","   55:	char *g_optionFileCont = NULL;
",,,
5842,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",55,7,3408,"g_optionFileCont' has external linkage but is being defined without any previous declaration.","   55:	char *g_optionFileCont = NULL;
",,,
5843,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",57,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   57:	char *g_symbolFileCont = NULL;
",,,
5844,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",57,7,3211,"The global identifier 'g_symbolFileCont' is defined but not used.","   57:	char *g_symbolFileCont = NULL;
",,,
5845,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",57,7,3408,"g_symbolFileCont' has external linkage but is being defined without any previous declaration.","   57:	char *g_symbolFileCont = NULL;
",,,
5846,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",58,6,3408,"g_bOutTime' has external linkage but is being defined without any previous declaration.","   58:	bool g_bOutTime = false;
",,,
5847,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",59,15,3408,"g_pAnzInfo' has external linkage but is being defined without any previous declaration.","   59:	ST_AnalyzeMe *g_pAnzInfo;  /* AnalyzeMe管理情報 */
",,,
5848,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",69,2,2017,"Comment spans more than one line.","   69:	*/
",,,
5849,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",70,14,3227,"The parameter 'argc' is never modified and so it could be declared with the 'const' qualifier.","   70:	int main(int argc,char * argv[])
",,,
5850,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",70,19,3625,"Type 'char' has been used in the declaration of an object or a function.","   70:	int main(int argc,char * argv[])
",,,
5851,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",70,26,344,"K&amp;R compilers do not support function prototypes.","   70:	int main(int argc,char * argv[])
",,,
5852,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",75,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
5853,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",75,28,2211,"the_pMeasureItem' is not aligned with the previously declared identifier.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
5854,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
5855,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,10,2211,"the_szCurMetrics' is not aligned with the previously declared identifier.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
5856,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,10,3604,"Local arrays and structures cannot be initialised in K&amp;R C.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
5857,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,44,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
5858,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",80,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   80:	    char *the_pTrace = NULL;
",,,
5859,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",80,11,2211,"the_pTrace' is not aligned with the previously declared identifier.","   80:	    char *the_pTrace = NULL;
",,,
5860,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",80,11,3197,"The initialiser for 'the_pTrace' is always modified before being used.","   80:	    char *the_pTrace = NULL;
",,,
5861,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",81,25,2211,"the_st' is not aligned with the previously declared identifier.","   81:	    struct timeb the_st ;
",,,
5862,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",89,5,3198,"The value assigned to 'the_pAnzInfo' is always modified before being used.","   89:	    the_pAnzInfo = NULL;
",,,
5863,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",91,5,3198,"The value assigned to 'the_iRet' is always modified before being used.","   91:	    the_iRet = ANZ_SUCCESS;
",,,
5864,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",101,25,3122,"Hard-coded 'magic' string literal.","  101:	    the_pTrace = getenv(""AnzTrace"");
",,,
5865,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",102,28,2209,"This brace style is not consistent with 'exdented' style.","  102:	    if(the_pTrace != NULL) {
",,,
5866,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,306,"[I] Cast between a pointer to object and an integral type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5867,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,310,"Casting to different object pointer type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5868,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5869,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,489,"Increment or decrement operation performed on pointer.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5870,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__result' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5871,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5872,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5873,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5874,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5875,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5876,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5877,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5878,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5879,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5880,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5881,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,2100,"Integral promotion : unsigned char promoted to signed int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5882,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5883,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3112,"This statement has no side-effect - it can be removed.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5884,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3122,"Hard-coded 'magic' string literal.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5885,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3200,"__builtin_strcmp' returns a value which is not being used.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5886,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5887,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5888,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5889,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5890,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5891,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5892,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5893,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5894,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5895,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3325,"This control expression has a constant 'false' value.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5896,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3326,"An assignment operator is being used in a boolean expression.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5897,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5898,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5899,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5900,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5901,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5902,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5903,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5904,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5905,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5906,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5907,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5908,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5909,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5910,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5911,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5912,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5913,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5914,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5915,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5916,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5917,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5918,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5919,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5920,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3416,"This boolean expression contains side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5921,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3417,"The comma operator has been used outside a for-loop header.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5922,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3446,"The result operands of this conditional operator generate side effects","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5923,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3631,"Type 'char' has been used in a cast.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5924,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3760,"Implicit conversion: int to unsigned int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5925,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,35,3209,"__builtin_strcmp()' returns a value which is always ignored.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5926,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5927,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5928,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,36,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5929,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,43,2209,"This brace style is not consistent with 'exdented' style.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5930,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,43,3201,"This statement is unreachable.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5931,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",113,6,2017,"Comment spans more than one line.","  113:	    */
",,,
5932,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",114,36,3122,"Hard-coded 'magic' string literal.","  114:	    g_fpLogFile = fopen(APPLOGFILE,""w"");
",,,
5933,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",115,28,2209,"This brace style is not consistent with 'exdented' style.","  115:	    if(g_fpLogFile == NULL){
",,,
5934,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",116,9,3200,"printf' returns a value which is not being used.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
5935,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",116,16,3122,"Hard-coded 'magic' string literal.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
5936,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",120,5,702,"Result of sizeof operator is not explicitly cast.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
5937,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",120,63,3430,"Macro argument expression requires parentheses.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
5938,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",121,29,2209,"This brace style is not consistent with 'exdented' style.","  121:	    if(the_pAnzInfo == NULL){
",,,
5939,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",122,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  122:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
5940,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",123,18,2001,"A 'goto' statement has been used.","  123:	        goto EXIT;
",,,
5941,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",125,5,702,"Result of sizeof operator is not explicitly cast.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
5942,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",125,5,3200,"memset' returns a value which is not being used.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
5943,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",128,5,702,"Result of sizeof operator is not explicitly cast.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
5944,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",128,67,3430,"Macro argument expression requires parentheses.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
5945,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",129,39,2209,"This brace style is not consistent with 'exdented' style.","  129:	    if(the_pAnzInfo-&gt;m_option == NULL){
",,,
5946,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",130,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  130:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
5947,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",131,18,2001,"A 'goto' statement has been used.","  131:	        goto EXIT;
",,,
5948,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",133,5,702,"Result of sizeof operator is not explicitly cast.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
5949,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",133,5,3200,"memset' returns a value which is not being used.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
5950,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,702,"Result of sizeof operator is not explicitly cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
5951,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,3631,"Type 'char' has been used in a cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
5952,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,3633,"Type 'char' has been used in the operand of the sizeof operator.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
5953,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,3760,"Implicit conversion: int to unsigned int.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
5954,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",138,34,2209,"This brace style is not consistent with 'exdented' style.","  138:	    if(the_pMeasureItem == NULL) {
",,,
5955,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",139,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  139:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
5956,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",140,18,2001,"A 'goto' statement has been used.","  140:	        goto EXIT;
",,,
5957,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,5,702,"Result of sizeof operator is not explicitly cast.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
5958,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,5,3200,"memset' returns a value which is not being used.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
5959,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,36,3760,"Implicit conversion: int to unsigned int.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
5960,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,45,3633,"Type 'char' has been used in the operand of the sizeof operator.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
5961,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",150,5,3200,"strcpy' returns a value which is not being used.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
5962,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",150,34,3122,"Hard-coded 'magic' string literal.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
5963,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",154,5,3200,"strcpy' returns a value which is not being used.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
5964,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",154,39,3122,"Hard-coded 'magic' string literal.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
5965,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",155,5,3200,"strcpy' returns a value which is not being used.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
5966,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",155,38,3122,"Hard-coded 'magic' string literal.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
5967,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",156,5,3200,"strcpy' returns a value which is not being used.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
5968,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",156,38,3122,"Hard-coded 'magic' string literal.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
5969,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",165,32,3120,"Hard-coded 'magic' integer constant '70'.","  165:	    the_pOption-&gt;m_symThresh = 70;
",,,
5970,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",166,32,3120,"Hard-coded 'magic' integer constant '2'.","  166:	    the_pOption-&gt;m_minThresh = 2;
",,,
5971,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",169,5,702,"Result of sizeof operator is not explicitly cast.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
5972,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",169,59,3430,"Macro argument expression requires parentheses.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
5973,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",170,31,2209,"This brace style is not consistent with 'exdented' style.","  170:	    if(the_pCmdOption == NULL){
",,,
5974,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",171,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  171:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
5975,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",172,18,2001,"A 'goto' statement has been used.","  172:	        goto EXIT;
",,,
5976,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",174,5,702,"Result of sizeof operator is not explicitly cast.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
5977,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",174,5,3200,"memset' returns a value which is not being used.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
5978,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",180,5,3200,"strcpy' returns a value which is not being used.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
5979,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",180,37,3122,"Hard-coded 'magic' string literal.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
5980,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",184,5,3200,"strcpy' returns a value which is not being used.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
5981,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",184,42,3122,"Hard-coded 'magic' string literal.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
5982,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",185,5,3200,"strcpy' returns a value which is not being used.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
5983,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",185,41,3122,"Hard-coded 'magic' string literal.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
5984,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",186,5,3200,"strcpy' returns a value which is not being used.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
5985,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",186,41,3122,"Hard-coded 'magic' string literal.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
5986,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",195,35,3120,"Hard-coded 'magic' integer constant '70'.","  195:	    the_pCmdOption-&gt;m_symThresh = 70;
",,,
5987,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",196,35,3120,"Hard-coded 'magic' integer constant '2'.","  196:	    the_pCmdOption-&gt;m_minThresh = 2;
",,,
5988,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",200,32,2209,"This brace style is not consistent with 'exdented' style.","  200:	    if(the_iRet != ANZ_SUCCESS){
",,,
5989,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",201,18,2001,"A 'goto' statement has been used.","  201:	        goto EXIT;
",,,
5990,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",203,8,3344,"Value of control expression is not derived from an explicit logical operation.","  203:	    if(g_bOutTime) {
",,,
5991,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",203,20,2209,"This brace style is not consistent with 'exdented' style.","  203:	    if(g_bOutTime) {
",,,
5992,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",204,9,3200,"ftime' returns a value which is not being used.","  204:	        ftime(&amp;the_st);
",,,
5993,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",209,32,2209,"This brace style is not consistent with 'exdented' style.","  209:	    if(the_iRet != ANZ_SUCCESS){
",,,
5994,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",210,18,2001,"A 'goto' statement has been used.","  210:	        goto EXIT;
",,,
5995,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",214,32,2209,"This brace style is not consistent with 'exdented' style.","  214:	    if(the_iRet != ANZ_SUCCESS){
",,,
5996,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",215,18,2001,"A 'goto' statement has been used.","  215:	        goto EXIT;
",,,
5997,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",218,23,3355,"The result of this logical operation is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
5998,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",218,23,3358,"The value of this 'if' control expression is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
5999,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",218,31,2209,"This brace style is not consistent with 'exdented' style.","  218:	    if(the_pCmdOption != NULL){
",,,
6000,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",224,32,2209,"This brace style is not consistent with 'exdented' style.","  224:	    if(the_iRet != ANZ_SUCCESS){
",,,
6001,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",225,18,2001,"A 'goto' statement has been used.","  225:	        goto EXIT;
",,,
6002,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",229,32,2209,"This brace style is not consistent with 'exdented' style.","  229:	    if(the_iRet != ANZ_SUCCESS){
",,,
6003,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",230,18,2001,"A 'goto' statement has been used.","  230:	        goto EXIT;
",,,
6004,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",233,47,2209,"This brace style is not consistent with 'exdented' style.","  233:	    if(the_iMeasureType == ANZ_TREND_MEASURE) {
",,,
6005,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",234,13,3220,"Identifier declared at a nested level of block scope.","  234:	        int the_iType = -1;
",,,
6006,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",235,13,3220,"Identifier declared at a nested level of block scope.","  235:	        int the_pPos = -1;
",,,
6007,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",236,9,3200,"isDirOrFile' returns a value which is not being used.","  236:	        isDirOrFile(*the_pMeasureItem,&amp;the_iType);
",,,
6008,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",237,35,2209,"This brace style is not consistent with 'exdented' style.","  237:	        if(the_iType == ANZ_FILE) {
",,,
6009,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",242,30,2209,"This brace style is not consistent with 'exdented' style.","  242:	            if(the_pPos &gt; 0) {
",,,
6010,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",243,55,488,"Performing pointer arithmetic.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
6011,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",243,66,489,"Increment or decrement operation performed on pointer.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
6012,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",246,43,489,"Increment or decrement operation performed on pointer.","  246:	            GetPathPos(*(the_pMeasureItem + 1),&amp;the_pPos);
",,,
6013,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",248,30,2209,"This brace style is not consistent with 'exdented' style.","  248:	            if(the_pPos &gt; 0) {
",,,
6014,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,36,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
6015,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,42,3501,"This could be read as an old-style assignment operator. Spaces are needed to make it more readable.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
6016,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,61,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
6017,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,66,488,"Performing pointer arithmetic.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
6018,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,77,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
6019,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",252,13,3198,"The value assigned to 'the_iRet' is always modified before being used.","  252:	            the_iRet = ResetTrendPath(g_szNVPath);
",,,
6020,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",254,41,2209,"This brace style is not consistent with 'exdented' style.","  254:	            if(the_iRet != ANZ_SUCCESS) {
",,,
6021,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",255,26,2001,"A 'goto' statement has been used.","  255:	                goto EXIT;
",,,
6022,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",260,51,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
6023,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",260,57,3631,"Type 'char' has been used in a cast.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
6024,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",261,41,2209,"This brace style is not consistent with 'exdented' style.","  261:	    if(the_iRet == ANZ_NO_MEASURE_FILES){
",,,
6025,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",262,9,3200,"printf' returns a value which is not being used.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
6026,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",262,16,3122,"Hard-coded 'magic' string literal.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
6027,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",264,42,2209,"This brace style is not consistent with 'exdented' style.","  264:	    if(the_iRet == ANZ_ERR_MEMORY_FAILED){
",,,
6028,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",265,9,3200,"printf' returns a value which is not being used.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
6029,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",265,16,3122,"Hard-coded 'magic' string literal.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
6030,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",267,32,2209,"This brace style is not consistent with 'exdented' style.","  267:	    if(the_iRet != ANZ_SUCCESS){
",,,
6031,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",268,18,2001,"A 'goto' statement has been used.","  268:	        goto EXIT;
",,,
6032,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",272,37,2209,"This brace style is not consistent with 'exdented' style.","  272:	    if(the_pOption-&gt;m_fileLOC == ON){
",,,
6033,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",273,9,3200,"strcat' returns a value which is not being used.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
6034,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",273,33,3122,"Hard-coded 'magic' string literal.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
6035,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",276,40,2209,"This brace style is not consistent with 'exdented' style.","  276:	    if(the_pOption-&gt;m_redundancy == ON){
",,,
6036,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,306,"[I] Cast between a pointer to object and an integral type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6037,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,310,"Casting to different object pointer type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6038,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6039,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,489,"Increment or decrement operation performed on pointer.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6040,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__result' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6041,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6042,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6043,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6044,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6045,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6046,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6047,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6048,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6049,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6050,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6051,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,2100,"Integral promotion : unsigned char promoted to signed int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6052,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6053,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3112,"This statement has no side-effect - it can be removed.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6054,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3122,"Hard-coded 'magic' string literal.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6055,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3200,"__builtin_strcmp' returns a value which is not being used.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6056,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6057,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6058,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6059,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6060,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6061,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6062,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6063,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6064,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6065,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3326,"An assignment operator is being used in a boolean expression.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6066,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3346,"This 'if' control expression has a constant 'true' value.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6067,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6068,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6069,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6070,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6071,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6072,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6073,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6074,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6075,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6076,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6077,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6078,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6079,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6080,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6081,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6082,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6083,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6084,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6085,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6086,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6087,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6088,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6089,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6090,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3416,"This boolean expression contains side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6091,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3417,"The comma operator has been used outside a for-loop header.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6092,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3446,"The result operands of this conditional operator generate side effects","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6093,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3631,"Type 'char' has been used in a cast.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6094,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3760,"Implicit conversion: int to unsigned int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6095,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6096,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6097,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6098,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,45,2209,"This brace style is not consistent with 'exdented' style.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6099,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",278,13,3200,"strcat' returns a value which is not being used.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
6100,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",278,37,3122,"Hard-coded 'magic' string literal.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
6101,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",278,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
6102,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",279,13,3200,"strcat' returns a value which is not being used.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
6103,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",279,37,3122,"Hard-coded 'magic' string literal.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
6104,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",279,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
6105,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",281,13,2209,"This brace style is not consistent with 'exdented' style.","  281:	        else{
",,,
6106,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",281,13,3201,"This statement is unreachable.","  281:	        else{
",,,
6107,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",282,13,3200,"strcat' returns a value which is not being used.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
6108,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",282,37,3122,"Hard-coded 'magic' string literal.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
6109,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",282,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
6110,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",286,8,3344,"Value of control expression is not derived from an explicit logical operation.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
6111,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",286,31,2209,"This brace style is not consistent with 'exdented' style.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
6112,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,306,"[I] Cast between a pointer to object and an integral type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6113,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,310,"Casting to different object pointer type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6114,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6115,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,489,"Increment or decrement operation performed on pointer.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6116,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__result' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6117,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6118,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6119,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6120,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6121,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6122,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6123,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6124,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6125,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6126,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6127,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,2100,"Integral promotion : unsigned char promoted to signed int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6128,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6129,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3112,"This statement has no side-effect - it can be removed.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6130,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3122,"Hard-coded 'magic' string literal.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6131,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3200,"__builtin_strcmp' returns a value which is not being used.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6132,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6133,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6134,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6135,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6136,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6137,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6138,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6139,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6140,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6141,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3326,"An assignment operator is being used in a boolean expression.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6142,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3346,"This 'if' control expression has a constant 'true' value.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6143,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6144,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6145,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6146,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6147,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6148,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6149,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6150,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6151,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6152,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6153,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6154,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6155,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6156,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6157,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6158,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6159,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6160,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6161,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6162,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6163,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6164,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6165,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6166,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3416,"This boolean expression contains side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6167,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3417,"The comma operator has been used outside a for-loop header.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6168,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3446,"The result operands of this conditional operator generate side effects","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6169,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3631,"Type 'char' has been used in a cast.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6170,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3760,"Implicit conversion: int to unsigned int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6171,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6172,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6173,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6174,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,45,2209,"This brace style is not consistent with 'exdented' style.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6175,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",288,13,3200,"strcat' returns a value which is not being used.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
6176,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",288,37,3122,"Hard-coded 'magic' string literal.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
6177,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",288,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
6178,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",289,13,3200,"strcat' returns a value which is not being used.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
6179,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",289,37,3122,"Hard-coded 'magic' string literal.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
6180,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",289,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
6181,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",291,13,2209,"This brace style is not consistent with 'exdented' style.","  291:	        else{
",,,
6182,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",291,13,3201,"This statement is unreachable.","  291:	        else{
",,,
6183,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",292,13,3200,"strcat' returns a value which is not being used.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
6184,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",292,37,3122,"Hard-coded 'magic' string literal.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
6185,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",292,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
6186,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",296,8,3344,"Value of control expression is not derived from an explicit logical operation.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
6187,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",296,28,2209,"This brace style is not consistent with 'exdented' style.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
6188,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,306,"[I] Cast between a pointer to object and an integral type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6189,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,310,"Casting to different object pointer type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6190,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6191,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,489,"Increment or decrement operation performed on pointer.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6192,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__result' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6193,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6194,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6195,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6196,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6197,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6198,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6199,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6200,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6201,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6202,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6203,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,2100,"Integral promotion : unsigned char promoted to signed int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6204,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6205,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3112,"This statement has no side-effect - it can be removed.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6206,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3122,"Hard-coded 'magic' string literal.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6207,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3200,"__builtin_strcmp' returns a value which is not being used.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6208,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6209,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6210,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6211,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6212,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6213,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6214,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6215,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6216,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6217,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3326,"An assignment operator is being used in a boolean expression.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6218,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3346,"This 'if' control expression has a constant 'true' value.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6219,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6220,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6221,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6222,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6223,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6224,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6225,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6226,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6227,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6228,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6229,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6230,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6231,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6232,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6233,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6234,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6235,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6236,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6237,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6238,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6239,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6240,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6241,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6242,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3416,"This boolean expression contains side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6243,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3417,"The comma operator has been used outside a for-loop header.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6244,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3446,"The result operands of this conditional operator generate side effects","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6245,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3631,"Type 'char' has been used in a cast.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6246,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3760,"Implicit conversion: int to unsigned int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6247,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6248,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6249,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6250,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,45,2209,"This brace style is not consistent with 'exdented' style.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6251,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",298,13,3200,"strcat' returns a value which is not being used.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
6252,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",298,37,3122,"Hard-coded 'magic' string literal.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
6253,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",298,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
6254,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",299,13,3200,"strcat' returns a value which is not being used.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
6255,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",299,37,3122,"Hard-coded 'magic' string literal.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
6256,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",299,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
6257,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",301,13,2209,"This brace style is not consistent with 'exdented' style.","  301:	        else{
",,,
6258,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",301,13,3201,"This statement is unreachable.","  301:	        else{
",,,
6259,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",302,13,3200,"strcat' returns a value which is not being used.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
6260,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",302,37,3122,"Hard-coded 'magic' string literal.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
6261,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",302,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
6262,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,306,"[I] Cast between a pointer to object and an integral type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6263,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,310,"Casting to different object pointer type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6264,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6265,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,489,"Increment or decrement operation performed on pointer.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6266,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__result' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6267,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6268,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6269,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6270,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6271,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6272,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6273,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6274,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6275,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6276,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6277,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,2100,"Integral promotion : unsigned char promoted to signed int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6278,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6279,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3112,"This statement has no side-effect - it can be removed.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6280,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3122,"Hard-coded 'magic' string literal.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6281,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3200,"__builtin_strcmp' returns a value which is not being used.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6282,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6283,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6284,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6285,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6286,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6287,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6288,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6289,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6290,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6291,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3326,"An assignment operator is being used in a boolean expression.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6292,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3346,"This 'if' control expression has a constant 'true' value.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6293,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6294,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6295,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6296,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6297,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6298,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6299,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6300,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6301,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6302,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6303,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6304,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6305,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6306,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6307,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6308,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6309,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6310,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6311,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6312,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6313,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6314,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6315,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6316,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3416,"This boolean expression contains side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6317,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3417,"The comma operator has been used outside a for-loop header.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6318,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3446,"The result operands of this conditional operator generate side effects","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6319,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3631,"Type 'char' has been used in a cast.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6320,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3760,"Implicit conversion: int to unsigned int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6321,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6322,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6323,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6324,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,45,2209,"This brace style is not consistent with 'exdented' style.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6325,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",305,13,3200,"strcat' returns a value which is not being used.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
6326,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",305,37,3122,"Hard-coded 'magic' string literal.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
6327,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",305,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
6328,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",306,13,3200,"strcat' returns a value which is not being used.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
6329,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",306,37,3122,"Hard-coded 'magic' string literal.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
6330,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",308,13,2209,"This brace style is not consistent with 'exdented' style.","  308:	        else{
",,,
6331,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",308,13,3201,"This statement is unreachable.","  308:	        else{
",,,
6332,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",309,13,3200,"strcat' returns a value which is not being used.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
6333,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",309,37,3122,"Hard-coded 'magic' string literal.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
6334,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",314,8,3344,"Value of control expression is not derived from an explicit logical operation.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
6335,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",314,34,2209,"This brace style is not consistent with 'exdented' style.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
6336,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,306,"[I] Cast between a pointer to object and an integral type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6337,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,310,"Casting to different object pointer type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6338,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6339,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,489,"Increment or decrement operation performed on pointer.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6340,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__result' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6341,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6342,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6343,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6344,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6345,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6346,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6347,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6348,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6349,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6350,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6351,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,2100,"Integral promotion : unsigned char promoted to signed int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6352,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6353,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3112,"This statement has no side-effect - it can be removed.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6354,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3122,"Hard-coded 'magic' string literal.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6355,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3200,"__builtin_strcmp' returns a value which is not being used.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6356,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6357,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6358,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6359,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6360,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6361,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6362,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6363,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6364,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6365,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3326,"An assignment operator is being used in a boolean expression.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6366,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3346,"This 'if' control expression has a constant 'true' value.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6367,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6368,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6369,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6370,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6371,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6372,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6373,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6374,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6375,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6376,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6377,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6378,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6379,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6380,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6381,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6382,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6383,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6384,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6385,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6386,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6387,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6388,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6389,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6390,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3416,"This boolean expression contains side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6391,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3417,"The comma operator has been used outside a for-loop header.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6392,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3446,"The result operands of this conditional operator generate side effects","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6393,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3631,"Type 'char' has been used in a cast.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6394,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3760,"Implicit conversion: int to unsigned int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6395,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6396,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6397,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6398,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,45,2209,"This brace style is not consistent with 'exdented' style.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6399,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",316,13,3200,"strcat' returns a value which is not being used.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
6400,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",316,37,3122,"Hard-coded 'magic' string literal.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
6401,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",316,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
6402,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",317,13,3200,"strcat' returns a value which is not being used.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
6403,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",317,37,3122,"Hard-coded 'magic' string literal.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
6404,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",317,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
6405,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",319,13,2209,"This brace style is not consistent with 'exdented' style.","  319:	        else{
",,,
6406,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",319,13,3201,"This statement is unreachable.","  319:	        else{
",,,
6407,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",320,13,3200,"strcat' returns a value which is not being used.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
6408,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",320,37,3122,"Hard-coded 'magic' string literal.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
6409,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",320,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
6410,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,306,"[I] Cast between a pointer to object and an integral type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6411,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,310,"Casting to different object pointer type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6412,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6413,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,489,"Increment or decrement operation performed on pointer.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6414,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__result' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6415,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6416,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6417,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6418,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6419,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6420,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6421,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6422,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6423,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6424,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6425,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,2100,"Integral promotion : unsigned char promoted to signed int.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6426,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6427,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3112,"This statement has no side-effect - it can be removed.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6428,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3122,"Hard-coded 'magic' string literal.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6429,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3200,"__builtin_strcmp' returns a value which is not being used.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6430,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6431,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6432,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6433,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6434,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6435,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6436,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6437,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6438,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6439,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3326,"An assignment operator is being used in a boolean expression.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6440,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3346,"This 'if' control expression has a constant 'true' value.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6441,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6442,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6443,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6444,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6445,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6446,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6447,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6448,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6449,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6450,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6451,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6452,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6453,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6454,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6455,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6456,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6457,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6458,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6459,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6460,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6461,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6462,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6463,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6464,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3416,"This boolean expression contains side effects.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6465,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3417,"The comma operator has been used outside a for-loop header.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6466,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3446,"The result operands of this conditional operator generate side effects","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6467,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3631,"Type 'char' has been used in a cast.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6468,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3760,"Implicit conversion: int to unsigned int.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6469,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6470,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6471,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6472,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,45,2209,"This brace style is not consistent with 'exdented' style.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6473,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",324,13,3200,"strcat' returns a value which is not being used.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
6474,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",324,37,3122,"Hard-coded 'magic' string literal.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
6475,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",324,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
6476,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",325,13,3200,"strcat' returns a value which is not being used.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
6477,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",325,37,3122,"Hard-coded 'magic' string literal.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
6478,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",325,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
6479,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",327,13,2209,"This brace style is not consistent with 'exdented' style.","  327:	        else{
",,,
6480,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",327,13,3201,"This statement is unreachable.","  327:	        else{
",,,
6481,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",328,13,3200,"strcat' returns a value which is not being used.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
6482,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",328,37,3122,"Hard-coded 'magic' string literal.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
6483,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",328,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
6484,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",333,8,3344,"Value of control expression is not derived from an explicit logical operation.","  333:	    if(the_pOption-&gt;m_trend){
",,,
6485,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",333,29,2209,"This brace style is not consistent with 'exdented' style.","  333:	    if(the_pOption-&gt;m_trend){
",,,
6486,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,306,"[I] Cast between a pointer to object and an integral type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6487,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,310,"Casting to different object pointer type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6488,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6489,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,489,"Increment or decrement operation performed on pointer.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6490,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__result' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6491,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6492,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6493,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6494,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6495,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6496,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6497,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6498,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6499,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6500,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6501,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,2100,"Integral promotion : unsigned char promoted to signed int.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6502,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6503,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3112,"This statement has no side-effect - it can be removed.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6504,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3122,"Hard-coded 'magic' string literal.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6505,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3200,"__builtin_strcmp' returns a value which is not being used.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6506,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6507,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6508,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6509,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6510,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6511,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6512,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6513,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6514,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6515,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3326,"An assignment operator is being used in a boolean expression.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6516,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3346,"This 'if' control expression has a constant 'true' value.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6517,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6518,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6519,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6520,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6521,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6522,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6523,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6524,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6525,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6526,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6527,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6528,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6529,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6530,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6531,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6532,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6533,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6534,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6535,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6536,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6537,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6538,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6539,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6540,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3416,"This boolean expression contains side effects.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6541,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3417,"The comma operator has been used outside a for-loop header.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6542,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3446,"The result operands of this conditional operator generate side effects","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6543,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3631,"Type 'char' has been used in a cast.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6544,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3760,"Implicit conversion: int to unsigned int.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6545,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6546,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6547,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6548,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,45,2209,"This brace style is not consistent with 'exdented' style.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6549,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",335,13,3200,"strcat' returns a value which is not being used.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
6550,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",335,37,3122,"Hard-coded 'magic' string literal.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
6551,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",335,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
6552,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",336,13,3200,"strcat' returns a value which is not being used.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
6553,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",336,37,3122,"Hard-coded 'magic' string literal.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
6554,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",336,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
6555,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",338,13,2209,"This brace style is not consistent with 'exdented' style.","  338:	        else{
",,,
6556,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",338,13,3201,"This statement is unreachable.","  338:	        else{
",,,
6557,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",339,13,3200,"strcat' returns a value which is not being used.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
6558,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",339,37,3122,"Hard-coded 'magic' string literal.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
6559,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",339,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
6560,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",341,9,3200,"strcat' returns a value which is not being used.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
6561,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",341,33,3122,"Hard-coded 'magic' string literal.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
6562,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",341,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
6563,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",345,8,3344,"Value of control expression is not derived from an explicit logical operation.","  345:	    if(the_pOption-&gt;m_funcTrend){
",,,
6564,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",345,33,2209,"This brace style is not consistent with 'exdented' style.","  345:	    if(the_pOption-&gt;m_funcTrend){
",,,
6565,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,306,"[I] Cast between a pointer to object and an integral type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6566,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,310,"Casting to different object pointer type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6567,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6568,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,489,"Increment or decrement operation performed on pointer.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6569,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__result' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6570,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6571,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6572,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6573,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6574,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6575,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6576,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6577,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6578,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6579,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6580,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,2100,"Integral promotion : unsigned char promoted to signed int.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6581,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6582,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3112,"This statement has no side-effect - it can be removed.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6583,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3122,"Hard-coded 'magic' string literal.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6584,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3200,"__builtin_strcmp' returns a value which is not being used.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6585,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6586,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6587,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6588,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6589,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6590,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6591,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6592,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6593,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6594,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3326,"An assignment operator is being used in a boolean expression.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6595,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3346,"This 'if' control expression has a constant 'true' value.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6596,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6597,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6598,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6599,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6600,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6601,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6602,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6603,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6604,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6605,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6606,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6607,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6608,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6609,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6610,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6611,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6612,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6613,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6614,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6615,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6616,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6617,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6618,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6619,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3416,"This boolean expression contains side effects.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6620,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3417,"The comma operator has been used outside a for-loop header.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6621,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3446,"The result operands of this conditional operator generate side effects","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6622,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3631,"Type 'char' has been used in a cast.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6623,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3760,"Implicit conversion: int to unsigned int.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6624,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6625,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6626,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6627,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,45,2209,"This brace style is not consistent with 'exdented' style.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6628,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",347,13,3200,"strcat' returns a value which is not being used.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
6629,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",347,37,3122,"Hard-coded 'magic' string literal.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
6630,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",347,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
6631,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",348,13,3200,"strcat' returns a value which is not being used.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
6632,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",348,37,3122,"Hard-coded 'magic' string literal.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
6633,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",348,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
6634,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",350,13,2209,"This brace style is not consistent with 'exdented' style.","  350:	        else{
",,,
6635,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",350,13,3201,"This statement is unreachable.","  350:	        else{
",,,
6636,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",351,13,3200,"strcat' returns a value which is not being used.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
6637,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",351,37,3122,"Hard-coded 'magic' string literal.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
6638,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",351,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
6639,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,306,"[I] Cast between a pointer to object and an integral type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6640,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,310,"Casting to different object pointer type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6641,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6642,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,489,"Increment or decrement operation performed on pointer.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6643,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__result' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6644,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6645,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6646,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6647,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6648,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6649,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6650,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6651,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6652,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6653,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6654,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,2100,"Integral promotion : unsigned char promoted to signed int.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6655,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6656,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3112,"This statement has no side-effect - it can be removed.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6657,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3122,"Hard-coded 'magic' string literal.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6658,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3200,"__builtin_strcmp' returns a value which is not being used.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6659,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6660,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6661,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6662,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6663,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6664,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6665,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6666,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6667,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6668,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3326,"An assignment operator is being used in a boolean expression.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6669,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3346,"This 'if' control expression has a constant 'true' value.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6670,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6671,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6672,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6673,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6674,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6675,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6676,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6677,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6678,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6679,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6680,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6681,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6682,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6683,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6684,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6685,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6686,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6687,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6688,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6689,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6690,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6691,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6692,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6693,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3416,"This boolean expression contains side effects.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6694,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3417,"The comma operator has been used outside a for-loop header.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6695,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3446,"The result operands of this conditional operator generate side effects","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6696,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3631,"Type 'char' has been used in a cast.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6697,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3760,"Implicit conversion: int to unsigned int.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6698,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6699,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6700,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6701,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,45,2209,"This brace style is not consistent with 'exdented' style.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6702,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",354,13,3200,"strcat' returns a value which is not being used.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
6703,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",354,37,3122,"Hard-coded 'magic' string literal.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
6704,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",354,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
6705,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",355,13,3200,"strcat' returns a value which is not being used.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
6706,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",355,37,3122,"Hard-coded 'magic' string literal.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
6707,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",355,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
6708,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",357,13,2209,"This brace style is not consistent with 'exdented' style.","  357:	        else{
",,,
6709,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",357,13,3201,"This statement is unreachable.","  357:	        else{
",,,
6710,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",358,13,3200,"strcat' returns a value which is not being used.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
6711,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",358,37,3122,"Hard-coded 'magic' string literal.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
6712,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",358,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
6713,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,306,"[I] Cast between a pointer to object and an integral type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6714,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,310,"Casting to different object pointer type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6715,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6716,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,489,"Increment or decrement operation performed on pointer.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6717,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__result' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6718,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6719,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6720,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6721,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6722,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6723,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6724,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6725,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6726,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6727,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6728,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,2100,"Integral promotion : unsigned char promoted to signed int.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6729,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6730,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3112,"This statement has no side-effect - it can be removed.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6731,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3122,"Hard-coded 'magic' string literal.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6732,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3200,"__builtin_strcmp' returns a value which is not being used.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6733,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6734,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6735,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6736,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6737,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6738,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6739,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6740,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6741,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6742,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3326,"An assignment operator is being used in a boolean expression.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6743,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3346,"This 'if' control expression has a constant 'true' value.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6744,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6745,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6746,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6747,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6748,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6749,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6750,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6751,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6752,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6753,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6754,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6755,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6756,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6757,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6758,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6759,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6760,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6761,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6762,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6763,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6764,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6765,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6766,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6767,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3416,"This boolean expression contains side effects.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6768,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3417,"The comma operator has been used outside a for-loop header.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6769,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3446,"The result operands of this conditional operator generate side effects","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6770,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3631,"Type 'char' has been used in a cast.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6771,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3760,"Implicit conversion: int to unsigned int.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6772,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6773,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6774,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6775,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,45,2209,"This brace style is not consistent with 'exdented' style.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6776,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",361,13,3200,"strcat' returns a value which is not being used.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
6777,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",361,37,3122,"Hard-coded 'magic' string literal.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
6778,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",361,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
6779,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",362,13,3200,"strcat' returns a value which is not being used.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
6780,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",362,37,3122,"Hard-coded 'magic' string literal.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
6781,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",362,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
6782,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",364,13,2209,"This brace style is not consistent with 'exdented' style.","  364:	        else{
",,,
6783,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",364,13,3201,"This statement is unreachable.","  364:	        else{
",,,
6784,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",365,13,3200,"strcat' returns a value which is not being used.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
6785,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",365,37,3122,"Hard-coded 'magic' string literal.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
6786,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",365,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
6787,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,306,"[I] Cast between a pointer to object and an integral type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6788,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,310,"Casting to different object pointer type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6789,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6790,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,489,"Increment or decrement operation performed on pointer.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6791,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__result' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6792,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6793,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6794,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6795,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6796,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6797,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6798,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6799,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6800,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6801,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6802,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,2100,"Integral promotion : unsigned char promoted to signed int.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6803,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6804,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3112,"This statement has no side-effect - it can be removed.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6805,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3122,"Hard-coded 'magic' string literal.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6806,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3200,"__builtin_strcmp' returns a value which is not being used.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6807,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6808,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6809,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6810,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6811,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6812,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6813,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6814,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6815,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6816,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3326,"An assignment operator is being used in a boolean expression.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6817,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3346,"This 'if' control expression has a constant 'true' value.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6818,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6819,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6820,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6821,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6822,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6823,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6824,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6825,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6826,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6827,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6828,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6829,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6830,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6831,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6832,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6833,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6834,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6835,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6836,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6837,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6838,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6839,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6840,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6841,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3416,"This boolean expression contains side effects.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6842,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3417,"The comma operator has been used outside a for-loop header.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6843,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3446,"The result operands of this conditional operator generate side effects","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6844,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3631,"Type 'char' has been used in a cast.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6845,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3760,"Implicit conversion: int to unsigned int.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6846,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6847,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6848,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6849,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,45,2209,"This brace style is not consistent with 'exdented' style.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6850,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",368,13,3200,"strcat' returns a value which is not being used.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
6851,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",368,37,3122,"Hard-coded 'magic' string literal.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
6852,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",368,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
6853,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",369,13,3200,"strcat' returns a value which is not being used.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
6854,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",369,37,3122,"Hard-coded 'magic' string literal.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
6855,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",369,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
6856,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",371,13,2209,"This brace style is not consistent with 'exdented' style.","  371:	        else{
",,,
6857,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",371,13,3201,"This statement is unreachable.","  371:	        else{
",,,
6858,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",372,13,3200,"strcat' returns a value which is not being used.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
6859,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",372,37,3122,"Hard-coded 'magic' string literal.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
6860,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",372,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
6861,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",377,37,2209,"This brace style is not consistent with 'exdented' style.","  377:	    if(the_pOption-&gt;m_verbos == ON ){
",,,
6862,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",379,9,3200,"printf' returns a value which is not being used.","  379:	        printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_START);
",,,
6863,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",379,16,3122,"Hard-coded 'magic' string literal.","  379:	        printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_START);
",,,
6864,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",384,32,2209,"This brace style is not consistent with 'exdented' style.","  384:	    if(the_iRet != ANZ_SUCCESS){
",,,
6865,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",385,18,2001,"A 'goto' statement has been used.","  385:	        goto EXIT;
",,,
6866,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",390,32,2209,"This brace style is not consistent with 'exdented' style.","  390:	    if(the_iRet != ANZ_SUCCESS){
",,,
6867,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",392,18,2001,"A 'goto' statement has been used.","  392:	        goto EXIT;
",,,
6868,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",397,47,2209,"This brace style is not consistent with 'exdented' style.","  397:	    if(the_iMeasureType == ANZ_COMMON_MEASURE){
",,,
6869,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",400,36,2209,"This brace style is not consistent with 'exdented' style.","  400:	        if(the_iRet != ANZ_SUCCESS){
",,,
6870,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",401,22,2001,"A 'goto' statement has been used.","  401:	            goto EXIT;
",,,
6871,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",404,36,2209,"This brace style is not consistent with 'exdented' style.","  404:	        if(the_iRet != ANZ_SUCCESS){
",,,
6872,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",405,13,3200,"printf' returns a value which is not being used.","  405:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
6873,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",405,20,3122,"Hard-coded 'magic' string literal.","  405:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
6874,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",406,22,2001,"A 'goto' statement has been used.","  406:	            goto EXIT;
",,,
6875,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",410,46,2209,"This brace style is not consistent with 'exdented' style.","  410:	    if(the_iMeasureType == ANZ_TREND_MEASURE){
",,,
6876,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",413,36,2209,"This brace style is not consistent with 'exdented' style.","  413:	        if(the_iRet != ANZ_SUCCESS){
",,,
6877,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",414,22,2001,"A 'goto' statement has been used.","  414:	            goto EXIT;
",,,
6878,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",417,36,2209,"This brace style is not consistent with 'exdented' style.","  417:	        if(the_iRet != ANZ_SUCCESS){
",,,
6879,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",418,13,3200,"printf' returns a value which is not being used.","  418:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
6880,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",418,20,3122,"Hard-coded 'magic' string literal.","  418:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
6881,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",419,22,2001,"A 'goto' statement has been used.","  419:	            goto EXIT;
",,,
6882,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",424,36,2209,"This brace style is not consistent with 'exdented' style.","  424:	    if(the_pOption-&gt;m_verbos == ON){
",,,
6883,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",425,40,2209,"This brace style is not consistent with 'exdented' style.","  425:	        if(the_pAnzInfo-&gt;m_err == NULL){
",,,
6884,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",426,13,3200,"printf' returns a value which is not being used.","  426:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
6885,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",426,20,3122,"Hard-coded 'magic' string literal.","  426:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
6886,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",428,13,2209,"This brace style is not consistent with 'exdented' style.","  428:	        else{
",,,
6887,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",429,13,3200,"printf' returns a value which is not being used.","  429:	            printf(""%s%s%s\n"",MSG_MEASURE_FILE_ERROR,the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
6888,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",429,20,3122,"Hard-coded 'magic' string literal.","  429:	            printf(""%s%s%s\n"",MSG_MEASURE_FILE_ERROR,the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
6889,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,1,2015,"This label is not a case or default label for a switch statement.","  433:	EXIT:;
",,,
6890,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,1,2201,"This indentation is not consistent with previous indentation in this file.","  433:	EXIT:;
",,,
6891,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,6,3109,"Empty statement (';' on its own) - if this is deliberate, it is best to put ';' on a line by itself.","  433:	EXIT:;
",,,
6892,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,6,3139,"Null statement is obscured by code or comment on the same line.","  433:	EXIT:;
",,,
6893,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",435,29,505,"[U] Dereferencing pointer value that is apparently NULL.","  435:	    the_iRet = OutErrorFile(the_pAnzInfo-&gt;m_err);
",,,
6894,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",436,42,2209,"This brace style is not consistent with 'exdented' style.","  436:	    if(the_iRet == ANZ_ERR_MEMORY_FAILED){
",,,
6895,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",437,9,3200,"printf' returns a value which is not being used.","  437:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
6896,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",437,16,3122,"Hard-coded 'magic' string literal.","  437:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
6897,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",442,31,2209,"This brace style is not consistent with 'exdented' style.","  442:	    if(the_pCmdOption != NULL){
",,,
6898,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",444,9,3199,"The value of 'the_pCmdOption' is never used following this assignment.","  444:	        the_pCmdOption = NULL;
",,,
6899,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",447,34,2209,"This brace style is not consistent with 'exdented' style.","  447:	    if(the_pMeasureItem != NULL) {
",,,
6900,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",449,9,3199,"The value of 'the_pMeasureItem' is never used following this assignment.","  449:	        the_pMeasureItem = NULL;
",,,
6901,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",455,8,3344,"Value of control expression is not derived from an explicit logical operation.","  455:	    if(g_bOutTime) {
",,,
6902,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",455,20,2209,"This brace style is not consistent with 'exdented' style.","  455:	    if(g_bOutTime) {
",,,
6903,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",456,9,3200,"ftime' returns a value which is not being used.","  456:	        ftime(&amp;the_ed);
",,,
6904,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,9,3200,"printf' returns a value which is not being used.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
6905,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,9,3395,"Operators in the set + - * / with different precedence have been used. Extra parentheses recommended.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
6906,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,9,3401,"Possible precedence confusion: extra parentheses are recommended here.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
6907,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,16,3122,"Hard-coded 'magic' string literal.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
6908,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,69,1253,"Unsuffixed integer constant implicitly converted to another type.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
6909,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,71,3120,"Hard-coded 'magic' integer constant '1000'.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
6910,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,94,2101,"Integral promotion : unsigned short promoted to signed int.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
6911,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",473,2,2017,"Comment spans more than one line.","  473:	*/
",,,
6912,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,26,3227,"The parameter 'sig' is never modified and so it could be declared with the 'const' qualifier.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
6913,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,35,3206,"The parameter 'code' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
6914,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,47,3206,"The parameter 'scp' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
6915,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,53,3625,"Type 'char' has been used in the declaration of an object or a function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
6916,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,59,344,"K&amp;R compilers do not support function prototypes.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
6917,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,59,3206,"The parameter 'addr' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
6918,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",480,5,3625,"Type 'char' has been used in the declaration of an object or a function.","  480:	    char the_errMsg[128]; /* エラーメッセージ */
",,,
6919,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",480,21,3132,"Hard coded 'magic' number '128' used to define the size of an array.","  480:	    char the_errMsg[128]; /* エラーメッセージ */
",,,
6920,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",483,16,2209,"This brace style is not consistent with 'exdented' style.","  483:	    switch(sig){
",,,
6921,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",485,9,3200,"sprintf' returns a value which is not being used.","  485:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGINT(%d)\n"",sig );
",,,
6922,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",485,28,3122,"Hard-coded 'magic' string literal.","  485:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGINT(%d)\n"",sig );
",,,
6923,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",486,9,3200,"fprintf' returns a value which is not being used.","  486:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6924,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",486,31,3122,"Hard-coded 'magic' string literal.","  486:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6925,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",489,9,3200,"sprintf' returns a value which is not being used.","  489:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGQUIT(%d)\n"",sig );
",,,
6926,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",489,28,3122,"Hard-coded 'magic' string literal.","  489:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGQUIT(%d)\n"",sig );
",,,
6927,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",490,9,3200,"fprintf' returns a value which is not being used.","  490:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6928,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",490,31,3122,"Hard-coded 'magic' string literal.","  490:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6929,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",493,9,3200,"sprintf' returns a value which is not being used.","  493:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGKILL(%d)\n"",sig );
",,,
6930,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",493,28,3122,"Hard-coded 'magic' string literal.","  493:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGKILL(%d)\n"",sig );
",,,
6931,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",494,9,3200,"fprintf' returns a value which is not being used.","  494:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6932,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",494,31,3122,"Hard-coded 'magic' string literal.","  494:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6933,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",497,9,3200,"sprintf' returns a value which is not being used.","  497:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGTERM(%d)\n"",sig );
",,,
6934,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",497,28,3122,"Hard-coded 'magic' string literal.","  497:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGTERM(%d)\n"",sig );
",,,
6935,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",498,9,3200,"fprintf' returns a value which is not being used.","  498:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6936,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",498,31,3122,"Hard-coded 'magic' string literal.","  498:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6937,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",501,9,3200,"sprintf' returns a value which is not being used.","  501:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGFPE(%d)\n"",sig );
",,,
6938,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",501,28,3122,"Hard-coded 'magic' string literal.","  501:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGFPE(%d)\n"",sig );
",,,
6939,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",502,9,3200,"fprintf' returns a value which is not being used.","  502:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6940,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",502,31,3122,"Hard-coded 'magic' string literal.","  502:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6941,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",505,9,3200,"sprintf' returns a value which is not being used.","  505:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGILL(%d)\n"",sig );
",,,
6942,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",505,28,3122,"Hard-coded 'magic' string literal.","  505:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGILL(%d)\n"",sig );
",,,
6943,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",506,9,3200,"fprintf' returns a value which is not being used.","  506:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6944,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",506,31,3122,"Hard-coded 'magic' string literal.","  506:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6945,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",509,9,3200,"sprintf' returns a value which is not being used.","  509:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGBUS(%d)\n"",sig );
",,,
6946,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",509,28,3122,"Hard-coded 'magic' string literal.","  509:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGBUS(%d)\n"",sig );
",,,
6947,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",510,9,3200,"fprintf' returns a value which is not being used.","  510:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6948,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",510,31,3122,"Hard-coded 'magic' string literal.","  510:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6949,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",513,9,3200,"sprintf' returns a value which is not being used.","  513:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSEGV(%d)\n"",sig );
",,,
6950,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",513,28,3122,"Hard-coded 'magic' string literal.","  513:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSEGV(%d)\n"",sig );
",,,
6951,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",514,9,3200,"fprintf' returns a value which is not being used.","  514:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6952,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",514,31,3122,"Hard-coded 'magic' string literal.","  514:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6953,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",517,9,3200,"sprintf' returns a value which is not being used.","  517:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSYS(%d)\n"",sig );
",,,
6954,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",517,28,3122,"Hard-coded 'magic' string literal.","  517:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSYS(%d)\n"",sig );
",,,
6955,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",518,9,3200,"fprintf' returns a value which is not being used.","  518:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6956,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",518,31,3122,"Hard-coded 'magic' string literal.","  518:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6957,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",521,9,3200,"sprintf' returns a value which is not being used.","  521:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=%d\n"",sig );
",,,
6958,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",521,28,3122,"Hard-coded 'magic' string literal.","  521:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=%d\n"",sig );
",,,
6959,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",522,9,3200,"fprintf' returns a value which is not being used.","  522:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6960,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",522,31,3122,"Hard-coded 'magic' string literal.","  522:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6961,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",532,16,2209,"This brace style is not consistent with 'exdented' style.","  532:	    switch(sig){
",,,
6962,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",538,10,2003,"The preceding non-empty 'case' or 'default' clause does not end with an explicit 'break' or 'return' statement.","  538:	    case SIGFPE :
",,,
6963,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",545,5,2002,"No 'default' case found in this 'switch' statement.","  545:	    }
",,,
6964,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",592,2,2017,"Comment spans more than one line.","  592:	*/
",,,
6965,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",594,1,3007,"""void"" has been omitted when defining a function with no parameters.","  594:	{
",,,
6966,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,5,428,"Function identifier is not followed by () but a function call may be intended.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
6967,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,5,3200,"signal' returns a value which is not being used.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
6968,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,23,432,"[C] Argument is not a compatible pointer type.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
6969,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,24,307,"[u] Cast between a pointer to object and a pointer to function.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
6970,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,5,428,"Function identifier is not followed by () but a function call may be intended.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
6971,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,5,3200,"signal' returns a value which is not being used.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
6972,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,23,432,"[C] Argument is not a compatible pointer type.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
6973,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,24,307,"[u] Cast between a pointer to object and a pointer to function.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
6974,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,5,428,"Function identifier is not followed by () but a function call may be intended.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
6975,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,5,3200,"signal' returns a value which is not being used.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
6976,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,23,432,"[C] Argument is not a compatible pointer type.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
6977,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,24,307,"[u] Cast between a pointer to object and a pointer to function.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
6978,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,5,428,"Function identifier is not followed by () but a function call may be intended.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
6979,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,5,3200,"signal' returns a value which is not being used.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
6980,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,23,432,"[C] Argument is not a compatible pointer type.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
6981,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,24,307,"[u] Cast between a pointer to object and a pointer to function.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
6982,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,5,428,"Function identifier is not followed by () but a function call may be intended.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
6983,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,5,3200,"signal' returns a value which is not being used.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
6984,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,22,432,"[C] Argument is not a compatible pointer type.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
6985,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,23,307,"[u] Cast between a pointer to object and a pointer to function.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
6986,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,5,428,"Function identifier is not followed by () but a function call may be intended.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
6987,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,5,3200,"signal' returns a value which is not being used.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
6988,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,23,432,"[C] Argument is not a compatible pointer type.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
6989,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,24,307,"[u] Cast between a pointer to object and a pointer to function.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
6990,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,5,428,"Function identifier is not followed by () but a function call may be intended.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
6991,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,5,3200,"signal' returns a value which is not being used.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
6992,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,23,432,"[C] Argument is not a compatible pointer type.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
6993,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,24,307,"[u] Cast between a pointer to object and a pointer to function.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
6994,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,5,428,"Function identifier is not followed by () but a function call may be intended.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
6995,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,5,3200,"signal' returns a value which is not being used.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
6996,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,23,432,"[C] Argument is not a compatible pointer type.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
6997,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,24,307,"[u] Cast between a pointer to object and a pointer to function.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
6998,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,5,428,"Function identifier is not followed by () but a function call may be intended.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
6999,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,5,3200,"signal' returns a value which is not being used.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
7000,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,23,432,"[C] Argument is not a compatible pointer type.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
7001,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,24,307,"[u] Cast between a pointer to object and a pointer to function.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
7002,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",622,2,2017,"Comment spans more than one line.","  622:	*/
",,,
7003,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",623,20,3625,"Type 'char' has been used in the declaration of an object or a function.","  623:	int ResetTrendPath(char *io_pPath)
",,,
7004,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",623,26,344,"K&amp;R compilers do not support function prototypes.","  623:	int ResetTrendPath(char *io_pPath)
",,,
7005,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",623,26,3227,"The parameter 'io_pPath' is never modified and so it could be declared with the 'const' qualifier.","  623:	int ResetTrendPath(char *io_pPath)
",,,
7006,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",625,9,2201,"This indentation is not consistent with previous indentation in this file.","  625:	        char the_szFullPath[MAX_PATH];
",,,
7007,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",625,9,3625,"Type 'char' has been used in the declaration of an object or a function.","  625:	        char the_szFullPath[MAX_PATH];
",,,
7008,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",626,9,2201,"This indentation is not consistent with previous indentation in this file.","  626:	        char the_szCurPath[MAX_PATH];
",,,
7009,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",626,9,3625,"Type 'char' has been used in the declaration of an object or a function.","  626:	        char the_szCurPath[MAX_PATH];
",,,
7010,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",627,9,2201,"This indentation is not consistent with previous indentation in this file.","  627:	        int the_iRet = ANZ_SUCCESS;
",,,
7011,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",627,13,2211,"the_iRet' is not aligned with the previously declared identifier.","  627:	        int the_iRet = ANZ_SUCCESS;
",,,
7012,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,9,2201,"This indentation is not consistent with previous indentation in this file.","  630:	        if(io_pPath[0] != '/') {
",,,
7013,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,20,506,"Dereferencing pointer value that is possibly NULL.","  630:	        if(io_pPath[0] != '/') {
",,,
7014,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,24,2106,"Integral promotion : plain char promoted to signed int.","  630:	        if(io_pPath[0] != '/') {
",,,
7015,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,27,3123,"Hard coded 'magic' character constant '/'.","  630:	        if(io_pPath[0] != '/') {
",,,
7016,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,32,2209,"This brace style is not consistent with 'exdented' style.","  630:	        if(io_pPath[0] != '/') {
",,,
7017,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",631,16,3416,"This boolean expression contains side effects.","  631:	            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {
",,,
7018,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",631,56,2209,"This brace style is not consistent with 'exdented' style.","  631:	            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {
",,,
7019,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",633,26,2001,"A 'goto' statement has been used.","  633:	                goto EXIT;
",,,
7020,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,306,"[I] Cast between a pointer to object and an integral type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7021,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,310,"Casting to different object pointer type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7022,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7023,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,489,"Increment or decrement operation performed on pointer.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7024,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,506,"Dereferencing pointer value that is possibly NULL.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7025,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,510,"Arithmetic operation on pointer value that is possibly NULL.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7026,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__result' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7027,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s1' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7028,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7029,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s2' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7030,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7031,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7032,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7033,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1251,"Suffixed integer constant causes implicit conversion of other operand.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7034,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1253,"Unsuffixed integer constant implicitly converted to another type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7035,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1302,"__builtin_constant_p()' must be declared before use in C++.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7036,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1302,"__builtin_strcmp()' must be declared before use in C++.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7037,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,2100,"Integral promotion : unsigned char promoted to signed int.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7038,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7039,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3112,"This statement has no side-effect - it can be removed.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7040,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3122,"Hard-coded 'magic' string literal.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7041,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3200,"__builtin_strcmp' returns a value which is not being used.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7042,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7043,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7044,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7045,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7046,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7047,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7048,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7049,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7050,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7051,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3326,"An assignment operator is being used in a boolean expression.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7052,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3346,"This 'if' control expression has a constant 'true' value.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7053,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7054,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7055,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7056,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7057,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7058,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7059,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7060,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7061,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7062,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7063,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7064,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7065,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7066,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7067,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7068,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7069,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7070,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7071,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7072,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7073,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7074,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3401,"Possible precedence confusion: extra parentheses are recommended here.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7075,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7076,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3416,"This boolean expression contains side effects.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7077,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3417,"The comma operator has been used outside a for-loop header.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7078,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3446,"The result operands of this conditional operator generate side effects","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7079,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3631,"Type 'char' has been used in a cast.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7080,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3760,"Implicit conversion: int to unsigned int.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7081,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7082,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7083,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,36,1251,"Suffixed integer constant causes implicit conversion of other operand.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7084,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,42,2209,"This brace style is not consistent with 'exdented' style.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7085,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",636,17,3200,"sprintf' returns a value which is not being used.","  636:	                sprintf(the_szFullPath,""%s/%s"",the_szCurPath,io_pPath);
",,,
7086,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",636,40,3122,"Hard-coded 'magic' string literal.","  636:	                sprintf(the_szFullPath,""%s/%s"",the_szCurPath,io_pPath);
",,,
7087,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",639,9,2201,"This indentation is not consistent with previous indentation in this file.","  639:	        else {
",,,
7088,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",639,14,2209,"This brace style is not consistent with 'exdented' style.","  639:	        else {
",,,
7089,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",640,22,2001,"A 'goto' statement has been used.","  640:	            goto EXIT;
",,,
7090,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",658,9,2201,"This indentation is not consistent with previous indentation in this file.","  658:	        strcpy(io_pPath,the_szFullPath);
",,,
7091,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",658,9,3200,"strcpy' returns a value which is not being used.","  658:	        strcpy(io_pPath,the_szFullPath);
",,,
7092,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",659,1,2015,"This label is not a case or default label for a switch statement.","  659:	EXIT:
",,,
7093,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",659,1,2201,"This indentation is not consistent with previous indentation in this file.","  659:	EXIT:
",,,
7094,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",660,9,2201,"This indentation is not consistent with previous indentation in this file.","  660:	        return the_iRet;
",,,
7095,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",1,1,240,"[E] This file contains the control-M character at the end of a line.","    1:	/*
",,,
7096,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",9,16,288,"[I] Source file '/home/www/TOSCANA_dev/BackEnd/AnalyzeTaskManager/work/1/work/sample_c_cpp/sample_c/src/analyzeme.c' has comments containing characters which are not members of the basic source character set.","    9:	      AnalyzeMeのメイン関数を定義する
",,,
7097,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",16,2,2017,"Comment spans more than one line.","   16:	*/
",,,
7098,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",20,2,2017,"Comment spans more than one line.","   20:	*/
",,,
7099,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",21,1,838,"File has already been included directly from this file.","   21:	#include ""analyzeme.h""
",,,
7100,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",21,1,839,"File has already been included indirectly from this file.","   21:	#include ""analyzeme.h""
",,,
7101,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",21,23,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   21:	#include ""analyzeme.h""
",,,
7102,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",22,1,839,"File has already been included indirectly from this file.","   22:	#include ""common.h""
",,,
7103,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",23,1,839,"File has already been included indirectly from this file.","   23:	#include ""memory_manage.h""
",,,
7104,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",23,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   23:	#include ""memory_manage.h""
",,,
7105,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",24,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   24:	#include ""parse_cmdline.h""
",,,
7106,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",25,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   25:	#include ""common_measure.h""
",,,
7107,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",26,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   26:	#include ""trend_measure.h""
",,,
7108,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",27,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   27:	#include ""make_file_list.h""
",,,
7109,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",29,31,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   29:	#include ""get_process_macro.h""
",,,
7110,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",30,1,839,"File has already been included indirectly from this file.","   30:	#include &lt;signal.h&gt;
",,,
7111,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",35,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
7112,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",35,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
7113,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",35,13,3211,"The global identifier 'TRACEFILE' is defined but not used.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
7114,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",35,13,3408,"TRACEFILE' has external linkage but is being defined without any previous declaration.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
7115,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",36,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
7116,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",36,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
7117,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",36,13,3408,"APPLOGFILE' has external linkage but is being defined without any previous declaration.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
7118,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",44,7,3408,"g_fpLogFile' has external linkage but is being defined without any previous declaration.","   44:	FILE *g_fpLogFile = NULL;       /* Log File pointer */
",,,
7119,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",46,7,3211,"The global identifier 'g_fpTraceFile' is defined but not used.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
7120,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",46,7,3408,"g_fpTraceFile' has external linkage but is being defined without any previous declaration.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
7121,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",48,7,3408,"g_fpErrorFile' has external linkage but is being defined without any previous declaration.","   48:	FILE *g_fpErrorFile = NULL;
",,,
7122,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",50,6,3408,"g_bTrace' has external linkage but is being defined without any previous declaration.","   50:	bool g_bTrace           = false;    /* Trace flag */
",,,
7123,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",51,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
7124,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",51,6,3408,"g_szNVPath' has external linkage but is being defined without any previous declaration.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
7125,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",51,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
7126,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",52,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
7127,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",52,6,3408,"g_szOVPath' has external linkage but is being defined without any previous declaration.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
7128,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",52,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
7129,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",53,6,3408,"g_bTrendFile' has external linkage but is being defined without any previous declaration.","   53:	bool g_bTrendFile = false;
",,,
7130,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",55,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   55:	char *g_optionFileCont = NULL;
",,,
7131,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",55,7,3211,"The global identifier 'g_optionFileCont' is defined but not used.","   55:	char *g_optionFileCont = NULL;
",,,
7132,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",55,7,3408,"g_optionFileCont' has external linkage but is being defined without any previous declaration.","   55:	char *g_optionFileCont = NULL;
",,,
7133,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",57,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   57:	char *g_symbolFileCont = NULL;
",,,
7134,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",57,7,3211,"The global identifier 'g_symbolFileCont' is defined but not used.","   57:	char *g_symbolFileCont = NULL;
",,,
7135,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",57,7,3408,"g_symbolFileCont' has external linkage but is being defined without any previous declaration.","   57:	char *g_symbolFileCont = NULL;
",,,
7136,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",58,6,3408,"g_bOutTime' has external linkage but is being defined without any previous declaration.","   58:	bool g_bOutTime = false;
",,,
7137,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",59,15,3408,"g_pAnzInfo' has external linkage but is being defined without any previous declaration.","   59:	ST_AnalyzeMe *g_pAnzInfo;  /* AnalyzeMe管理情報 */
",,,
7138,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",69,2,2017,"Comment spans more than one line.","   69:	*/
",,,
7139,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",70,14,3227,"The parameter 'argc' is never modified and so it could be declared with the 'const' qualifier.","   70:	int main(int argc,char * argv[])
",,,
7140,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",70,19,3625,"Type 'char' has been used in the declaration of an object or a function.","   70:	int main(int argc,char * argv[])
",,,
7141,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",70,26,344,"K&amp;R compilers do not support function prototypes.","   70:	int main(int argc,char * argv[])
",,,
7142,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",75,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
7143,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",75,28,2211,"the_pMeasureItem' is not aligned with the previously declared identifier.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
7144,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",76,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
7145,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",76,10,2211,"the_szCurMetrics' is not aligned with the previously declared identifier.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
7146,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",76,10,3604,"Local arrays and structures cannot be initialised in K&amp;R C.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
7147,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",76,44,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
7148,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",80,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   80:	    char *the_pTrace = NULL;
",,,
7149,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",80,11,2211,"the_pTrace' is not aligned with the previously declared identifier.","   80:	    char *the_pTrace = NULL;
",,,
7150,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",80,11,3197,"The initialiser for 'the_pTrace' is always modified before being used.","   80:	    char *the_pTrace = NULL;
",,,
7151,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",81,25,2211,"the_st' is not aligned with the previously declared identifier.","   81:	    struct timeb the_st ;
",,,
7152,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",89,5,3198,"The value assigned to 'the_pAnzInfo' is always modified before being used.","   89:	    the_pAnzInfo = NULL;
",,,
7153,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",91,5,3198,"The value assigned to 'the_iRet' is always modified before being used.","   91:	    the_iRet = ANZ_SUCCESS;
",,,
7154,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",101,25,3122,"Hard-coded 'magic' string literal.","  101:	    the_pTrace = getenv(""AnzTrace"");
",,,
7155,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",102,28,2209,"This brace style is not consistent with 'exdented' style.","  102:	    if(the_pTrace != NULL) {
",,,
7156,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,306,"[I] Cast between a pointer to object and an integral type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7157,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,310,"Casting to different object pointer type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7158,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7159,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,489,"Increment or decrement operation performed on pointer.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7160,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__result' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7161,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7162,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7163,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7164,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7165,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7166,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7167,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7168,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7169,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7170,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7171,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,2100,"Integral promotion : unsigned char promoted to signed int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7172,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7173,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3112,"This statement has no side-effect - it can be removed.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7174,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3122,"Hard-coded 'magic' string literal.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7175,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3200,"__builtin_strcmp' returns a value which is not being used.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7176,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7177,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7178,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7179,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7180,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7181,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7182,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7183,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7184,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7185,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3325,"This control expression has a constant 'false' value.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7186,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3326,"An assignment operator is being used in a boolean expression.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7187,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7188,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7189,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7190,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7191,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7192,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7193,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7194,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7195,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7196,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7197,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7198,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7199,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7200,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7201,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7202,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7203,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7204,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7205,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7206,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7207,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7208,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7209,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7210,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3416,"This boolean expression contains side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7211,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3417,"The comma operator has been used outside a for-loop header.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7212,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3446,"The result operands of this conditional operator generate side effects","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7213,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3631,"Type 'char' has been used in a cast.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7214,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3760,"Implicit conversion: int to unsigned int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7215,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,35,3209,"__builtin_strcmp()' returns a value which is always ignored.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7216,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7217,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7218,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,36,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7219,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,43,2209,"This brace style is not consistent with 'exdented' style.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7220,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,43,3201,"This statement is unreachable.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7221,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",113,6,2017,"Comment spans more than one line.","  113:	    */
",,,
7222,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",114,36,3122,"Hard-coded 'magic' string literal.","  114:	    g_fpLogFile = fopen(APPLOGFILE,""w"");
",,,
7223,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",115,28,2209,"This brace style is not consistent with 'exdented' style.","  115:	    if(g_fpLogFile == NULL){
",,,
7224,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",116,9,3200,"printf' returns a value which is not being used.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
7225,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",116,16,3122,"Hard-coded 'magic' string literal.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
7226,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",120,5,702,"Result of sizeof operator is not explicitly cast.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
7227,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",120,63,3430,"Macro argument expression requires parentheses.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
7228,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",121,29,2209,"This brace style is not consistent with 'exdented' style.","  121:	    if(the_pAnzInfo == NULL){
",,,
7229,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",122,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  122:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
7230,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",123,18,2001,"A 'goto' statement has been used.","  123:	        goto EXIT;
",,,
7231,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",125,5,702,"Result of sizeof operator is not explicitly cast.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
7232,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",125,5,3200,"memset' returns a value which is not being used.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
7233,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",128,5,702,"Result of sizeof operator is not explicitly cast.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
7234,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",128,67,3430,"Macro argument expression requires parentheses.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
7235,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",129,39,2209,"This brace style is not consistent with 'exdented' style.","  129:	    if(the_pAnzInfo-&gt;m_option == NULL){
",,,
7236,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",130,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  130:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
7237,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",131,18,2001,"A 'goto' statement has been used.","  131:	        goto EXIT;
",,,
7238,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",133,5,702,"Result of sizeof operator is not explicitly cast.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
7239,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",133,5,3200,"memset' returns a value which is not being used.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
7240,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",137,5,702,"Result of sizeof operator is not explicitly cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
7241,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",137,5,3631,"Type 'char' has been used in a cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
7242,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",137,5,3633,"Type 'char' has been used in the operand of the sizeof operator.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
7243,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",137,5,3760,"Implicit conversion: int to unsigned int.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
7244,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",138,34,2209,"This brace style is not consistent with 'exdented' style.","  138:	    if(the_pMeasureItem == NULL) {
",,,
7245,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",139,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  139:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
7246,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",140,18,2001,"A 'goto' statement has been used.","  140:	        goto EXIT;
",,,
7247,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",142,5,702,"Result of sizeof operator is not explicitly cast.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
7248,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",142,5,3200,"memset' returns a value which is not being used.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
7249,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",142,36,3760,"Implicit conversion: int to unsigned int.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
7250,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",142,45,3633,"Type 'char' has been used in the operand of the sizeof operator.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
7251,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",150,5,3200,"strcpy' returns a value which is not being used.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
7252,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",150,34,3122,"Hard-coded 'magic' string literal.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
7253,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",154,5,3200,"strcpy' returns a value which is not being used.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
7254,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",154,39,3122,"Hard-coded 'magic' string literal.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
7255,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",155,5,3200,"strcpy' returns a value which is not being used.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
7256,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",155,38,3122,"Hard-coded 'magic' string literal.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
7257,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",156,5,3200,"strcpy' returns a value which is not being used.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
7258,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",156,38,3122,"Hard-coded 'magic' string literal.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
7259,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",165,32,3120,"Hard-coded 'magic' integer constant '70'.","  165:	    the_pOption-&gt;m_symThresh = 70;
",,,
7260,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",166,32,3120,"Hard-coded 'magic' integer constant '2'.","  166:	    the_pOption-&gt;m_minThresh = 2;
",,,
7261,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",169,5,702,"Result of sizeof operator is not explicitly cast.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
7262,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",169,59,3430,"Macro argument expression requires parentheses.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
7263,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",170,31,2209,"This brace style is not consistent with 'exdented' style.","  170:	    if(the_pCmdOption == NULL){
",,,
7264,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",171,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  171:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
7265,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",172,18,2001,"A 'goto' statement has been used.","  172:	        goto EXIT;
",,,
7266,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",174,5,702,"Result of sizeof operator is not explicitly cast.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
7267,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",174,5,3200,"memset' returns a value which is not being used.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
7268,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",180,5,3200,"strcpy' returns a value which is not being used.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
7269,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",180,37,3122,"Hard-coded 'magic' string literal.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
7270,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",184,5,3200,"strcpy' returns a value which is not being used.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
7271,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",184,42,3122,"Hard-coded 'magic' string literal.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
7272,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",185,5,3200,"strcpy' returns a value which is not being used.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
7273,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",185,41,3122,"Hard-coded 'magic' string literal.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
7274,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",186,5,3200,"strcpy' returns a value which is not being used.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
7275,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",186,41,3122,"Hard-coded 'magic' string literal.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
7276,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",195,35,3120,"Hard-coded 'magic' integer constant '70'.","  195:	    the_pCmdOption-&gt;m_symThresh = 70;
",,,
7277,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",196,35,3120,"Hard-coded 'magic' integer constant '2'.","  196:	    the_pCmdOption-&gt;m_minThresh = 2;
",,,
7278,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",200,32,2209,"This brace style is not consistent with 'exdented' style.","  200:	    if(the_iRet != ANZ_SUCCESS){
",,,
7279,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",201,18,2001,"A 'goto' statement has been used.","  201:	        goto EXIT;
",,,
7280,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",203,8,3344,"Value of control expression is not derived from an explicit logical operation.","  203:	    if(g_bOutTime) {
",,,
7281,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",203,20,2209,"This brace style is not consistent with 'exdented' style.","  203:	    if(g_bOutTime) {
",,,
7282,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",204,9,3200,"ftime' returns a value which is not being used.","  204:	        ftime(&amp;the_st);
",,,
7283,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",209,32,2209,"This brace style is not consistent with 'exdented' style.","  209:	    if(the_iRet != ANZ_SUCCESS){
",,,
7284,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",210,18,2001,"A 'goto' statement has been used.","  210:	        goto EXIT;
",,,
7285,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",214,32,2209,"This brace style is not consistent with 'exdented' style.","  214:	    if(the_iRet != ANZ_SUCCESS){
",,,
7286,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",215,18,2001,"A 'goto' statement has been used.","  215:	        goto EXIT;
",,,
7287,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",218,23,3355,"The result of this logical operation is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
7288,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",218,23,3358,"The value of this 'if' control expression is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
7289,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",218,31,2209,"This brace style is not consistent with 'exdented' style.","  218:	    if(the_pCmdOption != NULL){
",,,
7290,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",224,32,2209,"This brace style is not consistent with 'exdented' style.","  224:	    if(the_iRet != ANZ_SUCCESS){
",,,
7291,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",225,18,2001,"A 'goto' statement has been used.","  225:	        goto EXIT;
",,,
7292,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",229,32,2209,"This brace style is not consistent with 'exdented' style.","  229:	    if(the_iRet != ANZ_SUCCESS){
",,,
7293,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",230,18,2001,"A 'goto' statement has been used.","  230:	        goto EXIT;
",,,
7294,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",233,47,2209,"This brace style is not consistent with 'exdented' style.","  233:	    if(the_iMeasureType == ANZ_TREND_MEASURE) {
",,,
7295,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",234,13,3220,"Identifier declared at a nested level of block scope.","  234:	        int the_iType = -1;
",,,
7296,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",235,13,3220,"Identifier declared at a nested level of block scope.","  235:	        int the_pPos = -1;
",,,
7297,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",236,9,3200,"isDirOrFile' returns a value which is not being used.","  236:	        isDirOrFile(*the_pMeasureItem,&amp;the_iType);
",,,
7298,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",237,35,2209,"This brace style is not consistent with 'exdented' style.","  237:	        if(the_iType == ANZ_FILE) {
",,,
7299,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",242,30,2209,"This brace style is not consistent with 'exdented' style.","  242:	            if(the_pPos &gt; 0) {
",,,
7300,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",243,55,488,"Performing pointer arithmetic.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
7301,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",243,66,489,"Increment or decrement operation performed on pointer.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
7302,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",246,43,489,"Increment or decrement operation performed on pointer.","  246:	            GetPathPos(*(the_pMeasureItem + 1),&amp;the_pPos);
",,,
7303,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",248,30,2209,"This brace style is not consistent with 'exdented' style.","  248:	            if(the_pPos &gt; 0) {
",,,
7304,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,36,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
7305,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,42,3501,"This could be read as an old-style assignment operator. Spaces are needed to make it more readable.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
7306,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,61,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
7307,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,66,488,"Performing pointer arithmetic.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
7308,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,77,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
7309,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",252,13,3198,"The value assigned to 'the_iRet' is always modified before being used.","  252:	            the_iRet = ResetTrendPath(g_szNVPath);
",,,
7310,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",254,41,2209,"This brace style is not consistent with 'exdented' style.","  254:	            if(the_iRet != ANZ_SUCCESS) {
",,,
7311,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",255,26,2001,"A 'goto' statement has been used.","  255:	                goto EXIT;
",,,
7312,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",260,51,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
7313,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",260,57,3631,"Type 'char' has been used in a cast.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
7314,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",261,41,2209,"This brace style is not consistent with 'exdented' style.","  261:	    if(the_iRet == ANZ_NO_MEASURE_FILES){
",,,
7315,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",262,9,3200,"printf' returns a value which is not being used.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
7316,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",262,16,3122,"Hard-coded 'magic' string literal.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
7317,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",264,42,2209,"This brace style is not consistent with 'exdented' style.","  264:	    if(the_iRet == ANZ_ERR_MEMORY_FAILED){
",,,
7318,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",265,9,3200,"printf' returns a value which is not being used.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
7319,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",265,16,3122,"Hard-coded 'magic' string literal.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
7320,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",267,32,2209,"This brace style is not consistent with 'exdented' style.","  267:	    if(the_iRet != ANZ_SUCCESS){
",,,
7321,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",268,18,2001,"A 'goto' statement has been used.","  268:	        goto EXIT;
",,,
7322,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",272,37,2209,"This brace style is not consistent with 'exdented' style.","  272:	    if(the_pOption-&gt;m_fileLOC == ON){
",,,
7323,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",273,9,3200,"strcat' returns a value which is not being used.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
7324,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",273,33,3122,"Hard-coded 'magic' string literal.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
7325,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",276,40,2209,"This brace style is not consistent with 'exdented' style.","  276:	    if(the_pOption-&gt;m_redundancy == ON){
",,,
7326,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,306,"[I] Cast between a pointer to object and an integral type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7327,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,310,"Casting to different object pointer type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7328,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7329,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,489,"Increment or decrement operation performed on pointer.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7330,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__result' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7331,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7332,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7333,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7334,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7335,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7336,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7337,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7338,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7339,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7340,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7341,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,2100,"Integral promotion : unsigned char promoted to signed int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7342,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7343,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3112,"This statement has no side-effect - it can be removed.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7344,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3122,"Hard-coded 'magic' string literal.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7345,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3200,"__builtin_strcmp' returns a value which is not being used.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7346,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7347,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7348,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7349,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7350,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7351,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7352,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7353,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7354,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7355,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3326,"An assignment operator is being used in a boolean expression.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7356,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3346,"This 'if' control expression has a constant 'true' value.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7357,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7358,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7359,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7360,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7361,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7362,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7363,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7364,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7365,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7366,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7367,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7368,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7369,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7370,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7371,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7372,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7373,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7374,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7375,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7376,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7377,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7378,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7379,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7380,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3416,"This boolean expression contains side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7381,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3417,"The comma operator has been used outside a for-loop header.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7382,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3446,"The result operands of this conditional operator generate side effects","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7383,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3631,"Type 'char' has been used in a cast.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7384,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3760,"Implicit conversion: int to unsigned int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7385,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7386,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7387,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7388,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,45,2209,"This brace style is not consistent with 'exdented' style.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7389,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",278,13,3200,"strcat' returns a value which is not being used.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
7390,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",278,37,3122,"Hard-coded 'magic' string literal.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
7391,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",278,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
7392,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",279,13,3200,"strcat' returns a value which is not being used.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
7393,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",279,37,3122,"Hard-coded 'magic' string literal.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
7394,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",279,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
7395,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",281,13,2209,"This brace style is not consistent with 'exdented' style.","  281:	        else{
",,,
7396,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",281,13,3201,"This statement is unreachable.","  281:	        else{
",,,
7397,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",282,13,3200,"strcat' returns a value which is not being used.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
7398,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",282,37,3122,"Hard-coded 'magic' string literal.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
7399,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",282,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
7400,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",286,8,3344,"Value of control expression is not derived from an explicit logical operation.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
7401,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",286,31,2209,"This brace style is not consistent with 'exdented' style.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
7402,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,306,"[I] Cast between a pointer to object and an integral type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7403,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,310,"Casting to different object pointer type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7404,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7405,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,489,"Increment or decrement operation performed on pointer.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7406,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__result' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7407,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7408,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7409,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7410,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7411,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7412,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7413,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7414,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7415,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7416,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7417,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,2100,"Integral promotion : unsigned char promoted to signed int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7418,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7419,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3112,"This statement has no side-effect - it can be removed.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7420,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3122,"Hard-coded 'magic' string literal.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7421,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3200,"__builtin_strcmp' returns a value which is not being used.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7422,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7423,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7424,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7425,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7426,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7427,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7428,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7429,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7430,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7431,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3326,"An assignment operator is being used in a boolean expression.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7432,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3346,"This 'if' control expression has a constant 'true' value.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7433,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7434,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7435,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7436,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7437,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7438,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7439,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7440,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7441,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7442,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7443,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7444,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7445,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7446,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7447,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7448,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7449,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7450,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7451,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7452,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7453,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7454,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7455,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7456,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3416,"This boolean expression contains side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7457,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3417,"The comma operator has been used outside a for-loop header.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7458,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3446,"The result operands of this conditional operator generate side effects","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7459,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3631,"Type 'char' has been used in a cast.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7460,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3760,"Implicit conversion: int to unsigned int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7461,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7462,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7463,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7464,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,45,2209,"This brace style is not consistent with 'exdented' style.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7465,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",288,13,3200,"strcat' returns a value which is not being used.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
7466,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",288,37,3122,"Hard-coded 'magic' string literal.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
7467,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",288,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
7468,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",289,13,3200,"strcat' returns a value which is not being used.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
7469,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",289,37,3122,"Hard-coded 'magic' string literal.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
7470,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",289,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
7471,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",291,13,2209,"This brace style is not consistent with 'exdented' style.","  291:	        else{
",,,
7472,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",291,13,3201,"This statement is unreachable.","  291:	        else{
",,,
7473,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",292,13,3200,"strcat' returns a value which is not being used.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
7474,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",292,37,3122,"Hard-coded 'magic' string literal.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
7475,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",292,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
7476,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",296,8,3344,"Value of control expression is not derived from an explicit logical operation.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
7477,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",296,28,2209,"This brace style is not consistent with 'exdented' style.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
7478,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,306,"[I] Cast between a pointer to object and an integral type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7479,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,310,"Casting to different object pointer type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7480,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7481,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,489,"Increment or decrement operation performed on pointer.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7482,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__result' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7483,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7484,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7485,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7486,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7487,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7488,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7489,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7490,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7491,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7492,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7493,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,2100,"Integral promotion : unsigned char promoted to signed int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7494,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7495,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3112,"This statement has no side-effect - it can be removed.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7496,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3122,"Hard-coded 'magic' string literal.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7497,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3200,"__builtin_strcmp' returns a value which is not being used.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7498,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7499,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7500,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7501,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7502,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7503,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7504,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7505,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7506,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7507,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3326,"An assignment operator is being used in a boolean expression.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7508,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3346,"This 'if' control expression has a constant 'true' value.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7509,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7510,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7511,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7512,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7513,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7514,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7515,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7516,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7517,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7518,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7519,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7520,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7521,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7522,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7523,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7524,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7525,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7526,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7527,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7528,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7529,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7530,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7531,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7532,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3416,"This boolean expression contains side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7533,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3417,"The comma operator has been used outside a for-loop header.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7534,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3446,"The result operands of this conditional operator generate side effects","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7535,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3631,"Type 'char' has been used in a cast.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7536,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3760,"Implicit conversion: int to unsigned int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7537,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7538,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7539,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7540,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,45,2209,"This brace style is not consistent with 'exdented' style.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7541,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",298,13,3200,"strcat' returns a value which is not being used.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
7542,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",298,37,3122,"Hard-coded 'magic' string literal.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
7543,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",298,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
7544,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",299,13,3200,"strcat' returns a value which is not being used.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
7545,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",299,37,3122,"Hard-coded 'magic' string literal.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
7546,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",299,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
7547,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",301,13,2209,"This brace style is not consistent with 'exdented' style.","  301:	        else{
",,,
7548,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",301,13,3201,"This statement is unreachable.","  301:	        else{
",,,
7549,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",302,13,3200,"strcat' returns a value which is not being used.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
7550,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",302,37,3122,"Hard-coded 'magic' string literal.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
7551,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",302,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
7552,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,306,"[I] Cast between a pointer to object and an integral type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7553,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,310,"Casting to different object pointer type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7554,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7555,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,489,"Increment or decrement operation performed on pointer.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7556,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__result' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7557,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7558,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7559,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7560,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7561,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7562,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7563,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7564,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7565,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7566,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7567,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,2100,"Integral promotion : unsigned char promoted to signed int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7568,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7569,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3112,"This statement has no side-effect - it can be removed.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7570,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3122,"Hard-coded 'magic' string literal.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7571,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3200,"__builtin_strcmp' returns a value which is not being used.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7572,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7573,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7574,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7575,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7576,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7577,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7578,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7579,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7580,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7581,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3326,"An assignment operator is being used in a boolean expression.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7582,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3346,"This 'if' control expression has a constant 'true' value.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7583,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7584,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7585,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7586,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7587,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7588,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7589,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7590,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7591,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7592,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7593,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7594,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7595,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7596,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7597,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7598,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7599,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7600,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7601,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7602,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7603,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7604,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7605,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7606,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3416,"This boolean expression contains side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7607,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3417,"The comma operator has been used outside a for-loop header.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7608,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3446,"The result operands of this conditional operator generate side effects","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7609,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3631,"Type 'char' has been used in a cast.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7610,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3760,"Implicit conversion: int to unsigned int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7611,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7612,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7613,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7614,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,45,2209,"This brace style is not consistent with 'exdented' style.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7615,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",305,13,3200,"strcat' returns a value which is not being used.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
7616,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",305,37,3122,"Hard-coded 'magic' string literal.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
7617,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",305,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
7618,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",306,13,3200,"strcat' returns a value which is not being used.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
7619,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",306,37,3122,"Hard-coded 'magic' string literal.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
7620,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",308,13,2209,"This brace style is not consistent with 'exdented' style.","  308:	        else{
",,,
7621,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",308,13,3201,"This statement is unreachable.","  308:	        else{
",,,
7622,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",309,13,3200,"strcat' returns a value which is not being used.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
7623,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",309,37,3122,"Hard-coded 'magic' string literal.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
7624,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",314,8,3344,"Value of control expression is not derived from an explicit logical operation.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
7625,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",314,34,2209,"This brace style is not consistent with 'exdented' style.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
7626,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,306,"[I] Cast between a pointer to object and an integral type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7627,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,310,"Casting to different object pointer type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7628,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7629,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,489,"Increment or decrement operation performed on pointer.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7630,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__result' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7631,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7632,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7633,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7634,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7635,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7636,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7637,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7638,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7639,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7640,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7641,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,2100,"Integral promotion : unsigned char promoted to signed int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7642,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7643,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3112,"This statement has no side-effect - it can be removed.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7644,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3122,"Hard-coded 'magic' string literal.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7645,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3200,"__builtin_strcmp' returns a value which is not being used.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7646,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7647,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7648,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7649,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7650,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7651,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7652,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7653,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7654,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7655,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3326,"An assignment operator is being used in a boolean expression.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7656,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3346,"This 'if' control expression has a constant 'true' value.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7657,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7658,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7659,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7660,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7661,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7662,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7663,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7664,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7665,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7666,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7667,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7668,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7669,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7670,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7671,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7672,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7673,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7674,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7675,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7676,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7677,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7678,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7679,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7680,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3416,"This boolean expression contains side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7681,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3417,"The comma operator has been used outside a for-loop header.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7682,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3446,"The result operands of this conditional operator generate side effects","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7683,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3631,"Type 'char' has been used in a cast.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7684,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3760,"Implicit conversion: int to unsigned int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7685,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7686,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7687,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7688,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,45,2209,"This brace style is not consistent with 'exdented' style.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7689,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",316,13,3200,"strcat' returns a value which is not being used.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
7690,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",316,37,3122,"Hard-coded 'magic' string literal.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
7691,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",316,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
7692,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",317,13,3200,"strcat' returns a value which is not being used.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
7693,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",317,37,3122,"Hard-coded 'magic' string literal.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
7694,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",317,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
7695,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",319,13,2209,"This brace style is not consistent with 'exdented' style.","  319:	        else{
",,,
7696,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",319,13,3201,"This statement is unreachable.","  319:	        else{
",,,
7697,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",320,13,3200,"strcat' returns a value which is not being used.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
7698,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",320,37,3122,"Hard-coded 'magic' string literal.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
7699,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",320,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
7700,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,306,"[I] Cast between a pointer to object and an integral type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7701,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,310,"Casting to different object pointer type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7702,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7703,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,489,"Increment or decrement operation performed on pointer.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7704,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__result' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7705,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7706,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7707,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7708,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7709,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7710,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7711,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7712,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7713,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7714,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7715,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,2100,"Integral promotion : unsigned char promoted to signed int.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7716,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7717,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3112,"This statement has no side-effect - it can be removed.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7718,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3122,"Hard-coded 'magic' string literal.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7719,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3200,"__builtin_strcmp' returns a value which is not being used.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7720,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7721,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7722,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7723,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7724,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7725,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7726,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7727,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7728,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7729,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3326,"An assignment operator is being used in a boolean expression.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7730,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3346,"This 'if' control expression has a constant 'true' value.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7731,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7732,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7733,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7734,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7735,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7736,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7737,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7738,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7739,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",1,1,240,"[E] This file contains the control-M character at the end of a line.","    1:	/*
",,"description for warning (3871)","Registered"
7740,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",9,16,288,"[I] Source file '/home/www/TOSCANA_dev/BackEnd/AnalyzeTaskManager/work/1/work/sample_c_cpp/sample_c/src/analyzeme.c' has comments containing characters which are not members of the basic source character set.","    9:	      AnalyzeMeのメイン関数を定義する
",,"description for warning (3872)","Registered"
7741,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",16,2,2017,"Comment spans more than one line.","   16:	*/
",,"description for warning (3873)","Registered"
7742,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",20,2,2017,"Comment spans more than one line.","   20:	*/
",,"description for warning (3874)","Registered"
7743,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",21,1,838,"File has already been included directly from this file.","   21:	#include ""analyzeme.h""
",,"description for warning (3875)","Registered"
7744,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",21,1,839,"File has already been included indirectly from this file.","   21:	#include ""analyzeme.h""
",,"description for warning (3876)","Registered"
7745,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",21,23,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   21:	#include ""analyzeme.h""
",,"description for warning (3877)","Registered"
7746,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",22,1,839,"File has already been included indirectly from this file.","   22:	#include ""common.h""
",,"description for warning (3878)","Registered"
7747,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",23,1,839,"File has already been included indirectly from this file.","   23:	#include ""memory_manage.h""
",,"description for warning (3879)","Registered"
7748,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",23,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   23:	#include ""memory_manage.h""
",,"description for warning (3880)","Registered"
7749,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",24,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   24:	#include ""parse_cmdline.h""
",,,
7750,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",25,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   25:	#include ""common_measure.h""
",,,
7751,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",26,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   26:	#include ""trend_measure.h""
",,,
7752,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",27,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   27:	#include ""make_file_list.h""
",,,
7753,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",29,31,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   29:	#include ""get_process_macro.h""
",,,
7754,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",30,1,839,"File has already been included indirectly from this file.","   30:	#include &lt;signal.h&gt;
",,,
7755,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
7756,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
7757,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,13,3211,"The global identifier 'TRACEFILE' is defined but not used.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
7758,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,13,3408,"TRACEFILE' has external linkage but is being defined without any previous declaration.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
7759,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",36,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
7760,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",36,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
7761,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",36,13,3408,"APPLOGFILE' has external linkage but is being defined without any previous declaration.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
7762,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",44,7,3408,"g_fpLogFile' has external linkage but is being defined without any previous declaration.","   44:	FILE *g_fpLogFile = NULL;       /* Log File pointer */
",,,
7763,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",46,7,3211,"The global identifier 'g_fpTraceFile' is defined but not used.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
7764,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",46,7,3408,"g_fpTraceFile' has external linkage but is being defined without any previous declaration.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
7765,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",48,7,3408,"g_fpErrorFile' has external linkage but is being defined without any previous declaration.","   48:	FILE *g_fpErrorFile = NULL;
",,,
7766,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",50,6,3408,"g_bTrace' has external linkage but is being defined without any previous declaration.","   50:	bool g_bTrace           = false;    /* Trace flag */
",,,
7767,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",51,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
7768,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",51,6,3408,"g_szNVPath' has external linkage but is being defined without any previous declaration.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
7769,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",51,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
7770,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",52,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
7771,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",52,6,3408,"g_szOVPath' has external linkage but is being defined without any previous declaration.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
7772,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",52,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
7773,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",53,6,3408,"g_bTrendFile' has external linkage but is being defined without any previous declaration.","   53:	bool g_bTrendFile = false;
",,,
7774,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",55,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   55:	char *g_optionFileCont = NULL;
",,,
7775,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",55,7,3211,"The global identifier 'g_optionFileCont' is defined but not used.","   55:	char *g_optionFileCont = NULL;
",,,
7776,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",55,7,3408,"g_optionFileCont' has external linkage but is being defined without any previous declaration.","   55:	char *g_optionFileCont = NULL;
",,,
7777,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",57,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   57:	char *g_symbolFileCont = NULL;
",,,
7778,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",57,7,3211,"The global identifier 'g_symbolFileCont' is defined but not used.","   57:	char *g_symbolFileCont = NULL;
",,,
7779,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",57,7,3408,"g_symbolFileCont' has external linkage but is being defined without any previous declaration.","   57:	char *g_symbolFileCont = NULL;
",,,
7780,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",58,6,3408,"g_bOutTime' has external linkage but is being defined without any previous declaration.","   58:	bool g_bOutTime = false;
",,,
7781,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",59,15,3408,"g_pAnzInfo' has external linkage but is being defined without any previous declaration.","   59:	ST_AnalyzeMe *g_pAnzInfo;  /* AnalyzeMe管理情報 */
",,,
7782,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",69,2,2017,"Comment spans more than one line.","   69:	*/
",,,
7783,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",70,14,3227,"The parameter 'argc' is never modified and so it could be declared with the 'const' qualifier.","   70:	int main(int argc,char * argv[])
",,,
7784,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",70,19,3625,"Type 'char' has been used in the declaration of an object or a function.","   70:	int main(int argc,char * argv[])
",,,
7785,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",70,26,344,"K&amp;R compilers do not support function prototypes.","   70:	int main(int argc,char * argv[])
",,,
7786,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",75,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
7787,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",75,28,2211,"the_pMeasureItem' is not aligned with the previously declared identifier.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
7788,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
7789,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,10,2211,"the_szCurMetrics' is not aligned with the previously declared identifier.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
7790,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,10,3604,"Local arrays and structures cannot be initialised in K&amp;R C.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
7791,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,44,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
7792,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",80,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   80:	    char *the_pTrace = NULL;
",,,
7793,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",80,11,2211,"the_pTrace' is not aligned with the previously declared identifier.","   80:	    char *the_pTrace = NULL;
",,,
7794,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",80,11,3197,"The initialiser for 'the_pTrace' is always modified before being used.","   80:	    char *the_pTrace = NULL;
",,,
7795,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",81,25,2211,"the_st' is not aligned with the previously declared identifier.","   81:	    struct timeb the_st ;
",,,
7796,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",89,5,3198,"The value assigned to 'the_pAnzInfo' is always modified before being used.","   89:	    the_pAnzInfo = NULL;
",,,
7797,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",91,5,3198,"The value assigned to 'the_iRet' is always modified before being used.","   91:	    the_iRet = ANZ_SUCCESS;
",,,
7798,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",101,25,3122,"Hard-coded 'magic' string literal.","  101:	    the_pTrace = getenv(""AnzTrace"");
",,,
7799,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",102,28,2209,"This brace style is not consistent with 'exdented' style.","  102:	    if(the_pTrace != NULL) {
",,,
7800,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,306,"[I] Cast between a pointer to object and an integral type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7801,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,310,"Casting to different object pointer type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7802,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7803,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,489,"Increment or decrement operation performed on pointer.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7804,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__result' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7805,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7806,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7807,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7808,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7809,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7810,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7811,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7812,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7813,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7814,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7815,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,2100,"Integral promotion : unsigned char promoted to signed int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7816,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7817,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3112,"This statement has no side-effect - it can be removed.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7818,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3122,"Hard-coded 'magic' string literal.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7819,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3200,"__builtin_strcmp' returns a value which is not being used.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7820,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7821,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7822,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7823,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7824,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7825,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7826,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7827,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7828,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7829,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3325,"This control expression has a constant 'false' value.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7830,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3326,"An assignment operator is being used in a boolean expression.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7831,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7832,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7833,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7834,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7835,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7836,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7837,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7838,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7839,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7840,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7841,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7842,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7843,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7844,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7845,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7846,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7847,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7848,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7849,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7850,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7851,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7852,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7853,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7854,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3416,"This boolean expression contains side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7855,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3417,"The comma operator has been used outside a for-loop header.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7856,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3446,"The result operands of this conditional operator generate side effects","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7857,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3631,"Type 'char' has been used in a cast.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7858,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3760,"Implicit conversion: int to unsigned int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7859,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,35,3209,"__builtin_strcmp()' returns a value which is always ignored.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7860,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7861,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7862,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,36,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7863,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,43,2209,"This brace style is not consistent with 'exdented' style.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7864,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,43,3201,"This statement is unreachable.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
7865,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",113,6,2017,"Comment spans more than one line.","  113:	    */
",,,
7866,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",114,36,3122,"Hard-coded 'magic' string literal.","  114:	    g_fpLogFile = fopen(APPLOGFILE,""w"");
",,,
7867,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",115,28,2209,"This brace style is not consistent with 'exdented' style.","  115:	    if(g_fpLogFile == NULL){
",,,
7868,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",116,9,3200,"printf' returns a value which is not being used.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
7869,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",116,16,3122,"Hard-coded 'magic' string literal.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
7870,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",120,5,702,"Result of sizeof operator is not explicitly cast.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
7871,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",120,63,3430,"Macro argument expression requires parentheses.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
7872,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",121,29,2209,"This brace style is not consistent with 'exdented' style.","  121:	    if(the_pAnzInfo == NULL){
",,,
7873,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",122,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  122:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
7874,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",123,18,2001,"A 'goto' statement has been used.","  123:	        goto EXIT;
",,,
7875,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",125,5,702,"Result of sizeof operator is not explicitly cast.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
7876,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",125,5,3200,"memset' returns a value which is not being used.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
7877,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",128,5,702,"Result of sizeof operator is not explicitly cast.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
7878,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",128,67,3430,"Macro argument expression requires parentheses.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
7879,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",129,39,2209,"This brace style is not consistent with 'exdented' style.","  129:	    if(the_pAnzInfo-&gt;m_option == NULL){
",,,
7880,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",130,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  130:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
7881,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",131,18,2001,"A 'goto' statement has been used.","  131:	        goto EXIT;
",,,
7882,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",133,5,702,"Result of sizeof operator is not explicitly cast.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
7883,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",133,5,3200,"memset' returns a value which is not being used.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
7884,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,702,"Result of sizeof operator is not explicitly cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
7885,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,3631,"Type 'char' has been used in a cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
7886,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,3633,"Type 'char' has been used in the operand of the sizeof operator.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
7887,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,3760,"Implicit conversion: int to unsigned int.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
7888,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",138,34,2209,"This brace style is not consistent with 'exdented' style.","  138:	    if(the_pMeasureItem == NULL) {
",,,
7889,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",139,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  139:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
7890,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",140,18,2001,"A 'goto' statement has been used.","  140:	        goto EXIT;
",,,
7891,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,5,702,"Result of sizeof operator is not explicitly cast.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
7892,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,5,3200,"memset' returns a value which is not being used.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
7893,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,36,3760,"Implicit conversion: int to unsigned int.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
7894,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,45,3633,"Type 'char' has been used in the operand of the sizeof operator.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
7895,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",150,5,3200,"strcpy' returns a value which is not being used.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
7896,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",150,34,3122,"Hard-coded 'magic' string literal.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
7897,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",154,5,3200,"strcpy' returns a value which is not being used.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
7898,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",154,39,3122,"Hard-coded 'magic' string literal.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
7899,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",155,5,3200,"strcpy' returns a value which is not being used.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
7900,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",155,38,3122,"Hard-coded 'magic' string literal.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
7901,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",156,5,3200,"strcpy' returns a value which is not being used.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
7902,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",156,38,3122,"Hard-coded 'magic' string literal.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
7903,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",165,32,3120,"Hard-coded 'magic' integer constant '70'.","  165:	    the_pOption-&gt;m_symThresh = 70;
",,,
7904,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",166,32,3120,"Hard-coded 'magic' integer constant '2'.","  166:	    the_pOption-&gt;m_minThresh = 2;
",,,
7905,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",169,5,702,"Result of sizeof operator is not explicitly cast.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
7906,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",169,59,3430,"Macro argument expression requires parentheses.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
7907,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",170,31,2209,"This brace style is not consistent with 'exdented' style.","  170:	    if(the_pCmdOption == NULL){
",,,
7908,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",171,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  171:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
7909,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",172,18,2001,"A 'goto' statement has been used.","  172:	        goto EXIT;
",,,
7910,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",174,5,702,"Result of sizeof operator is not explicitly cast.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
7911,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",174,5,3200,"memset' returns a value which is not being used.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
7912,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",180,5,3200,"strcpy' returns a value which is not being used.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
7913,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",180,37,3122,"Hard-coded 'magic' string literal.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
7914,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",184,5,3200,"strcpy' returns a value which is not being used.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
7915,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",184,42,3122,"Hard-coded 'magic' string literal.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
7916,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",185,5,3200,"strcpy' returns a value which is not being used.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
7917,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",185,41,3122,"Hard-coded 'magic' string literal.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
7918,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",186,5,3200,"strcpy' returns a value which is not being used.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
7919,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",186,41,3122,"Hard-coded 'magic' string literal.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
7920,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",195,35,3120,"Hard-coded 'magic' integer constant '70'.","  195:	    the_pCmdOption-&gt;m_symThresh = 70;
",,,
7921,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",196,35,3120,"Hard-coded 'magic' integer constant '2'.","  196:	    the_pCmdOption-&gt;m_minThresh = 2;
",,,
7922,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",200,32,2209,"This brace style is not consistent with 'exdented' style.","  200:	    if(the_iRet != ANZ_SUCCESS){
",,,
7923,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",201,18,2001,"A 'goto' statement has been used.","  201:	        goto EXIT;
",,,
7924,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",203,8,3344,"Value of control expression is not derived from an explicit logical operation.","  203:	    if(g_bOutTime) {
",,,
7925,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",203,20,2209,"This brace style is not consistent with 'exdented' style.","  203:	    if(g_bOutTime) {
",,,
7926,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",204,9,3200,"ftime' returns a value which is not being used.","  204:	        ftime(&amp;the_st);
",,,
7927,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",209,32,2209,"This brace style is not consistent with 'exdented' style.","  209:	    if(the_iRet != ANZ_SUCCESS){
",,,
7928,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",210,18,2001,"A 'goto' statement has been used.","  210:	        goto EXIT;
",,,
7929,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",214,32,2209,"This brace style is not consistent with 'exdented' style.","  214:	    if(the_iRet != ANZ_SUCCESS){
",,,
7930,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",215,18,2001,"A 'goto' statement has been used.","  215:	        goto EXIT;
",,,
7931,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",218,23,3355,"The result of this logical operation is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
7932,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",218,23,3358,"The value of this 'if' control expression is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
7933,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",218,31,2209,"This brace style is not consistent with 'exdented' style.","  218:	    if(the_pCmdOption != NULL){
",,,
7934,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",224,32,2209,"This brace style is not consistent with 'exdented' style.","  224:	    if(the_iRet != ANZ_SUCCESS){
",,,
7935,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",225,18,2001,"A 'goto' statement has been used.","  225:	        goto EXIT;
",,,
7936,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",229,32,2209,"This brace style is not consistent with 'exdented' style.","  229:	    if(the_iRet != ANZ_SUCCESS){
",,,
7937,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",230,18,2001,"A 'goto' statement has been used.","  230:	        goto EXIT;
",,,
7938,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",233,47,2209,"This brace style is not consistent with 'exdented' style.","  233:	    if(the_iMeasureType == ANZ_TREND_MEASURE) {
",,,
7939,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",234,13,3220,"Identifier declared at a nested level of block scope.","  234:	        int the_iType = -1;
",,,
7940,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",235,13,3220,"Identifier declared at a nested level of block scope.","  235:	        int the_pPos = -1;
",,,
7941,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",236,9,3200,"isDirOrFile' returns a value which is not being used.","  236:	        isDirOrFile(*the_pMeasureItem,&amp;the_iType);
",,,
7942,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",237,35,2209,"This brace style is not consistent with 'exdented' style.","  237:	        if(the_iType == ANZ_FILE) {
",,,
7943,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",242,30,2209,"This brace style is not consistent with 'exdented' style.","  242:	            if(the_pPos &gt; 0) {
",,,
7944,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",243,55,488,"Performing pointer arithmetic.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
7945,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",243,66,489,"Increment or decrement operation performed on pointer.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
7946,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",246,43,489,"Increment or decrement operation performed on pointer.","  246:	            GetPathPos(*(the_pMeasureItem + 1),&amp;the_pPos);
",,,
7947,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",248,30,2209,"This brace style is not consistent with 'exdented' style.","  248:	            if(the_pPos &gt; 0) {
",,,
7948,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,36,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
7949,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,42,3501,"This could be read as an old-style assignment operator. Spaces are needed to make it more readable.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
7950,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,61,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
7951,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,66,488,"Performing pointer arithmetic.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
7952,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,77,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
7953,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",252,13,3198,"The value assigned to 'the_iRet' is always modified before being used.","  252:	            the_iRet = ResetTrendPath(g_szNVPath);
",,,
7954,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",254,41,2209,"This brace style is not consistent with 'exdented' style.","  254:	            if(the_iRet != ANZ_SUCCESS) {
",,,
7955,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",255,26,2001,"A 'goto' statement has been used.","  255:	                goto EXIT;
",,,
7956,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",260,51,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
7957,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",260,57,3631,"Type 'char' has been used in a cast.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
7958,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",261,41,2209,"This brace style is not consistent with 'exdented' style.","  261:	    if(the_iRet == ANZ_NO_MEASURE_FILES){
",,,
7959,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",262,9,3200,"printf' returns a value which is not being used.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
7960,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",262,16,3122,"Hard-coded 'magic' string literal.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
7961,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",264,42,2209,"This brace style is not consistent with 'exdented' style.","  264:	    if(the_iRet == ANZ_ERR_MEMORY_FAILED){
",,,
7962,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",265,9,3200,"printf' returns a value which is not being used.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
7963,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",265,16,3122,"Hard-coded 'magic' string literal.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
7964,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",267,32,2209,"This brace style is not consistent with 'exdented' style.","  267:	    if(the_iRet != ANZ_SUCCESS){
",,,
7965,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",268,18,2001,"A 'goto' statement has been used.","  268:	        goto EXIT;
",,,
7966,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",272,37,2209,"This brace style is not consistent with 'exdented' style.","  272:	    if(the_pOption-&gt;m_fileLOC == ON){
",,,
7967,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",273,9,3200,"strcat' returns a value which is not being used.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
7968,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",273,33,3122,"Hard-coded 'magic' string literal.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
7969,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",276,40,2209,"This brace style is not consistent with 'exdented' style.","  276:	    if(the_pOption-&gt;m_redundancy == ON){
",,,
7970,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,306,"[I] Cast between a pointer to object and an integral type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7971,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,310,"Casting to different object pointer type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7972,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7973,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,489,"Increment or decrement operation performed on pointer.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7974,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__result' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7975,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7976,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7977,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7978,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7979,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7980,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7981,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7982,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7983,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7984,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7985,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,2100,"Integral promotion : unsigned char promoted to signed int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7986,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7987,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3112,"This statement has no side-effect - it can be removed.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7988,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3122,"Hard-coded 'magic' string literal.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7989,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3200,"__builtin_strcmp' returns a value which is not being used.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7990,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7991,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7992,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7993,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7994,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7995,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7996,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7997,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7998,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7999,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3326,"An assignment operator is being used in a boolean expression.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8000,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3346,"This 'if' control expression has a constant 'true' value.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8001,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8002,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8003,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8004,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8005,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8006,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8007,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8008,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8009,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8010,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8011,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8012,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8013,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8014,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8015,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8016,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8017,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8018,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8019,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8020,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8021,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8022,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8023,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8024,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3416,"This boolean expression contains side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8025,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3417,"The comma operator has been used outside a for-loop header.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8026,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3446,"The result operands of this conditional operator generate side effects","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8027,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3631,"Type 'char' has been used in a cast.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8028,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3760,"Implicit conversion: int to unsigned int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8029,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8030,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8031,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8032,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,45,2209,"This brace style is not consistent with 'exdented' style.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8033,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",278,13,3200,"strcat' returns a value which is not being used.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
8034,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",278,37,3122,"Hard-coded 'magic' string literal.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
8035,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",278,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
8036,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",279,13,3200,"strcat' returns a value which is not being used.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
8037,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",279,37,3122,"Hard-coded 'magic' string literal.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
8038,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",279,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
8039,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",281,13,2209,"This brace style is not consistent with 'exdented' style.","  281:	        else{
",,,
8040,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",281,13,3201,"This statement is unreachable.","  281:	        else{
",,,
8041,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",282,13,3200,"strcat' returns a value which is not being used.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
8042,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",282,37,3122,"Hard-coded 'magic' string literal.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
8043,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",282,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
8044,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",286,8,3344,"Value of control expression is not derived from an explicit logical operation.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
8045,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",286,31,2209,"This brace style is not consistent with 'exdented' style.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
8046,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,306,"[I] Cast between a pointer to object and an integral type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8047,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,310,"Casting to different object pointer type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8048,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8049,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,489,"Increment or decrement operation performed on pointer.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8050,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__result' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8051,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8052,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8053,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8054,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8055,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8056,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8057,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8058,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8059,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8060,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8061,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,2100,"Integral promotion : unsigned char promoted to signed int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8062,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8063,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3112,"This statement has no side-effect - it can be removed.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8064,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3122,"Hard-coded 'magic' string literal.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8065,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3200,"__builtin_strcmp' returns a value which is not being used.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8066,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8067,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8068,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8069,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8070,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8071,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8072,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8073,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8074,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8075,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3326,"An assignment operator is being used in a boolean expression.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8076,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3346,"This 'if' control expression has a constant 'true' value.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8077,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8078,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8079,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8080,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8081,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8082,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8083,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8084,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8085,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8086,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8087,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8088,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8089,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8090,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8091,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8092,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8093,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8094,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8095,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8096,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8097,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8098,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8099,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8100,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3416,"This boolean expression contains side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8101,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3417,"The comma operator has been used outside a for-loop header.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8102,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3446,"The result operands of this conditional operator generate side effects","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8103,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3631,"Type 'char' has been used in a cast.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8104,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3760,"Implicit conversion: int to unsigned int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8105,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8106,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8107,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8108,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,45,2209,"This brace style is not consistent with 'exdented' style.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8109,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",288,13,3200,"strcat' returns a value which is not being used.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
8110,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",288,37,3122,"Hard-coded 'magic' string literal.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
8111,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",288,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
8112,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",289,13,3200,"strcat' returns a value which is not being used.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
8113,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",289,37,3122,"Hard-coded 'magic' string literal.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
8114,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",289,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
8115,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",291,13,2209,"This brace style is not consistent with 'exdented' style.","  291:	        else{
",,,
8116,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",291,13,3201,"This statement is unreachable.","  291:	        else{
",,,
8117,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",292,13,3200,"strcat' returns a value which is not being used.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
8118,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",292,37,3122,"Hard-coded 'magic' string literal.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
8119,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",292,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
8120,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",296,8,3344,"Value of control expression is not derived from an explicit logical operation.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
8121,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",296,28,2209,"This brace style is not consistent with 'exdented' style.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
8122,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,306,"[I] Cast between a pointer to object and an integral type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8123,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,310,"Casting to different object pointer type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8124,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8125,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,489,"Increment or decrement operation performed on pointer.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8126,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__result' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8127,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8128,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8129,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8130,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8131,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8132,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8133,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8134,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8135,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8136,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8137,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,2100,"Integral promotion : unsigned char promoted to signed int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8138,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8139,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3112,"This statement has no side-effect - it can be removed.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8140,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3122,"Hard-coded 'magic' string literal.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8141,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3200,"__builtin_strcmp' returns a value which is not being used.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8142,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8143,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8144,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8145,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8146,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8147,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8148,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8149,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8150,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8151,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3326,"An assignment operator is being used in a boolean expression.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8152,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3346,"This 'if' control expression has a constant 'true' value.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8153,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8154,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8155,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8156,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8157,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8158,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8159,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8160,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8161,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8162,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8163,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8164,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8165,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8166,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8167,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8168,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8169,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8170,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8171,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8172,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8173,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8174,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8175,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8176,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3416,"This boolean expression contains side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8177,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3417,"The comma operator has been used outside a for-loop header.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8178,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3446,"The result operands of this conditional operator generate side effects","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8179,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3631,"Type 'char' has been used in a cast.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8180,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3760,"Implicit conversion: int to unsigned int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8181,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8182,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8183,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8184,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,45,2209,"This brace style is not consistent with 'exdented' style.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8185,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",298,13,3200,"strcat' returns a value which is not being used.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
8186,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",298,37,3122,"Hard-coded 'magic' string literal.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
8187,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",298,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
8188,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",299,13,3200,"strcat' returns a value which is not being used.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
8189,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",299,37,3122,"Hard-coded 'magic' string literal.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
8190,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",299,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
8191,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",301,13,2209,"This brace style is not consistent with 'exdented' style.","  301:	        else{
",,,
8192,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",301,13,3201,"This statement is unreachable.","  301:	        else{
",,,
8193,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",302,13,3200,"strcat' returns a value which is not being used.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
8194,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",302,37,3122,"Hard-coded 'magic' string literal.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
8195,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",302,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
8196,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,306,"[I] Cast between a pointer to object and an integral type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8197,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,310,"Casting to different object pointer type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8198,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8199,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,489,"Increment or decrement operation performed on pointer.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8200,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__result' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8201,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8202,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8203,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8204,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8205,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8206,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8207,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8208,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8209,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8210,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8211,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,2100,"Integral promotion : unsigned char promoted to signed int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8212,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8213,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3112,"This statement has no side-effect - it can be removed.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8214,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3122,"Hard-coded 'magic' string literal.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8215,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3200,"__builtin_strcmp' returns a value which is not being used.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8216,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8217,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8218,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8219,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8220,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8221,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8222,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8223,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8224,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8225,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3326,"An assignment operator is being used in a boolean expression.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8226,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3346,"This 'if' control expression has a constant 'true' value.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8227,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8228,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8229,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8230,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8231,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8232,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8233,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8234,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8235,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8236,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8237,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8238,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8239,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8240,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8241,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8242,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8243,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8244,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8245,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8246,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8247,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8248,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8249,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8250,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3416,"This boolean expression contains side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8251,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3417,"The comma operator has been used outside a for-loop header.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8252,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3446,"The result operands of this conditional operator generate side effects","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8253,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3631,"Type 'char' has been used in a cast.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8254,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3760,"Implicit conversion: int to unsigned int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8255,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8256,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8257,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8258,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,45,2209,"This brace style is not consistent with 'exdented' style.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8259,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",305,13,3200,"strcat' returns a value which is not being used.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
8260,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",305,37,3122,"Hard-coded 'magic' string literal.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
8261,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",305,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
8262,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",306,13,3200,"strcat' returns a value which is not being used.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
8263,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",306,37,3122,"Hard-coded 'magic' string literal.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
8264,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",308,13,2209,"This brace style is not consistent with 'exdented' style.","  308:	        else{
",,,
8265,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",308,13,3201,"This statement is unreachable.","  308:	        else{
",,,
8266,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",309,13,3200,"strcat' returns a value which is not being used.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
8267,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",309,37,3122,"Hard-coded 'magic' string literal.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
8268,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",314,8,3344,"Value of control expression is not derived from an explicit logical operation.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
8269,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",314,34,2209,"This brace style is not consistent with 'exdented' style.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
8270,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,306,"[I] Cast between a pointer to object and an integral type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8271,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,310,"Casting to different object pointer type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8272,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8273,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,489,"Increment or decrement operation performed on pointer.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8274,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__result' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8275,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8276,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8277,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8278,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8279,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8280,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8281,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8282,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8283,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8284,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8285,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,2100,"Integral promotion : unsigned char promoted to signed int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8286,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8287,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3112,"This statement has no side-effect - it can be removed.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8288,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3122,"Hard-coded 'magic' string literal.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8289,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3200,"__builtin_strcmp' returns a value which is not being used.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8290,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8291,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8292,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8293,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8294,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8295,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8296,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8297,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8298,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8299,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3326,"An assignment operator is being used in a boolean expression.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8300,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3346,"This 'if' control expression has a constant 'true' value.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8301,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8302,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8303,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8304,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8305,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8306,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8307,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8308,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8309,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8310,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8311,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8312,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8313,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8314,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8315,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8316,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8317,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8318,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8319,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8320,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8321,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8322,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8323,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8324,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3416,"This boolean expression contains side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8325,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3417,"The comma operator has been used outside a for-loop header.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8326,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3446,"The result operands of this conditional operator generate side effects","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8327,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3631,"Type 'char' has been used in a cast.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8328,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3760,"Implicit conversion: int to unsigned int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8329,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8330,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8331,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8332,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,45,2209,"This brace style is not consistent with 'exdented' style.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8333,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",316,13,3200,"strcat' returns a value which is not being used.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
8334,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",316,37,3122,"Hard-coded 'magic' string literal.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
8335,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",316,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
8336,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",317,13,3200,"strcat' returns a value which is not being used.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
8337,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",317,37,3122,"Hard-coded 'magic' string literal.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
8338,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",317,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
8339,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",319,13,2209,"This brace style is not consistent with 'exdented' style.","  319:	        else{
",,,
8340,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",319,13,3201,"This statement is unreachable.","  319:	        else{
",,,
8341,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",320,13,3200,"strcat' returns a value which is not being used.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
8342,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",320,37,3122,"Hard-coded 'magic' string literal.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
8343,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",320,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
8344,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,306,"[I] Cast between a pointer to object and an integral type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8345,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,310,"Casting to different object pointer type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8346,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8347,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,489,"Increment or decrement operation performed on pointer.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8348,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__result' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8349,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8350,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8351,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8352,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8353,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8354,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8355,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8356,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8357,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8358,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8359,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,2100,"Integral promotion : unsigned char promoted to signed int.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8360,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8361,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3112,"This statement has no side-effect - it can be removed.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8362,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3122,"Hard-coded 'magic' string literal.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8363,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3200,"__builtin_strcmp' returns a value which is not being used.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8364,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8365,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8366,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8367,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8368,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8369,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8370,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8371,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8372,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8373,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3326,"An assignment operator is being used in a boolean expression.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8374,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3346,"This 'if' control expression has a constant 'true' value.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8375,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8376,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8377,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8378,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8379,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8380,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8381,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8382,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8383,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8384,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8385,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8386,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8387,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8388,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8389,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8390,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8391,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8392,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8393,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8394,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8395,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8396,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8397,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8398,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3416,"This boolean expression contains side effects.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8399,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3417,"The comma operator has been used outside a for-loop header.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8400,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3446,"The result operands of this conditional operator generate side effects","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8401,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3631,"Type 'char' has been used in a cast.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8402,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3760,"Implicit conversion: int to unsigned int.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8403,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8404,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8405,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8406,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,45,2209,"This brace style is not consistent with 'exdented' style.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8407,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",324,13,3200,"strcat' returns a value which is not being used.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
8408,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",324,37,3122,"Hard-coded 'magic' string literal.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
8409,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",324,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
8410,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",325,13,3200,"strcat' returns a value which is not being used.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
8411,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",325,37,3122,"Hard-coded 'magic' string literal.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
8412,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",325,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
8413,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",327,13,2209,"This brace style is not consistent with 'exdented' style.","  327:	        else{
",,,
8414,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",327,13,3201,"This statement is unreachable.","  327:	        else{
",,,
8415,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",328,13,3200,"strcat' returns a value which is not being used.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
8416,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",328,37,3122,"Hard-coded 'magic' string literal.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
8417,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",328,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
8418,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",333,8,3344,"Value of control expression is not derived from an explicit logical operation.","  333:	    if(the_pOption-&gt;m_trend){
",,,
8419,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",333,29,2209,"This brace style is not consistent with 'exdented' style.","  333:	    if(the_pOption-&gt;m_trend){
",,,
8420,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,306,"[I] Cast between a pointer to object and an integral type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8421,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,310,"Casting to different object pointer type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8422,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8423,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,489,"Increment or decrement operation performed on pointer.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8424,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__result' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8425,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8426,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8427,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8428,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8429,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8430,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8431,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8432,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8433,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8434,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8435,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,2100,"Integral promotion : unsigned char promoted to signed int.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8436,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8437,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3112,"This statement has no side-effect - it can be removed.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8438,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3122,"Hard-coded 'magic' string literal.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8439,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3200,"__builtin_strcmp' returns a value which is not being used.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8440,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8441,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8442,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8443,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8444,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8445,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8446,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8447,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8448,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8449,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3326,"An assignment operator is being used in a boolean expression.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8450,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3346,"This 'if' control expression has a constant 'true' value.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8451,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8452,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8453,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8454,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8455,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8456,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8457,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8458,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8459,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8460,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8461,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8462,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8463,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8464,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8465,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8466,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8467,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8468,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8469,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8470,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8471,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8472,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8473,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8474,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3416,"This boolean expression contains side effects.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8475,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3417,"The comma operator has been used outside a for-loop header.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8476,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3446,"The result operands of this conditional operator generate side effects","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8477,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3631,"Type 'char' has been used in a cast.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8478,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3760,"Implicit conversion: int to unsigned int.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8479,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8480,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8481,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8482,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,45,2209,"This brace style is not consistent with 'exdented' style.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8483,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",335,13,3200,"strcat' returns a value which is not being used.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
8484,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",335,37,3122,"Hard-coded 'magic' string literal.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
8485,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",335,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
8486,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",336,13,3200,"strcat' returns a value which is not being used.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
8487,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",336,37,3122,"Hard-coded 'magic' string literal.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
8488,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",336,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
8489,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",338,13,2209,"This brace style is not consistent with 'exdented' style.","  338:	        else{
",,,
8490,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",338,13,3201,"This statement is unreachable.","  338:	        else{
",,,
8491,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",339,13,3200,"strcat' returns a value which is not being used.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
8492,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",339,37,3122,"Hard-coded 'magic' string literal.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
8493,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",339,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
8494,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",341,9,3200,"strcat' returns a value which is not being used.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
8495,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",341,33,3122,"Hard-coded 'magic' string literal.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
8496,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",341,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
8497,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",345,8,3344,"Value of control expression is not derived from an explicit logical operation.","  345:	    if(the_pOption-&gt;m_funcTrend){
",,,
8498,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",345,33,2209,"This brace style is not consistent with 'exdented' style.","  345:	    if(the_pOption-&gt;m_funcTrend){
",,,
8499,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,306,"[I] Cast between a pointer to object and an integral type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8500,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,310,"Casting to different object pointer type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8501,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8502,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,489,"Increment or decrement operation performed on pointer.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8503,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__result' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8504,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8505,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8506,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8507,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8508,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8509,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8510,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8511,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8512,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8513,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8514,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,2100,"Integral promotion : unsigned char promoted to signed int.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8515,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8516,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3112,"This statement has no side-effect - it can be removed.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8517,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3122,"Hard-coded 'magic' string literal.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8518,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3200,"__builtin_strcmp' returns a value which is not being used.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8519,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8520,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8521,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8522,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8523,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8524,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8525,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8526,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8527,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8528,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3326,"An assignment operator is being used in a boolean expression.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8529,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3346,"This 'if' control expression has a constant 'true' value.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8530,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8531,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8532,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8533,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8534,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8535,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8536,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8537,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8538,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8539,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8540,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8541,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8542,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8543,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8544,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8545,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8546,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8547,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8548,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8549,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8550,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8551,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8552,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8553,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3416,"This boolean expression contains side effects.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8554,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3417,"The comma operator has been used outside a for-loop header.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8555,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3446,"The result operands of this conditional operator generate side effects","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8556,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3631,"Type 'char' has been used in a cast.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8557,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3760,"Implicit conversion: int to unsigned int.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8558,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8559,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8560,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8561,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,45,2209,"This brace style is not consistent with 'exdented' style.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8562,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",347,13,3200,"strcat' returns a value which is not being used.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
8563,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",347,37,3122,"Hard-coded 'magic' string literal.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
8564,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",347,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
8565,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",348,13,3200,"strcat' returns a value which is not being used.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
8566,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",348,37,3122,"Hard-coded 'magic' string literal.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
8567,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",348,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
8568,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",350,13,2209,"This brace style is not consistent with 'exdented' style.","  350:	        else{
",,,
8569,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",350,13,3201,"This statement is unreachable.","  350:	        else{
",,,
8570,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",351,13,3200,"strcat' returns a value which is not being used.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
8571,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",351,37,3122,"Hard-coded 'magic' string literal.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
8572,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",351,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
8573,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,306,"[I] Cast between a pointer to object and an integral type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8574,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,310,"Casting to different object pointer type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8575,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8576,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,489,"Increment or decrement operation performed on pointer.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8577,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__result' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8578,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8579,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8580,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8581,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8582,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8583,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8584,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8585,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8586,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8587,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8588,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,2100,"Integral promotion : unsigned char promoted to signed int.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8589,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8590,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3112,"This statement has no side-effect - it can be removed.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8591,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3122,"Hard-coded 'magic' string literal.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8592,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3200,"__builtin_strcmp' returns a value which is not being used.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8593,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8594,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8595,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8596,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8597,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8598,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8599,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8600,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8601,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8602,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3326,"An assignment operator is being used in a boolean expression.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8603,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3346,"This 'if' control expression has a constant 'true' value.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8604,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8605,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8606,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8607,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8608,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8609,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8610,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8611,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8612,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8613,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8614,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8615,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8616,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8617,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8618,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8619,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8620,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8621,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8622,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8623,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8624,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8625,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8626,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8627,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3416,"This boolean expression contains side effects.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8628,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3417,"The comma operator has been used outside a for-loop header.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8629,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3446,"The result operands of this conditional operator generate side effects","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8630,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3631,"Type 'char' has been used in a cast.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8631,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3760,"Implicit conversion: int to unsigned int.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8632,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8633,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8634,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8635,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,45,2209,"This brace style is not consistent with 'exdented' style.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8636,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",354,13,3200,"strcat' returns a value which is not being used.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
8637,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",354,37,3122,"Hard-coded 'magic' string literal.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
8638,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",354,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
8639,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",355,13,3200,"strcat' returns a value which is not being used.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
8640,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",355,37,3122,"Hard-coded 'magic' string literal.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
8641,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",355,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
8642,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",357,13,2209,"This brace style is not consistent with 'exdented' style.","  357:	        else{
",,,
8643,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",357,13,3201,"This statement is unreachable.","  357:	        else{
",,,
8644,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",358,13,3200,"strcat' returns a value which is not being used.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
8645,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",358,37,3122,"Hard-coded 'magic' string literal.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
8646,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",358,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
8647,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,306,"[I] Cast between a pointer to object and an integral type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8648,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,310,"Casting to different object pointer type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8649,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8650,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,489,"Increment or decrement operation performed on pointer.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8651,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__result' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8652,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8653,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8654,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8655,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8656,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8657,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8658,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8659,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8660,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8661,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8662,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,2100,"Integral promotion : unsigned char promoted to signed int.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8663,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8664,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3112,"This statement has no side-effect - it can be removed.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8665,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3122,"Hard-coded 'magic' string literal.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8666,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3200,"__builtin_strcmp' returns a value which is not being used.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8667,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8668,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8669,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8670,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8671,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8672,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8673,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8674,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8675,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8676,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3326,"An assignment operator is being used in a boolean expression.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8677,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3346,"This 'if' control expression has a constant 'true' value.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8678,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8679,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8680,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8681,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8682,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8683,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8684,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8685,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8686,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8687,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8688,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8689,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8690,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8691,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8692,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8693,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8694,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8695,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8696,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8697,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8698,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8699,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8700,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8701,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3416,"This boolean expression contains side effects.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8702,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3417,"The comma operator has been used outside a for-loop header.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8703,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3446,"The result operands of this conditional operator generate side effects","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8704,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3631,"Type 'char' has been used in a cast.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8705,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3760,"Implicit conversion: int to unsigned int.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8706,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8707,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8708,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8709,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,45,2209,"This brace style is not consistent with 'exdented' style.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8710,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",361,13,3200,"strcat' returns a value which is not being used.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
8711,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",361,37,3122,"Hard-coded 'magic' string literal.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
8712,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",361,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
8713,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",362,13,3200,"strcat' returns a value which is not being used.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
8714,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",362,37,3122,"Hard-coded 'magic' string literal.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
8715,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",362,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
8716,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",364,13,2209,"This brace style is not consistent with 'exdented' style.","  364:	        else{
",,,
8717,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",364,13,3201,"This statement is unreachable.","  364:	        else{
",,,
8718,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",365,13,3200,"strcat' returns a value which is not being used.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
8719,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",365,37,3122,"Hard-coded 'magic' string literal.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
8720,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",365,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
8721,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,306,"[I] Cast between a pointer to object and an integral type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8722,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,310,"Casting to different object pointer type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8723,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8724,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,489,"Increment or decrement operation performed on pointer.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8725,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__result' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8726,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8727,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8728,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8729,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8730,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8731,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8732,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8733,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8734,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8735,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8736,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,2100,"Integral promotion : unsigned char promoted to signed int.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8737,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8738,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3112,"This statement has no side-effect - it can be removed.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8739,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3122,"Hard-coded 'magic' string literal.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8740,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3200,"__builtin_strcmp' returns a value which is not being used.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8741,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8742,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8743,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8744,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8745,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8746,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8747,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8748,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8749,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8750,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3326,"An assignment operator is being used in a boolean expression.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8751,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3346,"This 'if' control expression has a constant 'true' value.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8752,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8753,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8754,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8755,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8756,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8757,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8758,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8759,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8760,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8761,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8762,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8763,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8764,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8765,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8766,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8767,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8768,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8769,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8770,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8771,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8772,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8773,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8774,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8775,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3416,"This boolean expression contains side effects.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8776,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3417,"The comma operator has been used outside a for-loop header.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8777,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3446,"The result operands of this conditional operator generate side effects","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8778,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3631,"Type 'char' has been used in a cast.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8779,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3760,"Implicit conversion: int to unsigned int.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8780,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8781,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8782,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8783,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,45,2209,"This brace style is not consistent with 'exdented' style.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
8784,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",368,13,3200,"strcat' returns a value which is not being used.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
8785,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",368,37,3122,"Hard-coded 'magic' string literal.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
8786,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",368,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
8787,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",369,13,3200,"strcat' returns a value which is not being used.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
8788,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",369,37,3122,"Hard-coded 'magic' string literal.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
8789,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",369,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
8790,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",371,13,2209,"This brace style is not consistent with 'exdented' style.","  371:	        else{
",,,
8791,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",371,13,3201,"This statement is unreachable.","  371:	        else{
",,,
8792,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",372,13,3200,"strcat' returns a value which is not being used.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
8793,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",372,37,3122,"Hard-coded 'magic' string literal.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
8794,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",372,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
8795,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",377,37,2209,"This brace style is not consistent with 'exdented' style.","  377:	    if(the_pOption-&gt;m_verbos == ON ){
",,,
8796,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",379,9,3200,"printf' returns a value which is not being used.","  379:	        printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_START);
",,,
8797,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",379,16,3122,"Hard-coded 'magic' string literal.","  379:	        printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_START);
",,,
8798,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",384,32,2209,"This brace style is not consistent with 'exdented' style.","  384:	    if(the_iRet != ANZ_SUCCESS){
",,,
8799,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",385,18,2001,"A 'goto' statement has been used.","  385:	        goto EXIT;
",,,
8800,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",390,32,2209,"This brace style is not consistent with 'exdented' style.","  390:	    if(the_iRet != ANZ_SUCCESS){
",,,
8801,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",392,18,2001,"A 'goto' statement has been used.","  392:	        goto EXIT;
",,,
8802,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",397,47,2209,"This brace style is not consistent with 'exdented' style.","  397:	    if(the_iMeasureType == ANZ_COMMON_MEASURE){
",,,
8803,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",400,36,2209,"This brace style is not consistent with 'exdented' style.","  400:	        if(the_iRet != ANZ_SUCCESS){
",,,
8804,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",401,22,2001,"A 'goto' statement has been used.","  401:	            goto EXIT;
",,,
8805,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",404,36,2209,"This brace style is not consistent with 'exdented' style.","  404:	        if(the_iRet != ANZ_SUCCESS){
",,,
8806,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",405,13,3200,"printf' returns a value which is not being used.","  405:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
8807,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",405,20,3122,"Hard-coded 'magic' string literal.","  405:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
8808,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",406,22,2001,"A 'goto' statement has been used.","  406:	            goto EXIT;
",,,
8809,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",410,46,2209,"This brace style is not consistent with 'exdented' style.","  410:	    if(the_iMeasureType == ANZ_TREND_MEASURE){
",,,
8810,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",413,36,2209,"This brace style is not consistent with 'exdented' style.","  413:	        if(the_iRet != ANZ_SUCCESS){
",,,
8811,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",414,22,2001,"A 'goto' statement has been used.","  414:	            goto EXIT;
",,,
8812,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",417,36,2209,"This brace style is not consistent with 'exdented' style.","  417:	        if(the_iRet != ANZ_SUCCESS){
",,,
8813,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",418,13,3200,"printf' returns a value which is not being used.","  418:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
8814,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",418,20,3122,"Hard-coded 'magic' string literal.","  418:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
8815,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",419,22,2001,"A 'goto' statement has been used.","  419:	            goto EXIT;
",,,
8816,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",424,36,2209,"This brace style is not consistent with 'exdented' style.","  424:	    if(the_pOption-&gt;m_verbos == ON){
",,,
8817,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",425,40,2209,"This brace style is not consistent with 'exdented' style.","  425:	        if(the_pAnzInfo-&gt;m_err == NULL){
",,,
8818,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",426,13,3200,"printf' returns a value which is not being used.","  426:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
8819,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",426,20,3122,"Hard-coded 'magic' string literal.","  426:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
8820,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",428,13,2209,"This brace style is not consistent with 'exdented' style.","  428:	        else{
",,,
8821,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",429,13,3200,"printf' returns a value which is not being used.","  429:	            printf(""%s%s%s\n"",MSG_MEASURE_FILE_ERROR,the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
8822,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",429,20,3122,"Hard-coded 'magic' string literal.","  429:	            printf(""%s%s%s\n"",MSG_MEASURE_FILE_ERROR,the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
8823,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,1,2015,"This label is not a case or default label for a switch statement.","  433:	EXIT:;
",,,
8824,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,1,2201,"This indentation is not consistent with previous indentation in this file.","  433:	EXIT:;
",,,
8825,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,6,3109,"Empty statement (';' on its own) - if this is deliberate, it is best to put ';' on a line by itself.","  433:	EXIT:;
",,,
8826,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,6,3139,"Null statement is obscured by code or comment on the same line.","  433:	EXIT:;
",,,
8827,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",435,29,505,"[U] Dereferencing pointer value that is apparently NULL.","  435:	    the_iRet = OutErrorFile(the_pAnzInfo-&gt;m_err);
",,,
8828,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",436,42,2209,"This brace style is not consistent with 'exdented' style.","  436:	    if(the_iRet == ANZ_ERR_MEMORY_FAILED){
",,,
8829,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",437,9,3200,"printf' returns a value which is not being used.","  437:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
8830,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",437,16,3122,"Hard-coded 'magic' string literal.","  437:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
8831,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",442,31,2209,"This brace style is not consistent with 'exdented' style.","  442:	    if(the_pCmdOption != NULL){
",,,
8832,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",444,9,3199,"The value of 'the_pCmdOption' is never used following this assignment.","  444:	        the_pCmdOption = NULL;
",,,
8833,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",447,34,2209,"This brace style is not consistent with 'exdented' style.","  447:	    if(the_pMeasureItem != NULL) {
",,,
8834,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",449,9,3199,"The value of 'the_pMeasureItem' is never used following this assignment.","  449:	        the_pMeasureItem = NULL;
",,,
8835,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",455,8,3344,"Value of control expression is not derived from an explicit logical operation.","  455:	    if(g_bOutTime) {
",,,
8836,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",455,20,2209,"This brace style is not consistent with 'exdented' style.","  455:	    if(g_bOutTime) {
",,,
8837,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",456,9,3200,"ftime' returns a value which is not being used.","  456:	        ftime(&amp;the_ed);
",,,
8838,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,9,3200,"printf' returns a value which is not being used.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
8839,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,9,3395,"Operators in the set + - * / with different precedence have been used. Extra parentheses recommended.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
8840,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,9,3401,"Possible precedence confusion: extra parentheses are recommended here.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
8841,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,16,3122,"Hard-coded 'magic' string literal.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
8842,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,69,1253,"Unsuffixed integer constant implicitly converted to another type.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
8843,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,71,3120,"Hard-coded 'magic' integer constant '1000'.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
8844,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,94,2101,"Integral promotion : unsigned short promoted to signed int.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
8845,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",473,2,2017,"Comment spans more than one line.","  473:	*/
",,,
8846,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,26,3227,"The parameter 'sig' is never modified and so it could be declared with the 'const' qualifier.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
8847,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,35,3206,"The parameter 'code' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
8848,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,47,3206,"The parameter 'scp' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
8849,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,53,3625,"Type 'char' has been used in the declaration of an object or a function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
8850,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,59,344,"K&amp;R compilers do not support function prototypes.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
8851,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,59,3206,"The parameter 'addr' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
8852,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",480,5,3625,"Type 'char' has been used in the declaration of an object or a function.","  480:	    char the_errMsg[128]; /* エラーメッセージ */
",,,
8853,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",480,21,3132,"Hard coded 'magic' number '128' used to define the size of an array.","  480:	    char the_errMsg[128]; /* エラーメッセージ */
",,,
8854,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",483,16,2209,"This brace style is not consistent with 'exdented' style.","  483:	    switch(sig){
",,,
8855,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",485,9,3200,"sprintf' returns a value which is not being used.","  485:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGINT(%d)\n"",sig );
",,,
8856,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",485,28,3122,"Hard-coded 'magic' string literal.","  485:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGINT(%d)\n"",sig );
",,,
8857,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",486,9,3200,"fprintf' returns a value which is not being used.","  486:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
8858,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",486,31,3122,"Hard-coded 'magic' string literal.","  486:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
8859,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",489,9,3200,"sprintf' returns a value which is not being used.","  489:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGQUIT(%d)\n"",sig );
",,,
8860,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",489,28,3122,"Hard-coded 'magic' string literal.","  489:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGQUIT(%d)\n"",sig );
",,,
8861,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",490,9,3200,"fprintf' returns a value which is not being used.","  490:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
8862,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",490,31,3122,"Hard-coded 'magic' string literal.","  490:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
8863,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",493,9,3200,"sprintf' returns a value which is not being used.","  493:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGKILL(%d)\n"",sig );
",,,
8864,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",493,28,3122,"Hard-coded 'magic' string literal.","  493:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGKILL(%d)\n"",sig );
",,,
8865,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",494,9,3200,"fprintf' returns a value which is not being used.","  494:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
8866,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",494,31,3122,"Hard-coded 'magic' string literal.","  494:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
8867,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",497,9,3200,"sprintf' returns a value which is not being used.","  497:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGTERM(%d)\n"",sig );
",,,
8868,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",497,28,3122,"Hard-coded 'magic' string literal.","  497:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGTERM(%d)\n"",sig );
",,,
8869,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",498,9,3200,"fprintf' returns a value which is not being used.","  498:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
8870,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",498,31,3122,"Hard-coded 'magic' string literal.","  498:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
8871,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",501,9,3200,"sprintf' returns a value which is not being used.","  501:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGFPE(%d)\n"",sig );
",,,
8872,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",501,28,3122,"Hard-coded 'magic' string literal.","  501:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGFPE(%d)\n"",sig );
",,,
8873,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",502,9,3200,"fprintf' returns a value which is not being used.","  502:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
8874,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",502,31,3122,"Hard-coded 'magic' string literal.","  502:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
8875,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",505,9,3200,"sprintf' returns a value which is not being used.","  505:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGILL(%d)\n"",sig );
",,,
8876,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",505,28,3122,"Hard-coded 'magic' string literal.","  505:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGILL(%d)\n"",sig );
",,,
8877,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",506,9,3200,"fprintf' returns a value which is not being used.","  506:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
8878,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",506,31,3122,"Hard-coded 'magic' string literal.","  506:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
8879,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",509,9,3200,"sprintf' returns a value which is not being used.","  509:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGBUS(%d)\n"",sig );
",,,
8880,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",509,28,3122,"Hard-coded 'magic' string literal.","  509:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGBUS(%d)\n"",sig );
",,,
8881,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",510,9,3200,"fprintf' returns a value which is not being used.","  510:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
8882,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",510,31,3122,"Hard-coded 'magic' string literal.","  510:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
8883,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",513,9,3200,"sprintf' returns a value which is not being used.","  513:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSEGV(%d)\n"",sig );
",,,
8884,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",513,28,3122,"Hard-coded 'magic' string literal.","  513:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSEGV(%d)\n"",sig );
",,,
8885,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",514,9,3200,"fprintf' returns a value which is not being used.","  514:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
8886,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",514,31,3122,"Hard-coded 'magic' string literal.","  514:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
8887,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",517,9,3200,"sprintf' returns a value which is not being used.","  517:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSYS(%d)\n"",sig );
",,,
8888,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",517,28,3122,"Hard-coded 'magic' string literal.","  517:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSYS(%d)\n"",sig );
",,,
8889,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",518,9,3200,"fprintf' returns a value which is not being used.","  518:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
8890,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",518,31,3122,"Hard-coded 'magic' string literal.","  518:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
8891,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",521,9,3200,"sprintf' returns a value which is not being used.","  521:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=%d\n"",sig );
",,,
8892,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",521,28,3122,"Hard-coded 'magic' string literal.","  521:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=%d\n"",sig );
",,,
8893,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",522,9,3200,"fprintf' returns a value which is not being used.","  522:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
8894,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",522,31,3122,"Hard-coded 'magic' string literal.","  522:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
8895,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",532,16,2209,"This brace style is not consistent with 'exdented' style.","  532:	    switch(sig){
",,,
8896,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",538,10,2003,"The preceding non-empty 'case' or 'default' clause does not end with an explicit 'break' or 'return' statement.","  538:	    case SIGFPE :
",,,
8897,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",545,5,2002,"No 'default' case found in this 'switch' statement.","  545:	    }
",,,
8898,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",592,2,2017,"Comment spans more than one line.","  592:	*/
",,,
8899,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",594,1,3007,"""void"" has been omitted when defining a function with no parameters.","  594:	{
",,,
8900,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,5,428,"Function identifier is not followed by () but a function call may be intended.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
8901,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,5,3200,"signal' returns a value which is not being used.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
8902,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,23,432,"[C] Argument is not a compatible pointer type.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
8903,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,24,307,"[u] Cast between a pointer to object and a pointer to function.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
8904,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,5,428,"Function identifier is not followed by () but a function call may be intended.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
8905,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,5,3200,"signal' returns a value which is not being used.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
8906,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,23,432,"[C] Argument is not a compatible pointer type.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
8907,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,24,307,"[u] Cast between a pointer to object and a pointer to function.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
8908,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,5,428,"Function identifier is not followed by () but a function call may be intended.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
8909,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,5,3200,"signal' returns a value which is not being used.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
8910,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,23,432,"[C] Argument is not a compatible pointer type.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
8911,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,24,307,"[u] Cast between a pointer to object and a pointer to function.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
8912,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,5,428,"Function identifier is not followed by () but a function call may be intended.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
8913,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,5,3200,"signal' returns a value which is not being used.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
8914,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,23,432,"[C] Argument is not a compatible pointer type.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
8915,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,24,307,"[u] Cast between a pointer to object and a pointer to function.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
8916,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,5,428,"Function identifier is not followed by () but a function call may be intended.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
8917,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,5,3200,"signal' returns a value which is not being used.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
8918,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,22,432,"[C] Argument is not a compatible pointer type.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
8919,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,23,307,"[u] Cast between a pointer to object and a pointer to function.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
8920,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,5,428,"Function identifier is not followed by () but a function call may be intended.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
8921,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,5,3200,"signal' returns a value which is not being used.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
8922,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,23,432,"[C] Argument is not a compatible pointer type.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
8923,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,24,307,"[u] Cast between a pointer to object and a pointer to function.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
8924,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,5,428,"Function identifier is not followed by () but a function call may be intended.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
8925,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,5,3200,"signal' returns a value which is not being used.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
8926,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,23,432,"[C] Argument is not a compatible pointer type.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
8927,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,24,307,"[u] Cast between a pointer to object and a pointer to function.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
8928,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,5,428,"Function identifier is not followed by () but a function call may be intended.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
8929,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,5,3200,"signal' returns a value which is not being used.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
8930,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,23,432,"[C] Argument is not a compatible pointer type.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
8931,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,24,307,"[u] Cast between a pointer to object and a pointer to function.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
8932,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,5,428,"Function identifier is not followed by () but a function call may be intended.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
8933,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,5,3200,"signal' returns a value which is not being used.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
8934,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,23,432,"[C] Argument is not a compatible pointer type.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
8935,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,24,307,"[u] Cast between a pointer to object and a pointer to function.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
8936,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",622,2,2017,"Comment spans more than one line.","  622:	*/
",,,
8937,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",623,20,3625,"Type 'char' has been used in the declaration of an object or a function.","  623:	int ResetTrendPath(char *io_pPath)
",,,
8938,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",623,26,344,"K&amp;R compilers do not support function prototypes.","  623:	int ResetTrendPath(char *io_pPath)
",,,
8939,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",623,26,3227,"The parameter 'io_pPath' is never modified and so it could be declared with the 'const' qualifier.","  623:	int ResetTrendPath(char *io_pPath)
",,,
8940,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",625,9,2201,"This indentation is not consistent with previous indentation in this file.","  625:	        char the_szFullPath[MAX_PATH];
",,,
8941,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",625,9,3625,"Type 'char' has been used in the declaration of an object or a function.","  625:	        char the_szFullPath[MAX_PATH];
",,,
8942,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",626,9,2201,"This indentation is not consistent with previous indentation in this file.","  626:	        char the_szCurPath[MAX_PATH];
",,,
8943,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",626,9,3625,"Type 'char' has been used in the declaration of an object or a function.","  626:	        char the_szCurPath[MAX_PATH];
",,,
8944,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",627,9,2201,"This indentation is not consistent with previous indentation in this file.","  627:	        int the_iRet = ANZ_SUCCESS;
",,,
8945,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",627,13,2211,"the_iRet' is not aligned with the previously declared identifier.","  627:	        int the_iRet = ANZ_SUCCESS;
",,,
8946,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,9,2201,"This indentation is not consistent with previous indentation in this file.","  630:	        if(io_pPath[0] != '/') {
",,,
8947,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,20,506,"Dereferencing pointer value that is possibly NULL.","  630:	        if(io_pPath[0] != '/') {
",,,
8948,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,24,2106,"Integral promotion : plain char promoted to signed int.","  630:	        if(io_pPath[0] != '/') {
",,,
8949,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,27,3123,"Hard coded 'magic' character constant '/'.","  630:	        if(io_pPath[0] != '/') {
",,,
8950,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,32,2209,"This brace style is not consistent with 'exdented' style.","  630:	        if(io_pPath[0] != '/') {
",,,
8951,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",631,16,3416,"This boolean expression contains side effects.","  631:	            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {
",,,
8952,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",631,56,2209,"This brace style is not consistent with 'exdented' style.","  631:	            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {
",,,
8953,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",633,26,2001,"A 'goto' statement has been used.","  633:	                goto EXIT;
",,,
8954,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,306,"[I] Cast between a pointer to object and an integral type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8955,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,310,"Casting to different object pointer type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8956,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8957,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,489,"Increment or decrement operation performed on pointer.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8958,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,506,"Dereferencing pointer value that is possibly NULL.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8959,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,510,"Arithmetic operation on pointer value that is possibly NULL.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8960,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__result' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8961,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s1' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8962,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8963,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s2' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8964,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8965,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8966,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8967,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1251,"Suffixed integer constant causes implicit conversion of other operand.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8968,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1253,"Unsuffixed integer constant implicitly converted to another type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8969,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1302,"__builtin_constant_p()' must be declared before use in C++.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8970,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1302,"__builtin_strcmp()' must be declared before use in C++.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8971,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,2100,"Integral promotion : unsigned char promoted to signed int.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8972,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8973,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3112,"This statement has no side-effect - it can be removed.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8974,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3122,"Hard-coded 'magic' string literal.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8975,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3200,"__builtin_strcmp' returns a value which is not being used.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8976,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8977,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8978,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8979,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8980,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8981,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8982,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8983,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8984,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8985,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3326,"An assignment operator is being used in a boolean expression.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8986,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3346,"This 'if' control expression has a constant 'true' value.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8987,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8988,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8989,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8990,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8991,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8992,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8993,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8994,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8995,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8996,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8997,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8998,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
8999,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
9000,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
9001,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
9002,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
9003,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
9004,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
9005,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
9006,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
9007,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
9008,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3401,"Possible precedence confusion: extra parentheses are recommended here.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
9009,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
9010,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3416,"This boolean expression contains side effects.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
9011,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3417,"The comma operator has been used outside a for-loop header.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
9012,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3446,"The result operands of this conditional operator generate side effects","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
9013,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3631,"Type 'char' has been used in a cast.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
9014,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3760,"Implicit conversion: int to unsigned int.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
9015,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
9016,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
9017,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,36,1251,"Suffixed integer constant causes implicit conversion of other operand.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
9018,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,42,2209,"This brace style is not consistent with 'exdented' style.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
9019,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",636,17,3200,"sprintf' returns a value which is not being used.","  636:	                sprintf(the_szFullPath,""%s/%s"",the_szCurPath,io_pPath);
",,,
9020,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",636,40,3122,"Hard-coded 'magic' string literal.","  636:	                sprintf(the_szFullPath,""%s/%s"",the_szCurPath,io_pPath);
",,,
9021,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",639,9,2201,"This indentation is not consistent with previous indentation in this file.","  639:	        else {
",,,
9022,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",639,14,2209,"This brace style is not consistent with 'exdented' style.","  639:	        else {
",,,
9023,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",640,22,2001,"A 'goto' statement has been used.","  640:	            goto EXIT;
",,,
9024,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",658,9,2201,"This indentation is not consistent with previous indentation in this file.","  658:	        strcpy(io_pPath,the_szFullPath);
",,,
9025,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",658,9,3200,"strcpy' returns a value which is not being used.","  658:	        strcpy(io_pPath,the_szFullPath);
",,,
9026,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",659,1,2015,"This label is not a case or default label for a switch statement.","  659:	EXIT:
",,,
9027,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",659,1,2201,"This indentation is not consistent with previous indentation in this file.","  659:	EXIT:
",,,
9028,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",660,9,2201,"This indentation is not consistent with previous indentation in this file.","  660:	        return the_iRet;
",,,
9029,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",1,1,240,"[E] This file contains the control-M character at the end of a line.","    1:	/*
",,,
9030,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",9,16,288,"[I] Source file '/home/www/TOSCANA_dev/BackEnd/AnalyzeTaskManager/work/1/work/sample_c_cpp/sample_c/src/analyzeme.c' has comments containing characters which are not members of the basic source character set.","    9:	      AnalyzeMeのメイン関数を定義する
",,,
9031,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",16,2,2017,"Comment spans more than one line.","   16:	*/
",,,
9032,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",20,2,2017,"Comment spans more than one line.","   20:	*/
",,,
9033,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",21,1,838,"File has already been included directly from this file.","   21:	#include ""analyzeme.h""
",,,
9034,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",21,1,839,"File has already been included indirectly from this file.","   21:	#include ""analyzeme.h""
",,,
9035,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",21,23,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   21:	#include ""analyzeme.h""
",,,
9036,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",22,1,839,"File has already been included indirectly from this file.","   22:	#include ""common.h""
",,,
9037,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",23,1,839,"File has already been included indirectly from this file.","   23:	#include ""memory_manage.h""
",,,
9038,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",23,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   23:	#include ""memory_manage.h""
",,,
9039,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",24,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   24:	#include ""parse_cmdline.h""
",,,
9040,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",25,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   25:	#include ""common_measure.h""
",,,
9041,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",26,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   26:	#include ""trend_measure.h""
",,,
9042,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",27,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   27:	#include ""make_file_list.h""
",,,
9043,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",29,31,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   29:	#include ""get_process_macro.h""
",,,
9044,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",30,1,839,"File has already been included indirectly from this file.","   30:	#include &lt;signal.h&gt;
",,,
9045,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",35,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
9046,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",35,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
9047,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",35,13,3211,"The global identifier 'TRACEFILE' is defined but not used.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
9048,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",35,13,3408,"TRACEFILE' has external linkage but is being defined without any previous declaration.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
9049,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",36,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
9050,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",36,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
9051,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",36,13,3408,"APPLOGFILE' has external linkage but is being defined without any previous declaration.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
9052,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",44,7,3408,"g_fpLogFile' has external linkage but is being defined without any previous declaration.","   44:	FILE *g_fpLogFile = NULL;       /* Log File pointer */
",,,
9053,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",46,7,3211,"The global identifier 'g_fpTraceFile' is defined but not used.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
9054,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",46,7,3408,"g_fpTraceFile' has external linkage but is being defined without any previous declaration.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
9055,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",48,7,3408,"g_fpErrorFile' has external linkage but is being defined without any previous declaration.","   48:	FILE *g_fpErrorFile = NULL;
",,,
9056,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",50,6,3408,"g_bTrace' has external linkage but is being defined without any previous declaration.","   50:	bool g_bTrace           = false;    /* Trace flag */
",,,
9057,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",51,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
9058,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",51,6,3408,"g_szNVPath' has external linkage but is being defined without any previous declaration.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
9059,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",51,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
9060,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",52,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
9061,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",52,6,3408,"g_szOVPath' has external linkage but is being defined without any previous declaration.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
9062,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",52,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
9063,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",53,6,3408,"g_bTrendFile' has external linkage but is being defined without any previous declaration.","   53:	bool g_bTrendFile = false;
",,,
9064,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",55,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   55:	char *g_optionFileCont = NULL;
",,,
9065,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",55,7,3211,"The global identifier 'g_optionFileCont' is defined but not used.","   55:	char *g_optionFileCont = NULL;
",,,
9066,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",55,7,3408,"g_optionFileCont' has external linkage but is being defined without any previous declaration.","   55:	char *g_optionFileCont = NULL;
",,,
9067,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",57,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   57:	char *g_symbolFileCont = NULL;
",,,
9068,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",57,7,3211,"The global identifier 'g_symbolFileCont' is defined but not used.","   57:	char *g_symbolFileCont = NULL;
",,,
9069,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",57,7,3408,"g_symbolFileCont' has external linkage but is being defined without any previous declaration.","   57:	char *g_symbolFileCont = NULL;
",,,
9070,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",58,6,3408,"g_bOutTime' has external linkage but is being defined without any previous declaration.","   58:	bool g_bOutTime = false;
",,,
9071,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",59,15,3408,"g_pAnzInfo' has external linkage but is being defined without any previous declaration.","   59:	ST_AnalyzeMe *g_pAnzInfo;  /* AnalyzeMe管理情報 */
",,,
9072,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",69,2,2017,"Comment spans more than one line.","   69:	*/
",,,
9073,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",70,14,3227,"The parameter 'argc' is never modified and so it could be declared with the 'const' qualifier.","   70:	int main(int argc,char * argv[])
",,,
9074,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",70,19,3625,"Type 'char' has been used in the declaration of an object or a function.","   70:	int main(int argc,char * argv[])
",,,
9075,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",70,26,344,"K&amp;R compilers do not support function prototypes.","   70:	int main(int argc,char * argv[])
",,,
9076,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",75,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
9077,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",75,28,2211,"the_pMeasureItem' is not aligned with the previously declared identifier.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
9078,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",76,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
9079,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",76,10,2211,"the_szCurMetrics' is not aligned with the previously declared identifier.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
9080,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",76,10,3604,"Local arrays and structures cannot be initialised in K&amp;R C.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
9081,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",76,44,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
9082,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",80,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   80:	    char *the_pTrace = NULL;
",,,
9083,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",80,11,2211,"the_pTrace' is not aligned with the previously declared identifier.","   80:	    char *the_pTrace = NULL;
",,,
9084,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",80,11,3197,"The initialiser for 'the_pTrace' is always modified before being used.","   80:	    char *the_pTrace = NULL;
",,,
9085,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",81,25,2211,"the_st' is not aligned with the previously declared identifier.","   81:	    struct timeb the_st ;
",,,
9086,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",89,5,3198,"The value assigned to 'the_pAnzInfo' is always modified before being used.","   89:	    the_pAnzInfo = NULL;
",,,
9087,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",91,5,3198,"The value assigned to 'the_iRet' is always modified before being used.","   91:	    the_iRet = ANZ_SUCCESS;
",,,
9088,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",101,25,3122,"Hard-coded 'magic' string literal.","  101:	    the_pTrace = getenv(""AnzTrace"");
",,,
9089,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",102,28,2209,"This brace style is not consistent with 'exdented' style.","  102:	    if(the_pTrace != NULL) {
",,,
9090,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,306,"[I] Cast between a pointer to object and an integral type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9091,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,310,"Casting to different object pointer type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9092,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9093,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,489,"Increment or decrement operation performed on pointer.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9094,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__result' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9095,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9096,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9097,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9098,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9099,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9100,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9101,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9102,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9103,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9104,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9105,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,2100,"Integral promotion : unsigned char promoted to signed int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9106,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9107,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3112,"This statement has no side-effect - it can be removed.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9108,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3122,"Hard-coded 'magic' string literal.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9109,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3200,"__builtin_strcmp' returns a value which is not being used.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9110,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9111,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9112,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9113,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9114,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9115,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9116,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9117,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9118,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9119,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3325,"This control expression has a constant 'false' value.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9120,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3326,"An assignment operator is being used in a boolean expression.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9121,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9122,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9123,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9124,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9125,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9126,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9127,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9128,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9129,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9130,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9131,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9132,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9133,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9134,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9135,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9136,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9137,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9138,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9139,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9140,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9141,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9142,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9143,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9144,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3416,"This boolean expression contains side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9145,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3417,"The comma operator has been used outside a for-loop header.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9146,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3446,"The result operands of this conditional operator generate side effects","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9147,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3631,"Type 'char' has been used in a cast.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9148,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3760,"Implicit conversion: int to unsigned int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9149,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,35,3209,"__builtin_strcmp()' returns a value which is always ignored.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9150,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9151,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9152,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,36,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9153,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,43,2209,"This brace style is not consistent with 'exdented' style.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9154,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,43,3201,"This statement is unreachable.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9155,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",113,6,2017,"Comment spans more than one line.","  113:	    */
",,,
9156,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",114,36,3122,"Hard-coded 'magic' string literal.","  114:	    g_fpLogFile = fopen(APPLOGFILE,""w"");
",,,
9157,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",115,28,2209,"This brace style is not consistent with 'exdented' style.","  115:	    if(g_fpLogFile == NULL){
",,,
9158,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",116,9,3200,"printf' returns a value which is not being used.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
9159,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",116,16,3122,"Hard-coded 'magic' string literal.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
9160,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",120,5,702,"Result of sizeof operator is not explicitly cast.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
9161,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",120,63,3430,"Macro argument expression requires parentheses.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
9162,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",121,29,2209,"This brace style is not consistent with 'exdented' style.","  121:	    if(the_pAnzInfo == NULL){
",,,
9163,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",122,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  122:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
9164,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",123,18,2001,"A 'goto' statement has been used.","  123:	        goto EXIT;
",,,
9165,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",125,5,702,"Result of sizeof operator is not explicitly cast.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
9166,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",125,5,3200,"memset' returns a value which is not being used.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
9167,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",128,5,702,"Result of sizeof operator is not explicitly cast.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
9168,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",128,67,3430,"Macro argument expression requires parentheses.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
9169,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",129,39,2209,"This brace style is not consistent with 'exdented' style.","  129:	    if(the_pAnzInfo-&gt;m_option == NULL){
",,,
9170,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",130,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  130:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
9171,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",131,18,2001,"A 'goto' statement has been used.","  131:	        goto EXIT;
",,,
9172,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",133,5,702,"Result of sizeof operator is not explicitly cast.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
9173,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",133,5,3200,"memset' returns a value which is not being used.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
9174,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",137,5,702,"Result of sizeof operator is not explicitly cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
9175,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",137,5,3631,"Type 'char' has been used in a cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
9176,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",137,5,3633,"Type 'char' has been used in the operand of the sizeof operator.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
9177,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",137,5,3760,"Implicit conversion: int to unsigned int.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
9178,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",138,34,2209,"This brace style is not consistent with 'exdented' style.","  138:	    if(the_pMeasureItem == NULL) {
",,,
9179,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",139,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  139:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
9180,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",140,18,2001,"A 'goto' statement has been used.","  140:	        goto EXIT;
",,,
9181,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",142,5,702,"Result of sizeof operator is not explicitly cast.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
9182,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",142,5,3200,"memset' returns a value which is not being used.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
9183,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",142,36,3760,"Implicit conversion: int to unsigned int.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
9184,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",142,45,3633,"Type 'char' has been used in the operand of the sizeof operator.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
9185,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",150,5,3200,"strcpy' returns a value which is not being used.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
9186,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",150,34,3122,"Hard-coded 'magic' string literal.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
9187,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",154,5,3200,"strcpy' returns a value which is not being used.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
9188,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",154,39,3122,"Hard-coded 'magic' string literal.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
9189,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",155,5,3200,"strcpy' returns a value which is not being used.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
9190,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",155,38,3122,"Hard-coded 'magic' string literal.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
9191,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",156,5,3200,"strcpy' returns a value which is not being used.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
9192,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",156,38,3122,"Hard-coded 'magic' string literal.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
9193,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",165,32,3120,"Hard-coded 'magic' integer constant '70'.","  165:	    the_pOption-&gt;m_symThresh = 70;
",,,
9194,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",166,32,3120,"Hard-coded 'magic' integer constant '2'.","  166:	    the_pOption-&gt;m_minThresh = 2;
",,,
9195,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",169,5,702,"Result of sizeof operator is not explicitly cast.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
9196,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",169,59,3430,"Macro argument expression requires parentheses.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
9197,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",170,31,2209,"This brace style is not consistent with 'exdented' style.","  170:	    if(the_pCmdOption == NULL){
",,,
9198,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",171,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  171:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
9199,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",172,18,2001,"A 'goto' statement has been used.","  172:	        goto EXIT;
",,,
9200,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",174,5,702,"Result of sizeof operator is not explicitly cast.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
9201,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",174,5,3200,"memset' returns a value which is not being used.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
9202,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",180,5,3200,"strcpy' returns a value which is not being used.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
9203,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",180,37,3122,"Hard-coded 'magic' string literal.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
9204,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",184,5,3200,"strcpy' returns a value which is not being used.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
9205,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",184,42,3122,"Hard-coded 'magic' string literal.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
9206,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",185,5,3200,"strcpy' returns a value which is not being used.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
9207,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",185,41,3122,"Hard-coded 'magic' string literal.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
9208,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",186,5,3200,"strcpy' returns a value which is not being used.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
9209,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",186,41,3122,"Hard-coded 'magic' string literal.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
9210,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",195,35,3120,"Hard-coded 'magic' integer constant '70'.","  195:	    the_pCmdOption-&gt;m_symThresh = 70;
",,,
9211,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",196,35,3120,"Hard-coded 'magic' integer constant '2'.","  196:	    the_pCmdOption-&gt;m_minThresh = 2;
",,,
9212,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",200,32,2209,"This brace style is not consistent with 'exdented' style.","  200:	    if(the_iRet != ANZ_SUCCESS){
",,,
9213,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",201,18,2001,"A 'goto' statement has been used.","  201:	        goto EXIT;
",,,
9214,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",203,8,3344,"Value of control expression is not derived from an explicit logical operation.","  203:	    if(g_bOutTime) {
",,,
9215,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",203,20,2209,"This brace style is not consistent with 'exdented' style.","  203:	    if(g_bOutTime) {
",,,
9216,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",204,9,3200,"ftime' returns a value which is not being used.","  204:	        ftime(&amp;the_st);
",,,
9217,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",209,32,2209,"This brace style is not consistent with 'exdented' style.","  209:	    if(the_iRet != ANZ_SUCCESS){
",,,
9218,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",210,18,2001,"A 'goto' statement has been used.","  210:	        goto EXIT;
",,,
9219,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",214,32,2209,"This brace style is not consistent with 'exdented' style.","  214:	    if(the_iRet != ANZ_SUCCESS){
",,,
9220,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",215,18,2001,"A 'goto' statement has been used.","  215:	        goto EXIT;
",,,
9221,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",218,23,3355,"The result of this logical operation is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
9222,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",218,23,3358,"The value of this 'if' control expression is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
9223,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",218,31,2209,"This brace style is not consistent with 'exdented' style.","  218:	    if(the_pCmdOption != NULL){
",,,
9224,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",224,32,2209,"This brace style is not consistent with 'exdented' style.","  224:	    if(the_iRet != ANZ_SUCCESS){
",,,
9225,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",225,18,2001,"A 'goto' statement has been used.","  225:	        goto EXIT;
",,,
9226,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",229,32,2209,"This brace style is not consistent with 'exdented' style.","  229:	    if(the_iRet != ANZ_SUCCESS){
",,,
9227,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",230,18,2001,"A 'goto' statement has been used.","  230:	        goto EXIT;
",,,
9228,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",233,47,2209,"This brace style is not consistent with 'exdented' style.","  233:	    if(the_iMeasureType == ANZ_TREND_MEASURE) {
",,,
9229,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",234,13,3220,"Identifier declared at a nested level of block scope.","  234:	        int the_iType = -1;
",,,
9230,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",235,13,3220,"Identifier declared at a nested level of block scope.","  235:	        int the_pPos = -1;
",,,
9231,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",236,9,3200,"isDirOrFile' returns a value which is not being used.","  236:	        isDirOrFile(*the_pMeasureItem,&amp;the_iType);
",,,
9232,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",237,35,2209,"This brace style is not consistent with 'exdented' style.","  237:	        if(the_iType == ANZ_FILE) {
",,,
9233,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",242,30,2209,"This brace style is not consistent with 'exdented' style.","  242:	            if(the_pPos &gt; 0) {
",,,
9234,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",243,55,488,"Performing pointer arithmetic.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
9235,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",243,66,489,"Increment or decrement operation performed on pointer.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
9236,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",246,43,489,"Increment or decrement operation performed on pointer.","  246:	            GetPathPos(*(the_pMeasureItem + 1),&amp;the_pPos);
",,,
9237,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",248,30,2209,"This brace style is not consistent with 'exdented' style.","  248:	            if(the_pPos &gt; 0) {
",,,
9238,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,36,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
9239,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,42,3501,"This could be read as an old-style assignment operator. Spaces are needed to make it more readable.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
9240,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,61,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
9241,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,66,488,"Performing pointer arithmetic.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
9242,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,77,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
9243,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",252,13,3198,"The value assigned to 'the_iRet' is always modified before being used.","  252:	            the_iRet = ResetTrendPath(g_szNVPath);
",,,
9244,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",254,41,2209,"This brace style is not consistent with 'exdented' style.","  254:	            if(the_iRet != ANZ_SUCCESS) {
",,,
9245,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",255,26,2001,"A 'goto' statement has been used.","  255:	                goto EXIT;
",,,
9246,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",260,51,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
9247,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",260,57,3631,"Type 'char' has been used in a cast.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
9248,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",261,41,2209,"This brace style is not consistent with 'exdented' style.","  261:	    if(the_iRet == ANZ_NO_MEASURE_FILES){
",,,
9249,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",262,9,3200,"printf' returns a value which is not being used.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
9250,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",262,16,3122,"Hard-coded 'magic' string literal.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
9251,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",264,42,2209,"This brace style is not consistent with 'exdented' style.","  264:	    if(the_iRet == ANZ_ERR_MEMORY_FAILED){
",,,
9252,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",265,9,3200,"printf' returns a value which is not being used.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
9253,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",265,16,3122,"Hard-coded 'magic' string literal.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
9254,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",267,32,2209,"This brace style is not consistent with 'exdented' style.","  267:	    if(the_iRet != ANZ_SUCCESS){
",,,
9255,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",268,18,2001,"A 'goto' statement has been used.","  268:	        goto EXIT;
",,,
9256,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",272,37,2209,"This brace style is not consistent with 'exdented' style.","  272:	    if(the_pOption-&gt;m_fileLOC == ON){
",,,
9257,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",273,9,3200,"strcat' returns a value which is not being used.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
9258,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",273,33,3122,"Hard-coded 'magic' string literal.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
9259,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",276,40,2209,"This brace style is not consistent with 'exdented' style.","  276:	    if(the_pOption-&gt;m_redundancy == ON){
",,,
9260,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,306,"[I] Cast between a pointer to object and an integral type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9261,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,310,"Casting to different object pointer type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9262,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9263,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,489,"Increment or decrement operation performed on pointer.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9264,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__result' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9265,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9266,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9267,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9268,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9269,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9270,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9271,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9272,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9273,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9274,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9275,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,2100,"Integral promotion : unsigned char promoted to signed int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9276,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9277,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3112,"This statement has no side-effect - it can be removed.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9278,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3122,"Hard-coded 'magic' string literal.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9279,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3200,"__builtin_strcmp' returns a value which is not being used.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9280,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9281,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9282,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9283,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9284,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9285,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9286,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9287,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9288,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9289,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3326,"An assignment operator is being used in a boolean expression.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9290,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3346,"This 'if' control expression has a constant 'true' value.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9291,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9292,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9293,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9294,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9295,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9296,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9297,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9298,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9299,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9300,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9301,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9302,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9303,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9304,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9305,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9306,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9307,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9308,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9309,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9310,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9311,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9312,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9313,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9314,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3416,"This boolean expression contains side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9315,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3417,"The comma operator has been used outside a for-loop header.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9316,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3446,"The result operands of this conditional operator generate side effects","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9317,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3631,"Type 'char' has been used in a cast.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9318,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3760,"Implicit conversion: int to unsigned int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9319,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9320,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9321,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9322,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,45,2209,"This brace style is not consistent with 'exdented' style.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9323,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",278,13,3200,"strcat' returns a value which is not being used.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
9324,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",278,37,3122,"Hard-coded 'magic' string literal.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
9325,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",278,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
9326,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",279,13,3200,"strcat' returns a value which is not being used.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
9327,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",279,37,3122,"Hard-coded 'magic' string literal.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
9328,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",279,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
9329,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",281,13,2209,"This brace style is not consistent with 'exdented' style.","  281:	        else{
",,,
9330,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",281,13,3201,"This statement is unreachable.","  281:	        else{
",,,
9331,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",282,13,3200,"strcat' returns a value which is not being used.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
9332,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",282,37,3122,"Hard-coded 'magic' string literal.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
9333,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",282,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
9334,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",286,8,3344,"Value of control expression is not derived from an explicit logical operation.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
9335,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",286,31,2209,"This brace style is not consistent with 'exdented' style.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
9336,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,306,"[I] Cast between a pointer to object and an integral type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9337,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,310,"Casting to different object pointer type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9338,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9339,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,489,"Increment or decrement operation performed on pointer.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9340,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__result' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9341,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9342,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9343,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9344,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9345,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9346,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9347,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9348,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9349,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9350,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9351,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,2100,"Integral promotion : unsigned char promoted to signed int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9352,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9353,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3112,"This statement has no side-effect - it can be removed.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9354,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3122,"Hard-coded 'magic' string literal.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9355,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3200,"__builtin_strcmp' returns a value which is not being used.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9356,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9357,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9358,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9359,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9360,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9361,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9362,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9363,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9364,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9365,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3326,"An assignment operator is being used in a boolean expression.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9366,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3346,"This 'if' control expression has a constant 'true' value.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9367,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9368,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9369,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9370,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9371,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9372,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9373,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9374,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9375,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9376,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9377,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9378,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9379,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9380,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9381,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9382,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9383,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9384,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9385,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9386,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9387,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9388,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9389,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9390,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3416,"This boolean expression contains side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9391,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3417,"The comma operator has been used outside a for-loop header.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9392,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3446,"The result operands of this conditional operator generate side effects","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9393,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3631,"Type 'char' has been used in a cast.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9394,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3760,"Implicit conversion: int to unsigned int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9395,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9396,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9397,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9398,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,45,2209,"This brace style is not consistent with 'exdented' style.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9399,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",288,13,3200,"strcat' returns a value which is not being used.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
9400,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",288,37,3122,"Hard-coded 'magic' string literal.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
9401,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",288,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
9402,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",289,13,3200,"strcat' returns a value which is not being used.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
9403,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",289,37,3122,"Hard-coded 'magic' string literal.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
9404,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",289,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
9405,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",291,13,2209,"This brace style is not consistent with 'exdented' style.","  291:	        else{
",,,
9406,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",291,13,3201,"This statement is unreachable.","  291:	        else{
",,,
9407,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",292,13,3200,"strcat' returns a value which is not being used.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
9408,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",292,37,3122,"Hard-coded 'magic' string literal.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
9409,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",292,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
9410,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",296,8,3344,"Value of control expression is not derived from an explicit logical operation.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
9411,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",296,28,2209,"This brace style is not consistent with 'exdented' style.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
9412,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,306,"[I] Cast between a pointer to object and an integral type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9413,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,310,"Casting to different object pointer type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9414,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9415,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,489,"Increment or decrement operation performed on pointer.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9416,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__result' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9417,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9418,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9419,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9420,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9421,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9422,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9423,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9424,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9425,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9426,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9427,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,2100,"Integral promotion : unsigned char promoted to signed int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9428,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9429,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3112,"This statement has no side-effect - it can be removed.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9430,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3122,"Hard-coded 'magic' string literal.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9431,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3200,"__builtin_strcmp' returns a value which is not being used.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9432,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9433,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9434,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9435,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9436,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9437,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9438,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9439,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9440,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9441,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3326,"An assignment operator is being used in a boolean expression.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9442,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3346,"This 'if' control expression has a constant 'true' value.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9443,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9444,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9445,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9446,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9447,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9448,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9449,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9450,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9451,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9452,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9453,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9454,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9455,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9456,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9457,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9458,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9459,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9460,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9461,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9462,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9463,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9464,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9465,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9466,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3416,"This boolean expression contains side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9467,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3417,"The comma operator has been used outside a for-loop header.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9468,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3446,"The result operands of this conditional operator generate side effects","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9469,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3631,"Type 'char' has been used in a cast.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9470,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3760,"Implicit conversion: int to unsigned int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9471,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9472,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9473,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9474,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,45,2209,"This brace style is not consistent with 'exdented' style.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9475,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",298,13,3200,"strcat' returns a value which is not being used.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
9476,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",298,37,3122,"Hard-coded 'magic' string literal.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
9477,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",298,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
9478,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",299,13,3200,"strcat' returns a value which is not being used.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
9479,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",299,37,3122,"Hard-coded 'magic' string literal.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
9480,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",299,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
9481,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",301,13,2209,"This brace style is not consistent with 'exdented' style.","  301:	        else{
",,,
9482,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",301,13,3201,"This statement is unreachable.","  301:	        else{
",,,
9483,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",302,13,3200,"strcat' returns a value which is not being used.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
9484,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",302,37,3122,"Hard-coded 'magic' string literal.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
9485,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",302,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
9486,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,306,"[I] Cast between a pointer to object and an integral type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9487,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,310,"Casting to different object pointer type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9488,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9489,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,489,"Increment or decrement operation performed on pointer.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9490,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__result' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9491,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9492,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9493,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9494,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9495,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9496,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9497,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9498,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9499,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9500,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9501,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,2100,"Integral promotion : unsigned char promoted to signed int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9502,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9503,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3112,"This statement has no side-effect - it can be removed.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9504,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3122,"Hard-coded 'magic' string literal.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9505,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3200,"__builtin_strcmp' returns a value which is not being used.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9506,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9507,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9508,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9509,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9510,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9511,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9512,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9513,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9514,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9515,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3326,"An assignment operator is being used in a boolean expression.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9516,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3346,"This 'if' control expression has a constant 'true' value.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9517,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9518,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9519,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9520,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9521,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9522,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9523,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9524,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9525,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9526,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9527,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9528,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9529,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9530,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9531,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9532,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9533,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9534,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9535,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9536,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9537,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9538,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9539,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9540,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3416,"This boolean expression contains side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9541,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3417,"The comma operator has been used outside a for-loop header.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9542,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3446,"The result operands of this conditional operator generate side effects","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9543,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3631,"Type 'char' has been used in a cast.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9544,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3760,"Implicit conversion: int to unsigned int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9545,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9546,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9547,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9548,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,45,2209,"This brace style is not consistent with 'exdented' style.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9549,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",305,13,3200,"strcat' returns a value which is not being used.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
9550,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",305,37,3122,"Hard-coded 'magic' string literal.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
9551,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",305,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
9552,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",306,13,3200,"strcat' returns a value which is not being used.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
9553,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",306,37,3122,"Hard-coded 'magic' string literal.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
9554,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",308,13,2209,"This brace style is not consistent with 'exdented' style.","  308:	        else{
",,,
9555,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",308,13,3201,"This statement is unreachable.","  308:	        else{
",,,
9556,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",309,13,3200,"strcat' returns a value which is not being used.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
9557,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",309,37,3122,"Hard-coded 'magic' string literal.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
9558,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",314,8,3344,"Value of control expression is not derived from an explicit logical operation.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
9559,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",314,34,2209,"This brace style is not consistent with 'exdented' style.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
9560,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,306,"[I] Cast between a pointer to object and an integral type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9561,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,310,"Casting to different object pointer type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9562,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9563,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,489,"Increment or decrement operation performed on pointer.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9564,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__result' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9565,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9566,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9567,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9568,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9569,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9570,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9571,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9572,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9573,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9574,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9575,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,2100,"Integral promotion : unsigned char promoted to signed int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9576,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9577,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3112,"This statement has no side-effect - it can be removed.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9578,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3122,"Hard-coded 'magic' string literal.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9579,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3200,"__builtin_strcmp' returns a value which is not being used.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9580,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9581,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9582,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9583,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9584,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9585,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9586,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9587,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9588,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9589,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3326,"An assignment operator is being used in a boolean expression.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9590,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3346,"This 'if' control expression has a constant 'true' value.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9591,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9592,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9593,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9594,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9595,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9596,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9597,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9598,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9599,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9600,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9601,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9602,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9603,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9604,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9605,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9606,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9607,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9608,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9609,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9610,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9611,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9612,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9613,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9614,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3416,"This boolean expression contains side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9615,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3417,"The comma operator has been used outside a for-loop header.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9616,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3446,"The result operands of this conditional operator generate side effects","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9617,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3631,"Type 'char' has been used in a cast.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9618,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3760,"Implicit conversion: int to unsigned int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9619,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9620,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9621,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9622,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,45,2209,"This brace style is not consistent with 'exdented' style.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9623,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",316,13,3200,"strcat' returns a value which is not being used.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
9624,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",316,37,3122,"Hard-coded 'magic' string literal.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
9625,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",316,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
9626,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",317,13,3200,"strcat' returns a value which is not being used.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
9627,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",317,37,3122,"Hard-coded 'magic' string literal.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
9628,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",317,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
9629,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",319,13,2209,"This brace style is not consistent with 'exdented' style.","  319:	        else{
",,,
9630,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",319,13,3201,"This statement is unreachable.","  319:	        else{
",,,
9631,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",320,13,3200,"strcat' returns a value which is not being used.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
9632,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",320,37,3122,"Hard-coded 'magic' string literal.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
9633,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",320,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
9634,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,306,"[I] Cast between a pointer to object and an integral type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9635,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,310,"Casting to different object pointer type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9636,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9637,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,489,"Increment or decrement operation performed on pointer.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9638,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__result' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9639,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9640,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9641,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9642,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9643,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9644,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9645,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9646,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9647,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9648,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9649,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,2100,"Integral promotion : unsigned char promoted to signed int.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9650,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9651,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3112,"This statement has no side-effect - it can be removed.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9652,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3122,"Hard-coded 'magic' string literal.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9653,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3200,"__builtin_strcmp' returns a value which is not being used.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9654,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9655,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9656,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9657,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9658,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9659,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9660,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9661,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9662,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9663,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3326,"An assignment operator is being used in a boolean expression.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9664,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3346,"This 'if' control expression has a constant 'true' value.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9665,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9666,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9667,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9668,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9669,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9670,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9671,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9672,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9673,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",1,1,240,"[E] This file contains the control-M character at the end of a line.","    1:	/*
",,"description for warning (3871)","Registered"
9674,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",9,16,288,"[I] Source file '/home/www/TOSCANA_dev/BackEnd/AnalyzeTaskManager/work/1/work/sample_c_cpp/sample_c/src/analyzeme.c' has comments containing characters which are not members of the basic source character set.","    9:	      AnalyzeMeのメイン関数を定義する
",,"description for warning (3872)","Registered"
9675,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",16,2,2017,"Comment spans more than one line.","   16:	*/
",,"description for warning (3873)","Registered"
9676,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",20,2,2017,"Comment spans more than one line.","   20:	*/
",,"description for warning (3874)","Registered"
9677,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",21,1,838,"File has already been included directly from this file.","   21:	#include ""analyzeme.h""
",,"description for warning (3875)","Registered"
9678,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",21,1,839,"File has already been included indirectly from this file.","   21:	#include ""analyzeme.h""
",,"description for warning (3876)","Registered"
9679,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",21,23,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   21:	#include ""analyzeme.h""
",,"description for warning (3877)","Registered"
9680,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",22,1,839,"File has already been included indirectly from this file.","   22:	#include ""common.h""
",,"description for warning (3878)","Registered"
9681,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",23,1,839,"File has already been included indirectly from this file.","   23:	#include ""memory_manage.h""
",,"description for warning (3879)","Registered"
9682,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",23,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   23:	#include ""memory_manage.h""
",,"description for warning (3880)","Registered"
9683,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",24,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   24:	#include ""parse_cmdline.h""
",,,
9684,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",25,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   25:	#include ""common_measure.h""
",,,
9685,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",26,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   26:	#include ""trend_measure.h""
",,,
9686,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",27,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   27:	#include ""make_file_list.h""
",,,
9687,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",29,31,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   29:	#include ""get_process_macro.h""
",,,
9688,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",30,1,839,"File has already been included indirectly from this file.","   30:	#include &lt;signal.h&gt;
",,,
9689,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
9690,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
9691,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,13,3211,"The global identifier 'TRACEFILE' is defined but not used.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
9692,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,13,3408,"TRACEFILE' has external linkage but is being defined without any previous declaration.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
9693,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",36,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
9694,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",36,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
9695,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",36,13,3408,"APPLOGFILE' has external linkage but is being defined without any previous declaration.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
9696,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",44,7,3408,"g_fpLogFile' has external linkage but is being defined without any previous declaration.","   44:	FILE *g_fpLogFile = NULL;       /* Log File pointer */
",,,
9697,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",46,7,3211,"The global identifier 'g_fpTraceFile' is defined but not used.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
9698,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",46,7,3408,"g_fpTraceFile' has external linkage but is being defined without any previous declaration.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
9699,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",48,7,3408,"g_fpErrorFile' has external linkage but is being defined without any previous declaration.","   48:	FILE *g_fpErrorFile = NULL;
",,,
9700,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",50,6,3408,"g_bTrace' has external linkage but is being defined without any previous declaration.","   50:	bool g_bTrace           = false;    /* Trace flag */
",,,
9701,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",51,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
9702,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",51,6,3408,"g_szNVPath' has external linkage but is being defined without any previous declaration.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
9703,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",51,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
9704,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",52,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
9705,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",52,6,3408,"g_szOVPath' has external linkage but is being defined without any previous declaration.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
9706,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",52,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
9707,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",53,6,3408,"g_bTrendFile' has external linkage but is being defined without any previous declaration.","   53:	bool g_bTrendFile = false;
",,,
9708,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",55,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   55:	char *g_optionFileCont = NULL;
",,,
9709,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",55,7,3211,"The global identifier 'g_optionFileCont' is defined but not used.","   55:	char *g_optionFileCont = NULL;
",,,
9710,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",55,7,3408,"g_optionFileCont' has external linkage but is being defined without any previous declaration.","   55:	char *g_optionFileCont = NULL;
",,,
9711,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",57,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   57:	char *g_symbolFileCont = NULL;
",,,
9712,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",57,7,3211,"The global identifier 'g_symbolFileCont' is defined but not used.","   57:	char *g_symbolFileCont = NULL;
",,,
9713,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",57,7,3408,"g_symbolFileCont' has external linkage but is being defined without any previous declaration.","   57:	char *g_symbolFileCont = NULL;
",,,
9714,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",58,6,3408,"g_bOutTime' has external linkage but is being defined without any previous declaration.","   58:	bool g_bOutTime = false;
",,,
9715,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",59,15,3408,"g_pAnzInfo' has external linkage but is being defined without any previous declaration.","   59:	ST_AnalyzeMe *g_pAnzInfo;  /* AnalyzeMe管理情報 */
",,,
9716,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",69,2,2017,"Comment spans more than one line.","   69:	*/
",,,
9717,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",70,14,3227,"The parameter 'argc' is never modified and so it could be declared with the 'const' qualifier.","   70:	int main(int argc,char * argv[])
",,,
9718,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",70,19,3625,"Type 'char' has been used in the declaration of an object or a function.","   70:	int main(int argc,char * argv[])
",,,
9719,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",70,26,344,"K&amp;R compilers do not support function prototypes.","   70:	int main(int argc,char * argv[])
",,,
9720,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",75,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
9721,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",75,28,2211,"the_pMeasureItem' is not aligned with the previously declared identifier.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
9722,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
9723,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,10,2211,"the_szCurMetrics' is not aligned with the previously declared identifier.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
9724,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,10,3604,"Local arrays and structures cannot be initialised in K&amp;R C.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
9725,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,44,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
9726,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",80,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   80:	    char *the_pTrace = NULL;
",,,
9727,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",80,11,2211,"the_pTrace' is not aligned with the previously declared identifier.","   80:	    char *the_pTrace = NULL;
",,,
9728,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",80,11,3197,"The initialiser for 'the_pTrace' is always modified before being used.","   80:	    char *the_pTrace = NULL;
",,,
9729,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",81,25,2211,"the_st' is not aligned with the previously declared identifier.","   81:	    struct timeb the_st ;
",,,
9730,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",89,5,3198,"The value assigned to 'the_pAnzInfo' is always modified before being used.","   89:	    the_pAnzInfo = NULL;
",,,
9731,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",91,5,3198,"The value assigned to 'the_iRet' is always modified before being used.","   91:	    the_iRet = ANZ_SUCCESS;
",,,
9732,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",101,25,3122,"Hard-coded 'magic' string literal.","  101:	    the_pTrace = getenv(""AnzTrace"");
",,,
9733,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",102,28,2209,"This brace style is not consistent with 'exdented' style.","  102:	    if(the_pTrace != NULL) {
",,,
9734,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,306,"[I] Cast between a pointer to object and an integral type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9735,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,310,"Casting to different object pointer type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9736,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9737,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,489,"Increment or decrement operation performed on pointer.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9738,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__result' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9739,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9740,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9741,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9742,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9743,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9744,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9745,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9746,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9747,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9748,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9749,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,2100,"Integral promotion : unsigned char promoted to signed int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9750,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9751,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3112,"This statement has no side-effect - it can be removed.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9752,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3122,"Hard-coded 'magic' string literal.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9753,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3200,"__builtin_strcmp' returns a value which is not being used.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9754,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9755,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9756,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9757,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9758,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9759,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9760,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9761,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9762,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9763,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3325,"This control expression has a constant 'false' value.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9764,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3326,"An assignment operator is being used in a boolean expression.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9765,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9766,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9767,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9768,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9769,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9770,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9771,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9772,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9773,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9774,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9775,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9776,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9777,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9778,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9779,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9780,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9781,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9782,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9783,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9784,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9785,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9786,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9787,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9788,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3416,"This boolean expression contains side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9789,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3417,"The comma operator has been used outside a for-loop header.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9790,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3446,"The result operands of this conditional operator generate side effects","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9791,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3631,"Type 'char' has been used in a cast.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9792,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3760,"Implicit conversion: int to unsigned int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9793,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,35,3209,"__builtin_strcmp()' returns a value which is always ignored.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9794,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9795,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9796,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,36,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9797,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,43,2209,"This brace style is not consistent with 'exdented' style.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9798,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,43,3201,"This statement is unreachable.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
9799,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",113,6,2017,"Comment spans more than one line.","  113:	    */
",,,
9800,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",114,36,3122,"Hard-coded 'magic' string literal.","  114:	    g_fpLogFile = fopen(APPLOGFILE,""w"");
",,,
9801,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",115,28,2209,"This brace style is not consistent with 'exdented' style.","  115:	    if(g_fpLogFile == NULL){
",,,
9802,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",116,9,3200,"printf' returns a value which is not being used.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
9803,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",116,16,3122,"Hard-coded 'magic' string literal.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
9804,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",120,5,702,"Result of sizeof operator is not explicitly cast.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
9805,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",120,63,3430,"Macro argument expression requires parentheses.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
9806,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",121,29,2209,"This brace style is not consistent with 'exdented' style.","  121:	    if(the_pAnzInfo == NULL){
",,,
9807,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",122,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  122:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
9808,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",123,18,2001,"A 'goto' statement has been used.","  123:	        goto EXIT;
",,,
9809,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",125,5,702,"Result of sizeof operator is not explicitly cast.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
9810,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",125,5,3200,"memset' returns a value which is not being used.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
9811,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",128,5,702,"Result of sizeof operator is not explicitly cast.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
9812,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",128,67,3430,"Macro argument expression requires parentheses.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
9813,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",129,39,2209,"This brace style is not consistent with 'exdented' style.","  129:	    if(the_pAnzInfo-&gt;m_option == NULL){
",,,
9814,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",130,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  130:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
9815,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",131,18,2001,"A 'goto' statement has been used.","  131:	        goto EXIT;
",,,
9816,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",133,5,702,"Result of sizeof operator is not explicitly cast.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
9817,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",133,5,3200,"memset' returns a value which is not being used.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
9818,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,702,"Result of sizeof operator is not explicitly cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
9819,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,3631,"Type 'char' has been used in a cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
9820,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,3633,"Type 'char' has been used in the operand of the sizeof operator.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
9821,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,3760,"Implicit conversion: int to unsigned int.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
9822,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",138,34,2209,"This brace style is not consistent with 'exdented' style.","  138:	    if(the_pMeasureItem == NULL) {
",,,
9823,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",139,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  139:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
9824,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",140,18,2001,"A 'goto' statement has been used.","  140:	        goto EXIT;
",,,
9825,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,5,702,"Result of sizeof operator is not explicitly cast.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
9826,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,5,3200,"memset' returns a value which is not being used.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
9827,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,36,3760,"Implicit conversion: int to unsigned int.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
9828,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,45,3633,"Type 'char' has been used in the operand of the sizeof operator.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
9829,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",150,5,3200,"strcpy' returns a value which is not being used.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
9830,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",150,34,3122,"Hard-coded 'magic' string literal.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
9831,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",154,5,3200,"strcpy' returns a value which is not being used.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
9832,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",154,39,3122,"Hard-coded 'magic' string literal.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
9833,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",155,5,3200,"strcpy' returns a value which is not being used.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
9834,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",155,38,3122,"Hard-coded 'magic' string literal.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
9835,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",156,5,3200,"strcpy' returns a value which is not being used.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
9836,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",156,38,3122,"Hard-coded 'magic' string literal.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
9837,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",165,32,3120,"Hard-coded 'magic' integer constant '70'.","  165:	    the_pOption-&gt;m_symThresh = 70;
",,,
9838,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",166,32,3120,"Hard-coded 'magic' integer constant '2'.","  166:	    the_pOption-&gt;m_minThresh = 2;
",,,
9839,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",169,5,702,"Result of sizeof operator is not explicitly cast.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
9840,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",169,59,3430,"Macro argument expression requires parentheses.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
9841,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",170,31,2209,"This brace style is not consistent with 'exdented' style.","  170:	    if(the_pCmdOption == NULL){
",,,
9842,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",171,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  171:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
9843,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",172,18,2001,"A 'goto' statement has been used.","  172:	        goto EXIT;
",,,
9844,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",174,5,702,"Result of sizeof operator is not explicitly cast.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
9845,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",174,5,3200,"memset' returns a value which is not being used.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
9846,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",180,5,3200,"strcpy' returns a value which is not being used.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
9847,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",180,37,3122,"Hard-coded 'magic' string literal.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
9848,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",184,5,3200,"strcpy' returns a value which is not being used.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
9849,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",184,42,3122,"Hard-coded 'magic' string literal.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
9850,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",185,5,3200,"strcpy' returns a value which is not being used.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
9851,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",185,41,3122,"Hard-coded 'magic' string literal.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
9852,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",186,5,3200,"strcpy' returns a value which is not being used.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
9853,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",186,41,3122,"Hard-coded 'magic' string literal.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
9854,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",195,35,3120,"Hard-coded 'magic' integer constant '70'.","  195:	    the_pCmdOption-&gt;m_symThresh = 70;
",,,
9855,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",196,35,3120,"Hard-coded 'magic' integer constant '2'.","  196:	    the_pCmdOption-&gt;m_minThresh = 2;
",,,
9856,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",200,32,2209,"This brace style is not consistent with 'exdented' style.","  200:	    if(the_iRet != ANZ_SUCCESS){
",,,
9857,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",201,18,2001,"A 'goto' statement has been used.","  201:	        goto EXIT;
",,,
9858,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",203,8,3344,"Value of control expression is not derived from an explicit logical operation.","  203:	    if(g_bOutTime) {
",,,
9859,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",203,20,2209,"This brace style is not consistent with 'exdented' style.","  203:	    if(g_bOutTime) {
",,,
9860,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",204,9,3200,"ftime' returns a value which is not being used.","  204:	        ftime(&amp;the_st);
",,,
9861,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",209,32,2209,"This brace style is not consistent with 'exdented' style.","  209:	    if(the_iRet != ANZ_SUCCESS){
",,,
9862,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",210,18,2001,"A 'goto' statement has been used.","  210:	        goto EXIT;
",,,
9863,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",214,32,2209,"This brace style is not consistent with 'exdented' style.","  214:	    if(the_iRet != ANZ_SUCCESS){
",,,
9864,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",215,18,2001,"A 'goto' statement has been used.","  215:	        goto EXIT;
",,,
9865,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",218,23,3355,"The result of this logical operation is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
9866,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",218,23,3358,"The value of this 'if' control expression is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
9867,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",218,31,2209,"This brace style is not consistent with 'exdented' style.","  218:	    if(the_pCmdOption != NULL){
",,,
9868,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",224,32,2209,"This brace style is not consistent with 'exdented' style.","  224:	    if(the_iRet != ANZ_SUCCESS){
",,,
9869,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",225,18,2001,"A 'goto' statement has been used.","  225:	        goto EXIT;
",,,
9870,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",229,32,2209,"This brace style is not consistent with 'exdented' style.","  229:	    if(the_iRet != ANZ_SUCCESS){
",,,
9871,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",230,18,2001,"A 'goto' statement has been used.","  230:	        goto EXIT;
",,,
9872,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",233,47,2209,"This brace style is not consistent with 'exdented' style.","  233:	    if(the_iMeasureType == ANZ_TREND_MEASURE) {
",,,
9873,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",234,13,3220,"Identifier declared at a nested level of block scope.","  234:	        int the_iType = -1;
",,,
9874,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",235,13,3220,"Identifier declared at a nested level of block scope.","  235:	        int the_pPos = -1;
",,,
9875,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",236,9,3200,"isDirOrFile' returns a value which is not being used.","  236:	        isDirOrFile(*the_pMeasureItem,&amp;the_iType);
",,,
9876,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",237,35,2209,"This brace style is not consistent with 'exdented' style.","  237:	        if(the_iType == ANZ_FILE) {
",,,
9877,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",242,30,2209,"This brace style is not consistent with 'exdented' style.","  242:	            if(the_pPos &gt; 0) {
",,,
9878,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",243,55,488,"Performing pointer arithmetic.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
9879,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",243,66,489,"Increment or decrement operation performed on pointer.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
9880,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",246,43,489,"Increment or decrement operation performed on pointer.","  246:	            GetPathPos(*(the_pMeasureItem + 1),&amp;the_pPos);
",,,
9881,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",248,30,2209,"This brace style is not consistent with 'exdented' style.","  248:	            if(the_pPos &gt; 0) {
",,,
9882,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,36,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
9883,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,42,3501,"This could be read as an old-style assignment operator. Spaces are needed to make it more readable.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
9884,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,61,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
9885,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,66,488,"Performing pointer arithmetic.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
9886,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,77,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
9887,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",252,13,3198,"The value assigned to 'the_iRet' is always modified before being used.","  252:	            the_iRet = ResetTrendPath(g_szNVPath);
",,,
9888,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",254,41,2209,"This brace style is not consistent with 'exdented' style.","  254:	            if(the_iRet != ANZ_SUCCESS) {
",,,
9889,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",255,26,2001,"A 'goto' statement has been used.","  255:	                goto EXIT;
",,,
9890,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",260,51,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
9891,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",260,57,3631,"Type 'char' has been used in a cast.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
9892,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",261,41,2209,"This brace style is not consistent with 'exdented' style.","  261:	    if(the_iRet == ANZ_NO_MEASURE_FILES){
",,,
9893,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",262,9,3200,"printf' returns a value which is not being used.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
9894,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",262,16,3122,"Hard-coded 'magic' string literal.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
9895,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",264,42,2209,"This brace style is not consistent with 'exdented' style.","  264:	    if(the_iRet == ANZ_ERR_MEMORY_FAILED){
",,,
9896,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",265,9,3200,"printf' returns a value which is not being used.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
9897,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",265,16,3122,"Hard-coded 'magic' string literal.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
9898,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",267,32,2209,"This brace style is not consistent with 'exdented' style.","  267:	    if(the_iRet != ANZ_SUCCESS){
",,,
9899,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",268,18,2001,"A 'goto' statement has been used.","  268:	        goto EXIT;
",,,
9900,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",272,37,2209,"This brace style is not consistent with 'exdented' style.","  272:	    if(the_pOption-&gt;m_fileLOC == ON){
",,,
9901,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",273,9,3200,"strcat' returns a value which is not being used.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
9902,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",273,33,3122,"Hard-coded 'magic' string literal.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
9903,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",276,40,2209,"This brace style is not consistent with 'exdented' style.","  276:	    if(the_pOption-&gt;m_redundancy == ON){
",,,
9904,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,306,"[I] Cast between a pointer to object and an integral type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9905,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,310,"Casting to different object pointer type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9906,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9907,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,489,"Increment or decrement operation performed on pointer.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9908,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__result' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9909,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9910,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9911,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9912,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9913,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9914,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9915,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9916,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9917,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9918,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9919,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,2100,"Integral promotion : unsigned char promoted to signed int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9920,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9921,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3112,"This statement has no side-effect - it can be removed.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9922,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3122,"Hard-coded 'magic' string literal.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9923,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3200,"__builtin_strcmp' returns a value which is not being used.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9924,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9925,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9926,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9927,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9928,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9929,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9930,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9931,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9932,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9933,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3326,"An assignment operator is being used in a boolean expression.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9934,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3346,"This 'if' control expression has a constant 'true' value.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9935,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9936,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9937,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9938,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9939,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9940,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9941,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9942,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9943,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9944,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9945,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9946,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9947,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9948,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9949,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9950,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9951,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9952,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9953,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9954,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9955,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9956,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9957,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9958,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3416,"This boolean expression contains side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9959,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3417,"The comma operator has been used outside a for-loop header.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9960,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3446,"The result operands of this conditional operator generate side effects","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9961,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3631,"Type 'char' has been used in a cast.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9962,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3760,"Implicit conversion: int to unsigned int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9963,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9964,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9965,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9966,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,45,2209,"This brace style is not consistent with 'exdented' style.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9967,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",278,13,3200,"strcat' returns a value which is not being used.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
9968,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",278,37,3122,"Hard-coded 'magic' string literal.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
9969,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",278,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
9970,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",279,13,3200,"strcat' returns a value which is not being used.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
9971,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",279,37,3122,"Hard-coded 'magic' string literal.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
9972,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",279,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
9973,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",281,13,2209,"This brace style is not consistent with 'exdented' style.","  281:	        else{
",,,
9974,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",281,13,3201,"This statement is unreachable.","  281:	        else{
",,,
9975,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",282,13,3200,"strcat' returns a value which is not being used.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
9976,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",282,37,3122,"Hard-coded 'magic' string literal.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
9977,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",282,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
9978,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",286,8,3344,"Value of control expression is not derived from an explicit logical operation.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
9979,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",286,31,2209,"This brace style is not consistent with 'exdented' style.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
9980,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,306,"[I] Cast between a pointer to object and an integral type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9981,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,310,"Casting to different object pointer type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9982,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9983,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,489,"Increment or decrement operation performed on pointer.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9984,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__result' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9985,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9986,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9987,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9988,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9989,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9990,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9991,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9992,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9993,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9994,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9995,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,2100,"Integral promotion : unsigned char promoted to signed int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9996,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9997,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3112,"This statement has no side-effect - it can be removed.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9998,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3122,"Hard-coded 'magic' string literal.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
9999,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3200,"__builtin_strcmp' returns a value which is not being used.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10000,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10001,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10002,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10003,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10004,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10005,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10006,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10007,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10008,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10009,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3326,"An assignment operator is being used in a boolean expression.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10010,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3346,"This 'if' control expression has a constant 'true' value.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10011,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10012,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10013,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10014,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10015,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10016,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10017,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10018,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10019,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10020,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10021,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10022,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10023,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10024,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10025,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10026,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10027,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10028,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10029,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10030,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10031,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10032,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10033,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10034,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3416,"This boolean expression contains side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10035,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3417,"The comma operator has been used outside a for-loop header.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10036,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3446,"The result operands of this conditional operator generate side effects","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10037,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3631,"Type 'char' has been used in a cast.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10038,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3760,"Implicit conversion: int to unsigned int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10039,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10040,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10041,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10042,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,45,2209,"This brace style is not consistent with 'exdented' style.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10043,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",288,13,3200,"strcat' returns a value which is not being used.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
10044,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",288,37,3122,"Hard-coded 'magic' string literal.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
10045,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",288,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
10046,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",289,13,3200,"strcat' returns a value which is not being used.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
10047,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",289,37,3122,"Hard-coded 'magic' string literal.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
10048,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",289,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
10049,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",291,13,2209,"This brace style is not consistent with 'exdented' style.","  291:	        else{
",,,
10050,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",291,13,3201,"This statement is unreachable.","  291:	        else{
",,,
10051,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",292,13,3200,"strcat' returns a value which is not being used.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
10052,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",292,37,3122,"Hard-coded 'magic' string literal.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
10053,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",292,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
10054,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",296,8,3344,"Value of control expression is not derived from an explicit logical operation.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
10055,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",296,28,2209,"This brace style is not consistent with 'exdented' style.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
10056,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,306,"[I] Cast between a pointer to object and an integral type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10057,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,310,"Casting to different object pointer type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10058,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10059,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,489,"Increment or decrement operation performed on pointer.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10060,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__result' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10061,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10062,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10063,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10064,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10065,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10066,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10067,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10068,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10069,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10070,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10071,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,2100,"Integral promotion : unsigned char promoted to signed int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10072,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10073,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3112,"This statement has no side-effect - it can be removed.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10074,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3122,"Hard-coded 'magic' string literal.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10075,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3200,"__builtin_strcmp' returns a value which is not being used.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10076,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10077,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10078,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10079,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10080,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10081,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10082,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10083,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10084,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10085,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3326,"An assignment operator is being used in a boolean expression.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10086,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3346,"This 'if' control expression has a constant 'true' value.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10087,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10088,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10089,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10090,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10091,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10092,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10093,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10094,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10095,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10096,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10097,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10098,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10099,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10100,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10101,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10102,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10103,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10104,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10105,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10106,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10107,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10108,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10109,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10110,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3416,"This boolean expression contains side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10111,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3417,"The comma operator has been used outside a for-loop header.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10112,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3446,"The result operands of this conditional operator generate side effects","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10113,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3631,"Type 'char' has been used in a cast.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10114,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3760,"Implicit conversion: int to unsigned int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10115,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10116,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10117,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10118,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,45,2209,"This brace style is not consistent with 'exdented' style.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10119,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",298,13,3200,"strcat' returns a value which is not being used.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
10120,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",298,37,3122,"Hard-coded 'magic' string literal.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
10121,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",298,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
10122,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",299,13,3200,"strcat' returns a value which is not being used.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
10123,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",299,37,3122,"Hard-coded 'magic' string literal.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
10124,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",299,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
10125,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",301,13,2209,"This brace style is not consistent with 'exdented' style.","  301:	        else{
",,,
10126,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",301,13,3201,"This statement is unreachable.","  301:	        else{
",,,
10127,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",302,13,3200,"strcat' returns a value which is not being used.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
10128,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",302,37,3122,"Hard-coded 'magic' string literal.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
10129,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",302,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
10130,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,306,"[I] Cast between a pointer to object and an integral type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10131,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,310,"Casting to different object pointer type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10132,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10133,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,489,"Increment or decrement operation performed on pointer.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10134,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__result' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10135,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10136,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10137,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10138,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10139,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10140,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10141,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10142,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10143,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10144,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10145,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,2100,"Integral promotion : unsigned char promoted to signed int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10146,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10147,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3112,"This statement has no side-effect - it can be removed.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10148,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3122,"Hard-coded 'magic' string literal.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10149,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3200,"__builtin_strcmp' returns a value which is not being used.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10150,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10151,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10152,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10153,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10154,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10155,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10156,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10157,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10158,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10159,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3326,"An assignment operator is being used in a boolean expression.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10160,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3346,"This 'if' control expression has a constant 'true' value.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10161,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10162,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10163,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10164,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10165,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10166,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10167,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10168,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10169,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10170,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10171,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10172,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10173,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10174,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10175,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10176,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10177,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10178,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10179,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10180,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10181,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10182,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10183,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10184,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3416,"This boolean expression contains side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10185,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3417,"The comma operator has been used outside a for-loop header.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10186,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3446,"The result operands of this conditional operator generate side effects","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10187,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3631,"Type 'char' has been used in a cast.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10188,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3760,"Implicit conversion: int to unsigned int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10189,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10190,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10191,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10192,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,45,2209,"This brace style is not consistent with 'exdented' style.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10193,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",305,13,3200,"strcat' returns a value which is not being used.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
10194,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",305,37,3122,"Hard-coded 'magic' string literal.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
10195,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",305,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
10196,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",306,13,3200,"strcat' returns a value which is not being used.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
10197,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",306,37,3122,"Hard-coded 'magic' string literal.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
10198,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",308,13,2209,"This brace style is not consistent with 'exdented' style.","  308:	        else{
",,,
10199,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",308,13,3201,"This statement is unreachable.","  308:	        else{
",,,
10200,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",309,13,3200,"strcat' returns a value which is not being used.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
10201,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",309,37,3122,"Hard-coded 'magic' string literal.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
10202,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",314,8,3344,"Value of control expression is not derived from an explicit logical operation.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
10203,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",314,34,2209,"This brace style is not consistent with 'exdented' style.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
10204,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,306,"[I] Cast between a pointer to object and an integral type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10205,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,310,"Casting to different object pointer type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10206,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10207,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,489,"Increment or decrement operation performed on pointer.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10208,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__result' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10209,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10210,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10211,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10212,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10213,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10214,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10215,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10216,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10217,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10218,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10219,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,2100,"Integral promotion : unsigned char promoted to signed int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10220,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10221,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3112,"This statement has no side-effect - it can be removed.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10222,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3122,"Hard-coded 'magic' string literal.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10223,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3200,"__builtin_strcmp' returns a value which is not being used.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10224,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10225,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10226,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10227,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10228,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10229,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10230,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10231,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10232,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10233,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3326,"An assignment operator is being used in a boolean expression.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10234,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3346,"This 'if' control expression has a constant 'true' value.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10235,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10236,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10237,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10238,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10239,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10240,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10241,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10242,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10243,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10244,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10245,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10246,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10247,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10248,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10249,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10250,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10251,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10252,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10253,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10254,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10255,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10256,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10257,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10258,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3416,"This boolean expression contains side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10259,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3417,"The comma operator has been used outside a for-loop header.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10260,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3446,"The result operands of this conditional operator generate side effects","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10261,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3631,"Type 'char' has been used in a cast.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10262,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3760,"Implicit conversion: int to unsigned int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10263,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10264,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10265,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10266,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,45,2209,"This brace style is not consistent with 'exdented' style.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10267,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",316,13,3200,"strcat' returns a value which is not being used.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
10268,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",316,37,3122,"Hard-coded 'magic' string literal.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
10269,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",316,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
10270,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",317,13,3200,"strcat' returns a value which is not being used.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
10271,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",317,37,3122,"Hard-coded 'magic' string literal.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
10272,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",317,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
10273,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",319,13,2209,"This brace style is not consistent with 'exdented' style.","  319:	        else{
",,,
10274,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",319,13,3201,"This statement is unreachable.","  319:	        else{
",,,
10275,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",320,13,3200,"strcat' returns a value which is not being used.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
10276,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",320,37,3122,"Hard-coded 'magic' string literal.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
10277,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",320,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
10278,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,306,"[I] Cast between a pointer to object and an integral type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10279,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,310,"Casting to different object pointer type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10280,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10281,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,489,"Increment or decrement operation performed on pointer.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10282,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__result' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10283,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10284,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10285,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10286,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10287,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10288,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10289,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10290,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10291,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10292,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10293,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,2100,"Integral promotion : unsigned char promoted to signed int.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10294,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10295,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3112,"This statement has no side-effect - it can be removed.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10296,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3122,"Hard-coded 'magic' string literal.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10297,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3200,"__builtin_strcmp' returns a value which is not being used.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10298,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10299,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10300,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10301,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10302,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10303,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10304,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10305,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10306,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10307,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3326,"An assignment operator is being used in a boolean expression.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10308,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3346,"This 'if' control expression has a constant 'true' value.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10309,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10310,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10311,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10312,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10313,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10314,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10315,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10316,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10317,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10318,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10319,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10320,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10321,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10322,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10323,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10324,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10325,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10326,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10327,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10328,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10329,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10330,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10331,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10332,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3416,"This boolean expression contains side effects.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10333,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3417,"The comma operator has been used outside a for-loop header.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10334,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3446,"The result operands of this conditional operator generate side effects","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10335,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3631,"Type 'char' has been used in a cast.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10336,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3760,"Implicit conversion: int to unsigned int.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10337,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10338,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10339,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10340,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,45,2209,"This brace style is not consistent with 'exdented' style.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10341,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",324,13,3200,"strcat' returns a value which is not being used.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
10342,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",324,37,3122,"Hard-coded 'magic' string literal.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
10343,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",324,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
10344,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",325,13,3200,"strcat' returns a value which is not being used.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
10345,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",325,37,3122,"Hard-coded 'magic' string literal.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
10346,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",325,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
10347,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",327,13,2209,"This brace style is not consistent with 'exdented' style.","  327:	        else{
",,,
10348,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",327,13,3201,"This statement is unreachable.","  327:	        else{
",,,
10349,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",328,13,3200,"strcat' returns a value which is not being used.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
10350,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",328,37,3122,"Hard-coded 'magic' string literal.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
10351,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",328,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
10352,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",333,8,3344,"Value of control expression is not derived from an explicit logical operation.","  333:	    if(the_pOption-&gt;m_trend){
",,,
10353,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",333,29,2209,"This brace style is not consistent with 'exdented' style.","  333:	    if(the_pOption-&gt;m_trend){
",,,
10354,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,306,"[I] Cast between a pointer to object and an integral type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10355,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,310,"Casting to different object pointer type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10356,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10357,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,489,"Increment or decrement operation performed on pointer.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10358,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__result' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10359,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10360,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10361,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10362,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10363,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10364,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10365,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10366,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10367,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10368,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10369,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,2100,"Integral promotion : unsigned char promoted to signed int.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10370,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10371,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3112,"This statement has no side-effect - it can be removed.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10372,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3122,"Hard-coded 'magic' string literal.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10373,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3200,"__builtin_strcmp' returns a value which is not being used.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10374,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10375,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10376,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10377,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10378,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10379,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10380,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10381,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10382,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10383,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3326,"An assignment operator is being used in a boolean expression.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10384,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3346,"This 'if' control expression has a constant 'true' value.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10385,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10386,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10387,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10388,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10389,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10390,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10391,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10392,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10393,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10394,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10395,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10396,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10397,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10398,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10399,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10400,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10401,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10402,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10403,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10404,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10405,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10406,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10407,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10408,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3416,"This boolean expression contains side effects.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10409,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3417,"The comma operator has been used outside a for-loop header.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10410,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3446,"The result operands of this conditional operator generate side effects","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10411,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3631,"Type 'char' has been used in a cast.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10412,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3760,"Implicit conversion: int to unsigned int.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10413,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10414,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10415,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10416,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,45,2209,"This brace style is not consistent with 'exdented' style.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10417,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",335,13,3200,"strcat' returns a value which is not being used.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
10418,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",335,37,3122,"Hard-coded 'magic' string literal.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
10419,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",335,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
10420,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",336,13,3200,"strcat' returns a value which is not being used.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
10421,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",336,37,3122,"Hard-coded 'magic' string literal.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
10422,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",336,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
10423,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",338,13,2209,"This brace style is not consistent with 'exdented' style.","  338:	        else{
",,,
10424,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",338,13,3201,"This statement is unreachable.","  338:	        else{
",,,
10425,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",339,13,3200,"strcat' returns a value which is not being used.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
10426,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",339,37,3122,"Hard-coded 'magic' string literal.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
10427,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",339,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
10428,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",341,9,3200,"strcat' returns a value which is not being used.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
10429,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",341,33,3122,"Hard-coded 'magic' string literal.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
10430,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",341,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
10431,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",345,8,3344,"Value of control expression is not derived from an explicit logical operation.","  345:	    if(the_pOption-&gt;m_funcTrend){
",,,
10432,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",345,33,2209,"This brace style is not consistent with 'exdented' style.","  345:	    if(the_pOption-&gt;m_funcTrend){
",,,
10433,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,306,"[I] Cast between a pointer to object and an integral type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10434,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,310,"Casting to different object pointer type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10435,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10436,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,489,"Increment or decrement operation performed on pointer.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10437,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__result' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10438,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10439,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10440,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10441,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10442,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10443,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10444,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10445,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10446,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10447,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10448,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,2100,"Integral promotion : unsigned char promoted to signed int.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10449,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10450,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3112,"This statement has no side-effect - it can be removed.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10451,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3122,"Hard-coded 'magic' string literal.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10452,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3200,"__builtin_strcmp' returns a value which is not being used.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10453,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10454,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10455,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10456,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10457,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10458,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10459,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10460,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10461,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10462,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3326,"An assignment operator is being used in a boolean expression.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10463,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3346,"This 'if' control expression has a constant 'true' value.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10464,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10465,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10466,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10467,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10468,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10469,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10470,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10471,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10472,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10473,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10474,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10475,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10476,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10477,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10478,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10479,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10480,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10481,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10482,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10483,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10484,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10485,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10486,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10487,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3416,"This boolean expression contains side effects.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10488,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3417,"The comma operator has been used outside a for-loop header.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10489,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3446,"The result operands of this conditional operator generate side effects","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10490,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3631,"Type 'char' has been used in a cast.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10491,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3760,"Implicit conversion: int to unsigned int.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10492,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10493,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10494,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10495,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,45,2209,"This brace style is not consistent with 'exdented' style.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10496,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",347,13,3200,"strcat' returns a value which is not being used.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
10497,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",347,37,3122,"Hard-coded 'magic' string literal.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
10498,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",347,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
10499,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",348,13,3200,"strcat' returns a value which is not being used.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
10500,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",348,37,3122,"Hard-coded 'magic' string literal.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
10501,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",348,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
10502,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",350,13,2209,"This brace style is not consistent with 'exdented' style.","  350:	        else{
",,,
10503,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",350,13,3201,"This statement is unreachable.","  350:	        else{
",,,
10504,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",351,13,3200,"strcat' returns a value which is not being used.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
10505,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",351,37,3122,"Hard-coded 'magic' string literal.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
10506,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",351,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
10507,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,306,"[I] Cast between a pointer to object and an integral type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10508,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,310,"Casting to different object pointer type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10509,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10510,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,489,"Increment or decrement operation performed on pointer.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10511,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__result' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10512,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10513,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10514,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10515,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10516,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10517,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10518,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10519,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10520,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10521,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10522,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,2100,"Integral promotion : unsigned char promoted to signed int.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10523,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10524,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3112,"This statement has no side-effect - it can be removed.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10525,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3122,"Hard-coded 'magic' string literal.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10526,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3200,"__builtin_strcmp' returns a value which is not being used.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10527,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10528,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10529,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10530,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10531,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10532,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10533,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10534,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10535,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10536,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3326,"An assignment operator is being used in a boolean expression.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10537,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3346,"This 'if' control expression has a constant 'true' value.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10538,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10539,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10540,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10541,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10542,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10543,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10544,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10545,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10546,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10547,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10548,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10549,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10550,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10551,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10552,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10553,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10554,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10555,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10556,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10557,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10558,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10559,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10560,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10561,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3416,"This boolean expression contains side effects.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10562,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3417,"The comma operator has been used outside a for-loop header.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10563,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3446,"The result operands of this conditional operator generate side effects","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10564,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3631,"Type 'char' has been used in a cast.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10565,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3760,"Implicit conversion: int to unsigned int.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10566,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10567,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10568,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10569,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,45,2209,"This brace style is not consistent with 'exdented' style.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10570,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",354,13,3200,"strcat' returns a value which is not being used.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
10571,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",354,37,3122,"Hard-coded 'magic' string literal.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
10572,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",354,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
10573,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",355,13,3200,"strcat' returns a value which is not being used.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
10574,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",355,37,3122,"Hard-coded 'magic' string literal.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
10575,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",355,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
10576,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",357,13,2209,"This brace style is not consistent with 'exdented' style.","  357:	        else{
",,,
10577,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",357,13,3201,"This statement is unreachable.","  357:	        else{
",,,
10578,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",358,13,3200,"strcat' returns a value which is not being used.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
10579,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",358,37,3122,"Hard-coded 'magic' string literal.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
10580,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",358,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
10581,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,306,"[I] Cast between a pointer to object and an integral type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10582,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,310,"Casting to different object pointer type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10583,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10584,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,489,"Increment or decrement operation performed on pointer.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10585,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__result' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10586,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10587,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10588,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10589,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10590,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10591,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10592,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10593,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10594,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10595,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10596,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,2100,"Integral promotion : unsigned char promoted to signed int.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10597,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10598,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3112,"This statement has no side-effect - it can be removed.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10599,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3122,"Hard-coded 'magic' string literal.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10600,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3200,"__builtin_strcmp' returns a value which is not being used.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10601,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10602,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10603,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10604,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10605,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10606,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10607,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10608,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10609,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10610,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3326,"An assignment operator is being used in a boolean expression.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10611,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3346,"This 'if' control expression has a constant 'true' value.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10612,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10613,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10614,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10615,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10616,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10617,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10618,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10619,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10620,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10621,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10622,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10623,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10624,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10625,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10626,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10627,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10628,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10629,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10630,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10631,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10632,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10633,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10634,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10635,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3416,"This boolean expression contains side effects.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10636,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3417,"The comma operator has been used outside a for-loop header.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10637,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3446,"The result operands of this conditional operator generate side effects","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10638,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3631,"Type 'char' has been used in a cast.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10639,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3760,"Implicit conversion: int to unsigned int.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10640,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10641,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10642,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10643,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,45,2209,"This brace style is not consistent with 'exdented' style.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10644,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",361,13,3200,"strcat' returns a value which is not being used.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
10645,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",361,37,3122,"Hard-coded 'magic' string literal.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
10646,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",361,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
10647,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",362,13,3200,"strcat' returns a value which is not being used.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
10648,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",362,37,3122,"Hard-coded 'magic' string literal.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
10649,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",362,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
10650,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",364,13,2209,"This brace style is not consistent with 'exdented' style.","  364:	        else{
",,,
10651,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",364,13,3201,"This statement is unreachable.","  364:	        else{
",,,
10652,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",365,13,3200,"strcat' returns a value which is not being used.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
10653,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",365,37,3122,"Hard-coded 'magic' string literal.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
10654,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",365,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
10655,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,306,"[I] Cast between a pointer to object and an integral type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10656,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,310,"Casting to different object pointer type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10657,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10658,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,489,"Increment or decrement operation performed on pointer.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10659,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__result' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10660,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10661,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10662,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10663,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10664,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10665,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10666,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10667,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10668,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10669,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10670,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,2100,"Integral promotion : unsigned char promoted to signed int.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10671,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10672,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3112,"This statement has no side-effect - it can be removed.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10673,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3122,"Hard-coded 'magic' string literal.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10674,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3200,"__builtin_strcmp' returns a value which is not being used.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10675,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10676,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10677,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10678,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10679,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10680,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10681,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10682,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10683,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10684,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3326,"An assignment operator is being used in a boolean expression.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10685,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3346,"This 'if' control expression has a constant 'true' value.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10686,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10687,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10688,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10689,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10690,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10691,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10692,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10693,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10694,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10695,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10696,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10697,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10698,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10699,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10700,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10701,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10702,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10703,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10704,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10705,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10706,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10707,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10708,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10709,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3416,"This boolean expression contains side effects.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10710,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3417,"The comma operator has been used outside a for-loop header.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10711,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3446,"The result operands of this conditional operator generate side effects","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10712,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3631,"Type 'char' has been used in a cast.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10713,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3760,"Implicit conversion: int to unsigned int.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10714,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10715,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10716,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10717,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,45,2209,"This brace style is not consistent with 'exdented' style.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
10718,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",368,13,3200,"strcat' returns a value which is not being used.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
10719,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",368,37,3122,"Hard-coded 'magic' string literal.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
10720,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",368,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
10721,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",369,13,3200,"strcat' returns a value which is not being used.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
10722,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",369,37,3122,"Hard-coded 'magic' string literal.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
10723,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",369,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
10724,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",371,13,2209,"This brace style is not consistent with 'exdented' style.","  371:	        else{
",,,
10725,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",371,13,3201,"This statement is unreachable.","  371:	        else{
",,,
10726,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",372,13,3200,"strcat' returns a value which is not being used.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
10727,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",372,37,3122,"Hard-coded 'magic' string literal.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
10728,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",372,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
10729,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",377,37,2209,"This brace style is not consistent with 'exdented' style.","  377:	    if(the_pOption-&gt;m_verbos == ON ){
",,,
10730,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",379,9,3200,"printf' returns a value which is not being used.","  379:	        printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_START);
",,,
10731,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",379,16,3122,"Hard-coded 'magic' string literal.","  379:	        printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_START);
",,,
10732,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",384,32,2209,"This brace style is not consistent with 'exdented' style.","  384:	    if(the_iRet != ANZ_SUCCESS){
",,,
10733,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",385,18,2001,"A 'goto' statement has been used.","  385:	        goto EXIT;
",,,
10734,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",390,32,2209,"This brace style is not consistent with 'exdented' style.","  390:	    if(the_iRet != ANZ_SUCCESS){
",,,
10735,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",392,18,2001,"A 'goto' statement has been used.","  392:	        goto EXIT;
",,,
10736,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",397,47,2209,"This brace style is not consistent with 'exdented' style.","  397:	    if(the_iMeasureType == ANZ_COMMON_MEASURE){
",,,
10737,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",400,36,2209,"This brace style is not consistent with 'exdented' style.","  400:	        if(the_iRet != ANZ_SUCCESS){
",,,
10738,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",401,22,2001,"A 'goto' statement has been used.","  401:	            goto EXIT;
",,,
10739,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",404,36,2209,"This brace style is not consistent with 'exdented' style.","  404:	        if(the_iRet != ANZ_SUCCESS){
",,,
10740,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",405,13,3200,"printf' returns a value which is not being used.","  405:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
10741,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",405,20,3122,"Hard-coded 'magic' string literal.","  405:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
10742,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",406,22,2001,"A 'goto' statement has been used.","  406:	            goto EXIT;
",,,
10743,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",410,46,2209,"This brace style is not consistent with 'exdented' style.","  410:	    if(the_iMeasureType == ANZ_TREND_MEASURE){
",,,
10744,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",413,36,2209,"This brace style is not consistent with 'exdented' style.","  413:	        if(the_iRet != ANZ_SUCCESS){
",,,
10745,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",414,22,2001,"A 'goto' statement has been used.","  414:	            goto EXIT;
",,,
10746,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",417,36,2209,"This brace style is not consistent with 'exdented' style.","  417:	        if(the_iRet != ANZ_SUCCESS){
",,,
10747,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",418,13,3200,"printf' returns a value which is not being used.","  418:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
10748,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",418,20,3122,"Hard-coded 'magic' string literal.","  418:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
10749,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",419,22,2001,"A 'goto' statement has been used.","  419:	            goto EXIT;
",,,
10750,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",424,36,2209,"This brace style is not consistent with 'exdented' style.","  424:	    if(the_pOption-&gt;m_verbos == ON){
",,,
10751,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",425,40,2209,"This brace style is not consistent with 'exdented' style.","  425:	        if(the_pAnzInfo-&gt;m_err == NULL){
",,,
10752,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",426,13,3200,"printf' returns a value which is not being used.","  426:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
10753,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",426,20,3122,"Hard-coded 'magic' string literal.","  426:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
10754,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",428,13,2209,"This brace style is not consistent with 'exdented' style.","  428:	        else{
",,,
10755,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",429,13,3200,"printf' returns a value which is not being used.","  429:	            printf(""%s%s%s\n"",MSG_MEASURE_FILE_ERROR,the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
10756,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",429,20,3122,"Hard-coded 'magic' string literal.","  429:	            printf(""%s%s%s\n"",MSG_MEASURE_FILE_ERROR,the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
10757,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,1,2015,"This label is not a case or default label for a switch statement.","  433:	EXIT:;
",,,
10758,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,1,2201,"This indentation is not consistent with previous indentation in this file.","  433:	EXIT:;
",,,
10759,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,6,3109,"Empty statement (';' on its own) - if this is deliberate, it is best to put ';' on a line by itself.","  433:	EXIT:;
",,,
10760,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,6,3139,"Null statement is obscured by code or comment on the same line.","  433:	EXIT:;
",,,
10761,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",435,29,505,"[U] Dereferencing pointer value that is apparently NULL.","  435:	    the_iRet = OutErrorFile(the_pAnzInfo-&gt;m_err);
",,,
10762,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",436,42,2209,"This brace style is not consistent with 'exdented' style.","  436:	    if(the_iRet == ANZ_ERR_MEMORY_FAILED){
",,,
10763,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",437,9,3200,"printf' returns a value which is not being used.","  437:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
10764,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",437,16,3122,"Hard-coded 'magic' string literal.","  437:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
10765,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",442,31,2209,"This brace style is not consistent with 'exdented' style.","  442:	    if(the_pCmdOption != NULL){
",,,
10766,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",444,9,3199,"The value of 'the_pCmdOption' is never used following this assignment.","  444:	        the_pCmdOption = NULL;
",,,
10767,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",447,34,2209,"This brace style is not consistent with 'exdented' style.","  447:	    if(the_pMeasureItem != NULL) {
",,,
10768,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",449,9,3199,"The value of 'the_pMeasureItem' is never used following this assignment.","  449:	        the_pMeasureItem = NULL;
",,,
10769,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",455,8,3344,"Value of control expression is not derived from an explicit logical operation.","  455:	    if(g_bOutTime) {
",,,
10770,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",455,20,2209,"This brace style is not consistent with 'exdented' style.","  455:	    if(g_bOutTime) {
",,,
10771,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",456,9,3200,"ftime' returns a value which is not being used.","  456:	        ftime(&amp;the_ed);
",,,
10772,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,9,3200,"printf' returns a value which is not being used.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
10773,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,9,3395,"Operators in the set + - * / with different precedence have been used. Extra parentheses recommended.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
10774,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,9,3401,"Possible precedence confusion: extra parentheses are recommended here.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
10775,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,16,3122,"Hard-coded 'magic' string literal.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
10776,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,69,1253,"Unsuffixed integer constant implicitly converted to another type.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
10777,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,71,3120,"Hard-coded 'magic' integer constant '1000'.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
10778,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,94,2101,"Integral promotion : unsigned short promoted to signed int.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
10779,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",473,2,2017,"Comment spans more than one line.","  473:	*/
",,,
10780,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,26,3227,"The parameter 'sig' is never modified and so it could be declared with the 'const' qualifier.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
10781,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,35,3206,"The parameter 'code' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
10782,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,47,3206,"The parameter 'scp' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
10783,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,53,3625,"Type 'char' has been used in the declaration of an object or a function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
10784,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,59,344,"K&amp;R compilers do not support function prototypes.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
10785,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,59,3206,"The parameter 'addr' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
10786,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",480,5,3625,"Type 'char' has been used in the declaration of an object or a function.","  480:	    char the_errMsg[128]; /* エラーメッセージ */
",,,
10787,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",480,21,3132,"Hard coded 'magic' number '128' used to define the size of an array.","  480:	    char the_errMsg[128]; /* エラーメッセージ */
",,,
10788,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",483,16,2209,"This brace style is not consistent with 'exdented' style.","  483:	    switch(sig){
",,,
10789,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",485,9,3200,"sprintf' returns a value which is not being used.","  485:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGINT(%d)\n"",sig );
",,,
10790,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",485,28,3122,"Hard-coded 'magic' string literal.","  485:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGINT(%d)\n"",sig );
",,,
10791,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",486,9,3200,"fprintf' returns a value which is not being used.","  486:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
10792,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",486,31,3122,"Hard-coded 'magic' string literal.","  486:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
10793,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",489,9,3200,"sprintf' returns a value which is not being used.","  489:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGQUIT(%d)\n"",sig );
",,,
10794,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",489,28,3122,"Hard-coded 'magic' string literal.","  489:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGQUIT(%d)\n"",sig );
",,,
10795,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",490,9,3200,"fprintf' returns a value which is not being used.","  490:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
10796,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",490,31,3122,"Hard-coded 'magic' string literal.","  490:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
10797,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",493,9,3200,"sprintf' returns a value which is not being used.","  493:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGKILL(%d)\n"",sig );
",,,
10798,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",493,28,3122,"Hard-coded 'magic' string literal.","  493:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGKILL(%d)\n"",sig );
",,,
10799,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",494,9,3200,"fprintf' returns a value which is not being used.","  494:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
10800,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",494,31,3122,"Hard-coded 'magic' string literal.","  494:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
10801,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",497,9,3200,"sprintf' returns a value which is not being used.","  497:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGTERM(%d)\n"",sig );
",,,
10802,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",497,28,3122,"Hard-coded 'magic' string literal.","  497:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGTERM(%d)\n"",sig );
",,,
10803,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",498,9,3200,"fprintf' returns a value which is not being used.","  498:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
10804,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",498,31,3122,"Hard-coded 'magic' string literal.","  498:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
10805,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",501,9,3200,"sprintf' returns a value which is not being used.","  501:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGFPE(%d)\n"",sig );
",,,
10806,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",501,28,3122,"Hard-coded 'magic' string literal.","  501:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGFPE(%d)\n"",sig );
",,,
10807,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",502,9,3200,"fprintf' returns a value which is not being used.","  502:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
10808,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",502,31,3122,"Hard-coded 'magic' string literal.","  502:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
10809,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",505,9,3200,"sprintf' returns a value which is not being used.","  505:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGILL(%d)\n"",sig );
",,,
10810,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",505,28,3122,"Hard-coded 'magic' string literal.","  505:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGILL(%d)\n"",sig );
",,,
10811,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",506,9,3200,"fprintf' returns a value which is not being used.","  506:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
10812,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",506,31,3122,"Hard-coded 'magic' string literal.","  506:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
10813,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",509,9,3200,"sprintf' returns a value which is not being used.","  509:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGBUS(%d)\n"",sig );
",,,
10814,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",509,28,3122,"Hard-coded 'magic' string literal.","  509:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGBUS(%d)\n"",sig );
",,,
10815,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",510,9,3200,"fprintf' returns a value which is not being used.","  510:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
10816,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",510,31,3122,"Hard-coded 'magic' string literal.","  510:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
10817,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",513,9,3200,"sprintf' returns a value which is not being used.","  513:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSEGV(%d)\n"",sig );
",,,
10818,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",513,28,3122,"Hard-coded 'magic' string literal.","  513:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSEGV(%d)\n"",sig );
",,,
10819,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",514,9,3200,"fprintf' returns a value which is not being used.","  514:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
10820,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",514,31,3122,"Hard-coded 'magic' string literal.","  514:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
10821,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",517,9,3200,"sprintf' returns a value which is not being used.","  517:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSYS(%d)\n"",sig );
",,,
10822,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",517,28,3122,"Hard-coded 'magic' string literal.","  517:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSYS(%d)\n"",sig );
",,,
10823,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",518,9,3200,"fprintf' returns a value which is not being used.","  518:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
10824,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",518,31,3122,"Hard-coded 'magic' string literal.","  518:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
10825,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",521,9,3200,"sprintf' returns a value which is not being used.","  521:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=%d\n"",sig );
",,,
10826,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",521,28,3122,"Hard-coded 'magic' string literal.","  521:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=%d\n"",sig );
",,,
10827,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",522,9,3200,"fprintf' returns a value which is not being used.","  522:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
10828,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",522,31,3122,"Hard-coded 'magic' string literal.","  522:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
10829,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",532,16,2209,"This brace style is not consistent with 'exdented' style.","  532:	    switch(sig){
",,,
10830,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",538,10,2003,"The preceding non-empty 'case' or 'default' clause does not end with an explicit 'break' or 'return' statement.","  538:	    case SIGFPE :
",,,
10831,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",545,5,2002,"No 'default' case found in this 'switch' statement.","  545:	    }
",,,
10832,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",592,2,2017,"Comment spans more than one line.","  592:	*/
",,,
10833,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",594,1,3007,"""void"" has been omitted when defining a function with no parameters.","  594:	{
",,,
10834,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,5,428,"Function identifier is not followed by () but a function call may be intended.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
10835,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,5,3200,"signal' returns a value which is not being used.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
10836,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,23,432,"[C] Argument is not a compatible pointer type.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
10837,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,24,307,"[u] Cast between a pointer to object and a pointer to function.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
10838,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,5,428,"Function identifier is not followed by () but a function call may be intended.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
10839,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,5,3200,"signal' returns a value which is not being used.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
10840,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,23,432,"[C] Argument is not a compatible pointer type.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
10841,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,24,307,"[u] Cast between a pointer to object and a pointer to function.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
10842,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,5,428,"Function identifier is not followed by () but a function call may be intended.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
10843,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,5,3200,"signal' returns a value which is not being used.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
10844,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,23,432,"[C] Argument is not a compatible pointer type.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
10845,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,24,307,"[u] Cast between a pointer to object and a pointer to function.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
10846,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,5,428,"Function identifier is not followed by () but a function call may be intended.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
10847,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,5,3200,"signal' returns a value which is not being used.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
10848,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,23,432,"[C] Argument is not a compatible pointer type.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
10849,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,24,307,"[u] Cast between a pointer to object and a pointer to function.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
10850,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,5,428,"Function identifier is not followed by () but a function call may be intended.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
10851,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,5,3200,"signal' returns a value which is not being used.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
10852,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,22,432,"[C] Argument is not a compatible pointer type.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
10853,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,23,307,"[u] Cast between a pointer to object and a pointer to function.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
10854,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,5,428,"Function identifier is not followed by () but a function call may be intended.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
10855,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,5,3200,"signal' returns a value which is not being used.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
10856,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,23,432,"[C] Argument is not a compatible pointer type.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
10857,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,24,307,"[u] Cast between a pointer to object and a pointer to function.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
10858,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,5,428,"Function identifier is not followed by () but a function call may be intended.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
10859,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,5,3200,"signal' returns a value which is not being used.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
10860,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,23,432,"[C] Argument is not a compatible pointer type.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
10861,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,24,307,"[u] Cast between a pointer to object and a pointer to function.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
10862,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,5,428,"Function identifier is not followed by () but a function call may be intended.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
10863,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,5,3200,"signal' returns a value which is not being used.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
10864,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,23,432,"[C] Argument is not a compatible pointer type.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
10865,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,24,307,"[u] Cast between a pointer to object and a pointer to function.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
10866,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,5,428,"Function identifier is not followed by () but a function call may be intended.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
10867,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,5,3200,"signal' returns a value which is not being used.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
10868,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,23,432,"[C] Argument is not a compatible pointer type.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
10869,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,24,307,"[u] Cast between a pointer to object and a pointer to function.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
10870,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",622,2,2017,"Comment spans more than one line.","  622:	*/
",,,
10871,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",623,20,3625,"Type 'char' has been used in the declaration of an object or a function.","  623:	int ResetTrendPath(char *io_pPath)
",,,
10872,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",623,26,344,"K&amp;R compilers do not support function prototypes.","  623:	int ResetTrendPath(char *io_pPath)
",,,
10873,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",623,26,3227,"The parameter 'io_pPath' is never modified and so it could be declared with the 'const' qualifier.","  623:	int ResetTrendPath(char *io_pPath)
",,,
10874,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",625,9,2201,"This indentation is not consistent with previous indentation in this file.","  625:	        char the_szFullPath[MAX_PATH];
",,,
10875,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",625,9,3625,"Type 'char' has been used in the declaration of an object or a function.","  625:	        char the_szFullPath[MAX_PATH];
",,,
10876,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",626,9,2201,"This indentation is not consistent with previous indentation in this file.","  626:	        char the_szCurPath[MAX_PATH];
",,,
10877,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",626,9,3625,"Type 'char' has been used in the declaration of an object or a function.","  626:	        char the_szCurPath[MAX_PATH];
",,,
10878,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",627,9,2201,"This indentation is not consistent with previous indentation in this file.","  627:	        int the_iRet = ANZ_SUCCESS;
",,,
10879,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",627,13,2211,"the_iRet' is not aligned with the previously declared identifier.","  627:	        int the_iRet = ANZ_SUCCESS;
",,,
10880,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,9,2201,"This indentation is not consistent with previous indentation in this file.","  630:	        if(io_pPath[0] != '/') {
",,,
10881,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,20,506,"Dereferencing pointer value that is possibly NULL.","  630:	        if(io_pPath[0] != '/') {
",,,
10882,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,24,2106,"Integral promotion : plain char promoted to signed int.","  630:	        if(io_pPath[0] != '/') {
",,,
10883,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,27,3123,"Hard coded 'magic' character constant '/'.","  630:	        if(io_pPath[0] != '/') {
",,,
10884,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,32,2209,"This brace style is not consistent with 'exdented' style.","  630:	        if(io_pPath[0] != '/') {
",,,
10885,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",631,16,3416,"This boolean expression contains side effects.","  631:	            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {
",,,
10886,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",631,56,2209,"This brace style is not consistent with 'exdented' style.","  631:	            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {
",,,
10887,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",633,26,2001,"A 'goto' statement has been used.","  633:	                goto EXIT;
",,,
10888,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,306,"[I] Cast between a pointer to object and an integral type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10889,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,310,"Casting to different object pointer type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10890,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10891,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,489,"Increment or decrement operation performed on pointer.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10892,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,506,"Dereferencing pointer value that is possibly NULL.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10893,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,510,"Arithmetic operation on pointer value that is possibly NULL.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10894,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__result' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10895,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s1' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10896,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10897,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s2' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10898,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10899,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10900,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10901,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1251,"Suffixed integer constant causes implicit conversion of other operand.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10902,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1253,"Unsuffixed integer constant implicitly converted to another type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10903,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1302,"__builtin_constant_p()' must be declared before use in C++.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10904,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1302,"__builtin_strcmp()' must be declared before use in C++.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10905,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,2100,"Integral promotion : unsigned char promoted to signed int.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10906,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10907,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3112,"This statement has no side-effect - it can be removed.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10908,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3122,"Hard-coded 'magic' string literal.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10909,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3200,"__builtin_strcmp' returns a value which is not being used.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10910,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10911,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10912,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10913,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10914,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10915,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10916,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10917,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10918,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10919,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3326,"An assignment operator is being used in a boolean expression.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10920,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3346,"This 'if' control expression has a constant 'true' value.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10921,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10922,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10923,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10924,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10925,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10926,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10927,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10928,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10929,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10930,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10931,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10932,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10933,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10934,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10935,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10936,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10937,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10938,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10939,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10940,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10941,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10942,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3401,"Possible precedence confusion: extra parentheses are recommended here.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10943,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10944,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3416,"This boolean expression contains side effects.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10945,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3417,"The comma operator has been used outside a for-loop header.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10946,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3446,"The result operands of this conditional operator generate side effects","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10947,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3631,"Type 'char' has been used in a cast.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10948,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3760,"Implicit conversion: int to unsigned int.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10949,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10950,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10951,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,36,1251,"Suffixed integer constant causes implicit conversion of other operand.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10952,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,42,2209,"This brace style is not consistent with 'exdented' style.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
10953,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",636,17,3200,"sprintf' returns a value which is not being used.","  636:	                sprintf(the_szFullPath,""%s/%s"",the_szCurPath,io_pPath);
",,,
10954,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",636,40,3122,"Hard-coded 'magic' string literal.","  636:	                sprintf(the_szFullPath,""%s/%s"",the_szCurPath,io_pPath);
",,,
10955,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",639,9,2201,"This indentation is not consistent with previous indentation in this file.","  639:	        else {
",,,
10956,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",639,14,2209,"This brace style is not consistent with 'exdented' style.","  639:	        else {
",,,
10957,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",640,22,2001,"A 'goto' statement has been used.","  640:	            goto EXIT;
",,,
10958,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",658,9,2201,"This indentation is not consistent with previous indentation in this file.","  658:	        strcpy(io_pPath,the_szFullPath);
",,,
10959,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",658,9,3200,"strcpy' returns a value which is not being used.","  658:	        strcpy(io_pPath,the_szFullPath);
",,,
10960,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",659,1,2015,"This label is not a case or default label for a switch statement.","  659:	EXIT:
",,,
10961,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",659,1,2201,"This indentation is not consistent with previous indentation in this file.","  659:	EXIT:
",,,
10962,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",660,9,2201,"This indentation is not consistent with previous indentation in this file.","  660:	        return the_iRet;
",,,
10963,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",1,1,240,"[E] This file contains the control-M character at the end of a line.","    1:	/*
",,,
10964,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",9,16,288,"[I] Source file '/home/www/TOSCANA_dev/BackEnd/AnalyzeTaskManager/work/1/work/sample_c_cpp/sample_c/src/analyzeme.c' has comments containing characters which are not members of the basic source character set.","    9:	      AnalyzeMeのメイン関数を定義する
",,,
10965,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",16,2,2017,"Comment spans more than one line.","   16:	*/
",,,
10966,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",20,2,2017,"Comment spans more than one line.","   20:	*/
",,,
10967,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",21,1,838,"File has already been included directly from this file.","   21:	#include ""analyzeme.h""
",,,
10968,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",21,1,839,"File has already been included indirectly from this file.","   21:	#include ""analyzeme.h""
",,,
10969,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",21,23,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   21:	#include ""analyzeme.h""
",,,
10970,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",22,1,839,"File has already been included indirectly from this file.","   22:	#include ""common.h""
",,,
10971,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",23,1,839,"File has already been included indirectly from this file.","   23:	#include ""memory_manage.h""
",,,
10972,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",23,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   23:	#include ""memory_manage.h""
",,,
10973,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",24,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   24:	#include ""parse_cmdline.h""
",,,
10974,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",25,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   25:	#include ""common_measure.h""
",,,
10975,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",26,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   26:	#include ""trend_measure.h""
",,,
10976,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",27,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   27:	#include ""make_file_list.h""
",,,
10977,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",29,31,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   29:	#include ""get_process_macro.h""
",,,
10978,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",30,1,839,"File has already been included indirectly from this file.","   30:	#include &lt;signal.h&gt;
",,,
10979,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",35,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
10980,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",35,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
10981,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",35,13,3211,"The global identifier 'TRACEFILE' is defined but not used.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
10982,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",35,13,3408,"TRACEFILE' has external linkage but is being defined without any previous declaration.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
10983,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",36,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
10984,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",36,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
10985,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",36,13,3408,"APPLOGFILE' has external linkage but is being defined without any previous declaration.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
10986,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",44,7,3408,"g_fpLogFile' has external linkage but is being defined without any previous declaration.","   44:	FILE *g_fpLogFile = NULL;       /* Log File pointer */
",,,
10987,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",46,7,3211,"The global identifier 'g_fpTraceFile' is defined but not used.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
10988,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",46,7,3408,"g_fpTraceFile' has external linkage but is being defined without any previous declaration.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
10989,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",48,7,3408,"g_fpErrorFile' has external linkage but is being defined without any previous declaration.","   48:	FILE *g_fpErrorFile = NULL;
",,,
10990,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",50,6,3408,"g_bTrace' has external linkage but is being defined without any previous declaration.","   50:	bool g_bTrace           = false;    /* Trace flag */
",,,
10991,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",51,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
10992,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",51,6,3408,"g_szNVPath' has external linkage but is being defined without any previous declaration.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
10993,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",51,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
10994,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",52,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
10995,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",52,6,3408,"g_szOVPath' has external linkage but is being defined without any previous declaration.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
10996,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",52,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
10997,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",53,6,3408,"g_bTrendFile' has external linkage but is being defined without any previous declaration.","   53:	bool g_bTrendFile = false;
",,,
10998,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",55,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   55:	char *g_optionFileCont = NULL;
",,,
10999,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",55,7,3211,"The global identifier 'g_optionFileCont' is defined but not used.","   55:	char *g_optionFileCont = NULL;
",,,
11000,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",55,7,3408,"g_optionFileCont' has external linkage but is being defined without any previous declaration.","   55:	char *g_optionFileCont = NULL;
",,,
11001,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",57,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   57:	char *g_symbolFileCont = NULL;
",,,
11002,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",57,7,3211,"The global identifier 'g_symbolFileCont' is defined but not used.","   57:	char *g_symbolFileCont = NULL;
",,,
11003,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",57,7,3408,"g_symbolFileCont' has external linkage but is being defined without any previous declaration.","   57:	char *g_symbolFileCont = NULL;
",,,
11004,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",58,6,3408,"g_bOutTime' has external linkage but is being defined without any previous declaration.","   58:	bool g_bOutTime = false;
",,,
11005,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",59,15,3408,"g_pAnzInfo' has external linkage but is being defined without any previous declaration.","   59:	ST_AnalyzeMe *g_pAnzInfo;  /* AnalyzeMe管理情報 */
",,,
11006,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",69,2,2017,"Comment spans more than one line.","   69:	*/
",,,
11007,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",70,14,3227,"The parameter 'argc' is never modified and so it could be declared with the 'const' qualifier.","   70:	int main(int argc,char * argv[])
",,,
11008,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",70,19,3625,"Type 'char' has been used in the declaration of an object or a function.","   70:	int main(int argc,char * argv[])
",,,
11009,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",70,26,344,"K&amp;R compilers do not support function prototypes.","   70:	int main(int argc,char * argv[])
",,,
11010,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",75,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
11011,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",75,28,2211,"the_pMeasureItem' is not aligned with the previously declared identifier.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
11012,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",76,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
11013,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",76,10,2211,"the_szCurMetrics' is not aligned with the previously declared identifier.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
11014,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",76,10,3604,"Local arrays and structures cannot be initialised in K&amp;R C.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
11015,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",76,44,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
11016,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",80,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   80:	    char *the_pTrace = NULL;
",,,
11017,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",80,11,2211,"the_pTrace' is not aligned with the previously declared identifier.","   80:	    char *the_pTrace = NULL;
",,,
11018,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",80,11,3197,"The initialiser for 'the_pTrace' is always modified before being used.","   80:	    char *the_pTrace = NULL;
",,,
11019,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",81,25,2211,"the_st' is not aligned with the previously declared identifier.","   81:	    struct timeb the_st ;
",,,
11020,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",89,5,3198,"The value assigned to 'the_pAnzInfo' is always modified before being used.","   89:	    the_pAnzInfo = NULL;
",,,
11021,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",91,5,3198,"The value assigned to 'the_iRet' is always modified before being used.","   91:	    the_iRet = ANZ_SUCCESS;
",,,
11022,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",101,25,3122,"Hard-coded 'magic' string literal.","  101:	    the_pTrace = getenv(""AnzTrace"");
",,,
11023,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",102,28,2209,"This brace style is not consistent with 'exdented' style.","  102:	    if(the_pTrace != NULL) {
",,,
11024,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,306,"[I] Cast between a pointer to object and an integral type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11025,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,310,"Casting to different object pointer type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11026,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11027,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,489,"Increment or decrement operation performed on pointer.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11028,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__result' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11029,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11030,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11031,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11032,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11033,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11034,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11035,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11036,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11037,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11038,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11039,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,2100,"Integral promotion : unsigned char promoted to signed int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11040,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11041,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3112,"This statement has no side-effect - it can be removed.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11042,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3122,"Hard-coded 'magic' string literal.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11043,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3200,"__builtin_strcmp' returns a value which is not being used.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11044,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11045,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11046,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11047,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11048,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11049,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11050,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11051,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11052,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11053,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3325,"This control expression has a constant 'false' value.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11054,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3326,"An assignment operator is being used in a boolean expression.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11055,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11056,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11057,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11058,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11059,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11060,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11061,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11062,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11063,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11064,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11065,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11066,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11067,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11068,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11069,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11070,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11071,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11072,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11073,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11074,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11075,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11076,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11077,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11078,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3416,"This boolean expression contains side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11079,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3417,"The comma operator has been used outside a for-loop header.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11080,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3446,"The result operands of this conditional operator generate side effects","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11081,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3631,"Type 'char' has been used in a cast.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11082,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3760,"Implicit conversion: int to unsigned int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11083,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,35,3209,"__builtin_strcmp()' returns a value which is always ignored.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11084,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11085,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11086,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,36,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11087,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,43,2209,"This brace style is not consistent with 'exdented' style.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11088,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,43,3201,"This statement is unreachable.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
11089,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",113,6,2017,"Comment spans more than one line.","  113:	    */
",,,
11090,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",114,36,3122,"Hard-coded 'magic' string literal.","  114:	    g_fpLogFile = fopen(APPLOGFILE,""w"");
",,,
11091,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",115,28,2209,"This brace style is not consistent with 'exdented' style.","  115:	    if(g_fpLogFile == NULL){
",,,
11092,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",116,9,3200,"printf' returns a value which is not being used.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
11093,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",116,16,3122,"Hard-coded 'magic' string literal.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
11094,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",120,5,702,"Result of sizeof operator is not explicitly cast.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
11095,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",120,63,3430,"Macro argument expression requires parentheses.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
11096,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",121,29,2209,"This brace style is not consistent with 'exdented' style.","  121:	    if(the_pAnzInfo == NULL){
",,,
11097,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",122,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  122:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
11098,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",123,18,2001,"A 'goto' statement has been used.","  123:	        goto EXIT;
",,,
11099,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",125,5,702,"Result of sizeof operator is not explicitly cast.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
11100,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",125,5,3200,"memset' returns a value which is not being used.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
11101,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",128,5,702,"Result of sizeof operator is not explicitly cast.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
11102,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",128,67,3430,"Macro argument expression requires parentheses.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
11103,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",129,39,2209,"This brace style is not consistent with 'exdented' style.","  129:	    if(the_pAnzInfo-&gt;m_option == NULL){
",,,
11104,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",130,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  130:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
11105,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",131,18,2001,"A 'goto' statement has been used.","  131:	        goto EXIT;
",,,
11106,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",133,5,702,"Result of sizeof operator is not explicitly cast.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
11107,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",133,5,3200,"memset' returns a value which is not being used.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
11108,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",137,5,702,"Result of sizeof operator is not explicitly cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
11109,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",137,5,3631,"Type 'char' has been used in a cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
11110,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",137,5,3633,"Type 'char' has been used in the operand of the sizeof operator.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
11111,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",137,5,3760,"Implicit conversion: int to unsigned int.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
11112,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",138,34,2209,"This brace style is not consistent with 'exdented' style.","  138:	    if(the_pMeasureItem == NULL) {
",,,
11113,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",139,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  139:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
11114,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",140,18,2001,"A 'goto' statement has been used.","  140:	        goto EXIT;
",,,
11115,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",142,5,702,"Result of sizeof operator is not explicitly cast.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
11116,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",142,5,3200,"memset' returns a value which is not being used.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
11117,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",142,36,3760,"Implicit conversion: int to unsigned int.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
11118,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",142,45,3633,"Type 'char' has been used in the operand of the sizeof operator.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
11119,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",150,5,3200,"strcpy' returns a value which is not being used.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
11120,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",150,34,3122,"Hard-coded 'magic' string literal.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
11121,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",154,5,3200,"strcpy' returns a value which is not being used.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
11122,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",154,39,3122,"Hard-coded 'magic' string literal.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
11123,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",155,5,3200,"strcpy' returns a value which is not being used.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
11124,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",155,38,3122,"Hard-coded 'magic' string literal.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
11125,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",156,5,3200,"strcpy' returns a value which is not being used.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
11126,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",156,38,3122,"Hard-coded 'magic' string literal.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
11127,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",165,32,3120,"Hard-coded 'magic' integer constant '70'.","  165:	    the_pOption-&gt;m_symThresh = 70;
",,,
11128,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",166,32,3120,"Hard-coded 'magic' integer constant '2'.","  166:	    the_pOption-&gt;m_minThresh = 2;
",,,
11129,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",169,5,702,"Result of sizeof operator is not explicitly cast.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
11130,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",169,59,3430,"Macro argument expression requires parentheses.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
11131,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",170,31,2209,"This brace style is not consistent with 'exdented' style.","  170:	    if(the_pCmdOption == NULL){
",,,
11132,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",171,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  171:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
11133,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",172,18,2001,"A 'goto' statement has been used.","  172:	        goto EXIT;
",,,
11134,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",174,5,702,"Result of sizeof operator is not explicitly cast.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
11135,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",174,5,3200,"memset' returns a value which is not being used.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
11136,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",180,5,3200,"strcpy' returns a value which is not being used.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
11137,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",180,37,3122,"Hard-coded 'magic' string literal.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
11138,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",184,5,3200,"strcpy' returns a value which is not being used.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
11139,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",184,42,3122,"Hard-coded 'magic' string literal.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
11140,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",185,5,3200,"strcpy' returns a value which is not being used.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
11141,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",185,41,3122,"Hard-coded 'magic' string literal.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
11142,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",186,5,3200,"strcpy' returns a value which is not being used.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
11143,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",186,41,3122,"Hard-coded 'magic' string literal.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
11144,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",195,35,3120,"Hard-coded 'magic' integer constant '70'.","  195:	    the_pCmdOption-&gt;m_symThresh = 70;
",,,
11145,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",196,35,3120,"Hard-coded 'magic' integer constant '2'.","  196:	    the_pCmdOption-&gt;m_minThresh = 2;
",,,
11146,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",200,32,2209,"This brace style is not consistent with 'exdented' style.","  200:	    if(the_iRet != ANZ_SUCCESS){
",,,
11147,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",201,18,2001,"A 'goto' statement has been used.","  201:	        goto EXIT;
",,,
11148,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",203,8,3344,"Value of control expression is not derived from an explicit logical operation.","  203:	    if(g_bOutTime) {
",,,
11149,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",203,20,2209,"This brace style is not consistent with 'exdented' style.","  203:	    if(g_bOutTime) {
",,,
11150,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",204,9,3200,"ftime' returns a value which is not being used.","  204:	        ftime(&amp;the_st);
",,,
11151,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",209,32,2209,"This brace style is not consistent with 'exdented' style.","  209:	    if(the_iRet != ANZ_SUCCESS){
",,,
11152,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",210,18,2001,"A 'goto' statement has been used.","  210:	        goto EXIT;
",,,
11153,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",214,32,2209,"This brace style is not consistent with 'exdented' style.","  214:	    if(the_iRet != ANZ_SUCCESS){
",,,
11154,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",215,18,2001,"A 'goto' statement has been used.","  215:	        goto EXIT;
",,,
11155,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",218,23,3355,"The result of this logical operation is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
11156,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",218,23,3358,"The value of this 'if' control expression is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
11157,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",218,31,2209,"This brace style is not consistent with 'exdented' style.","  218:	    if(the_pCmdOption != NULL){
",,,
11158,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",224,32,2209,"This brace style is not consistent with 'exdented' style.","  224:	    if(the_iRet != ANZ_SUCCESS){
",,,
11159,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",225,18,2001,"A 'goto' statement has been used.","  225:	        goto EXIT;
",,,
11160,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",229,32,2209,"This brace style is not consistent with 'exdented' style.","  229:	    if(the_iRet != ANZ_SUCCESS){
",,,
11161,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",230,18,2001,"A 'goto' statement has been used.","  230:	        goto EXIT;
",,,
11162,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",233,47,2209,"This brace style is not consistent with 'exdented' style.","  233:	    if(the_iMeasureType == ANZ_TREND_MEASURE) {
",,,
11163,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",234,13,3220,"Identifier declared at a nested level of block scope.","  234:	        int the_iType = -1;
",,,
11164,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",235,13,3220,"Identifier declared at a nested level of block scope.","  235:	        int the_pPos = -1;
",,,
11165,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",236,9,3200,"isDirOrFile' returns a value which is not being used.","  236:	        isDirOrFile(*the_pMeasureItem,&amp;the_iType);
",,,
11166,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",237,35,2209,"This brace style is not consistent with 'exdented' style.","  237:	        if(the_iType == ANZ_FILE) {
",,,
11167,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",242,30,2209,"This brace style is not consistent with 'exdented' style.","  242:	            if(the_pPos &gt; 0) {
",,,
11168,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",243,55,488,"Performing pointer arithmetic.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
11169,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",243,66,489,"Increment or decrement operation performed on pointer.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
11170,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",246,43,489,"Increment or decrement operation performed on pointer.","  246:	            GetPathPos(*(the_pMeasureItem + 1),&amp;the_pPos);
",,,
11171,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",248,30,2209,"This brace style is not consistent with 'exdented' style.","  248:	            if(the_pPos &gt; 0) {
",,,
11172,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,36,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
11173,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,42,3501,"This could be read as an old-style assignment operator. Spaces are needed to make it more readable.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
11174,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,61,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
11175,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,66,488,"Performing pointer arithmetic.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
11176,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,77,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
11177,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",252,13,3198,"The value assigned to 'the_iRet' is always modified before being used.","  252:	            the_iRet = ResetTrendPath(g_szNVPath);
",,,
11178,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",254,41,2209,"This brace style is not consistent with 'exdented' style.","  254:	            if(the_iRet != ANZ_SUCCESS) {
",,,
11179,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",255,26,2001,"A 'goto' statement has been used.","  255:	                goto EXIT;
",,,
11180,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",260,51,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
11181,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",260,57,3631,"Type 'char' has been used in a cast.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
11182,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",261,41,2209,"This brace style is not consistent with 'exdented' style.","  261:	    if(the_iRet == ANZ_NO_MEASURE_FILES){
",,,
11183,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",262,9,3200,"printf' returns a value which is not being used.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
11184,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",262,16,3122,"Hard-coded 'magic' string literal.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
11185,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",264,42,2209,"This brace style is not consistent with 'exdented' style.","  264:	    if(the_iRet == ANZ_ERR_MEMORY_FAILED){
",,,
11186,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",265,9,3200,"printf' returns a value which is not being used.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
11187,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",265,16,3122,"Hard-coded 'magic' string literal.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
11188,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",267,32,2209,"This brace style is not consistent with 'exdented' style.","  267:	    if(the_iRet != ANZ_SUCCESS){
",,,
11189,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",268,18,2001,"A 'goto' statement has been used.","  268:	        goto EXIT;
",,,
11190,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",272,37,2209,"This brace style is not consistent with 'exdented' style.","  272:	    if(the_pOption-&gt;m_fileLOC == ON){
",,,
11191,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",273,9,3200,"strcat' returns a value which is not being used.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
11192,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",273,33,3122,"Hard-coded 'magic' string literal.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
11193,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",276,40,2209,"This brace style is not consistent with 'exdented' style.","  276:	    if(the_pOption-&gt;m_redundancy == ON){
",,,
11194,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,306,"[I] Cast between a pointer to object and an integral type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11195,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,310,"Casting to different object pointer type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11196,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11197,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,489,"Increment or decrement operation performed on pointer.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11198,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__result' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11199,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11200,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11201,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11202,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11203,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11204,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11205,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11206,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11207,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11208,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11209,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,2100,"Integral promotion : unsigned char promoted to signed int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11210,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11211,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3112,"This statement has no side-effect - it can be removed.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11212,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3122,"Hard-coded 'magic' string literal.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11213,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3200,"__builtin_strcmp' returns a value which is not being used.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11214,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11215,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11216,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11217,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11218,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11219,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11220,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11221,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11222,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11223,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3326,"An assignment operator is being used in a boolean expression.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11224,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3346,"This 'if' control expression has a constant 'true' value.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11225,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11226,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11227,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11228,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11229,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11230,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11231,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11232,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11233,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11234,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11235,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11236,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11237,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11238,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11239,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11240,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11241,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11242,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11243,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11244,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11245,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11246,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11247,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11248,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3416,"This boolean expression contains side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11249,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3417,"The comma operator has been used outside a for-loop header.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11250,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3446,"The result operands of this conditional operator generate side effects","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11251,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3631,"Type 'char' has been used in a cast.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11252,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3760,"Implicit conversion: int to unsigned int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11253,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11254,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11255,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11256,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,45,2209,"This brace style is not consistent with 'exdented' style.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11257,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",278,13,3200,"strcat' returns a value which is not being used.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
11258,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",278,37,3122,"Hard-coded 'magic' string literal.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
11259,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",278,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
11260,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",279,13,3200,"strcat' returns a value which is not being used.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
11261,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",279,37,3122,"Hard-coded 'magic' string literal.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
11262,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",279,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
11263,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",281,13,2209,"This brace style is not consistent with 'exdented' style.","  281:	        else{
",,,
11264,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",281,13,3201,"This statement is unreachable.","  281:	        else{
",,,
11265,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",282,13,3200,"strcat' returns a value which is not being used.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
11266,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",282,37,3122,"Hard-coded 'magic' string literal.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
11267,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",282,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
11268,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",286,8,3344,"Value of control expression is not derived from an explicit logical operation.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
11269,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",286,31,2209,"This brace style is not consistent with 'exdented' style.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
11270,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,306,"[I] Cast between a pointer to object and an integral type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11271,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,310,"Casting to different object pointer type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11272,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11273,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,489,"Increment or decrement operation performed on pointer.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11274,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__result' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11275,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11276,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11277,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11278,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11279,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11280,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11281,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11282,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11283,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11284,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11285,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,2100,"Integral promotion : unsigned char promoted to signed int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11286,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11287,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3112,"This statement has no side-effect - it can be removed.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11288,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3122,"Hard-coded 'magic' string literal.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11289,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3200,"__builtin_strcmp' returns a value which is not being used.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11290,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11291,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11292,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11293,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11294,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11295,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11296,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11297,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11298,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11299,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3326,"An assignment operator is being used in a boolean expression.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11300,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3346,"This 'if' control expression has a constant 'true' value.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11301,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11302,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11303,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11304,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11305,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11306,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11307,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11308,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11309,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11310,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11311,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11312,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11313,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11314,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11315,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11316,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11317,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11318,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11319,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11320,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11321,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11322,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11323,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11324,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3416,"This boolean expression contains side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11325,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3417,"The comma operator has been used outside a for-loop header.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11326,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3446,"The result operands of this conditional operator generate side effects","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11327,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3631,"Type 'char' has been used in a cast.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11328,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3760,"Implicit conversion: int to unsigned int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11329,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11330,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11331,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11332,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,45,2209,"This brace style is not consistent with 'exdented' style.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11333,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",288,13,3200,"strcat' returns a value which is not being used.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
11334,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",288,37,3122,"Hard-coded 'magic' string literal.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
11335,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",288,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
11336,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",289,13,3200,"strcat' returns a value which is not being used.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
11337,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",289,37,3122,"Hard-coded 'magic' string literal.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
11338,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",289,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
11339,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",291,13,2209,"This brace style is not consistent with 'exdented' style.","  291:	        else{
",,,
11340,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",291,13,3201,"This statement is unreachable.","  291:	        else{
",,,
11341,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",292,13,3200,"strcat' returns a value which is not being used.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
11342,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",292,37,3122,"Hard-coded 'magic' string literal.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
11343,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",292,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
11344,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",296,8,3344,"Value of control expression is not derived from an explicit logical operation.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
11345,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",296,28,2209,"This brace style is not consistent with 'exdented' style.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
11346,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,306,"[I] Cast between a pointer to object and an integral type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11347,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,310,"Casting to different object pointer type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11348,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11349,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,489,"Increment or decrement operation performed on pointer.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11350,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__result' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11351,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11352,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11353,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11354,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11355,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11356,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11357,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11358,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11359,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11360,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11361,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,2100,"Integral promotion : unsigned char promoted to signed int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11362,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11363,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3112,"This statement has no side-effect - it can be removed.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11364,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3122,"Hard-coded 'magic' string literal.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11365,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3200,"__builtin_strcmp' returns a value which is not being used.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11366,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11367,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11368,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11369,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11370,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11371,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11372,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11373,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11374,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11375,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3326,"An assignment operator is being used in a boolean expression.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11376,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3346,"This 'if' control expression has a constant 'true' value.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11377,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11378,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11379,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11380,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11381,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11382,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11383,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11384,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11385,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11386,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11387,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11388,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11389,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11390,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11391,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11392,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11393,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11394,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11395,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11396,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11397,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11398,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11399,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11400,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3416,"This boolean expression contains side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11401,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3417,"The comma operator has been used outside a for-loop header.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11402,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3446,"The result operands of this conditional operator generate side effects","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11403,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3631,"Type 'char' has been used in a cast.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11404,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3760,"Implicit conversion: int to unsigned int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11405,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11406,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11407,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11408,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,45,2209,"This brace style is not consistent with 'exdented' style.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11409,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",298,13,3200,"strcat' returns a value which is not being used.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
11410,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",298,37,3122,"Hard-coded 'magic' string literal.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
11411,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",298,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
11412,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",299,13,3200,"strcat' returns a value which is not being used.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
11413,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",299,37,3122,"Hard-coded 'magic' string literal.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
11414,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",299,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
11415,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",301,13,2209,"This brace style is not consistent with 'exdented' style.","  301:	        else{
",,,
11416,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",301,13,3201,"This statement is unreachable.","  301:	        else{
",,,
11417,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",302,13,3200,"strcat' returns a value which is not being used.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
11418,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",302,37,3122,"Hard-coded 'magic' string literal.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
11419,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",302,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
11420,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,306,"[I] Cast between a pointer to object and an integral type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11421,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,310,"Casting to different object pointer type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11422,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11423,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,489,"Increment or decrement operation performed on pointer.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11424,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__result' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11425,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11426,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11427,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11428,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11429,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11430,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11431,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11432,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11433,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11434,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11435,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,2100,"Integral promotion : unsigned char promoted to signed int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11436,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11437,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3112,"This statement has no side-effect - it can be removed.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11438,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3122,"Hard-coded 'magic' string literal.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11439,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3200,"__builtin_strcmp' returns a value which is not being used.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11440,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11441,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11442,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11443,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11444,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11445,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11446,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11447,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11448,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11449,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3326,"An assignment operator is being used in a boolean expression.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11450,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3346,"This 'if' control expression has a constant 'true' value.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11451,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11452,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11453,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11454,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11455,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11456,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11457,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11458,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11459,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11460,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11461,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11462,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11463,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11464,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11465,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11466,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11467,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11468,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11469,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11470,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11471,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11472,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11473,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11474,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3416,"This boolean expression contains side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11475,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3417,"The comma operator has been used outside a for-loop header.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11476,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3446,"The result operands of this conditional operator generate side effects","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11477,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3631,"Type 'char' has been used in a cast.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11478,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3760,"Implicit conversion: int to unsigned int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11479,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11480,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11481,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11482,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,45,2209,"This brace style is not consistent with 'exdented' style.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11483,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",305,13,3200,"strcat' returns a value which is not being used.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
11484,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",305,37,3122,"Hard-coded 'magic' string literal.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
11485,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",305,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
11486,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",306,13,3200,"strcat' returns a value which is not being used.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
11487,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",306,37,3122,"Hard-coded 'magic' string literal.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
11488,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",308,13,2209,"This brace style is not consistent with 'exdented' style.","  308:	        else{
",,,
11489,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",308,13,3201,"This statement is unreachable.","  308:	        else{
",,,
11490,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",309,13,3200,"strcat' returns a value which is not being used.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
11491,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",309,37,3122,"Hard-coded 'magic' string literal.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
11492,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",314,8,3344,"Value of control expression is not derived from an explicit logical operation.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
11493,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",314,34,2209,"This brace style is not consistent with 'exdented' style.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
11494,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,306,"[I] Cast between a pointer to object and an integral type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11495,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,310,"Casting to different object pointer type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11496,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11497,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,489,"Increment or decrement operation performed on pointer.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11498,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__result' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11499,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11500,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11501,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11502,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11503,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11504,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11505,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11506,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11507,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11508,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11509,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,2100,"Integral promotion : unsigned char promoted to signed int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11510,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11511,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3112,"This statement has no side-effect - it can be removed.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11512,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3122,"Hard-coded 'magic' string literal.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11513,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3200,"__builtin_strcmp' returns a value which is not being used.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11514,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11515,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11516,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11517,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11518,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11519,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11520,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11521,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11522,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11523,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3326,"An assignment operator is being used in a boolean expression.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11524,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3346,"This 'if' control expression has a constant 'true' value.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11525,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11526,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11527,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11528,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11529,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11530,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11531,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11532,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11533,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11534,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11535,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11536,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11537,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11538,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11539,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11540,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11541,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11542,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11543,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11544,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11545,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11546,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11547,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11548,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3416,"This boolean expression contains side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11549,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3417,"The comma operator has been used outside a for-loop header.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11550,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3446,"The result operands of this conditional operator generate side effects","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11551,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3631,"Type 'char' has been used in a cast.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11552,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3760,"Implicit conversion: int to unsigned int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11553,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11554,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11555,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11556,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,45,2209,"This brace style is not consistent with 'exdented' style.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11557,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",316,13,3200,"strcat' returns a value which is not being used.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
11558,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",316,37,3122,"Hard-coded 'magic' string literal.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
11559,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",316,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
11560,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",317,13,3200,"strcat' returns a value which is not being used.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
11561,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",317,37,3122,"Hard-coded 'magic' string literal.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
11562,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",317,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
11563,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",319,13,2209,"This brace style is not consistent with 'exdented' style.","  319:	        else{
",,,
11564,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",319,13,3201,"This statement is unreachable.","  319:	        else{
",,,
11565,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",320,13,3200,"strcat' returns a value which is not being used.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
11566,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",320,37,3122,"Hard-coded 'magic' string literal.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
11567,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",320,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
11568,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,306,"[I] Cast between a pointer to object and an integral type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11569,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,310,"Casting to different object pointer type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11570,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11571,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,489,"Increment or decrement operation performed on pointer.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11572,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__result' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11573,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11574,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11575,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11576,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11577,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11578,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11579,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11580,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11581,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11582,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11583,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,2100,"Integral promotion : unsigned char promoted to signed int.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11584,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11585,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3112,"This statement has no side-effect - it can be removed.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11586,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3122,"Hard-coded 'magic' string literal.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11587,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3200,"__builtin_strcmp' returns a value which is not being used.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11588,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11589,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11590,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11591,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11592,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11593,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11594,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11595,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11596,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11597,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3326,"An assignment operator is being used in a boolean expression.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11598,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3346,"This 'if' control expression has a constant 'true' value.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11599,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11600,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11601,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11602,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11603,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11604,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11605,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11606,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
11607,,,,,,,,,,,
11608,,,,,,,,,,,
11609,,,,,,,,,,,
11610,,,,,,,,,,,
11611,,,,,,,,,,,
11612,,,,,,,,,,,
11613,,,,,,,,,,,
11614,,,,,,,,,,,
11615,,,,,,,,,,,
11616,,,,,,,,,,,
11617,,,,,,,,,,,
11618,,,,,,,,,,,
11619,,,,,,,,,,,
11620,,,,,,,,,,,
11621,,,,,,,,,,,
11622,,,,,,,,,,,
11623,,,,,,,,,,,
11624,,,,,,,,,,,
11625,,,,,,,,,,,
11626,,,,,,,,,,,
11627,,,,,,,,,,,
11628,,,,,,,,,,,
11629,,,,,,,,,,,
11630,,,,,,,,,,,
11631,,,,,,,,,,,
11632,,,,,,,,,,,
11633,,,,,,,,,,,
11634,,,,,,,,,,,
11635,,,,,,,,,,,
11636,,,,,,,,,,,
11637,,,,,,,,,,,
11638,,,,,,,,,,,
11639,,,,,,,,,,,
11640,,,,,,,,,,,
11641,,,,,,,,,,,
11642,,,,,,,,,,,
11643,,,,,,,,,,,
11644,,,,,,,,,,,
11645,,,,,,,,,,,
11646,,,,,,,,,,,
11647,,,,,,,,,,,
11648,,,,,,,,,,,
11649,,,,,,,,,,,
11650,,,,,,,,,,,
11651,,,,,,,,,,,
11652,,,,,,,,,,,
11653,,,,,,,,,,,
11654,,,,,,,,,,,
11655,,,,,,,,,,,
11656,,,,,,,,,,,
11657,,,,,,,,,,,
11658,,,,,,,,,,,
11659,,,,,,,,,,,
11660,,,,,,,,,,,
11661,,,,,,,,,,,
11662,,,,,,,,,,,
11663,,,,,,,,,,,
11664,,,,,,,,,,,
11665,,,,,,,,,,,
11666,,,,,,,,,,,
11667,,,,,,,,,,,
11668,,,,,,,,,,,
11669,,,,,,,,,,,
11670,,,,,,,,,,,
11671,,,,,,,,,,,
11672,,,,,,,,,,,
11673,,,,,,,,,,,
11674,,,,,,,,,,,
11675,,,,,,,,,,,
11676,,,,,,,,,,,
11677,,,,,,,,,,,
11678,,,,,,,,,,,
11679,,,,,,,,,,,
11680,,,,,,,,,,,
11681,,,,,,,,,,,
11682,,,,,,,,,,,
11683,,,,,,,,,,,
11684,,,,,,,,,,,
11685,,,,,,,,,,,
11686,,,,,,,,,,,
11687,,,,,,,,,,,
11688,,,,,,,,,,,
11689,,,,,,,,,,,
11690,,,,,,,,,,,
11691,,,,,,,,,,,
11692,,,,,,,,,,,
11693,,,,,,,,,,,
11694,,,,,,,,,,,
11695,,,,,,,,,,,
11696,,,,,,,,,,,
11697,,,,,,,,,,,
11698,,,,,,,,,,,
11699,,,,,,,,,,,
11700,,,,,,,,,,,
11701,,,,,,,,,,,
11702,,,,,,,,,,,
11703,,,,,,,,,,,
11704,,,,,,,,,,,
11705,,,,,,,,,,,
11706,,,,,,,,,,,
11707,,,,,,,,,,,
11708,,,,,,,,,,,
11709,,,,,,,,,,,
11710,,,,,,,,,,,
11711,,,,,,,,,,,
11712,,,,,,,,,,,
11713,,,,,,,,,,,
11714,,,,,,,,,,,
11715,,,,,,,,,,,
11716,,,,,,,,,,,
11717,,,,,,,,,,,
11718,,,,,,,,,,,
11719,,,,,,,,,,,
11720,,,,,,,,,,,
11721,,,,,,,,,,,
11722,,,,,,,,,,,
11723,,,,,,,,,,,
11724,,,,,,,,,,,
11725,,,,,,,,,,,
11726,,,,,,,,,,,
11727,,,,,,,,,,,
11728,,,,,,,,,,,
11729,,,,,,,,,,,
11730,,,,,,,,,,,
11731,,,,,,,,,,,
11732,,,,,,,,,,,
11733,,,,,,,,,,,
11734,,,,,,,,,,,
11735,,,,,,,,,,,
11736,,,,,,,,,,,
11737,,,,,,,,,,,
11738,,,,,,,,,,,
11739,,,,,,,,,,,
11740,,,,,,,,,,,
11741,,,,,,,,,,,
11742,,,,,,,,,,,
11743,,,,,,,,,,,
11744,,,,,,,,,,,
11745,,,,,,,,,,,
11746,,,,,,,,,,,
11747,,,,,,,,,,,
11748,,,,,,,,,,,
11749,,,,,,,,,,,
11750,,,,,,,,,,,
11751,,,,,,,,,,,
11752,,,,,,,,,,,
11753,,,,,,,,,,,
11754,,,,,,,,,,,
11755,,,,,,,,,,,
11756,,,,,,,,,,,
11757,,,,,,,,,,,
11758,,,,,,,,,,,
11759,,,,,,,,,,,
11760,,,,,,,,,,,
11761,,,,,,,,,,,
11762,,,,,,,,,,,
11763,,,,,,,,,,,
11764,,,,,,,,,,,
11765,,,,,,,,,,,
11766,,,,,,,,,,,
11767,,,,,,,,,,,
11768,,,,,,,,,,,
11769,,,,,,,,,,,
11770,,,,,,,,,,,
11771,,,,,,,,,,,
11772,,,,,,,,,,,
11773,,,,,,,,,,,
11774,,,,,,,,,,,
11775,,,,,,,,,,,
11776,,,,,,,,,,,
11777,,,,,,,,,,,
11778,,,,,,,,,,,
11779,,,,,,,,,,,
11780,,,,,,,,,,,
11781,,,,,,,,,,,
11782,,,,,,,,,,,
11783,,,,,,,,,,,
11784,,,,,,,,,,,
11785,,,,,,,,,,,
11786,,,,,,,,,,,
11787,,,,,,,,,,,
11788,,,,,,,,,,,
11789,,,,,,,,,,,
11790,,,,,,,,,,,
11791,,,,,,,,,,,
11792,,,,,,,,,,,
11793,,,,,,,,,,,
11794,,,,,,,,,,,
11795,,,,,,,,,,,
11796,,,,,,,,,,,
11797,,,,,,,,,,,
