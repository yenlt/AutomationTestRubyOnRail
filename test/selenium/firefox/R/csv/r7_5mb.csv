"ID","Directory","Source Name","File Name","Line Number","Character Number","Rule Number","Warning Message","Code","Reference","Comment","Status"
1,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",1,1,240,"[E] This file contains the control-M character at the end of a line.","    1:	/*
",,"description for warning (1)","Registered"
2,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",9,16,288,"[I] Source file '/home/www/TOSCANA_dev/BackEnd/AnalyzeTaskManager/work/1/work/sample_c_cpp/sample_c/src/analyzeme.c' has comments containing characters which are not members of the basic source character set.","    9:	      AnalyzeMeのメイン関数を定義する
",,"description for warning (2)","Registered"
3,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",16,2,2017,"Comment spans more than one line.","   16:	*/
",,"description for warning (3)","Registered"
4,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",20,2,2017,"Comment spans more than one line.","   20:	*/
",,"description for warning (4)","Registered"
5,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",21,1,838,"File has already been included directly from this file.","   21:	#include ""analyzeme.h""
",,"description for warning (5)","Registered"
6,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",21,1,839,"File has already been included indirectly from this file.","   21:	#include ""analyzeme.h""
",,"description for warning (6)","Registered"
7,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",21,23,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   21:	#include ""analyzeme.h""
",,"description for warning (7)","Registered"
8,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",22,1,839,"File has already been included indirectly from this file.","   22:	#include ""common.h""
",,"description for warning (8)","Registered"
9,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",23,1,839,"File has already been included indirectly from this file.","   23:	#include ""memory_manage.h""
",,"description for warning (9)","Registered"
10,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",23,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   23:	#include ""memory_manage.h""
",,"description for warning (10)","Registered"
11,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",24,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   24:	#include ""parse_cmdline.h""
",,,
12,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",25,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   25:	#include ""common_measure.h""
",,,
13,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",26,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   26:	#include ""trend_measure.h""
",,,
14,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",27,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   27:	#include ""make_file_list.h""
",,,
15,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",29,31,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   29:	#include ""get_process_macro.h""
",,,
16,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",30,1,839,"File has already been included indirectly from this file.","   30:	#include &lt;signal.h&gt;
",,,
17,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
18,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
19,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,13,3211,"The global identifier 'TRACEFILE' is defined but not used.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
20,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,13,3408,"TRACEFILE' has external linkage but is being defined without any previous declaration.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
21,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",36,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
22,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",36,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
23,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",36,13,3408,"APPLOGFILE' has external linkage but is being defined without any previous declaration.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
24,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",44,7,3408,"g_fpLogFile' has external linkage but is being defined without any previous declaration.","   44:	FILE *g_fpLogFile = NULL;       /* Log File pointer */
",,,
25,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",46,7,3211,"The global identifier 'g_fpTraceFile' is defined but not used.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
26,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",46,7,3408,"g_fpTraceFile' has external linkage but is being defined without any previous declaration.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
27,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",48,7,3408,"g_fpErrorFile' has external linkage but is being defined without any previous declaration.","   48:	FILE *g_fpErrorFile = NULL;
",,,
28,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",50,6,3408,"g_bTrace' has external linkage but is being defined without any previous declaration.","   50:	bool g_bTrace           = false;    /* Trace flag */
",,,
29,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",51,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
30,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",51,6,3408,"g_szNVPath' has external linkage but is being defined without any previous declaration.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
31,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",51,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
32,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",52,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
33,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",52,6,3408,"g_szOVPath' has external linkage but is being defined without any previous declaration.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
34,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",52,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
35,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",53,6,3408,"g_bTrendFile' has external linkage but is being defined without any previous declaration.","   53:	bool g_bTrendFile = false;
",,,
36,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",55,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   55:	char *g_optionFileCont = NULL;
",,,
37,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",55,7,3211,"The global identifier 'g_optionFileCont' is defined but not used.","   55:	char *g_optionFileCont = NULL;
",,,
38,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",55,7,3408,"g_optionFileCont' has external linkage but is being defined without any previous declaration.","   55:	char *g_optionFileCont = NULL;
",,,
39,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",57,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   57:	char *g_symbolFileCont = NULL;
",,,
40,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",57,7,3211,"The global identifier 'g_symbolFileCont' is defined but not used.","   57:	char *g_symbolFileCont = NULL;
",,,
41,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",57,7,3408,"g_symbolFileCont' has external linkage but is being defined without any previous declaration.","   57:	char *g_symbolFileCont = NULL;
",,,
42,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",58,6,3408,"g_bOutTime' has external linkage but is being defined without any previous declaration.","   58:	bool g_bOutTime = false;
",,,
43,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",59,15,3408,"g_pAnzInfo' has external linkage but is being defined without any previous declaration.","   59:	ST_AnalyzeMe *g_pAnzInfo;  /* AnalyzeMe管理情報 */
",,,
44,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",69,2,2017,"Comment spans more than one line.","   69:	*/
",,,
45,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",70,14,3227,"The parameter 'argc' is never modified and so it could be declared with the 'const' qualifier.","   70:	int main(int argc,char * argv[])
",,,
46,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",70,19,3625,"Type 'char' has been used in the declaration of an object or a function.","   70:	int main(int argc,char * argv[])
",,,
47,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",70,26,344,"K&amp;R compilers do not support function prototypes.","   70:	int main(int argc,char * argv[])
",,,
48,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",75,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
49,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",75,28,2211,"the_pMeasureItem' is not aligned with the previously declared identifier.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
50,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
51,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,10,2211,"the_szCurMetrics' is not aligned with the previously declared identifier.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
52,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,10,3604,"Local arrays and structures cannot be initialised in K&amp;R C.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
53,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,44,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
54,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",80,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   80:	    char *the_pTrace = NULL;
",,,
55,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",80,11,2211,"the_pTrace' is not aligned with the previously declared identifier.","   80:	    char *the_pTrace = NULL;
",,,
56,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",80,11,3197,"The initialiser for 'the_pTrace' is always modified before being used.","   80:	    char *the_pTrace = NULL;
",,,
57,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",81,25,2211,"the_st' is not aligned with the previously declared identifier.","   81:	    struct timeb the_st ;
",,,
58,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",89,5,3198,"The value assigned to 'the_pAnzInfo' is always modified before being used.","   89:	    the_pAnzInfo = NULL;
",,,
59,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",91,5,3198,"The value assigned to 'the_iRet' is always modified before being used.","   91:	    the_iRet = ANZ_SUCCESS;
",,,
60,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",101,25,3122,"Hard-coded 'magic' string literal.","  101:	    the_pTrace = getenv(""AnzTrace"");
",,,
61,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",102,28,2209,"This brace style is not consistent with 'exdented' style.","  102:	    if(the_pTrace != NULL) {
",,,
62,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,306,"[I] Cast between a pointer to object and an integral type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
63,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,310,"Casting to different object pointer type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
64,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
65,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,489,"Increment or decrement operation performed on pointer.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
66,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__result' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
67,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
68,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
69,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
70,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
71,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
72,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
73,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
74,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
75,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
76,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
77,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,2100,"Integral promotion : unsigned char promoted to signed int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
78,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
79,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3112,"This statement has no side-effect - it can be removed.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
80,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3122,"Hard-coded 'magic' string literal.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
81,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3200,"__builtin_strcmp' returns a value which is not being used.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
82,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
83,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
84,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
85,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
86,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
87,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
88,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
89,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
90,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
91,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3325,"This control expression has a constant 'false' value.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
92,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3326,"An assignment operator is being used in a boolean expression.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
93,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
94,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
95,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
96,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
97,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
98,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
99,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
100,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
101,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
102,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
103,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
104,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
105,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
106,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
107,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
108,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
109,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
110,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
111,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
112,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
113,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
114,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
115,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
116,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3416,"This boolean expression contains side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
117,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3417,"The comma operator has been used outside a for-loop header.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
118,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3446,"The result operands of this conditional operator generate side effects","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
119,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3631,"Type 'char' has been used in a cast.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
120,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3760,"Implicit conversion: int to unsigned int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
121,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,35,3209,"__builtin_strcmp()' returns a value which is always ignored.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
122,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
123,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
124,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,36,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
125,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,43,2209,"This brace style is not consistent with 'exdented' style.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
126,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,43,3201,"This statement is unreachable.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
127,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",113,6,2017,"Comment spans more than one line.","  113:	    */
",,,
128,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",114,36,3122,"Hard-coded 'magic' string literal.","  114:	    g_fpLogFile = fopen(APPLOGFILE,""w"");
",,,
129,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",115,28,2209,"This brace style is not consistent with 'exdented' style.","  115:	    if(g_fpLogFile == NULL){
",,,
130,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",116,9,3200,"printf' returns a value which is not being used.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
131,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",116,16,3122,"Hard-coded 'magic' string literal.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
132,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",120,5,702,"Result of sizeof operator is not explicitly cast.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
133,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",120,63,3430,"Macro argument expression requires parentheses.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
134,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",121,29,2209,"This brace style is not consistent with 'exdented' style.","  121:	    if(the_pAnzInfo == NULL){
",,,
135,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",122,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  122:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
136,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",123,18,2001,"A 'goto' statement has been used.","  123:	        goto EXIT;
",,,
137,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",125,5,702,"Result of sizeof operator is not explicitly cast.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
138,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",125,5,3200,"memset' returns a value which is not being used.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
139,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",128,5,702,"Result of sizeof operator is not explicitly cast.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
140,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",128,67,3430,"Macro argument expression requires parentheses.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
141,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",129,39,2209,"This brace style is not consistent with 'exdented' style.","  129:	    if(the_pAnzInfo-&gt;m_option == NULL){
",,,
142,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",130,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  130:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
143,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",131,18,2001,"A 'goto' statement has been used.","  131:	        goto EXIT;
",,,
144,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",133,5,702,"Result of sizeof operator is not explicitly cast.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
145,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",133,5,3200,"memset' returns a value which is not being used.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
146,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,702,"Result of sizeof operator is not explicitly cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
147,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,3631,"Type 'char' has been used in a cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
148,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,3633,"Type 'char' has been used in the operand of the sizeof operator.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
149,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,3760,"Implicit conversion: int to unsigned int.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
150,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",138,34,2209,"This brace style is not consistent with 'exdented' style.","  138:	    if(the_pMeasureItem == NULL) {
",,,
151,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",139,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  139:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
152,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",140,18,2001,"A 'goto' statement has been used.","  140:	        goto EXIT;
",,,
153,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,5,702,"Result of sizeof operator is not explicitly cast.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
154,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,5,3200,"memset' returns a value which is not being used.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
155,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,36,3760,"Implicit conversion: int to unsigned int.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
156,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,45,3633,"Type 'char' has been used in the operand of the sizeof operator.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
157,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",150,5,3200,"strcpy' returns a value which is not being used.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
158,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",150,34,3122,"Hard-coded 'magic' string literal.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
159,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",154,5,3200,"strcpy' returns a value which is not being used.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
160,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",154,39,3122,"Hard-coded 'magic' string literal.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
161,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",155,5,3200,"strcpy' returns a value which is not being used.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
162,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",155,38,3122,"Hard-coded 'magic' string literal.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
163,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",156,5,3200,"strcpy' returns a value which is not being used.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
164,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",156,38,3122,"Hard-coded 'magic' string literal.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
165,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",165,32,3120,"Hard-coded 'magic' integer constant '70'.","  165:	    the_pOption-&gt;m_symThresh = 70;
",,,
166,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",166,32,3120,"Hard-coded 'magic' integer constant '2'.","  166:	    the_pOption-&gt;m_minThresh = 2;
",,,
167,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",169,5,702,"Result of sizeof operator is not explicitly cast.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
168,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",169,59,3430,"Macro argument expression requires parentheses.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
169,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",170,31,2209,"This brace style is not consistent with 'exdented' style.","  170:	    if(the_pCmdOption == NULL){
",,,
170,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",171,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  171:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
171,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",172,18,2001,"A 'goto' statement has been used.","  172:	        goto EXIT;
",,,
172,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",174,5,702,"Result of sizeof operator is not explicitly cast.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
173,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",174,5,3200,"memset' returns a value which is not being used.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
174,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",180,5,3200,"strcpy' returns a value which is not being used.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
175,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",180,37,3122,"Hard-coded 'magic' string literal.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
176,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",184,5,3200,"strcpy' returns a value which is not being used.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
177,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",184,42,3122,"Hard-coded 'magic' string literal.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
178,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",185,5,3200,"strcpy' returns a value which is not being used.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
179,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",185,41,3122,"Hard-coded 'magic' string literal.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
180,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",186,5,3200,"strcpy' returns a value which is not being used.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
181,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",186,41,3122,"Hard-coded 'magic' string literal.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
182,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",195,35,3120,"Hard-coded 'magic' integer constant '70'.","  195:	    the_pCmdOption-&gt;m_symThresh = 70;
",,,
183,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",196,35,3120,"Hard-coded 'magic' integer constant '2'.","  196:	    the_pCmdOption-&gt;m_minThresh = 2;
",,,
184,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",200,32,2209,"This brace style is not consistent with 'exdented' style.","  200:	    if(the_iRet != ANZ_SUCCESS){
",,,
185,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",201,18,2001,"A 'goto' statement has been used.","  201:	        goto EXIT;
",,,
186,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",203,8,3344,"Value of control expression is not derived from an explicit logical operation.","  203:	    if(g_bOutTime) {
",,,
187,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",203,20,2209,"This brace style is not consistent with 'exdented' style.","  203:	    if(g_bOutTime) {
",,,
188,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",204,9,3200,"ftime' returns a value which is not being used.","  204:	        ftime(&amp;the_st);
",,,
189,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",209,32,2209,"This brace style is not consistent with 'exdented' style.","  209:	    if(the_iRet != ANZ_SUCCESS){
",,,
190,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",210,18,2001,"A 'goto' statement has been used.","  210:	        goto EXIT;
",,,
191,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",214,32,2209,"This brace style is not consistent with 'exdented' style.","  214:	    if(the_iRet != ANZ_SUCCESS){
",,,
192,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",215,18,2001,"A 'goto' statement has been used.","  215:	        goto EXIT;
",,,
193,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",218,23,3355,"The result of this logical operation is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
194,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",218,23,3358,"The value of this 'if' control expression is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
195,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",218,31,2209,"This brace style is not consistent with 'exdented' style.","  218:	    if(the_pCmdOption != NULL){
",,,
196,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",224,32,2209,"This brace style is not consistent with 'exdented' style.","  224:	    if(the_iRet != ANZ_SUCCESS){
",,,
197,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",225,18,2001,"A 'goto' statement has been used.","  225:	        goto EXIT;
",,,
198,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",229,32,2209,"This brace style is not consistent with 'exdented' style.","  229:	    if(the_iRet != ANZ_SUCCESS){
",,,
199,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",230,18,2001,"A 'goto' statement has been used.","  230:	        goto EXIT;
",,,
200,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",233,47,2209,"This brace style is not consistent with 'exdented' style.","  233:	    if(the_iMeasureType == ANZ_TREND_MEASURE) {
",,,
201,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",234,13,3220,"Identifier declared at a nested level of block scope.","  234:	        int the_iType = -1;
",,,
202,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",235,13,3220,"Identifier declared at a nested level of block scope.","  235:	        int the_pPos = -1;
",,,
203,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",236,9,3200,"isDirOrFile' returns a value which is not being used.","  236:	        isDirOrFile(*the_pMeasureItem,&amp;the_iType);
",,,
204,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",237,35,2209,"This brace style is not consistent with 'exdented' style.","  237:	        if(the_iType == ANZ_FILE) {
",,,
205,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",242,30,2209,"This brace style is not consistent with 'exdented' style.","  242:	            if(the_pPos &gt; 0) {
",,,
206,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",243,55,488,"Performing pointer arithmetic.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
207,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",243,66,489,"Increment or decrement operation performed on pointer.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
208,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",246,43,489,"Increment or decrement operation performed on pointer.","  246:	            GetPathPos(*(the_pMeasureItem + 1),&amp;the_pPos);
",,,
209,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",248,30,2209,"This brace style is not consistent with 'exdented' style.","  248:	            if(the_pPos &gt; 0) {
",,,
210,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,36,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
211,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,42,3501,"This could be read as an old-style assignment operator. Spaces are needed to make it more readable.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
212,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,61,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
213,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,66,488,"Performing pointer arithmetic.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
214,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,77,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
215,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",252,13,3198,"The value assigned to 'the_iRet' is always modified before being used.","  252:	            the_iRet = ResetTrendPath(g_szNVPath);
",,,
216,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",254,41,2209,"This brace style is not consistent with 'exdented' style.","  254:	            if(the_iRet != ANZ_SUCCESS) {
",,,
217,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",255,26,2001,"A 'goto' statement has been used.","  255:	                goto EXIT;
",,,
218,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",260,51,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
219,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",260,57,3631,"Type 'char' has been used in a cast.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
220,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",261,41,2209,"This brace style is not consistent with 'exdented' style.","  261:	    if(the_iRet == ANZ_NO_MEASURE_FILES){
",,,
221,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",262,9,3200,"printf' returns a value which is not being used.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
222,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",262,16,3122,"Hard-coded 'magic' string literal.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
223,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",264,42,2209,"This brace style is not consistent with 'exdented' style.","  264:	    if(the_iRet == ANZ_ERR_MEMORY_FAILED){
",,,
224,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",265,9,3200,"printf' returns a value which is not being used.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
225,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",265,16,3122,"Hard-coded 'magic' string literal.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
226,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",267,32,2209,"This brace style is not consistent with 'exdented' style.","  267:	    if(the_iRet != ANZ_SUCCESS){
",,,
227,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",268,18,2001,"A 'goto' statement has been used.","  268:	        goto EXIT;
",,,
228,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",272,37,2209,"This brace style is not consistent with 'exdented' style.","  272:	    if(the_pOption-&gt;m_fileLOC == ON){
",,,
229,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",273,9,3200,"strcat' returns a value which is not being used.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
230,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",273,33,3122,"Hard-coded 'magic' string literal.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
231,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",276,40,2209,"This brace style is not consistent with 'exdented' style.","  276:	    if(the_pOption-&gt;m_redundancy == ON){
",,,
232,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,306,"[I] Cast between a pointer to object and an integral type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
233,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,310,"Casting to different object pointer type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
234,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
235,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,489,"Increment or decrement operation performed on pointer.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
236,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__result' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
237,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
238,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
239,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
240,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
241,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
242,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
243,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
244,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
245,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
246,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
247,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,2100,"Integral promotion : unsigned char promoted to signed int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
248,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
249,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3112,"This statement has no side-effect - it can be removed.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
250,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3122,"Hard-coded 'magic' string literal.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
251,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3200,"__builtin_strcmp' returns a value which is not being used.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
252,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
253,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
254,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
255,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
256,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
257,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
258,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
259,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
260,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
261,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3326,"An assignment operator is being used in a boolean expression.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
262,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3346,"This 'if' control expression has a constant 'true' value.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
263,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
264,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
265,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
266,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
267,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
268,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
269,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
270,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
271,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
272,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
273,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
274,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
275,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
276,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
277,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
278,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
279,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
280,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
281,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
282,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
283,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
284,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
285,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
286,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3416,"This boolean expression contains side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
287,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3417,"The comma operator has been used outside a for-loop header.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
288,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3446,"The result operands of this conditional operator generate side effects","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
289,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3631,"Type 'char' has been used in a cast.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
290,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3760,"Implicit conversion: int to unsigned int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
291,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
292,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
293,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
294,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,45,2209,"This brace style is not consistent with 'exdented' style.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
295,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",278,13,3200,"strcat' returns a value which is not being used.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
296,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",278,37,3122,"Hard-coded 'magic' string literal.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
297,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",278,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
298,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",279,13,3200,"strcat' returns a value which is not being used.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
299,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",279,37,3122,"Hard-coded 'magic' string literal.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
300,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",279,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
301,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",281,13,2209,"This brace style is not consistent with 'exdented' style.","  281:	        else{
",,,
302,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",281,13,3201,"This statement is unreachable.","  281:	        else{
",,,
303,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",282,13,3200,"strcat' returns a value which is not being used.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
304,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",282,37,3122,"Hard-coded 'magic' string literal.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
305,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",282,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
306,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",286,8,3344,"Value of control expression is not derived from an explicit logical operation.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
307,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",286,31,2209,"This brace style is not consistent with 'exdented' style.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
308,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,306,"[I] Cast between a pointer to object and an integral type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
309,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,310,"Casting to different object pointer type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
310,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
311,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,489,"Increment or decrement operation performed on pointer.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
312,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__result' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
313,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
314,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
315,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
316,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
317,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
318,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
319,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
320,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
321,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
322,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
323,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,2100,"Integral promotion : unsigned char promoted to signed int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
324,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
325,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3112,"This statement has no side-effect - it can be removed.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
326,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3122,"Hard-coded 'magic' string literal.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
327,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3200,"__builtin_strcmp' returns a value which is not being used.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
328,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
329,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
330,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
331,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
332,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
333,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
334,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
335,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
336,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
337,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3326,"An assignment operator is being used in a boolean expression.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
338,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3346,"This 'if' control expression has a constant 'true' value.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
339,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
340,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
341,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
342,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
343,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
344,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
345,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
346,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
347,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
348,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
349,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
350,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
351,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
352,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
353,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
354,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
355,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
356,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
357,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
358,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
359,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
360,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
361,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
362,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3416,"This boolean expression contains side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
363,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3417,"The comma operator has been used outside a for-loop header.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
364,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3446,"The result operands of this conditional operator generate side effects","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
365,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3631,"Type 'char' has been used in a cast.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
366,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3760,"Implicit conversion: int to unsigned int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
367,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
368,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
369,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
370,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,45,2209,"This brace style is not consistent with 'exdented' style.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
371,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",288,13,3200,"strcat' returns a value which is not being used.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
372,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",288,37,3122,"Hard-coded 'magic' string literal.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
373,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",288,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
374,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",289,13,3200,"strcat' returns a value which is not being used.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
375,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",289,37,3122,"Hard-coded 'magic' string literal.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
376,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",289,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
377,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",291,13,2209,"This brace style is not consistent with 'exdented' style.","  291:	        else{
",,,
378,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",291,13,3201,"This statement is unreachable.","  291:	        else{
",,,
379,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",292,13,3200,"strcat' returns a value which is not being used.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
380,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",292,37,3122,"Hard-coded 'magic' string literal.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
381,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",292,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
382,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",296,8,3344,"Value of control expression is not derived from an explicit logical operation.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
383,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",296,28,2209,"This brace style is not consistent with 'exdented' style.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
384,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,306,"[I] Cast between a pointer to object and an integral type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
385,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,310,"Casting to different object pointer type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
386,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
387,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,489,"Increment or decrement operation performed on pointer.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
388,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__result' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
389,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
390,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
391,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
392,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
393,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
394,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
395,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
396,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
397,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
398,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
399,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,2100,"Integral promotion : unsigned char promoted to signed int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
400,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
401,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3112,"This statement has no side-effect - it can be removed.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
402,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3122,"Hard-coded 'magic' string literal.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
403,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3200,"__builtin_strcmp' returns a value which is not being used.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
404,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
405,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
406,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
407,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
408,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
409,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
410,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
411,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
412,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
413,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3326,"An assignment operator is being used in a boolean expression.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
414,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3346,"This 'if' control expression has a constant 'true' value.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
415,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
416,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
417,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
418,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
419,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
420,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
421,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
422,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
423,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
424,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
425,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
426,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
427,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
428,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
429,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
430,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
431,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
432,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
433,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
434,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
435,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
436,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
437,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
438,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3416,"This boolean expression contains side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
439,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3417,"The comma operator has been used outside a for-loop header.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
440,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3446,"The result operands of this conditional operator generate side effects","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
441,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3631,"Type 'char' has been used in a cast.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
442,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3760,"Implicit conversion: int to unsigned int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
443,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
444,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
445,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
446,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,45,2209,"This brace style is not consistent with 'exdented' style.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
447,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",298,13,3200,"strcat' returns a value which is not being used.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
448,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",298,37,3122,"Hard-coded 'magic' string literal.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
449,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",298,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
450,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",299,13,3200,"strcat' returns a value which is not being used.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
451,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",299,37,3122,"Hard-coded 'magic' string literal.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
452,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",299,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
453,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",301,13,2209,"This brace style is not consistent with 'exdented' style.","  301:	        else{
",,,
454,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",301,13,3201,"This statement is unreachable.","  301:	        else{
",,,
455,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",302,13,3200,"strcat' returns a value which is not being used.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
456,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",302,37,3122,"Hard-coded 'magic' string literal.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
457,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",302,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
458,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,306,"[I] Cast between a pointer to object and an integral type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
459,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,310,"Casting to different object pointer type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
460,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
461,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,489,"Increment or decrement operation performed on pointer.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
462,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__result' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
463,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
464,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
465,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
466,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
467,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
468,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
469,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
470,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
471,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
472,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
473,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,2100,"Integral promotion : unsigned char promoted to signed int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
474,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
475,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3112,"This statement has no side-effect - it can be removed.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
476,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3122,"Hard-coded 'magic' string literal.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
477,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3200,"__builtin_strcmp' returns a value which is not being used.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
478,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
479,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
480,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
481,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
482,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
483,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
484,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
485,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
486,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
487,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3326,"An assignment operator is being used in a boolean expression.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
488,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3346,"This 'if' control expression has a constant 'true' value.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
489,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
490,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
491,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
492,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
493,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
494,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
495,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
496,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
497,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
498,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
499,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
500,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
501,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
502,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
503,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
504,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
505,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
506,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
507,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
508,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
509,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
510,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
511,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
512,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3416,"This boolean expression contains side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
513,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3417,"The comma operator has been used outside a for-loop header.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
514,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3446,"The result operands of this conditional operator generate side effects","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
515,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3631,"Type 'char' has been used in a cast.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
516,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3760,"Implicit conversion: int to unsigned int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
517,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
518,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
519,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
520,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,45,2209,"This brace style is not consistent with 'exdented' style.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
521,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",305,13,3200,"strcat' returns a value which is not being used.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
522,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",305,37,3122,"Hard-coded 'magic' string literal.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
523,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",305,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
524,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",306,13,3200,"strcat' returns a value which is not being used.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
525,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",306,37,3122,"Hard-coded 'magic' string literal.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
526,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",308,13,2209,"This brace style is not consistent with 'exdented' style.","  308:	        else{
",,,
527,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",308,13,3201,"This statement is unreachable.","  308:	        else{
",,,
528,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",309,13,3200,"strcat' returns a value which is not being used.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
529,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",309,37,3122,"Hard-coded 'magic' string literal.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
530,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",314,8,3344,"Value of control expression is not derived from an explicit logical operation.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
531,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",314,34,2209,"This brace style is not consistent with 'exdented' style.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
532,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,306,"[I] Cast between a pointer to object and an integral type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
533,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,310,"Casting to different object pointer type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
534,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
535,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,489,"Increment or decrement operation performed on pointer.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
536,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__result' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
537,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
538,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
539,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
540,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
541,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
542,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
543,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
544,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
545,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
546,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
547,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,2100,"Integral promotion : unsigned char promoted to signed int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
548,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
549,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3112,"This statement has no side-effect - it can be removed.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
550,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3122,"Hard-coded 'magic' string literal.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
551,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3200,"__builtin_strcmp' returns a value which is not being used.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
552,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
553,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
554,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
555,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
556,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
557,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
558,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
559,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
560,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
561,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3326,"An assignment operator is being used in a boolean expression.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
562,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3346,"This 'if' control expression has a constant 'true' value.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
563,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
564,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
565,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
566,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
567,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
568,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
569,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
570,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
571,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
572,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
573,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
574,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
575,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
576,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
577,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
578,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
579,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
580,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
581,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
582,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
583,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
584,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
585,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
586,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3416,"This boolean expression contains side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
587,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3417,"The comma operator has been used outside a for-loop header.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
588,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3446,"The result operands of this conditional operator generate side effects","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
589,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3631,"Type 'char' has been used in a cast.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
590,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3760,"Implicit conversion: int to unsigned int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
591,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
592,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
593,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
594,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,45,2209,"This brace style is not consistent with 'exdented' style.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
595,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",316,13,3200,"strcat' returns a value which is not being used.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
596,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",316,37,3122,"Hard-coded 'magic' string literal.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
597,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",316,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
598,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",317,13,3200,"strcat' returns a value which is not being used.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
599,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",317,37,3122,"Hard-coded 'magic' string literal.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
600,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",317,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
601,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",319,13,2209,"This brace style is not consistent with 'exdented' style.","  319:	        else{
",,,
602,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",319,13,3201,"This statement is unreachable.","  319:	        else{
",,,
603,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",320,13,3200,"strcat' returns a value which is not being used.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
604,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",320,37,3122,"Hard-coded 'magic' string literal.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
605,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",320,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
606,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,306,"[I] Cast between a pointer to object and an integral type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
607,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,310,"Casting to different object pointer type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
608,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
609,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,489,"Increment or decrement operation performed on pointer.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
610,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__result' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
611,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
612,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
613,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
614,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
615,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
616,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
617,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
618,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
619,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
620,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
621,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,2100,"Integral promotion : unsigned char promoted to signed int.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
622,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
623,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3112,"This statement has no side-effect - it can be removed.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
624,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3122,"Hard-coded 'magic' string literal.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
625,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3200,"__builtin_strcmp' returns a value which is not being used.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
626,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
627,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
628,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
629,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
630,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
631,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
632,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
633,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
634,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
635,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3326,"An assignment operator is being used in a boolean expression.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
636,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3346,"This 'if' control expression has a constant 'true' value.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
637,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
638,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
639,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
640,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
641,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
642,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
643,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
644,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
645,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
646,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
647,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
648,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
649,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
650,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
651,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
652,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
653,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
654,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
655,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
656,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
657,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
658,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
659,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
660,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3416,"This boolean expression contains side effects.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
661,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3417,"The comma operator has been used outside a for-loop header.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
662,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3446,"The result operands of this conditional operator generate side effects","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
663,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3631,"Type 'char' has been used in a cast.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
664,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3760,"Implicit conversion: int to unsigned int.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
665,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
666,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
667,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
668,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,45,2209,"This brace style is not consistent with 'exdented' style.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
669,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",324,13,3200,"strcat' returns a value which is not being used.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
670,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",324,37,3122,"Hard-coded 'magic' string literal.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
671,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",324,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
672,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",325,13,3200,"strcat' returns a value which is not being used.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
673,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",325,37,3122,"Hard-coded 'magic' string literal.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
674,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",325,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
675,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",327,13,2209,"This brace style is not consistent with 'exdented' style.","  327:	        else{
",,,
676,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",327,13,3201,"This statement is unreachable.","  327:	        else{
",,,
677,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",328,13,3200,"strcat' returns a value which is not being used.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
678,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",328,37,3122,"Hard-coded 'magic' string literal.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
679,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",328,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
680,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",333,8,3344,"Value of control expression is not derived from an explicit logical operation.","  333:	    if(the_pOption-&gt;m_trend){
",,,
681,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",333,29,2209,"This brace style is not consistent with 'exdented' style.","  333:	    if(the_pOption-&gt;m_trend){
",,,
682,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,306,"[I] Cast between a pointer to object and an integral type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
683,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,310,"Casting to different object pointer type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
684,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
685,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,489,"Increment or decrement operation performed on pointer.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
686,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__result' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
687,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
688,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
689,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
690,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
691,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
692,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
693,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
694,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
695,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
696,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
697,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,2100,"Integral promotion : unsigned char promoted to signed int.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
698,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
699,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3112,"This statement has no side-effect - it can be removed.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
700,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3122,"Hard-coded 'magic' string literal.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
701,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3200,"__builtin_strcmp' returns a value which is not being used.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
702,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
703,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
704,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
705,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
706,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
707,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
708,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
709,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
710,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
711,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3326,"An assignment operator is being used in a boolean expression.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
712,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3346,"This 'if' control expression has a constant 'true' value.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
713,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
714,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
715,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
716,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
717,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
718,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
719,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
720,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
721,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
722,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
723,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
724,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
725,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
726,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
727,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
728,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
729,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
730,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
731,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
732,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
733,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
734,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
735,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
736,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3416,"This boolean expression contains side effects.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
737,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3417,"The comma operator has been used outside a for-loop header.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
738,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3446,"The result operands of this conditional operator generate side effects","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
739,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3631,"Type 'char' has been used in a cast.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
740,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3760,"Implicit conversion: int to unsigned int.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
741,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
742,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
743,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
744,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,45,2209,"This brace style is not consistent with 'exdented' style.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
745,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",335,13,3200,"strcat' returns a value which is not being used.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
746,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",335,37,3122,"Hard-coded 'magic' string literal.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
747,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",335,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
748,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",336,13,3200,"strcat' returns a value which is not being used.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
749,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",336,37,3122,"Hard-coded 'magic' string literal.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
750,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",336,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
751,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",338,13,2209,"This brace style is not consistent with 'exdented' style.","  338:	        else{
",,,
752,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",338,13,3201,"This statement is unreachable.","  338:	        else{
",,,
753,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",339,13,3200,"strcat' returns a value which is not being used.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
754,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",339,37,3122,"Hard-coded 'magic' string literal.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
755,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",339,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
756,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",341,9,3200,"strcat' returns a value which is not being used.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
757,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",341,33,3122,"Hard-coded 'magic' string literal.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
758,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",341,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
759,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",345,8,3344,"Value of control expression is not derived from an explicit logical operation.","  345:	    if(the_pOption-&gt;m_funcTrend){
",,,
760,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",345,33,2209,"This brace style is not consistent with 'exdented' style.","  345:	    if(the_pOption-&gt;m_funcTrend){
",,,
761,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,306,"[I] Cast between a pointer to object and an integral type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
762,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,310,"Casting to different object pointer type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
763,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
764,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,489,"Increment or decrement operation performed on pointer.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
765,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__result' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
766,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
767,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
768,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
769,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
770,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
771,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
772,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
773,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
774,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
775,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
776,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,2100,"Integral promotion : unsigned char promoted to signed int.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
777,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
778,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3112,"This statement has no side-effect - it can be removed.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
779,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3122,"Hard-coded 'magic' string literal.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
780,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3200,"__builtin_strcmp' returns a value which is not being used.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
781,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
782,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
783,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
784,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
785,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
786,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
787,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
788,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
789,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
790,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3326,"An assignment operator is being used in a boolean expression.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
791,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3346,"This 'if' control expression has a constant 'true' value.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
792,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
793,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
794,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
795,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
796,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
797,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
798,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
799,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
800,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
801,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
802,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
803,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
804,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
805,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
806,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
807,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
808,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
809,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
810,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
811,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
812,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
813,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
814,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
815,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3416,"This boolean expression contains side effects.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
816,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3417,"The comma operator has been used outside a for-loop header.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
817,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3446,"The result operands of this conditional operator generate side effects","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
818,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3631,"Type 'char' has been used in a cast.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
819,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3760,"Implicit conversion: int to unsigned int.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
820,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
821,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
822,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
823,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,45,2209,"This brace style is not consistent with 'exdented' style.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
824,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",347,13,3200,"strcat' returns a value which is not being used.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
825,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",347,37,3122,"Hard-coded 'magic' string literal.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
826,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",347,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
827,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",348,13,3200,"strcat' returns a value which is not being used.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
828,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",348,37,3122,"Hard-coded 'magic' string literal.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
829,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",348,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
830,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",350,13,2209,"This brace style is not consistent with 'exdented' style.","  350:	        else{
",,,
831,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",350,13,3201,"This statement is unreachable.","  350:	        else{
",,,
832,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",351,13,3200,"strcat' returns a value which is not being used.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
833,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",351,37,3122,"Hard-coded 'magic' string literal.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
834,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",351,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
835,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,306,"[I] Cast between a pointer to object and an integral type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
836,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,310,"Casting to different object pointer type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
837,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
838,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,489,"Increment or decrement operation performed on pointer.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
839,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__result' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
840,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
841,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
842,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
843,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
844,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
845,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
846,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
847,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
848,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
849,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
850,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,2100,"Integral promotion : unsigned char promoted to signed int.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
851,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
852,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3112,"This statement has no side-effect - it can be removed.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
853,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3122,"Hard-coded 'magic' string literal.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
854,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3200,"__builtin_strcmp' returns a value which is not being used.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
855,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
856,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
857,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
858,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
859,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
860,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
861,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
862,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
863,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
864,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3326,"An assignment operator is being used in a boolean expression.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
865,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3346,"This 'if' control expression has a constant 'true' value.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
866,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
867,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
868,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
869,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
870,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
871,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
872,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
873,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
874,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
875,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
876,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
877,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
878,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
879,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
880,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
881,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
882,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
883,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
884,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
885,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
886,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
887,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
888,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
889,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3416,"This boolean expression contains side effects.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
890,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3417,"The comma operator has been used outside a for-loop header.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
891,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3446,"The result operands of this conditional operator generate side effects","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
892,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3631,"Type 'char' has been used in a cast.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
893,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3760,"Implicit conversion: int to unsigned int.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
894,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
895,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
896,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
897,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,45,2209,"This brace style is not consistent with 'exdented' style.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
898,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",354,13,3200,"strcat' returns a value which is not being used.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
899,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",354,37,3122,"Hard-coded 'magic' string literal.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
900,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",354,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
901,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",355,13,3200,"strcat' returns a value which is not being used.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
902,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",355,37,3122,"Hard-coded 'magic' string literal.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
903,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",355,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
904,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",357,13,2209,"This brace style is not consistent with 'exdented' style.","  357:	        else{
",,,
905,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",357,13,3201,"This statement is unreachable.","  357:	        else{
",,,
906,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",358,13,3200,"strcat' returns a value which is not being used.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
907,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",358,37,3122,"Hard-coded 'magic' string literal.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
908,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",358,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
909,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,306,"[I] Cast between a pointer to object and an integral type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
910,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,310,"Casting to different object pointer type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
911,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
912,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,489,"Increment or decrement operation performed on pointer.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
913,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__result' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
914,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
915,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
916,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
917,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
918,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
919,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
920,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
921,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
922,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
923,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
924,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,2100,"Integral promotion : unsigned char promoted to signed int.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
925,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
926,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3112,"This statement has no side-effect - it can be removed.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
927,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3122,"Hard-coded 'magic' string literal.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
928,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3200,"__builtin_strcmp' returns a value which is not being used.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
929,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
930,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
931,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
932,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
933,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
934,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
935,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
936,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
937,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
938,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3326,"An assignment operator is being used in a boolean expression.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
939,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3346,"This 'if' control expression has a constant 'true' value.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
940,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
941,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
942,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
943,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
944,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
945,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
946,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
947,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
948,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
949,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
950,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
951,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
952,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
953,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
954,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
955,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
956,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
957,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
958,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
959,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
960,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
961,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
962,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
963,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3416,"This boolean expression contains side effects.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
964,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3417,"The comma operator has been used outside a for-loop header.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
965,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3446,"The result operands of this conditional operator generate side effects","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
966,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3631,"Type 'char' has been used in a cast.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
967,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3760,"Implicit conversion: int to unsigned int.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
968,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
969,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
970,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
971,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,45,2209,"This brace style is not consistent with 'exdented' style.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
972,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",361,13,3200,"strcat' returns a value which is not being used.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
973,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",361,37,3122,"Hard-coded 'magic' string literal.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
974,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",361,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
975,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",362,13,3200,"strcat' returns a value which is not being used.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
976,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",362,37,3122,"Hard-coded 'magic' string literal.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
977,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",362,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
978,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",364,13,2209,"This brace style is not consistent with 'exdented' style.","  364:	        else{
",,,
979,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",364,13,3201,"This statement is unreachable.","  364:	        else{
",,,
980,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",365,13,3200,"strcat' returns a value which is not being used.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
981,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",365,37,3122,"Hard-coded 'magic' string literal.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
982,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",365,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
983,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,306,"[I] Cast between a pointer to object and an integral type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
984,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,310,"Casting to different object pointer type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
985,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
986,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,489,"Increment or decrement operation performed on pointer.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
987,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__result' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
988,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
989,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
990,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
991,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
992,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
993,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
994,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
995,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
996,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
997,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
998,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,2100,"Integral promotion : unsigned char promoted to signed int.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
999,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1000,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3112,"This statement has no side-effect - it can be removed.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1001,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3122,"Hard-coded 'magic' string literal.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1002,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3200,"__builtin_strcmp' returns a value which is not being used.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1003,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1004,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1005,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1006,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1007,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1008,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1009,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1010,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1011,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1012,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3326,"An assignment operator is being used in a boolean expression.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1013,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3346,"This 'if' control expression has a constant 'true' value.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1014,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1015,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1016,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1017,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1018,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1019,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1020,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1021,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1022,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1023,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1024,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1025,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1026,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1027,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1028,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1029,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1030,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1031,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1032,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1033,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1034,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1035,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1036,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1037,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3416,"This boolean expression contains side effects.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1038,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3417,"The comma operator has been used outside a for-loop header.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1039,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3446,"The result operands of this conditional operator generate side effects","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1040,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3631,"Type 'char' has been used in a cast.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1041,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3760,"Implicit conversion: int to unsigned int.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1042,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1043,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1044,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1045,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,45,2209,"This brace style is not consistent with 'exdented' style.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
1046,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",368,13,3200,"strcat' returns a value which is not being used.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
1047,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",368,37,3122,"Hard-coded 'magic' string literal.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
1048,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",368,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
1049,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",369,13,3200,"strcat' returns a value which is not being used.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
1050,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",369,37,3122,"Hard-coded 'magic' string literal.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
1051,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",369,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
1052,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",371,13,2209,"This brace style is not consistent with 'exdented' style.","  371:	        else{
",,,
1053,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",371,13,3201,"This statement is unreachable.","  371:	        else{
",,,
1054,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",372,13,3200,"strcat' returns a value which is not being used.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
1055,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",372,37,3122,"Hard-coded 'magic' string literal.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
1056,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",372,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
1057,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",377,37,2209,"This brace style is not consistent with 'exdented' style.","  377:	    if(the_pOption-&gt;m_verbos == ON ){
",,,
1058,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",379,9,3200,"printf' returns a value which is not being used.","  379:	        printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_START);
",,,
1059,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",379,16,3122,"Hard-coded 'magic' string literal.","  379:	        printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_START);
",,,
1060,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",384,32,2209,"This brace style is not consistent with 'exdented' style.","  384:	    if(the_iRet != ANZ_SUCCESS){
",,,
1061,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",385,18,2001,"A 'goto' statement has been used.","  385:	        goto EXIT;
",,,
1062,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",390,32,2209,"This brace style is not consistent with 'exdented' style.","  390:	    if(the_iRet != ANZ_SUCCESS){
",,,
1063,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",392,18,2001,"A 'goto' statement has been used.","  392:	        goto EXIT;
",,,
1064,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",397,47,2209,"This brace style is not consistent with 'exdented' style.","  397:	    if(the_iMeasureType == ANZ_COMMON_MEASURE){
",,,
1065,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",400,36,2209,"This brace style is not consistent with 'exdented' style.","  400:	        if(the_iRet != ANZ_SUCCESS){
",,,
1066,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",401,22,2001,"A 'goto' statement has been used.","  401:	            goto EXIT;
",,,
1067,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",404,36,2209,"This brace style is not consistent with 'exdented' style.","  404:	        if(the_iRet != ANZ_SUCCESS){
",,,
1068,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",405,13,3200,"printf' returns a value which is not being used.","  405:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
1069,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",405,20,3122,"Hard-coded 'magic' string literal.","  405:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
1070,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",406,22,2001,"A 'goto' statement has been used.","  406:	            goto EXIT;
",,,
1071,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",410,46,2209,"This brace style is not consistent with 'exdented' style.","  410:	    if(the_iMeasureType == ANZ_TREND_MEASURE){
",,,
1072,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",413,36,2209,"This brace style is not consistent with 'exdented' style.","  413:	        if(the_iRet != ANZ_SUCCESS){
",,,
1073,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",414,22,2001,"A 'goto' statement has been used.","  414:	            goto EXIT;
",,,
1074,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",417,36,2209,"This brace style is not consistent with 'exdented' style.","  417:	        if(the_iRet != ANZ_SUCCESS){
",,,
1075,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",418,13,3200,"printf' returns a value which is not being used.","  418:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
1076,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",418,20,3122,"Hard-coded 'magic' string literal.","  418:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
1077,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",419,22,2001,"A 'goto' statement has been used.","  419:	            goto EXIT;
",,,
1078,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",424,36,2209,"This brace style is not consistent with 'exdented' style.","  424:	    if(the_pOption-&gt;m_verbos == ON){
",,,
1079,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",425,40,2209,"This brace style is not consistent with 'exdented' style.","  425:	        if(the_pAnzInfo-&gt;m_err == NULL){
",,,
1080,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",426,13,3200,"printf' returns a value which is not being used.","  426:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
1081,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",426,20,3122,"Hard-coded 'magic' string literal.","  426:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
1082,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",428,13,2209,"This brace style is not consistent with 'exdented' style.","  428:	        else{
",,,
1083,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",429,13,3200,"printf' returns a value which is not being used.","  429:	            printf(""%s%s%s\n"",MSG_MEASURE_FILE_ERROR,the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
1084,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",429,20,3122,"Hard-coded 'magic' string literal.","  429:	            printf(""%s%s%s\n"",MSG_MEASURE_FILE_ERROR,the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
1085,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,1,2015,"This label is not a case or default label for a switch statement.","  433:	EXIT:;
",,,
1086,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,1,2201,"This indentation is not consistent with previous indentation in this file.","  433:	EXIT:;
",,,
1087,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,6,3109,"Empty statement (';' on its own) - if this is deliberate, it is best to put ';' on a line by itself.","  433:	EXIT:;
",,,
1088,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,6,3139,"Null statement is obscured by code or comment on the same line.","  433:	EXIT:;
",,,
1089,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",435,29,505,"[U] Dereferencing pointer value that is apparently NULL.","  435:	    the_iRet = OutErrorFile(the_pAnzInfo-&gt;m_err);
",,,
1090,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",436,42,2209,"This brace style is not consistent with 'exdented' style.","  436:	    if(the_iRet == ANZ_ERR_MEMORY_FAILED){
",,,
1091,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",437,9,3200,"printf' returns a value which is not being used.","  437:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
1092,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",437,16,3122,"Hard-coded 'magic' string literal.","  437:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
1093,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",442,31,2209,"This brace style is not consistent with 'exdented' style.","  442:	    if(the_pCmdOption != NULL){
",,,
1094,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",444,9,3199,"The value of 'the_pCmdOption' is never used following this assignment.","  444:	        the_pCmdOption = NULL;
",,,
1095,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",447,34,2209,"This brace style is not consistent with 'exdented' style.","  447:	    if(the_pMeasureItem != NULL) {
",,,
1096,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",449,9,3199,"The value of 'the_pMeasureItem' is never used following this assignment.","  449:	        the_pMeasureItem = NULL;
",,,
1097,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",455,8,3344,"Value of control expression is not derived from an explicit logical operation.","  455:	    if(g_bOutTime) {
",,,
1098,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",455,20,2209,"This brace style is not consistent with 'exdented' style.","  455:	    if(g_bOutTime) {
",,,
1099,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",456,9,3200,"ftime' returns a value which is not being used.","  456:	        ftime(&amp;the_ed);
",,,
1100,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,9,3200,"printf' returns a value which is not being used.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
1101,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,9,3395,"Operators in the set + - * / with different precedence have been used. Extra parentheses recommended.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
1102,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,9,3401,"Possible precedence confusion: extra parentheses are recommended here.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
1103,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,16,3122,"Hard-coded 'magic' string literal.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
1104,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,69,1253,"Unsuffixed integer constant implicitly converted to another type.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
1105,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,71,3120,"Hard-coded 'magic' integer constant '1000'.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
1106,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,94,2101,"Integral promotion : unsigned short promoted to signed int.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
1107,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",473,2,2017,"Comment spans more than one line.","  473:	*/
",,,
1108,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,26,3227,"The parameter 'sig' is never modified and so it could be declared with the 'const' qualifier.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
1109,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,35,3206,"The parameter 'code' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
1110,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,47,3206,"The parameter 'scp' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
1111,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,53,3625,"Type 'char' has been used in the declaration of an object or a function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
1112,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,59,344,"K&amp;R compilers do not support function prototypes.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
1113,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,59,3206,"The parameter 'addr' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
1114,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",480,5,3625,"Type 'char' has been used in the declaration of an object or a function.","  480:	    char the_errMsg[128]; /* エラーメッセージ */
",,,
1115,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",480,21,3132,"Hard coded 'magic' number '128' used to define the size of an array.","  480:	    char the_errMsg[128]; /* エラーメッセージ */
",,,
1116,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",483,16,2209,"This brace style is not consistent with 'exdented' style.","  483:	    switch(sig){
",,,
1117,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",485,9,3200,"sprintf' returns a value which is not being used.","  485:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGINT(%d)\n"",sig );
",,,
1118,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",485,28,3122,"Hard-coded 'magic' string literal.","  485:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGINT(%d)\n"",sig );
",,,
1119,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",486,9,3200,"fprintf' returns a value which is not being used.","  486:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
1120,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",486,31,3122,"Hard-coded 'magic' string literal.","  486:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
1121,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",489,9,3200,"sprintf' returns a value which is not being used.","  489:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGQUIT(%d)\n"",sig );
",,,
1122,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",489,28,3122,"Hard-coded 'magic' string literal.","  489:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGQUIT(%d)\n"",sig );
",,,
1123,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",490,9,3200,"fprintf' returns a value which is not being used.","  490:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
1124,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",490,31,3122,"Hard-coded 'magic' string literal.","  490:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
1125,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",493,9,3200,"sprintf' returns a value which is not being used.","  493:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGKILL(%d)\n"",sig );
",,,
1126,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",493,28,3122,"Hard-coded 'magic' string literal.","  493:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGKILL(%d)\n"",sig );
",,,
1127,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",494,9,3200,"fprintf' returns a value which is not being used.","  494:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
1128,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",494,31,3122,"Hard-coded 'magic' string literal.","  494:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
1129,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",497,9,3200,"sprintf' returns a value which is not being used.","  497:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGTERM(%d)\n"",sig );
",,,
1130,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",497,28,3122,"Hard-coded 'magic' string literal.","  497:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGTERM(%d)\n"",sig );
",,,
1131,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",498,9,3200,"fprintf' returns a value which is not being used.","  498:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
1132,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",498,31,3122,"Hard-coded 'magic' string literal.","  498:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
1133,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",501,9,3200,"sprintf' returns a value which is not being used.","  501:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGFPE(%d)\n"",sig );
",,,
1134,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",501,28,3122,"Hard-coded 'magic' string literal.","  501:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGFPE(%d)\n"",sig );
",,,
1135,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",502,9,3200,"fprintf' returns a value which is not being used.","  502:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
1136,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",502,31,3122,"Hard-coded 'magic' string literal.","  502:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
1137,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",505,9,3200,"sprintf' returns a value which is not being used.","  505:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGILL(%d)\n"",sig );
",,,
1138,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",505,28,3122,"Hard-coded 'magic' string literal.","  505:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGILL(%d)\n"",sig );
",,,
1139,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",506,9,3200,"fprintf' returns a value which is not being used.","  506:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
1140,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",506,31,3122,"Hard-coded 'magic' string literal.","  506:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
1141,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",509,9,3200,"sprintf' returns a value which is not being used.","  509:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGBUS(%d)\n"",sig );
",,,
1142,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",509,28,3122,"Hard-coded 'magic' string literal.","  509:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGBUS(%d)\n"",sig );
",,,
1143,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",510,9,3200,"fprintf' returns a value which is not being used.","  510:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
1144,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",510,31,3122,"Hard-coded 'magic' string literal.","  510:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
1145,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",513,9,3200,"sprintf' returns a value which is not being used.","  513:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSEGV(%d)\n"",sig );
",,,
1146,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",513,28,3122,"Hard-coded 'magic' string literal.","  513:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSEGV(%d)\n"",sig );
",,,
1147,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",514,9,3200,"fprintf' returns a value which is not being used.","  514:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
1148,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",514,31,3122,"Hard-coded 'magic' string literal.","  514:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
1149,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",517,9,3200,"sprintf' returns a value which is not being used.","  517:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSYS(%d)\n"",sig );
",,,
1150,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",517,28,3122,"Hard-coded 'magic' string literal.","  517:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSYS(%d)\n"",sig );
",,,
1151,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",518,9,3200,"fprintf' returns a value which is not being used.","  518:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
1152,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",518,31,3122,"Hard-coded 'magic' string literal.","  518:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
1153,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",521,9,3200,"sprintf' returns a value which is not being used.","  521:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=%d\n"",sig );
",,,
1154,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",521,28,3122,"Hard-coded 'magic' string literal.","  521:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=%d\n"",sig );
",,,
1155,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",522,9,3200,"fprintf' returns a value which is not being used.","  522:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
1156,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",522,31,3122,"Hard-coded 'magic' string literal.","  522:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
1157,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",532,16,2209,"This brace style is not consistent with 'exdented' style.","  532:	    switch(sig){
",,,
1158,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",538,10,2003,"The preceding non-empty 'case' or 'default' clause does not end with an explicit 'break' or 'return' statement.","  538:	    case SIGFPE :
",,,
1159,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",545,5,2002,"No 'default' case found in this 'switch' statement.","  545:	    }
",,,
1160,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",592,2,2017,"Comment spans more than one line.","  592:	*/
",,,
1161,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",594,1,3007,"""void"" has been omitted when defining a function with no parameters.","  594:	{
",,,
1162,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,5,428,"Function identifier is not followed by () but a function call may be intended.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
1163,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,5,3200,"signal' returns a value which is not being used.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
1164,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,23,432,"[C] Argument is not a compatible pointer type.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
1165,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,24,307,"[u] Cast between a pointer to object and a pointer to function.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
1166,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,5,428,"Function identifier is not followed by () but a function call may be intended.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
1167,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,5,3200,"signal' returns a value which is not being used.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
1168,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,23,432,"[C] Argument is not a compatible pointer type.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
1169,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,24,307,"[u] Cast between a pointer to object and a pointer to function.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
1170,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,5,428,"Function identifier is not followed by () but a function call may be intended.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
1171,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,5,3200,"signal' returns a value which is not being used.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
1172,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,23,432,"[C] Argument is not a compatible pointer type.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
1173,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,24,307,"[u] Cast between a pointer to object and a pointer to function.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
1174,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,5,428,"Function identifier is not followed by () but a function call may be intended.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
1175,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,5,3200,"signal' returns a value which is not being used.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
1176,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,23,432,"[C] Argument is not a compatible pointer type.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
1177,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,24,307,"[u] Cast between a pointer to object and a pointer to function.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
1178,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,5,428,"Function identifier is not followed by () but a function call may be intended.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
1179,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,5,3200,"signal' returns a value which is not being used.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
1180,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,22,432,"[C] Argument is not a compatible pointer type.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
1181,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,23,307,"[u] Cast between a pointer to object and a pointer to function.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
1182,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,5,428,"Function identifier is not followed by () but a function call may be intended.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
1183,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,5,3200,"signal' returns a value which is not being used.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
1184,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,23,432,"[C] Argument is not a compatible pointer type.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
1185,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,24,307,"[u] Cast between a pointer to object and a pointer to function.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
1186,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,5,428,"Function identifier is not followed by () but a function call may be intended.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
1187,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,5,3200,"signal' returns a value which is not being used.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
1188,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,23,432,"[C] Argument is not a compatible pointer type.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
1189,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,24,307,"[u] Cast between a pointer to object and a pointer to function.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
1190,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,5,428,"Function identifier is not followed by () but a function call may be intended.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
1191,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,5,3200,"signal' returns a value which is not being used.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
1192,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,23,432,"[C] Argument is not a compatible pointer type.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
1193,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,24,307,"[u] Cast between a pointer to object and a pointer to function.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
1194,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,5,428,"Function identifier is not followed by () but a function call may be intended.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
1195,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,5,3200,"signal' returns a value which is not being used.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
1196,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,23,432,"[C] Argument is not a compatible pointer type.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
1197,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,24,307,"[u] Cast between a pointer to object and a pointer to function.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
1198,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",622,2,2017,"Comment spans more than one line.","  622:	*/
",,,
1199,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",623,20,3625,"Type 'char' has been used in the declaration of an object or a function.","  623:	int ResetTrendPath(char *io_pPath)
",,,
1200,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",623,26,344,"K&amp;R compilers do not support function prototypes.","  623:	int ResetTrendPath(char *io_pPath)
",,,
1201,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",623,26,3227,"The parameter 'io_pPath' is never modified and so it could be declared with the 'const' qualifier.","  623:	int ResetTrendPath(char *io_pPath)
",,,
1202,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",625,9,2201,"This indentation is not consistent with previous indentation in this file.","  625:	        char the_szFullPath[MAX_PATH];
",,,
1203,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",625,9,3625,"Type 'char' has been used in the declaration of an object or a function.","  625:	        char the_szFullPath[MAX_PATH];
",,,
1204,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",626,9,2201,"This indentation is not consistent with previous indentation in this file.","  626:	        char the_szCurPath[MAX_PATH];
",,,
1205,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",626,9,3625,"Type 'char' has been used in the declaration of an object or a function.","  626:	        char the_szCurPath[MAX_PATH];
",,,
1206,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",627,9,2201,"This indentation is not consistent with previous indentation in this file.","  627:	        int the_iRet = ANZ_SUCCESS;
",,,
1207,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",627,13,2211,"the_iRet' is not aligned with the previously declared identifier.","  627:	        int the_iRet = ANZ_SUCCESS;
",,,
1208,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,9,2201,"This indentation is not consistent with previous indentation in this file.","  630:	        if(io_pPath[0] != '/') {
",,,
1209,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,20,506,"Dereferencing pointer value that is possibly NULL.","  630:	        if(io_pPath[0] != '/') {
",,,
1210,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,24,2106,"Integral promotion : plain char promoted to signed int.","  630:	        if(io_pPath[0] != '/') {
",,,
1211,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,27,3123,"Hard coded 'magic' character constant '/'.","  630:	        if(io_pPath[0] != '/') {
",,,
1212,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,32,2209,"This brace style is not consistent with 'exdented' style.","  630:	        if(io_pPath[0] != '/') {
",,,
1213,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",631,16,3416,"This boolean expression contains side effects.","  631:	            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {
",,,
1214,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",631,56,2209,"This brace style is not consistent with 'exdented' style.","  631:	            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {
",,,
1215,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",633,26,2001,"A 'goto' statement has been used.","  633:	                goto EXIT;
",,,
1216,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,306,"[I] Cast between a pointer to object and an integral type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1217,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,310,"Casting to different object pointer type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1218,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1219,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,489,"Increment or decrement operation performed on pointer.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1220,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,506,"Dereferencing pointer value that is possibly NULL.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1221,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,510,"Arithmetic operation on pointer value that is possibly NULL.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1222,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__result' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1223,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s1' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1224,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1225,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s2' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1226,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1227,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1228,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1229,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1251,"Suffixed integer constant causes implicit conversion of other operand.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1230,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1253,"Unsuffixed integer constant implicitly converted to another type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1231,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1302,"__builtin_constant_p()' must be declared before use in C++.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1232,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1302,"__builtin_strcmp()' must be declared before use in C++.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1233,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,2100,"Integral promotion : unsigned char promoted to signed int.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1234,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1235,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3112,"This statement has no side-effect - it can be removed.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1236,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3122,"Hard-coded 'magic' string literal.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1237,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3200,"__builtin_strcmp' returns a value which is not being used.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1238,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1239,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1240,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1241,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1242,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1243,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1244,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1245,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1246,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1247,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3326,"An assignment operator is being used in a boolean expression.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1248,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3346,"This 'if' control expression has a constant 'true' value.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1249,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1250,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1251,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1252,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1253,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1254,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1255,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1256,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1257,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1258,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1259,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1260,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1261,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1262,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1263,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1264,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1265,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1266,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1267,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1268,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1269,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1270,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3401,"Possible precedence confusion: extra parentheses are recommended here.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1271,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1272,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3416,"This boolean expression contains side effects.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1273,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3417,"The comma operator has been used outside a for-loop header.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1274,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3446,"The result operands of this conditional operator generate side effects","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1275,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3631,"Type 'char' has been used in a cast.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1276,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3760,"Implicit conversion: int to unsigned int.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1277,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1278,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1279,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,36,1251,"Suffixed integer constant causes implicit conversion of other operand.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1280,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,42,2209,"This brace style is not consistent with 'exdented' style.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
1281,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",636,17,3200,"sprintf' returns a value which is not being used.","  636:	                sprintf(the_szFullPath,""%s/%s"",the_szCurPath,io_pPath);
",,,
1282,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",636,40,3122,"Hard-coded 'magic' string literal.","  636:	                sprintf(the_szFullPath,""%s/%s"",the_szCurPath,io_pPath);
",,,
1283,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",639,9,2201,"This indentation is not consistent with previous indentation in this file.","  639:	        else {
",,,
1284,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",639,14,2209,"This brace style is not consistent with 'exdented' style.","  639:	        else {
",,,
1285,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",640,22,2001,"A 'goto' statement has been used.","  640:	            goto EXIT;
",,,
1286,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",658,9,2201,"This indentation is not consistent with previous indentation in this file.","  658:	        strcpy(io_pPath,the_szFullPath);
",,,
1287,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",658,9,3200,"strcpy' returns a value which is not being used.","  658:	        strcpy(io_pPath,the_szFullPath);
",,,
1288,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",659,1,2015,"This label is not a case or default label for a switch statement.","  659:	EXIT:
",,,
1289,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",659,1,2201,"This indentation is not consistent with previous indentation in this file.","  659:	EXIT:
",,,
1290,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",660,9,2201,"This indentation is not consistent with previous indentation in this file.","  660:	        return the_iRet;
",,,
