"ID","Directory","Source name","File name","Line number","Character number","Rule number","Warning message","Code","Reference","Comment","Status"
3871,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",1,1,240,"[E] This file contains the control-M character at the end of a line.","    1:	/*
",,"description for warning (3871)","Registered"
3872,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",9,16,288,"[I] Source file '/home/www/TOSCANA_dev/BackEnd/AnalyzeTaskManager/work/1/work/sample_c_cpp/sample_c/src/analyzeme.c' has comments containing characters which are not members of the basic source character set.","    9:	      AnalyzeMeのメイン関数を定義する
",,"description for warning (3872)","Registered"
3873,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",16,2,2017,"Comment spans more than one line.","   16:	*/
",,"description for warning (3873)","Registered"
3874,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",20,2,2017,"Comment spans more than one line.","   20:	*/
",,"description for warning (3874)","Registered"
3875,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",21,1,838,"File has already been included directly from this file.","   21:	#include ""analyzeme.h""
",,"description for warning (3875)","Registered"
3876,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",21,1,839,"File has already been included indirectly from this file.","   21:	#include ""analyzeme.h""
",,"description for warning (3876)","Registered"
3877,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",21,23,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   21:	#include ""analyzeme.h""
",,"description for warning (3877)","Registered"
3878,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",22,1,839,"File has already been included indirectly from this file.","   22:	#include ""common.h""
",,"description for warning (3878)","Registered"
3879,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",23,1,839,"File has already been included indirectly from this file.","   23:	#include ""memory_manage.h""
",,"description for warning (3879)","Registered"
3880,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",23,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   23:	#include ""memory_manage.h""
",,"description for warning (3880)","Registered"
3881,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",24,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   24:	#include ""parse_cmdline.h""
",,"original description for warning (3881)","Registered"
3882,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",25,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   25:	#include ""common_measure.h""
",,"original description for warning (3882)","Registered"
3883,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",26,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   26:	#include ""trend_measure.h""
",,"original description for warning (3883)","Registered"
3884,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",27,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   27:	#include ""make_file_list.h""
",,"original description for warning (3884)","Registered"
3885,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",29,31,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   29:	#include ""get_process_macro.h""
",,"original description for warning (3885)","Registered"
3886,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",30,1,839,"File has already been included indirectly from this file.","   30:	#include &lt;signal.h&gt;
",,"original description for warning (3886)","Registered"
3887,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,"original description for warning (3887)","Registered"
3888,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
3889,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,13,3211,"The global identifier 'TRACEFILE' is defined but not used.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
3890,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",35,13,3408,"TRACEFILE' has external linkage but is being defined without any previous declaration.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
3891,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",36,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
3892,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",36,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
3893,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",36,13,3408,"APPLOGFILE' has external linkage but is being defined without any previous declaration.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
3894,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",44,7,3408,"g_fpLogFile' has external linkage but is being defined without any previous declaration.","   44:	FILE *g_fpLogFile = NULL;       /* Log File pointer */
",,,
3895,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",46,7,3211,"The global identifier 'g_fpTraceFile' is defined but not used.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
3896,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",46,7,3408,"g_fpTraceFile' has external linkage but is being defined without any previous declaration.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
3897,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",48,7,3408,"g_fpErrorFile' has external linkage but is being defined without any previous declaration.","   48:	FILE *g_fpErrorFile = NULL;
",,,
3898,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",50,6,3408,"g_bTrace' has external linkage but is being defined without any previous declaration.","   50:	bool g_bTrace           = false;    /* Trace flag */
",,,
3899,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",51,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
3900,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",51,6,3408,"g_szNVPath' has external linkage but is being defined without any previous declaration.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
3901,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",51,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
3902,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",52,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
3903,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",52,6,3408,"g_szOVPath' has external linkage but is being defined without any previous declaration.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
3904,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",52,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
3905,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",53,6,3408,"g_bTrendFile' has external linkage but is being defined without any previous declaration.","   53:	bool g_bTrendFile = false;
",,,
3906,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",55,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   55:	char *g_optionFileCont = NULL;
",,,
3907,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",55,7,3211,"The global identifier 'g_optionFileCont' is defined but not used.","   55:	char *g_optionFileCont = NULL;
",,,
3908,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",55,7,3408,"g_optionFileCont' has external linkage but is being defined without any previous declaration.","   55:	char *g_optionFileCont = NULL;
",,,
3909,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",57,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   57:	char *g_symbolFileCont = NULL;
",,,
3910,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",57,7,3211,"The global identifier 'g_symbolFileCont' is defined but not used.","   57:	char *g_symbolFileCont = NULL;
",,,
3911,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",57,7,3408,"g_symbolFileCont' has external linkage but is being defined without any previous declaration.","   57:	char *g_symbolFileCont = NULL;
",,,
3912,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",58,6,3408,"g_bOutTime' has external linkage but is being defined without any previous declaration.","   58:	bool g_bOutTime = false;
",,,
3913,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",59,15,3408,"g_pAnzInfo' has external linkage but is being defined without any previous declaration.","   59:	ST_AnalyzeMe *g_pAnzInfo;  /* AnalyzeMe管理情報 */
",,,
3914,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",69,2,2017,"Comment spans more than one line.","   69:	*/
",,,
3915,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",70,14,3227,"The parameter 'argc' is never modified and so it could be declared with the 'const' qualifier.","   70:	int main(int argc,char * argv[])
",,,
3916,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",70,19,3625,"Type 'char' has been used in the declaration of an object or a function.","   70:	int main(int argc,char * argv[])
",,,
3917,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",70,26,344,"K&amp;R compilers do not support function prototypes.","   70:	int main(int argc,char * argv[])
",,,
3918,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",75,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
3919,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",75,28,2211,"the_pMeasureItem' is not aligned with the previously declared identifier.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
3920,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
3921,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,10,2211,"the_szCurMetrics' is not aligned with the previously declared identifier.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
3922,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,10,3604,"Local arrays and structures cannot be initialised in K&amp;R C.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
3923,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",76,44,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
3924,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",80,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   80:	    char *the_pTrace = NULL;
",,,
3925,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",80,11,2211,"the_pTrace' is not aligned with the previously declared identifier.","   80:	    char *the_pTrace = NULL;
",,,
3926,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",80,11,3197,"The initialiser for 'the_pTrace' is always modified before being used.","   80:	    char *the_pTrace = NULL;
",,,
3927,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",81,25,2211,"the_st' is not aligned with the previously declared identifier.","   81:	    struct timeb the_st ;
",,,
3928,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",89,5,3198,"The value assigned to 'the_pAnzInfo' is always modified before being used.","   89:	    the_pAnzInfo = NULL;
",,,
3929,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",91,5,3198,"The value assigned to 'the_iRet' is always modified before being used.","   91:	    the_iRet = ANZ_SUCCESS;
",,,
3930,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",101,25,3122,"Hard-coded 'magic' string literal.","  101:	    the_pTrace = getenv(""AnzTrace"");
",,,
3931,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",102,28,2209,"This brace style is not consistent with 'exdented' style.","  102:	    if(the_pTrace != NULL) {
",,,
3932,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,306,"[I] Cast between a pointer to object and an integral type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3933,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,310,"Casting to different object pointer type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3934,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3935,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,489,"Increment or decrement operation performed on pointer.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3936,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__result' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3937,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3938,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3939,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3940,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3941,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3942,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3943,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3944,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3945,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3946,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3947,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,2100,"Integral promotion : unsigned char promoted to signed int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3948,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3949,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3112,"This statement has no side-effect - it can be removed.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3950,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3122,"Hard-coded 'magic' string literal.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3951,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3200,"__builtin_strcmp' returns a value which is not being used.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3952,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3953,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3954,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3955,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3956,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3957,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3958,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3959,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3960,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3961,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3325,"This control expression has a constant 'false' value.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3962,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3326,"An assignment operator is being used in a boolean expression.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3963,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3964,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3965,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3966,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3967,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3968,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3969,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3970,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3971,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3972,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3973,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3974,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3975,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3976,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3977,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3978,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3979,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3980,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3981,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3982,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3983,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3984,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3985,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3986,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3416,"This boolean expression contains side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3987,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3417,"The comma operator has been used outside a for-loop header.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3988,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3446,"The result operands of this conditional operator generate side effects","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3989,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3631,"Type 'char' has been used in a cast.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3990,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,12,3760,"Implicit conversion: int to unsigned int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3991,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,35,3209,"__builtin_strcmp()' returns a value which is always ignored.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3992,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3993,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3994,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,36,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3995,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,43,2209,"This brace style is not consistent with 'exdented' style.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3996,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",103,43,3201,"This statement is unreachable.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
3997,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",113,6,2017,"Comment spans more than one line.","  113:	    */
",,,
3998,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",114,36,3122,"Hard-coded 'magic' string literal.","  114:	    g_fpLogFile = fopen(APPLOGFILE,""w"");
",,,
3999,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",115,28,2209,"This brace style is not consistent with 'exdented' style.","  115:	    if(g_fpLogFile == NULL){
",,,
4000,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",116,9,3200,"printf' returns a value which is not being used.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
4001,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",116,16,3122,"Hard-coded 'magic' string literal.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
4002,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",120,5,702,"Result of sizeof operator is not explicitly cast.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
4003,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",120,63,3430,"Macro argument expression requires parentheses.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
4004,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",121,29,2209,"This brace style is not consistent with 'exdented' style.","  121:	    if(the_pAnzInfo == NULL){
",,,
4005,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",122,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  122:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
4006,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",123,18,2001,"A 'goto' statement has been used.","  123:	        goto EXIT;
",,,
4007,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",125,5,702,"Result of sizeof operator is not explicitly cast.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
4008,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",125,5,3200,"memset' returns a value which is not being used.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
4009,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",128,5,702,"Result of sizeof operator is not explicitly cast.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
4010,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",128,67,3430,"Macro argument expression requires parentheses.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
4011,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",129,39,2209,"This brace style is not consistent with 'exdented' style.","  129:	    if(the_pAnzInfo-&gt;m_option == NULL){
",,,
4012,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",130,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  130:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
4013,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",131,18,2001,"A 'goto' statement has been used.","  131:	        goto EXIT;
",,,
4014,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",133,5,702,"Result of sizeof operator is not explicitly cast.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
4015,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",133,5,3200,"memset' returns a value which is not being used.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
4016,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,702,"Result of sizeof operator is not explicitly cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
4017,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,3631,"Type 'char' has been used in a cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
4018,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,3633,"Type 'char' has been used in the operand of the sizeof operator.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
4019,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",137,5,3760,"Implicit conversion: int to unsigned int.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
4020,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",138,34,2209,"This brace style is not consistent with 'exdented' style.","  138:	    if(the_pMeasureItem == NULL) {
",,,
4021,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",139,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  139:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
4022,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",140,18,2001,"A 'goto' statement has been used.","  140:	        goto EXIT;
",,,
4023,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,5,702,"Result of sizeof operator is not explicitly cast.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
4024,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,5,3200,"memset' returns a value which is not being used.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
4025,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,36,3760,"Implicit conversion: int to unsigned int.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
4026,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",142,45,3633,"Type 'char' has been used in the operand of the sizeof operator.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
4027,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",150,5,3200,"strcpy' returns a value which is not being used.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
4028,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",150,34,3122,"Hard-coded 'magic' string literal.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
4029,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",154,5,3200,"strcpy' returns a value which is not being used.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
4030,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",154,39,3122,"Hard-coded 'magic' string literal.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
4031,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",155,5,3200,"strcpy' returns a value which is not being used.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
4032,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",155,38,3122,"Hard-coded 'magic' string literal.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
4033,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",156,5,3200,"strcpy' returns a value which is not being used.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
4034,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",156,38,3122,"Hard-coded 'magic' string literal.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
4035,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",165,32,3120,"Hard-coded 'magic' integer constant '70'.","  165:	    the_pOption-&gt;m_symThresh = 70;
",,,
4036,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",166,32,3120,"Hard-coded 'magic' integer constant '2'.","  166:	    the_pOption-&gt;m_minThresh = 2;
",,,
4037,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",169,5,702,"Result of sizeof operator is not explicitly cast.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
4038,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",169,59,3430,"Macro argument expression requires parentheses.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
4039,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",170,31,2209,"This brace style is not consistent with 'exdented' style.","  170:	    if(the_pCmdOption == NULL){
",,,
4040,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",171,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  171:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
4041,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",172,18,2001,"A 'goto' statement has been used.","  172:	        goto EXIT;
",,,
4042,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",174,5,702,"Result of sizeof operator is not explicitly cast.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
4043,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",174,5,3200,"memset' returns a value which is not being used.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
4044,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",180,5,3200,"strcpy' returns a value which is not being used.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
4045,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",180,37,3122,"Hard-coded 'magic' string literal.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
4046,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",184,5,3200,"strcpy' returns a value which is not being used.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
4047,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",184,42,3122,"Hard-coded 'magic' string literal.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
4048,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",185,5,3200,"strcpy' returns a value which is not being used.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
4049,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",185,41,3122,"Hard-coded 'magic' string literal.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
4050,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",186,5,3200,"strcpy' returns a value which is not being used.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
4051,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",186,41,3122,"Hard-coded 'magic' string literal.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
4052,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",195,35,3120,"Hard-coded 'magic' integer constant '70'.","  195:	    the_pCmdOption-&gt;m_symThresh = 70;
",,,
4053,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",196,35,3120,"Hard-coded 'magic' integer constant '2'.","  196:	    the_pCmdOption-&gt;m_minThresh = 2;
",,,
4054,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",200,32,2209,"This brace style is not consistent with 'exdented' style.","  200:	    if(the_iRet != ANZ_SUCCESS){
",,,
4055,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",201,18,2001,"A 'goto' statement has been used.","  201:	        goto EXIT;
",,,
4056,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",203,8,3344,"Value of control expression is not derived from an explicit logical operation.","  203:	    if(g_bOutTime) {
",,,
4057,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",203,20,2209,"This brace style is not consistent with 'exdented' style.","  203:	    if(g_bOutTime) {
",,,
4058,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",204,9,3200,"ftime' returns a value which is not being used.","  204:	        ftime(&amp;the_st);
",,,
4059,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",209,32,2209,"This brace style is not consistent with 'exdented' style.","  209:	    if(the_iRet != ANZ_SUCCESS){
",,,
4060,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",210,18,2001,"A 'goto' statement has been used.","  210:	        goto EXIT;
",,,
4061,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",214,32,2209,"This brace style is not consistent with 'exdented' style.","  214:	    if(the_iRet != ANZ_SUCCESS){
",,,
4062,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",215,18,2001,"A 'goto' statement has been used.","  215:	        goto EXIT;
",,,
4063,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",218,23,3355,"The result of this logical operation is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
4064,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",218,23,3358,"The value of this 'if' control expression is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
4065,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",218,31,2209,"This brace style is not consistent with 'exdented' style.","  218:	    if(the_pCmdOption != NULL){
",,,
4066,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",224,32,2209,"This brace style is not consistent with 'exdented' style.","  224:	    if(the_iRet != ANZ_SUCCESS){
",,,
4067,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",225,18,2001,"A 'goto' statement has been used.","  225:	        goto EXIT;
",,,
4068,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",229,32,2209,"This brace style is not consistent with 'exdented' style.","  229:	    if(the_iRet != ANZ_SUCCESS){
",,,
4069,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",230,18,2001,"A 'goto' statement has been used.","  230:	        goto EXIT;
",,,
4070,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",233,47,2209,"This brace style is not consistent with 'exdented' style.","  233:	    if(the_iMeasureType == ANZ_TREND_MEASURE) {
",,,
4071,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",234,13,3220,"Identifier declared at a nested level of block scope.","  234:	        int the_iType = -1;
",,,
4072,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",235,13,3220,"Identifier declared at a nested level of block scope.","  235:	        int the_pPos = -1;
",,,
4073,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",236,9,3200,"isDirOrFile' returns a value which is not being used.","  236:	        isDirOrFile(*the_pMeasureItem,&amp;the_iType);
",,,
4074,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",237,35,2209,"This brace style is not consistent with 'exdented' style.","  237:	        if(the_iType == ANZ_FILE) {
",,,
4075,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",242,30,2209,"This brace style is not consistent with 'exdented' style.","  242:	            if(the_pPos &gt; 0) {
",,,
4076,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",243,55,488,"Performing pointer arithmetic.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
4077,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",243,66,489,"Increment or decrement operation performed on pointer.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
4078,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",246,43,489,"Increment or decrement operation performed on pointer.","  246:	            GetPathPos(*(the_pMeasureItem + 1),&amp;the_pPos);
",,,
4079,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",248,30,2209,"This brace style is not consistent with 'exdented' style.","  248:	            if(the_pPos &gt; 0) {
",,,
4080,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,36,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
4081,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,42,3501,"This could be read as an old-style assignment operator. Spaces are needed to make it more readable.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
4082,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,61,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
4083,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,66,488,"Performing pointer arithmetic.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
4084,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",249,77,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
4085,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",252,13,3198,"The value assigned to 'the_iRet' is always modified before being used.","  252:	            the_iRet = ResetTrendPath(g_szNVPath);
",,,
4086,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",254,41,2209,"This brace style is not consistent with 'exdented' style.","  254:	            if(the_iRet != ANZ_SUCCESS) {
",,,
4087,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",255,26,2001,"A 'goto' statement has been used.","  255:	                goto EXIT;
",,,
4088,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",260,51,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
4089,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",260,57,3631,"Type 'char' has been used in a cast.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
4090,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",261,41,2209,"This brace style is not consistent with 'exdented' style.","  261:	    if(the_iRet == ANZ_NO_MEASURE_FILES){
",,,
4091,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",262,9,3200,"printf' returns a value which is not being used.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
4092,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",262,16,3122,"Hard-coded 'magic' string literal.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
4093,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",264,42,2209,"This brace style is not consistent with 'exdented' style.","  264:	    if(the_iRet == ANZ_ERR_MEMORY_FAILED){
",,,
4094,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",265,9,3200,"printf' returns a value which is not being used.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
4095,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",265,16,3122,"Hard-coded 'magic' string literal.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
4096,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",267,32,2209,"This brace style is not consistent with 'exdented' style.","  267:	    if(the_iRet != ANZ_SUCCESS){
",,,
4097,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",268,18,2001,"A 'goto' statement has been used.","  268:	        goto EXIT;
",,,
4098,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",272,37,2209,"This brace style is not consistent with 'exdented' style.","  272:	    if(the_pOption-&gt;m_fileLOC == ON){
",,,
4099,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",273,9,3200,"strcat' returns a value which is not being used.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
4100,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",273,33,3122,"Hard-coded 'magic' string literal.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
4101,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",276,40,2209,"This brace style is not consistent with 'exdented' style.","  276:	    if(the_pOption-&gt;m_redundancy == ON){
",,,
4102,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,306,"[I] Cast between a pointer to object and an integral type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4103,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,310,"Casting to different object pointer type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4104,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4105,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,489,"Increment or decrement operation performed on pointer.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4106,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__result' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4107,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4108,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4109,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4110,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4111,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4112,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4113,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4114,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4115,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4116,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4117,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,2100,"Integral promotion : unsigned char promoted to signed int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4118,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4119,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3112,"This statement has no side-effect - it can be removed.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4120,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3122,"Hard-coded 'magic' string literal.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4121,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3200,"__builtin_strcmp' returns a value which is not being used.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4122,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4123,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4124,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4125,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4126,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4127,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4128,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4129,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4130,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4131,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3326,"An assignment operator is being used in a boolean expression.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4132,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3346,"This 'if' control expression has a constant 'true' value.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4133,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4134,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4135,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4136,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4137,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4138,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4139,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4140,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4141,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4142,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4143,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4144,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4145,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4146,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4147,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4148,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4149,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4150,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4151,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4152,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4153,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4154,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4155,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4156,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3416,"This boolean expression contains side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4157,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3417,"The comma operator has been used outside a for-loop header.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4158,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3446,"The result operands of this conditional operator generate side effects","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4159,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3631,"Type 'char' has been used in a cast.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4160,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,12,3760,"Implicit conversion: int to unsigned int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4161,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4162,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4163,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4164,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",277,45,2209,"This brace style is not consistent with 'exdented' style.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4165,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",278,13,3200,"strcat' returns a value which is not being used.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
4166,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",278,37,3122,"Hard-coded 'magic' string literal.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
4167,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",278,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
4168,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",279,13,3200,"strcat' returns a value which is not being used.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
4169,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",279,37,3122,"Hard-coded 'magic' string literal.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
4170,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",279,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
4171,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",281,13,2209,"This brace style is not consistent with 'exdented' style.","  281:	        else{
",,,
4172,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",281,13,3201,"This statement is unreachable.","  281:	        else{
",,,
4173,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",282,13,3200,"strcat' returns a value which is not being used.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
4174,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",282,37,3122,"Hard-coded 'magic' string literal.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
4175,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",282,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
4176,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",286,8,3344,"Value of control expression is not derived from an explicit logical operation.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
4177,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",286,31,2209,"This brace style is not consistent with 'exdented' style.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
4178,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,306,"[I] Cast between a pointer to object and an integral type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4179,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,310,"Casting to different object pointer type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4180,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4181,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,489,"Increment or decrement operation performed on pointer.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4182,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__result' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4183,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4184,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4185,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4186,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4187,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4188,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4189,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4190,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4191,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4192,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4193,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,2100,"Integral promotion : unsigned char promoted to signed int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4194,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4195,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3112,"This statement has no side-effect - it can be removed.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4196,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3122,"Hard-coded 'magic' string literal.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4197,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3200,"__builtin_strcmp' returns a value which is not being used.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4198,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4199,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4200,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4201,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4202,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4203,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4204,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4205,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4206,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4207,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3326,"An assignment operator is being used in a boolean expression.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4208,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3346,"This 'if' control expression has a constant 'true' value.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4209,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4210,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4211,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4212,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4213,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4214,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4215,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4216,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4217,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4218,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4219,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4220,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4221,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4222,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4223,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4224,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4225,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4226,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4227,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4228,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4229,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4230,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4231,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4232,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3416,"This boolean expression contains side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4233,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3417,"The comma operator has been used outside a for-loop header.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4234,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3446,"The result operands of this conditional operator generate side effects","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4235,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3631,"Type 'char' has been used in a cast.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4236,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,12,3760,"Implicit conversion: int to unsigned int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4237,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4238,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4239,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4240,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",287,45,2209,"This brace style is not consistent with 'exdented' style.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4241,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",288,13,3200,"strcat' returns a value which is not being used.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
4242,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",288,37,3122,"Hard-coded 'magic' string literal.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
4243,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",288,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
4244,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",289,13,3200,"strcat' returns a value which is not being used.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
4245,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",289,37,3122,"Hard-coded 'magic' string literal.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
4246,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",289,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
4247,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",291,13,2209,"This brace style is not consistent with 'exdented' style.","  291:	        else{
",,,
4248,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",291,13,3201,"This statement is unreachable.","  291:	        else{
",,,
4249,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",292,13,3200,"strcat' returns a value which is not being used.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
4250,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",292,37,3122,"Hard-coded 'magic' string literal.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
4251,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",292,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
4252,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",296,8,3344,"Value of control expression is not derived from an explicit logical operation.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
4253,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",296,28,2209,"This brace style is not consistent with 'exdented' style.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
4254,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,306,"[I] Cast between a pointer to object and an integral type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4255,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,310,"Casting to different object pointer type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4256,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4257,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,489,"Increment or decrement operation performed on pointer.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4258,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__result' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4259,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4260,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4261,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4262,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4263,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4264,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4265,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4266,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4267,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4268,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4269,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,2100,"Integral promotion : unsigned char promoted to signed int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4270,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4271,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3112,"This statement has no side-effect - it can be removed.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4272,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3122,"Hard-coded 'magic' string literal.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4273,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3200,"__builtin_strcmp' returns a value which is not being used.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4274,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4275,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4276,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4277,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4278,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4279,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4280,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4281,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4282,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4283,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3326,"An assignment operator is being used in a boolean expression.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4284,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3346,"This 'if' control expression has a constant 'true' value.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4285,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4286,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4287,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4288,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4289,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4290,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4291,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4292,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4293,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4294,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4295,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4296,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4297,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4298,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4299,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4300,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4301,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4302,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4303,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4304,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4305,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4306,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4307,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4308,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3416,"This boolean expression contains side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4309,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3417,"The comma operator has been used outside a for-loop header.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4310,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3446,"The result operands of this conditional operator generate side effects","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4311,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3631,"Type 'char' has been used in a cast.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4312,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,12,3760,"Implicit conversion: int to unsigned int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4313,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4314,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4315,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4316,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",297,45,2209,"This brace style is not consistent with 'exdented' style.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4317,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",298,13,3200,"strcat' returns a value which is not being used.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
4318,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",298,37,3122,"Hard-coded 'magic' string literal.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
4319,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",298,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
4320,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",299,13,3200,"strcat' returns a value which is not being used.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
4321,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",299,37,3122,"Hard-coded 'magic' string literal.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
4322,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",299,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
4323,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",301,13,2209,"This brace style is not consistent with 'exdented' style.","  301:	        else{
",,,
4324,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",301,13,3201,"This statement is unreachable.","  301:	        else{
",,,
4325,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",302,13,3200,"strcat' returns a value which is not being used.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
4326,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",302,37,3122,"Hard-coded 'magic' string literal.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
4327,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",302,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
4328,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,306,"[I] Cast between a pointer to object and an integral type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4329,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,310,"Casting to different object pointer type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4330,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4331,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,489,"Increment or decrement operation performed on pointer.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4332,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__result' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4333,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4334,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4335,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4336,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4337,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4338,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4339,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4340,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4341,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4342,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4343,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,2100,"Integral promotion : unsigned char promoted to signed int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4344,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4345,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3112,"This statement has no side-effect - it can be removed.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4346,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3122,"Hard-coded 'magic' string literal.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4347,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3200,"__builtin_strcmp' returns a value which is not being used.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4348,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4349,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4350,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4351,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4352,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4353,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4354,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4355,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4356,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4357,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3326,"An assignment operator is being used in a boolean expression.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4358,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3346,"This 'if' control expression has a constant 'true' value.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4359,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4360,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4361,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4362,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4363,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4364,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4365,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4366,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4367,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4368,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4369,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4370,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4371,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4372,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4373,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4374,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4375,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4376,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4377,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4378,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4379,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4380,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4381,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4382,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3416,"This boolean expression contains side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4383,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3417,"The comma operator has been used outside a for-loop header.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4384,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3446,"The result operands of this conditional operator generate side effects","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4385,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3631,"Type 'char' has been used in a cast.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4386,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,12,3760,"Implicit conversion: int to unsigned int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4387,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4388,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4389,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4390,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",304,45,2209,"This brace style is not consistent with 'exdented' style.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4391,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",305,13,3200,"strcat' returns a value which is not being used.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
4392,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",305,37,3122,"Hard-coded 'magic' string literal.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
4393,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",305,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
4394,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",306,13,3200,"strcat' returns a value which is not being used.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
4395,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",306,37,3122,"Hard-coded 'magic' string literal.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
4396,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",308,13,2209,"This brace style is not consistent with 'exdented' style.","  308:	        else{
",,,
4397,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",308,13,3201,"This statement is unreachable.","  308:	        else{
",,,
4398,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",309,13,3200,"strcat' returns a value which is not being used.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
4399,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",309,37,3122,"Hard-coded 'magic' string literal.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
4400,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",314,8,3344,"Value of control expression is not derived from an explicit logical operation.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
4401,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",314,34,2209,"This brace style is not consistent with 'exdented' style.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
4402,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,306,"[I] Cast between a pointer to object and an integral type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4403,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,310,"Casting to different object pointer type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4404,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4405,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,489,"Increment or decrement operation performed on pointer.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4406,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__result' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4407,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4408,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4409,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4410,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4411,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4412,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4413,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4414,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4415,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4416,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4417,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,2100,"Integral promotion : unsigned char promoted to signed int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4418,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4419,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3112,"This statement has no side-effect - it can be removed.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4420,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3122,"Hard-coded 'magic' string literal.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4421,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3200,"__builtin_strcmp' returns a value which is not being used.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4422,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4423,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4424,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4425,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4426,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4427,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4428,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4429,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4430,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4431,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3326,"An assignment operator is being used in a boolean expression.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4432,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3346,"This 'if' control expression has a constant 'true' value.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4433,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4434,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4435,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4436,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4437,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4438,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4439,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4440,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4441,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4442,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4443,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4444,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4445,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4446,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4447,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4448,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4449,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4450,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4451,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4452,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4453,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4454,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4455,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4456,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3416,"This boolean expression contains side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4457,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3417,"The comma operator has been used outside a for-loop header.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4458,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3446,"The result operands of this conditional operator generate side effects","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4459,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3631,"Type 'char' has been used in a cast.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4460,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,12,3760,"Implicit conversion: int to unsigned int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4461,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4462,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4463,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4464,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",315,45,2209,"This brace style is not consistent with 'exdented' style.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4465,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",316,13,3200,"strcat' returns a value which is not being used.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
4466,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",316,37,3122,"Hard-coded 'magic' string literal.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
4467,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",316,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
4468,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",317,13,3200,"strcat' returns a value which is not being used.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
4469,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",317,37,3122,"Hard-coded 'magic' string literal.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
4470,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",317,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
4471,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",319,13,2209,"This brace style is not consistent with 'exdented' style.","  319:	        else{
",,,
4472,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",319,13,3201,"This statement is unreachable.","  319:	        else{
",,,
4473,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",320,13,3200,"strcat' returns a value which is not being used.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
4474,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",320,37,3122,"Hard-coded 'magic' string literal.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
4475,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",320,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
4476,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,306,"[I] Cast between a pointer to object and an integral type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4477,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,310,"Casting to different object pointer type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4478,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4479,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,489,"Increment or decrement operation performed on pointer.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4480,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__result' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4481,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4482,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4483,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4484,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4485,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4486,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4487,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4488,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4489,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4490,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4491,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,2100,"Integral promotion : unsigned char promoted to signed int.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4492,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4493,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3112,"This statement has no side-effect - it can be removed.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4494,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3122,"Hard-coded 'magic' string literal.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4495,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3200,"__builtin_strcmp' returns a value which is not being used.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4496,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4497,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4498,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4499,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4500,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4501,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4502,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4503,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4504,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4505,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3326,"An assignment operator is being used in a boolean expression.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4506,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3346,"This 'if' control expression has a constant 'true' value.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4507,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4508,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4509,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4510,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4511,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4512,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4513,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4514,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4515,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4516,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4517,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4518,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4519,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4520,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4521,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4522,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4523,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4524,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4525,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4526,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4527,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4528,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4529,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4530,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3416,"This boolean expression contains side effects.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4531,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3417,"The comma operator has been used outside a for-loop header.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4532,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3446,"The result operands of this conditional operator generate side effects","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4533,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3631,"Type 'char' has been used in a cast.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4534,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,12,3760,"Implicit conversion: int to unsigned int.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4535,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4536,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4537,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4538,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",323,45,2209,"This brace style is not consistent with 'exdented' style.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4539,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",324,13,3200,"strcat' returns a value which is not being used.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
4540,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",324,37,3122,"Hard-coded 'magic' string literal.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
4541,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",324,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
4542,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",325,13,3200,"strcat' returns a value which is not being used.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
4543,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",325,37,3122,"Hard-coded 'magic' string literal.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
4544,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",325,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
4545,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",327,13,2209,"This brace style is not consistent with 'exdented' style.","  327:	        else{
",,,
4546,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",327,13,3201,"This statement is unreachable.","  327:	        else{
",,,
4547,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",328,13,3200,"strcat' returns a value which is not being used.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
4548,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",328,37,3122,"Hard-coded 'magic' string literal.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
4549,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",328,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
4550,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",333,8,3344,"Value of control expression is not derived from an explicit logical operation.","  333:	    if(the_pOption-&gt;m_trend){
",,,
4551,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",333,29,2209,"This brace style is not consistent with 'exdented' style.","  333:	    if(the_pOption-&gt;m_trend){
",,,
4552,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,306,"[I] Cast between a pointer to object and an integral type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4553,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,310,"Casting to different object pointer type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4554,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4555,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,489,"Increment or decrement operation performed on pointer.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4556,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__result' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4557,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4558,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4559,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4560,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4561,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4562,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4563,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4564,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4565,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4566,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4567,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,2100,"Integral promotion : unsigned char promoted to signed int.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4568,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4569,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3112,"This statement has no side-effect - it can be removed.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4570,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3122,"Hard-coded 'magic' string literal.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4571,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3200,"__builtin_strcmp' returns a value which is not being used.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4572,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4573,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4574,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4575,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4576,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4577,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4578,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4579,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4580,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4581,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3326,"An assignment operator is being used in a boolean expression.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4582,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3346,"This 'if' control expression has a constant 'true' value.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4583,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4584,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4585,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4586,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4587,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4588,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4589,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4590,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4591,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4592,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4593,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4594,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4595,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4596,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4597,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4598,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4599,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4600,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4601,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4602,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4603,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4604,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4605,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4606,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3416,"This boolean expression contains side effects.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4607,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3417,"The comma operator has been used outside a for-loop header.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4608,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3446,"The result operands of this conditional operator generate side effects","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4609,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3631,"Type 'char' has been used in a cast.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4610,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,12,3760,"Implicit conversion: int to unsigned int.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4611,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4612,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4613,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4614,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",334,45,2209,"This brace style is not consistent with 'exdented' style.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4615,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",335,13,3200,"strcat' returns a value which is not being used.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
4616,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",335,37,3122,"Hard-coded 'magic' string literal.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
4617,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",335,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
4618,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",336,13,3200,"strcat' returns a value which is not being used.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
4619,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",336,37,3122,"Hard-coded 'magic' string literal.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
4620,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",336,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
4621,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",338,13,2209,"This brace style is not consistent with 'exdented' style.","  338:	        else{
",,,
4622,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",338,13,3201,"This statement is unreachable.","  338:	        else{
",,,
4623,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",339,13,3200,"strcat' returns a value which is not being used.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
4624,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",339,37,3122,"Hard-coded 'magic' string literal.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
4625,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",339,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
4626,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",341,9,3200,"strcat' returns a value which is not being used.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
4627,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",341,33,3122,"Hard-coded 'magic' string literal.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
4628,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",341,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
4629,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",345,8,3344,"Value of control expression is not derived from an explicit logical operation.","  345:	    if(the_pOption-&gt;m_funcTrend){
",,,
4630,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",345,33,2209,"This brace style is not consistent with 'exdented' style.","  345:	    if(the_pOption-&gt;m_funcTrend){
",,,
4631,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,306,"[I] Cast between a pointer to object and an integral type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4632,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,310,"Casting to different object pointer type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4633,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4634,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,489,"Increment or decrement operation performed on pointer.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4635,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__result' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4636,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4637,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4638,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4639,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4640,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4641,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4642,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4643,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4644,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4645,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4646,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,2100,"Integral promotion : unsigned char promoted to signed int.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4647,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4648,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3112,"This statement has no side-effect - it can be removed.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4649,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3122,"Hard-coded 'magic' string literal.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4650,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3200,"__builtin_strcmp' returns a value which is not being used.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4651,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4652,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4653,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4654,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4655,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4656,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4657,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4658,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4659,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4660,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3326,"An assignment operator is being used in a boolean expression.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4661,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3346,"This 'if' control expression has a constant 'true' value.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4662,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4663,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4664,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4665,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4666,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4667,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4668,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4669,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4670,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4671,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4672,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4673,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4674,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4675,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4676,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4677,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4678,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4679,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4680,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4681,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4682,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4683,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4684,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4685,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3416,"This boolean expression contains side effects.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4686,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3417,"The comma operator has been used outside a for-loop header.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4687,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3446,"The result operands of this conditional operator generate side effects","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4688,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3631,"Type 'char' has been used in a cast.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4689,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,12,3760,"Implicit conversion: int to unsigned int.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4690,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4691,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4692,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4693,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",346,45,2209,"This brace style is not consistent with 'exdented' style.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4694,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",347,13,3200,"strcat' returns a value which is not being used.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
4695,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",347,37,3122,"Hard-coded 'magic' string literal.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
4696,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",347,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
4697,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",348,13,3200,"strcat' returns a value which is not being used.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
4698,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",348,37,3122,"Hard-coded 'magic' string literal.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
4699,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",348,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
4700,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",350,13,2209,"This brace style is not consistent with 'exdented' style.","  350:	        else{
",,,
4701,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",350,13,3201,"This statement is unreachable.","  350:	        else{
",,,
4702,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",351,13,3200,"strcat' returns a value which is not being used.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
4703,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",351,37,3122,"Hard-coded 'magic' string literal.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
4704,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",351,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
4705,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,306,"[I] Cast between a pointer to object and an integral type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4706,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,310,"Casting to different object pointer type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4707,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4708,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,489,"Increment or decrement operation performed on pointer.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4709,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__result' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4710,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4711,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4712,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4713,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4714,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4715,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4716,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4717,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4718,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4719,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4720,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,2100,"Integral promotion : unsigned char promoted to signed int.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4721,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4722,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3112,"This statement has no side-effect - it can be removed.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4723,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3122,"Hard-coded 'magic' string literal.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4724,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3200,"__builtin_strcmp' returns a value which is not being used.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4725,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4726,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4727,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4728,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4729,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4730,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4731,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4732,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4733,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4734,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3326,"An assignment operator is being used in a boolean expression.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4735,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3346,"This 'if' control expression has a constant 'true' value.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4736,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4737,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4738,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4739,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4740,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4741,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4742,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4743,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4744,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4745,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4746,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4747,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4748,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4749,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4750,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4751,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4752,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4753,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4754,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4755,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4756,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4757,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4758,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4759,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3416,"This boolean expression contains side effects.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4760,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3417,"The comma operator has been used outside a for-loop header.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4761,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3446,"The result operands of this conditional operator generate side effects","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4762,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3631,"Type 'char' has been used in a cast.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4763,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,12,3760,"Implicit conversion: int to unsigned int.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4764,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4765,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4766,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4767,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",353,45,2209,"This brace style is not consistent with 'exdented' style.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4768,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",354,13,3200,"strcat' returns a value which is not being used.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
4769,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",354,37,3122,"Hard-coded 'magic' string literal.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
4770,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",354,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
4771,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",355,13,3200,"strcat' returns a value which is not being used.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
4772,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",355,37,3122,"Hard-coded 'magic' string literal.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
4773,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",355,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
4774,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",357,13,2209,"This brace style is not consistent with 'exdented' style.","  357:	        else{
",,,
4775,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",357,13,3201,"This statement is unreachable.","  357:	        else{
",,,
4776,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",358,13,3200,"strcat' returns a value which is not being used.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
4777,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",358,37,3122,"Hard-coded 'magic' string literal.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
4778,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",358,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
4779,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,306,"[I] Cast between a pointer to object and an integral type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4780,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,310,"Casting to different object pointer type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4781,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4782,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,489,"Increment or decrement operation performed on pointer.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4783,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__result' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4784,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4785,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4786,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4787,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4788,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4789,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4790,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4791,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4792,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4793,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4794,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,2100,"Integral promotion : unsigned char promoted to signed int.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4795,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4796,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3112,"This statement has no side-effect - it can be removed.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4797,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3122,"Hard-coded 'magic' string literal.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4798,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3200,"__builtin_strcmp' returns a value which is not being used.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4799,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4800,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4801,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4802,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4803,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4804,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4805,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4806,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4807,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4808,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3326,"An assignment operator is being used in a boolean expression.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4809,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3346,"This 'if' control expression has a constant 'true' value.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4810,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4811,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4812,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4813,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4814,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4815,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4816,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4817,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4818,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4819,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4820,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4821,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4822,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4823,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4824,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4825,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4826,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4827,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4828,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4829,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4830,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4831,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4832,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4833,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3416,"This boolean expression contains side effects.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4834,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3417,"The comma operator has been used outside a for-loop header.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4835,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3446,"The result operands of this conditional operator generate side effects","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4836,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3631,"Type 'char' has been used in a cast.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4837,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,12,3760,"Implicit conversion: int to unsigned int.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4838,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4839,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4840,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4841,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",360,45,2209,"This brace style is not consistent with 'exdented' style.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4842,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",361,13,3200,"strcat' returns a value which is not being used.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
4843,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",361,37,3122,"Hard-coded 'magic' string literal.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
4844,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",361,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
4845,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",362,13,3200,"strcat' returns a value which is not being used.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
4846,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",362,37,3122,"Hard-coded 'magic' string literal.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
4847,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",362,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
4848,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",364,13,2209,"This brace style is not consistent with 'exdented' style.","  364:	        else{
",,,
4849,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",364,13,3201,"This statement is unreachable.","  364:	        else{
",,,
4850,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",365,13,3200,"strcat' returns a value which is not being used.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
4851,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",365,37,3122,"Hard-coded 'magic' string literal.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
4852,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",365,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
4853,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,306,"[I] Cast between a pointer to object and an integral type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4854,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,310,"Casting to different object pointer type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4855,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4856,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,489,"Increment or decrement operation performed on pointer.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4857,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__result' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4858,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4859,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4860,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4861,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4862,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4863,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4864,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4865,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4866,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4867,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4868,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,2100,"Integral promotion : unsigned char promoted to signed int.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4869,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4870,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3112,"This statement has no side-effect - it can be removed.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4871,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3122,"Hard-coded 'magic' string literal.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,"New comment for warning (4871)","Temporary"
4872,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3200,"__builtin_strcmp' returns a value which is not being used.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,"New comment for warning (4872)","Temporary"
4873,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,"New comment for warning (4873)","Temporary"
4874,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,"New comment for warning (4874)","Temporary"
4875,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4876,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4877,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4878,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4879,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4880,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4881,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4882,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3326,"An assignment operator is being used in a boolean expression.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4883,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3346,"This 'if' control expression has a constant 'true' value.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4884,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4885,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4886,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4887,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4888,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4889,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4890,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4891,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4892,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4893,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4894,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4895,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4896,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4897,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4898,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4899,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4900,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4901,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4902,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4903,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4904,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4905,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4906,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4907,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3416,"This boolean expression contains side effects.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4908,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3417,"The comma operator has been used outside a for-loop header.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4909,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3446,"The result operands of this conditional operator generate side effects","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4910,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3631,"Type 'char' has been used in a cast.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4911,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,12,3760,"Implicit conversion: int to unsigned int.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4912,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4913,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4914,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4915,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",367,45,2209,"This brace style is not consistent with 'exdented' style.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
4916,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",368,13,3200,"strcat' returns a value which is not being used.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
4917,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",368,37,3122,"Hard-coded 'magic' string literal.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
4918,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",368,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
4919,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",369,13,3200,"strcat' returns a value which is not being used.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
4920,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",369,37,3122,"Hard-coded 'magic' string literal.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
4921,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",369,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
4922,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",371,13,2209,"This brace style is not consistent with 'exdented' style.","  371:	        else{
",,,
4923,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",371,13,3201,"This statement is unreachable.","  371:	        else{
",,,
4924,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",372,13,3200,"strcat' returns a value which is not being used.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
4925,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",372,37,3122,"Hard-coded 'magic' string literal.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
4926,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",372,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
4927,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",377,37,2209,"This brace style is not consistent with 'exdented' style.","  377:	    if(the_pOption-&gt;m_verbos == ON ){
",,,
4928,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",379,9,3200,"printf' returns a value which is not being used.","  379:	        printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_START);
",,,
4929,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",379,16,3122,"Hard-coded 'magic' string literal.","  379:	        printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_START);
",,,
4930,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",384,32,2209,"This brace style is not consistent with 'exdented' style.","  384:	    if(the_iRet != ANZ_SUCCESS){
",,,
4931,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",385,18,2001,"A 'goto' statement has been used.","  385:	        goto EXIT;
",,,
4932,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",390,32,2209,"This brace style is not consistent with 'exdented' style.","  390:	    if(the_iRet != ANZ_SUCCESS){
",,,
4933,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",392,18,2001,"A 'goto' statement has been used.","  392:	        goto EXIT;
",,,
4934,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",397,47,2209,"This brace style is not consistent with 'exdented' style.","  397:	    if(the_iMeasureType == ANZ_COMMON_MEASURE){
",,,
4935,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",400,36,2209,"This brace style is not consistent with 'exdented' style.","  400:	        if(the_iRet != ANZ_SUCCESS){
",,,
4936,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",401,22,2001,"A 'goto' statement has been used.","  401:	            goto EXIT;
",,,
4937,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",404,36,2209,"This brace style is not consistent with 'exdented' style.","  404:	        if(the_iRet != ANZ_SUCCESS){
",,,
4938,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",405,13,3200,"printf' returns a value which is not being used.","  405:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
4939,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",405,20,3122,"Hard-coded 'magic' string literal.","  405:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
4940,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",406,22,2001,"A 'goto' statement has been used.","  406:	            goto EXIT;
",,,
4941,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",410,46,2209,"This brace style is not consistent with 'exdented' style.","  410:	    if(the_iMeasureType == ANZ_TREND_MEASURE){
",,,
4942,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",413,36,2209,"This brace style is not consistent with 'exdented' style.","  413:	        if(the_iRet != ANZ_SUCCESS){
",,,
4943,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",414,22,2001,"A 'goto' statement has been used.","  414:	            goto EXIT;
",,,
4944,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",417,36,2209,"This brace style is not consistent with 'exdented' style.","  417:	        if(the_iRet != ANZ_SUCCESS){
",,,
4945,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",418,13,3200,"printf' returns a value which is not being used.","  418:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
4946,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",418,20,3122,"Hard-coded 'magic' string literal.","  418:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
4947,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",419,22,2001,"A 'goto' statement has been used.","  419:	            goto EXIT;
",,,
4948,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",424,36,2209,"This brace style is not consistent with 'exdented' style.","  424:	    if(the_pOption-&gt;m_verbos == ON){
",,,
4949,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",425,40,2209,"This brace style is not consistent with 'exdented' style.","  425:	        if(the_pAnzInfo-&gt;m_err == NULL){
",,,
4950,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",426,13,3200,"printf' returns a value which is not being used.","  426:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
4951,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",426,20,3122,"Hard-coded 'magic' string literal.","  426:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
4952,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",428,13,2209,"This brace style is not consistent with 'exdented' style.","  428:	        else{
",,,
4953,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",429,13,3200,"printf' returns a value which is not being used.","  429:	            printf(""%s%s%s\n"",MSG_MEASURE_FILE_ERROR,the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
4954,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",429,20,3122,"Hard-coded 'magic' string literal.","  429:	            printf(""%s%s%s\n"",MSG_MEASURE_FILE_ERROR,the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
4955,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,1,2015,"This label is not a case or default label for a switch statement.","  433:	EXIT:;
",,,
4956,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,1,2201,"This indentation is not consistent with previous indentation in this file.","  433:	EXIT:;
",,,
4957,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,6,3109,"Empty statement (';' on its own) - if this is deliberate, it is best to put ';' on a line by itself.","  433:	EXIT:;
",,,
4958,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",433,6,3139,"Null statement is obscured by code or comment on the same line.","  433:	EXIT:;
",,,
4959,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",435,29,505,"[U] Dereferencing pointer value that is apparently NULL.","  435:	    the_iRet = OutErrorFile(the_pAnzInfo-&gt;m_err);
",,,
4960,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",436,42,2209,"This brace style is not consistent with 'exdented' style.","  436:	    if(the_iRet == ANZ_ERR_MEMORY_FAILED){
",,,
4961,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",437,9,3200,"printf' returns a value which is not being used.","  437:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
4962,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",437,16,3122,"Hard-coded 'magic' string literal.","  437:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
4963,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",442,31,2209,"This brace style is not consistent with 'exdented' style.","  442:	    if(the_pCmdOption != NULL){
",,,
4964,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",444,9,3199,"The value of 'the_pCmdOption' is never used following this assignment.","  444:	        the_pCmdOption = NULL;
",,,
4965,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",447,34,2209,"This brace style is not consistent with 'exdented' style.","  447:	    if(the_pMeasureItem != NULL) {
",,,
4966,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",449,9,3199,"The value of 'the_pMeasureItem' is never used following this assignment.","  449:	        the_pMeasureItem = NULL;
",,,
4967,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",455,8,3344,"Value of control expression is not derived from an explicit logical operation.","  455:	    if(g_bOutTime) {
",,,
4968,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",455,20,2209,"This brace style is not consistent with 'exdented' style.","  455:	    if(g_bOutTime) {
",,,
4969,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",456,9,3200,"ftime' returns a value which is not being used.","  456:	        ftime(&amp;the_ed);
",,,
4970,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,9,3200,"printf' returns a value which is not being used.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
4971,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,9,3395,"Operators in the set + - * / with different precedence have been used. Extra parentheses recommended.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
4972,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,9,3401,"Possible precedence confusion: extra parentheses are recommended here.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
4973,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,16,3122,"Hard-coded 'magic' string literal.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
4974,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,69,1253,"Unsuffixed integer constant implicitly converted to another type.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
4975,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,71,3120,"Hard-coded 'magic' integer constant '1000'.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
4976,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",457,94,2101,"Integral promotion : unsigned short promoted to signed int.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
4977,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",473,2,2017,"Comment spans more than one line.","  473:	*/
",,,
4978,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,26,3227,"The parameter 'sig' is never modified and so it could be declared with the 'const' qualifier.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
4979,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,35,3206,"The parameter 'code' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
4980,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,47,3206,"The parameter 'scp' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
4981,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,53,3625,"Type 'char' has been used in the declaration of an object or a function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
4982,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,59,344,"K&amp;R compilers do not support function prototypes.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
4983,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",475,59,3206,"The parameter 'addr' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
4984,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",480,5,3625,"Type 'char' has been used in the declaration of an object or a function.","  480:	    char the_errMsg[128]; /* エラーメッセージ */
",,,
4985,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",480,21,3132,"Hard coded 'magic' number '128' used to define the size of an array.","  480:	    char the_errMsg[128]; /* エラーメッセージ */
",,,
4986,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",483,16,2209,"This brace style is not consistent with 'exdented' style.","  483:	    switch(sig){
",,,
4987,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",485,9,3200,"sprintf' returns a value which is not being used.","  485:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGINT(%d)\n"",sig );
",,,
4988,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",485,28,3122,"Hard-coded 'magic' string literal.","  485:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGINT(%d)\n"",sig );
",,,
4989,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",486,9,3200,"fprintf' returns a value which is not being used.","  486:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
4990,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",486,31,3122,"Hard-coded 'magic' string literal.","  486:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
4991,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",489,9,3200,"sprintf' returns a value which is not being used.","  489:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGQUIT(%d)\n"",sig );
",,,
4992,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",489,28,3122,"Hard-coded 'magic' string literal.","  489:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGQUIT(%d)\n"",sig );
",,,
4993,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",490,9,3200,"fprintf' returns a value which is not being used.","  490:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
4994,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",490,31,3122,"Hard-coded 'magic' string literal.","  490:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
4995,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",493,9,3200,"sprintf' returns a value which is not being used.","  493:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGKILL(%d)\n"",sig );
",,,
4996,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",493,28,3122,"Hard-coded 'magic' string literal.","  493:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGKILL(%d)\n"",sig );
",,,
4997,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",494,9,3200,"fprintf' returns a value which is not being used.","  494:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
4998,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",494,31,3122,"Hard-coded 'magic' string literal.","  494:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
4999,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",497,9,3200,"sprintf' returns a value which is not being used.","  497:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGTERM(%d)\n"",sig );
",,,
5000,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",497,28,3122,"Hard-coded 'magic' string literal.","  497:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGTERM(%d)\n"",sig );
",,,
5001,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",498,9,3200,"fprintf' returns a value which is not being used.","  498:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5002,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",498,31,3122,"Hard-coded 'magic' string literal.","  498:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5003,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",501,9,3200,"sprintf' returns a value which is not being used.","  501:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGFPE(%d)\n"",sig );
",,,
5004,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",501,28,3122,"Hard-coded 'magic' string literal.","  501:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGFPE(%d)\n"",sig );
",,,
5005,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",502,9,3200,"fprintf' returns a value which is not being used.","  502:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5006,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",502,31,3122,"Hard-coded 'magic' string literal.","  502:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5007,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",505,9,3200,"sprintf' returns a value which is not being used.","  505:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGILL(%d)\n"",sig );
",,,
5008,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",505,28,3122,"Hard-coded 'magic' string literal.","  505:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGILL(%d)\n"",sig );
",,,
5009,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",506,9,3200,"fprintf' returns a value which is not being used.","  506:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5010,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",506,31,3122,"Hard-coded 'magic' string literal.","  506:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5011,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",509,9,3200,"sprintf' returns a value which is not being used.","  509:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGBUS(%d)\n"",sig );
",,,
5012,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",509,28,3122,"Hard-coded 'magic' string literal.","  509:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGBUS(%d)\n"",sig );
",,,
5013,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",510,9,3200,"fprintf' returns a value which is not being used.","  510:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5014,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",510,31,3122,"Hard-coded 'magic' string literal.","  510:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5015,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",513,9,3200,"sprintf' returns a value which is not being used.","  513:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSEGV(%d)\n"",sig );
",,,
5016,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",513,28,3122,"Hard-coded 'magic' string literal.","  513:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSEGV(%d)\n"",sig );
",,,
5017,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",514,9,3200,"fprintf' returns a value which is not being used.","  514:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5018,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",514,31,3122,"Hard-coded 'magic' string literal.","  514:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5019,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",517,9,3200,"sprintf' returns a value which is not being used.","  517:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSYS(%d)\n"",sig );
",,,
5020,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",517,28,3122,"Hard-coded 'magic' string literal.","  517:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSYS(%d)\n"",sig );
",,,
5021,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",518,9,3200,"fprintf' returns a value which is not being used.","  518:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5022,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",518,31,3122,"Hard-coded 'magic' string literal.","  518:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5023,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",521,9,3200,"sprintf' returns a value which is not being used.","  521:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=%d\n"",sig );
",,,
5024,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",521,28,3122,"Hard-coded 'magic' string literal.","  521:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=%d\n"",sig );
",,,
5025,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",522,9,3200,"fprintf' returns a value which is not being used.","  522:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5026,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",522,31,3122,"Hard-coded 'magic' string literal.","  522:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
5027,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",532,16,2209,"This brace style is not consistent with 'exdented' style.","  532:	    switch(sig){
",,,
5028,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",538,10,2003,"The preceding non-empty 'case' or 'default' clause does not end with an explicit 'break' or 'return' statement.","  538:	    case SIGFPE :
",,,
5029,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",545,5,2002,"No 'default' case found in this 'switch' statement.","  545:	    }
",,,
5030,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",592,2,2017,"Comment spans more than one line.","  592:	*/
",,,
5031,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",594,1,3007,"""void"" has been omitted when defining a function with no parameters.","  594:	{
",,,
5032,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,5,428,"Function identifier is not followed by () but a function call may be intended.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
5033,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,5,3200,"signal' returns a value which is not being used.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
5034,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,23,432,"[C] Argument is not a compatible pointer type.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
5035,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",597,24,307,"[u] Cast between a pointer to object and a pointer to function.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
5036,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,5,428,"Function identifier is not followed by () but a function call may be intended.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
5037,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,5,3200,"signal' returns a value which is not being used.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
5038,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,23,432,"[C] Argument is not a compatible pointer type.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
5039,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",598,24,307,"[u] Cast between a pointer to object and a pointer to function.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
5040,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,5,428,"Function identifier is not followed by () but a function call may be intended.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
5041,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,5,3200,"signal' returns a value which is not being used.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
5042,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,23,432,"[C] Argument is not a compatible pointer type.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
5043,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",599,24,307,"[u] Cast between a pointer to object and a pointer to function.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
5044,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,5,428,"Function identifier is not followed by () but a function call may be intended.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
5045,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,5,3200,"signal' returns a value which is not being used.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
5046,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,23,432,"[C] Argument is not a compatible pointer type.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
5047,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",601,24,307,"[u] Cast between a pointer to object and a pointer to function.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
5048,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,5,428,"Function identifier is not followed by () but a function call may be intended.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
5049,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,5,3200,"signal' returns a value which is not being used.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
5050,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,22,432,"[C] Argument is not a compatible pointer type.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
5051,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",602,23,307,"[u] Cast between a pointer to object and a pointer to function.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
5052,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,5,428,"Function identifier is not followed by () but a function call may be intended.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
5053,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,5,3200,"signal' returns a value which is not being used.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
5054,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,23,432,"[C] Argument is not a compatible pointer type.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
5055,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",604,24,307,"[u] Cast between a pointer to object and a pointer to function.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
5056,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,5,428,"Function identifier is not followed by () but a function call may be intended.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
5057,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,5,3200,"signal' returns a value which is not being used.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
5058,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,23,432,"[C] Argument is not a compatible pointer type.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
5059,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",605,24,307,"[u] Cast between a pointer to object and a pointer to function.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
5060,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,5,428,"Function identifier is not followed by () but a function call may be intended.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
5061,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,5,3200,"signal' returns a value which is not being used.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
5062,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,23,432,"[C] Argument is not a compatible pointer type.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
5063,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",606,24,307,"[u] Cast between a pointer to object and a pointer to function.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
5064,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,5,428,"Function identifier is not followed by () but a function call may be intended.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
5065,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,5,3200,"signal' returns a value which is not being used.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
5066,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,23,432,"[C] Argument is not a compatible pointer type.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
5067,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",607,24,307,"[u] Cast between a pointer to object and a pointer to function.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
5068,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",622,2,2017,"Comment spans more than one line.","  622:	*/
",,,
5069,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",623,20,3625,"Type 'char' has been used in the declaration of an object or a function.","  623:	int ResetTrendPath(char *io_pPath)
",,,
5070,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",623,26,344,"K&amp;R compilers do not support function prototypes.","  623:	int ResetTrendPath(char *io_pPath)
",,,
5071,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",623,26,3227,"The parameter 'io_pPath' is never modified and so it could be declared with the 'const' qualifier.","  623:	int ResetTrendPath(char *io_pPath)
",,,
5072,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",625,9,2201,"This indentation is not consistent with previous indentation in this file.","  625:	        char the_szFullPath[MAX_PATH];
",,,
5073,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",625,9,3625,"Type 'char' has been used in the declaration of an object or a function.","  625:	        char the_szFullPath[MAX_PATH];
",,,
5074,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",626,9,2201,"This indentation is not consistent with previous indentation in this file.","  626:	        char the_szCurPath[MAX_PATH];
",,,
5075,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",626,9,3625,"Type 'char' has been used in the declaration of an object or a function.","  626:	        char the_szCurPath[MAX_PATH];
",,,
5076,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",627,9,2201,"This indentation is not consistent with previous indentation in this file.","  627:	        int the_iRet = ANZ_SUCCESS;
",,,
5077,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",627,13,2211,"the_iRet' is not aligned with the previously declared identifier.","  627:	        int the_iRet = ANZ_SUCCESS;
",,,
5078,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,9,2201,"This indentation is not consistent with previous indentation in this file.","  630:	        if(io_pPath[0] != '/') {
",,,
5079,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,20,506,"Dereferencing pointer value that is possibly NULL.","  630:	        if(io_pPath[0] != '/') {
",,,
5080,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,24,2106,"Integral promotion : plain char promoted to signed int.","  630:	        if(io_pPath[0] != '/') {
",,,
5081,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,27,3123,"Hard coded 'magic' character constant '/'.","  630:	        if(io_pPath[0] != '/') {
",,,
5082,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",630,32,2209,"This brace style is not consistent with 'exdented' style.","  630:	        if(io_pPath[0] != '/') {
",,,
5083,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",631,16,3416,"This boolean expression contains side effects.","  631:	            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {
",,,
5084,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",631,56,2209,"This brace style is not consistent with 'exdented' style.","  631:	            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {
",,,
5085,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",633,26,2001,"A 'goto' statement has been used.","  633:	                goto EXIT;
",,,
5086,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,306,"[I] Cast between a pointer to object and an integral type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5087,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,310,"Casting to different object pointer type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5088,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5089,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,489,"Increment or decrement operation performed on pointer.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5090,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,506,"Dereferencing pointer value that is possibly NULL.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5091,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,510,"Arithmetic operation on pointer value that is possibly NULL.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5092,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__result' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5093,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s1' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5094,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5095,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s2' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5096,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5097,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5098,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5099,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1251,"Suffixed integer constant causes implicit conversion of other operand.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5100,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1253,"Unsuffixed integer constant implicitly converted to another type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5101,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1302,"__builtin_constant_p()' must be declared before use in C++.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5102,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,1302,"__builtin_strcmp()' must be declared before use in C++.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5103,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,2100,"Integral promotion : unsigned char promoted to signed int.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5104,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5105,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3112,"This statement has no side-effect - it can be removed.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5106,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3122,"Hard-coded 'magic' string literal.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5107,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3200,"__builtin_strcmp' returns a value which is not being used.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5108,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5109,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5110,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5111,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5112,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5113,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5114,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5115,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5116,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5117,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3326,"An assignment operator is being used in a boolean expression.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5118,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3346,"This 'if' control expression has a constant 'true' value.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5119,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5120,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5121,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5122,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5123,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5124,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5125,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5126,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5127,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5128,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5129,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5130,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5131,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5132,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5133,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5134,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5135,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5136,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5137,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5138,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5139,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5140,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3401,"Possible precedence confusion: extra parentheses are recommended here.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5141,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5142,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3416,"This boolean expression contains side effects.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5143,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3417,"The comma operator has been used outside a for-loop header.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5144,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3446,"The result operands of this conditional operator generate side effects","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5145,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3631,"Type 'char' has been used in a cast.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5146,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,16,3760,"Implicit conversion: int to unsigned int.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5147,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5148,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5149,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,36,1251,"Suffixed integer constant causes implicit conversion of other operand.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5150,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",635,42,2209,"This brace style is not consistent with 'exdented' style.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
5151,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",636,17,3200,"sprintf' returns a value which is not being used.","  636:	                sprintf(the_szFullPath,""%s/%s"",the_szCurPath,io_pPath);
",,,
5152,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",636,40,3122,"Hard-coded 'magic' string literal.","  636:	                sprintf(the_szFullPath,""%s/%s"",the_szCurPath,io_pPath);
",,,
5153,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",639,9,2201,"This indentation is not consistent with previous indentation in this file.","  639:	        else {
",,,
5154,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",639,14,2209,"This brace style is not consistent with 'exdented' style.","  639:	        else {
",,,
5155,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",640,22,2001,"A 'goto' statement has been used.","  640:	            goto EXIT;
",,,
5156,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",658,9,2201,"This indentation is not consistent with previous indentation in this file.","  658:	        strcpy(io_pPath,the_szFullPath);
",,,
5157,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",658,9,3200,"strcpy' returns a value which is not being used.","  658:	        strcpy(io_pPath,the_szFullPath);
",,,
5158,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",659,1,2015,"This label is not a case or default label for a switch statement.","  659:	EXIT:
",,,
5159,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",659,1,2201,"This indentation is not consistent with previous indentation in this file.","  659:	EXIT:
",,,
5160,"sample_c/src","analyzeme.c","analyzeme.c.Critical.html",660,9,2201,"This indentation is not consistent with previous indentation in this file.","  660:	        return the_iRet;
",,,
5161,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",1,1,240,"[E] This file contains the control-M character at the end of a line.","    1:	/*
",,"New comment for warning (5161)","Registered"
5162,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",9,16,288,"[I] Source file '/home/www/TOSCANA_dev/BackEnd/AnalyzeTaskManager/work/1/work/sample_c_cpp/sample_c/src/analyzeme.c' has comments containing characters which are not members of the basic source character set.","    9:	      AnalyzeMeのメイン関数を定義する
",,"New comment for warning (5162)","Registered"
5163,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",16,2,2017,"Comment spans more than one line.","   16:	*/
",,"New comment for warning (5163)","Registered"
5164,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",20,2,2017,"Comment spans more than one line.","   20:	*/
",,"New comment for warning (5164)","Registered"
5165,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",21,1,838,"File has already been included directly from this file.","   21:	#include ""analyzeme.h""
",,,
5166,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",21,1,839,"File has already been included indirectly from this file.","   21:	#include ""analyzeme.h""
",,,
5167,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",21,23,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   21:	#include ""analyzeme.h""
",,,
5168,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",22,1,839,"File has already been included indirectly from this file.","   22:	#include ""common.h""
",,,
5169,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",23,1,839,"File has already been included indirectly from this file.","   23:	#include ""memory_manage.h""
",,,
5170,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",23,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   23:	#include ""memory_manage.h""
",,,
5171,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",24,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   24:	#include ""parse_cmdline.h""
",,,
5172,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",25,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   25:	#include ""common_measure.h""
",,,
5173,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",26,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   26:	#include ""trend_measure.h""
",,,
5174,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",27,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   27:	#include ""make_file_list.h""
",,,
5175,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",29,31,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   29:	#include ""get_process_macro.h""
",,,
5176,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",30,1,839,"File has already been included indirectly from this file.","   30:	#include &lt;signal.h&gt;
",,,
5177,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",35,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
5178,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",35,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
5179,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",35,13,3211,"The global identifier 'TRACEFILE' is defined but not used.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
5180,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",35,13,3408,"TRACEFILE' has external linkage but is being defined without any previous declaration.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
5181,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",36,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
5182,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",36,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
5183,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",36,13,3408,"APPLOGFILE' has external linkage but is being defined without any previous declaration.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
5184,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",44,7,3408,"g_fpLogFile' has external linkage but is being defined without any previous declaration.","   44:	FILE *g_fpLogFile = NULL;       /* Log File pointer */
",,,
5185,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",46,7,3211,"The global identifier 'g_fpTraceFile' is defined but not used.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
5186,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",46,7,3408,"g_fpTraceFile' has external linkage but is being defined without any previous declaration.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
5187,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",48,7,3408,"g_fpErrorFile' has external linkage but is being defined without any previous declaration.","   48:	FILE *g_fpErrorFile = NULL;
",,,
5188,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",50,6,3408,"g_bTrace' has external linkage but is being defined without any previous declaration.","   50:	bool g_bTrace           = false;    /* Trace flag */
",,,
5189,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",51,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
5190,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",51,6,3408,"g_szNVPath' has external linkage but is being defined without any previous declaration.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
5191,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",51,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
5192,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",52,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
5193,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",52,6,3408,"g_szOVPath' has external linkage but is being defined without any previous declaration.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
5194,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",52,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
5195,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",53,6,3408,"g_bTrendFile' has external linkage but is being defined without any previous declaration.","   53:	bool g_bTrendFile = false;
",,,
5196,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",55,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   55:	char *g_optionFileCont = NULL;
",,,
5197,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",55,7,3211,"The global identifier 'g_optionFileCont' is defined but not used.","   55:	char *g_optionFileCont = NULL;
",,,
5198,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",55,7,3408,"g_optionFileCont' has external linkage but is being defined without any previous declaration.","   55:	char *g_optionFileCont = NULL;
",,,
5199,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",57,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   57:	char *g_symbolFileCont = NULL;
",,,
5200,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",57,7,3211,"The global identifier 'g_symbolFileCont' is defined but not used.","   57:	char *g_symbolFileCont = NULL;
",,,
5201,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",57,7,3408,"g_symbolFileCont' has external linkage but is being defined without any previous declaration.","   57:	char *g_symbolFileCont = NULL;
",,,
5202,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",58,6,3408,"g_bOutTime' has external linkage but is being defined without any previous declaration.","   58:	bool g_bOutTime = false;
",,,
5203,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",59,15,3408,"g_pAnzInfo' has external linkage but is being defined without any previous declaration.","   59:	ST_AnalyzeMe *g_pAnzInfo;  /* AnalyzeMe管理情報 */
",,,
5204,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",69,2,2017,"Comment spans more than one line.","   69:	*/
",,,
5205,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",70,14,3227,"The parameter 'argc' is never modified and so it could be declared with the 'const' qualifier.","   70:	int main(int argc,char * argv[])
",,,
5206,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",70,19,3625,"Type 'char' has been used in the declaration of an object or a function.","   70:	int main(int argc,char * argv[])
",,,
5207,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",70,26,344,"K&amp;R compilers do not support function prototypes.","   70:	int main(int argc,char * argv[])
",,,
5208,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",75,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
5209,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",75,28,2211,"the_pMeasureItem' is not aligned with the previously declared identifier.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
5210,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",76,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
5211,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",76,10,2211,"the_szCurMetrics' is not aligned with the previously declared identifier.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
5212,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",76,10,3604,"Local arrays and structures cannot be initialised in K&amp;R C.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
5213,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",76,44,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
5214,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",80,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   80:	    char *the_pTrace = NULL;
",,,
5215,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",80,11,2211,"the_pTrace' is not aligned with the previously declared identifier.","   80:	    char *the_pTrace = NULL;
",,,
5216,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",80,11,3197,"The initialiser for 'the_pTrace' is always modified before being used.","   80:	    char *the_pTrace = NULL;
",,,
5217,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",81,25,2211,"the_st' is not aligned with the previously declared identifier.","   81:	    struct timeb the_st ;
",,,
5218,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",89,5,3198,"The value assigned to 'the_pAnzInfo' is always modified before being used.","   89:	    the_pAnzInfo = NULL;
",,,
5219,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",91,5,3198,"The value assigned to 'the_iRet' is always modified before being used.","   91:	    the_iRet = ANZ_SUCCESS;
",,,
5220,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",101,25,3122,"Hard-coded 'magic' string literal.","  101:	    the_pTrace = getenv(""AnzTrace"");
",,,
5221,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",102,28,2209,"This brace style is not consistent with 'exdented' style.","  102:	    if(the_pTrace != NULL) {
",,,
5222,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,306,"[I] Cast between a pointer to object and an integral type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5223,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,310,"Casting to different object pointer type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5224,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5225,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,489,"Increment or decrement operation performed on pointer.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5226,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__result' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5227,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5228,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5229,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5230,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5231,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5232,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5233,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5234,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5235,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5236,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5237,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,2100,"Integral promotion : unsigned char promoted to signed int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5238,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5239,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3112,"This statement has no side-effect - it can be removed.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5240,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3122,"Hard-coded 'magic' string literal.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5241,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3200,"__builtin_strcmp' returns a value which is not being used.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5242,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5243,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5244,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5245,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5246,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5247,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5248,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5249,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5250,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5251,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3325,"This control expression has a constant 'false' value.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5252,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3326,"An assignment operator is being used in a boolean expression.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5253,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5254,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5255,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5256,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5257,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5258,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5259,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5260,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5261,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5262,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5263,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5264,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5265,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5266,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5267,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5268,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5269,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5270,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5271,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5272,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5273,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5274,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5275,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5276,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3416,"This boolean expression contains side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5277,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3417,"The comma operator has been used outside a for-loop header.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5278,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3446,"The result operands of this conditional operator generate side effects","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5279,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3631,"Type 'char' has been used in a cast.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5280,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,12,3760,"Implicit conversion: int to unsigned int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5281,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,35,3209,"__builtin_strcmp()' returns a value which is always ignored.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5282,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5283,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5284,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,36,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5285,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,43,2209,"This brace style is not consistent with 'exdented' style.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5286,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",103,43,3201,"This statement is unreachable.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
5287,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",113,6,2017,"Comment spans more than one line.","  113:	    */
",,,
5288,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",114,36,3122,"Hard-coded 'magic' string literal.","  114:	    g_fpLogFile = fopen(APPLOGFILE,""w"");
",,,
5289,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",115,28,2209,"This brace style is not consistent with 'exdented' style.","  115:	    if(g_fpLogFile == NULL){
",,,
5290,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",116,9,3200,"printf' returns a value which is not being used.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
5291,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",116,16,3122,"Hard-coded 'magic' string literal.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
5292,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",120,5,702,"Result of sizeof operator is not explicitly cast.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
5293,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",120,63,3430,"Macro argument expression requires parentheses.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
5294,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",121,29,2209,"This brace style is not consistent with 'exdented' style.","  121:	    if(the_pAnzInfo == NULL){
",,,
5295,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",122,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  122:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
5296,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",123,18,2001,"A 'goto' statement has been used.","  123:	        goto EXIT;
",,,
5297,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",125,5,702,"Result of sizeof operator is not explicitly cast.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
5298,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",125,5,3200,"memset' returns a value which is not being used.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
5299,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",128,5,702,"Result of sizeof operator is not explicitly cast.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
5300,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",128,67,3430,"Macro argument expression requires parentheses.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
5301,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",129,39,2209,"This brace style is not consistent with 'exdented' style.","  129:	    if(the_pAnzInfo-&gt;m_option == NULL){
",,,
5302,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",130,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  130:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
5303,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",131,18,2001,"A 'goto' statement has been used.","  131:	        goto EXIT;
",,,
5304,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",133,5,702,"Result of sizeof operator is not explicitly cast.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
5305,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",133,5,3200,"memset' returns a value which is not being used.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
5306,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",137,5,702,"Result of sizeof operator is not explicitly cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
5307,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",137,5,3631,"Type 'char' has been used in a cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
5308,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",137,5,3633,"Type 'char' has been used in the operand of the sizeof operator.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
5309,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",137,5,3760,"Implicit conversion: int to unsigned int.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
5310,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",138,34,2209,"This brace style is not consistent with 'exdented' style.","  138:	    if(the_pMeasureItem == NULL) {
",,,
5311,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",139,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  139:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
5312,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",140,18,2001,"A 'goto' statement has been used.","  140:	        goto EXIT;
",,,
5313,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",142,5,702,"Result of sizeof operator is not explicitly cast.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
5314,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",142,5,3200,"memset' returns a value which is not being used.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
5315,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",142,36,3760,"Implicit conversion: int to unsigned int.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
5316,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",142,45,3633,"Type 'char' has been used in the operand of the sizeof operator.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
5317,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",150,5,3200,"strcpy' returns a value which is not being used.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
5318,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",150,34,3122,"Hard-coded 'magic' string literal.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
5319,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",154,5,3200,"strcpy' returns a value which is not being used.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
5320,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",154,39,3122,"Hard-coded 'magic' string literal.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
5321,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",155,5,3200,"strcpy' returns a value which is not being used.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
5322,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",155,38,3122,"Hard-coded 'magic' string literal.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
5323,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",156,5,3200,"strcpy' returns a value which is not being used.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
5324,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",156,38,3122,"Hard-coded 'magic' string literal.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
5325,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",165,32,3120,"Hard-coded 'magic' integer constant '70'.","  165:	    the_pOption-&gt;m_symThresh = 70;
",,,
5326,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",166,32,3120,"Hard-coded 'magic' integer constant '2'.","  166:	    the_pOption-&gt;m_minThresh = 2;
",,,
5327,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",169,5,702,"Result of sizeof operator is not explicitly cast.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
5328,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",169,59,3430,"Macro argument expression requires parentheses.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
5329,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",170,31,2209,"This brace style is not consistent with 'exdented' style.","  170:	    if(the_pCmdOption == NULL){
",,,
5330,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",171,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  171:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
5331,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",172,18,2001,"A 'goto' statement has been used.","  172:	        goto EXIT;
",,,
5332,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",174,5,702,"Result of sizeof operator is not explicitly cast.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
5333,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",174,5,3200,"memset' returns a value which is not being used.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
5334,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",180,5,3200,"strcpy' returns a value which is not being used.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
5335,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",180,37,3122,"Hard-coded 'magic' string literal.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
5336,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",184,5,3200,"strcpy' returns a value which is not being used.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
5337,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",184,42,3122,"Hard-coded 'magic' string literal.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
5338,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",185,5,3200,"strcpy' returns a value which is not being used.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
5339,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",185,41,3122,"Hard-coded 'magic' string literal.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
5340,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",186,5,3200,"strcpy' returns a value which is not being used.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
5341,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",186,41,3122,"Hard-coded 'magic' string literal.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
5342,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",195,35,3120,"Hard-coded 'magic' integer constant '70'.","  195:	    the_pCmdOption-&gt;m_symThresh = 70;
",,,
5343,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",196,35,3120,"Hard-coded 'magic' integer constant '2'.","  196:	    the_pCmdOption-&gt;m_minThresh = 2;
",,,
5344,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",200,32,2209,"This brace style is not consistent with 'exdented' style.","  200:	    if(the_iRet != ANZ_SUCCESS){
",,,
5345,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",201,18,2001,"A 'goto' statement has been used.","  201:	        goto EXIT;
",,,
5346,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",203,8,3344,"Value of control expression is not derived from an explicit logical operation.","  203:	    if(g_bOutTime) {
",,,
5347,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",203,20,2209,"This brace style is not consistent with 'exdented' style.","  203:	    if(g_bOutTime) {
",,,
5348,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",204,9,3200,"ftime' returns a value which is not being used.","  204:	        ftime(&amp;the_st);
",,,
5349,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",209,32,2209,"This brace style is not consistent with 'exdented' style.","  209:	    if(the_iRet != ANZ_SUCCESS){
",,,
5350,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",210,18,2001,"A 'goto' statement has been used.","  210:	        goto EXIT;
",,,
5351,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",214,32,2209,"This brace style is not consistent with 'exdented' style.","  214:	    if(the_iRet != ANZ_SUCCESS){
",,,
5352,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",215,18,2001,"A 'goto' statement has been used.","  215:	        goto EXIT;
",,,
5353,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",218,23,3355,"The result of this logical operation is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
5354,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",218,23,3358,"The value of this 'if' control expression is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
5355,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",218,31,2209,"This brace style is not consistent with 'exdented' style.","  218:	    if(the_pCmdOption != NULL){
",,,
5356,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",224,32,2209,"This brace style is not consistent with 'exdented' style.","  224:	    if(the_iRet != ANZ_SUCCESS){
",,,
5357,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",225,18,2001,"A 'goto' statement has been used.","  225:	        goto EXIT;
",,,
5358,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",229,32,2209,"This brace style is not consistent with 'exdented' style.","  229:	    if(the_iRet != ANZ_SUCCESS){
",,,
5359,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",230,18,2001,"A 'goto' statement has been used.","  230:	        goto EXIT;
",,,
5360,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",233,47,2209,"This brace style is not consistent with 'exdented' style.","  233:	    if(the_iMeasureType == ANZ_TREND_MEASURE) {
",,,
5361,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",234,13,3220,"Identifier declared at a nested level of block scope.","  234:	        int the_iType = -1;
",,,
5362,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",235,13,3220,"Identifier declared at a nested level of block scope.","  235:	        int the_pPos = -1;
",,,
5363,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",236,9,3200,"isDirOrFile' returns a value which is not being used.","  236:	        isDirOrFile(*the_pMeasureItem,&amp;the_iType);
",,,
5364,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",237,35,2209,"This brace style is not consistent with 'exdented' style.","  237:	        if(the_iType == ANZ_FILE) {
",,,
5365,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",242,30,2209,"This brace style is not consistent with 'exdented' style.","  242:	            if(the_pPos &gt; 0) {
",,,
5366,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",243,55,488,"Performing pointer arithmetic.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
5367,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",243,66,489,"Increment or decrement operation performed on pointer.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
5368,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",246,43,489,"Increment or decrement operation performed on pointer.","  246:	            GetPathPos(*(the_pMeasureItem + 1),&amp;the_pPos);
",,,
5369,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",248,30,2209,"This brace style is not consistent with 'exdented' style.","  248:	            if(the_pPos &gt; 0) {
",,,
5370,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,36,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
5371,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,42,3501,"This could be read as an old-style assignment operator. Spaces are needed to make it more readable.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
5372,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,61,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
5373,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,66,488,"Performing pointer arithmetic.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
5374,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",249,77,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
5375,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",252,13,3198,"The value assigned to 'the_iRet' is always modified before being used.","  252:	            the_iRet = ResetTrendPath(g_szNVPath);
",,,
5376,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",254,41,2209,"This brace style is not consistent with 'exdented' style.","  254:	            if(the_iRet != ANZ_SUCCESS) {
",,,
5377,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",255,26,2001,"A 'goto' statement has been used.","  255:	                goto EXIT;
",,,
5378,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",260,51,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
5379,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",260,57,3631,"Type 'char' has been used in a cast.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
5380,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",261,41,2209,"This brace style is not consistent with 'exdented' style.","  261:	    if(the_iRet == ANZ_NO_MEASURE_FILES){
",,,
5381,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",262,9,3200,"printf' returns a value which is not being used.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
5382,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",262,16,3122,"Hard-coded 'magic' string literal.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
5383,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",264,42,2209,"This brace style is not consistent with 'exdented' style.","  264:	    if(the_iRet == ANZ_ERR_MEMORY_FAILED){
",,,
5384,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",265,9,3200,"printf' returns a value which is not being used.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
5385,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",265,16,3122,"Hard-coded 'magic' string literal.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
5386,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",267,32,2209,"This brace style is not consistent with 'exdented' style.","  267:	    if(the_iRet != ANZ_SUCCESS){
",,,
5387,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",268,18,2001,"A 'goto' statement has been used.","  268:	        goto EXIT;
",,,
5388,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",272,37,2209,"This brace style is not consistent with 'exdented' style.","  272:	    if(the_pOption-&gt;m_fileLOC == ON){
",,,
5389,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",273,9,3200,"strcat' returns a value which is not being used.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
5390,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",273,33,3122,"Hard-coded 'magic' string literal.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
5391,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",276,40,2209,"This brace style is not consistent with 'exdented' style.","  276:	    if(the_pOption-&gt;m_redundancy == ON){
",,,
5392,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,306,"[I] Cast between a pointer to object and an integral type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5393,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,310,"Casting to different object pointer type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5394,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5395,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,489,"Increment or decrement operation performed on pointer.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5396,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__result' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5397,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5398,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5399,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5400,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5401,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5402,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5403,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5404,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5405,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5406,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5407,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,2100,"Integral promotion : unsigned char promoted to signed int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5408,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5409,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3112,"This statement has no side-effect - it can be removed.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5410,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3122,"Hard-coded 'magic' string literal.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5411,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3200,"__builtin_strcmp' returns a value which is not being used.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5412,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5413,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5414,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5415,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5416,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5417,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5418,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5419,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5420,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5421,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3326,"An assignment operator is being used in a boolean expression.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5422,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3346,"This 'if' control expression has a constant 'true' value.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5423,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5424,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5425,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5426,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5427,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5428,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5429,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5430,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5431,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5432,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5433,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5434,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5435,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5436,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5437,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5438,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5439,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5440,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5441,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5442,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5443,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5444,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5445,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5446,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3416,"This boolean expression contains side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5447,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3417,"The comma operator has been used outside a for-loop header.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5448,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3446,"The result operands of this conditional operator generate side effects","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5449,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3631,"Type 'char' has been used in a cast.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5450,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,12,3760,"Implicit conversion: int to unsigned int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5451,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5452,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5453,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5454,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",277,45,2209,"This brace style is not consistent with 'exdented' style.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5455,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",278,13,3200,"strcat' returns a value which is not being used.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
5456,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",278,37,3122,"Hard-coded 'magic' string literal.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
5457,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",278,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
5458,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",279,13,3200,"strcat' returns a value which is not being used.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
5459,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",279,37,3122,"Hard-coded 'magic' string literal.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
5460,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",279,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
5461,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",281,13,2209,"This brace style is not consistent with 'exdented' style.","  281:	        else{
",,,
5462,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",281,13,3201,"This statement is unreachable.","  281:	        else{
",,,
5463,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",282,13,3200,"strcat' returns a value which is not being used.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
5464,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",282,37,3122,"Hard-coded 'magic' string literal.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
5465,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",282,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
5466,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",286,8,3344,"Value of control expression is not derived from an explicit logical operation.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
5467,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",286,31,2209,"This brace style is not consistent with 'exdented' style.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
5468,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,306,"[I] Cast between a pointer to object and an integral type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5469,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,310,"Casting to different object pointer type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5470,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5471,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,489,"Increment or decrement operation performed on pointer.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5472,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__result' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5473,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5474,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5475,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5476,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5477,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5478,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5479,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5480,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5481,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5482,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5483,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,2100,"Integral promotion : unsigned char promoted to signed int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5484,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5485,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3112,"This statement has no side-effect - it can be removed.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5486,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3122,"Hard-coded 'magic' string literal.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5487,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3200,"__builtin_strcmp' returns a value which is not being used.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5488,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5489,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5490,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5491,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5492,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5493,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5494,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5495,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5496,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5497,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3326,"An assignment operator is being used in a boolean expression.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5498,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3346,"This 'if' control expression has a constant 'true' value.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5499,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5500,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5501,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5502,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5503,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5504,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5505,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5506,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5507,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5508,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5509,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5510,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5511,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5512,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5513,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5514,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5515,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5516,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5517,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5518,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5519,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5520,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5521,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5522,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3416,"This boolean expression contains side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5523,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3417,"The comma operator has been used outside a for-loop header.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5524,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3446,"The result operands of this conditional operator generate side effects","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5525,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3631,"Type 'char' has been used in a cast.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5526,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,12,3760,"Implicit conversion: int to unsigned int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5527,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5528,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5529,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5530,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",287,45,2209,"This brace style is not consistent with 'exdented' style.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5531,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",288,13,3200,"strcat' returns a value which is not being used.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
5532,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",288,37,3122,"Hard-coded 'magic' string literal.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
5533,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",288,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
5534,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",289,13,3200,"strcat' returns a value which is not being used.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
5535,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",289,37,3122,"Hard-coded 'magic' string literal.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
5536,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",289,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
5537,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",291,13,2209,"This brace style is not consistent with 'exdented' style.","  291:	        else{
",,,
5538,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",291,13,3201,"This statement is unreachable.","  291:	        else{
",,,
5539,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",292,13,3200,"strcat' returns a value which is not being used.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
5540,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",292,37,3122,"Hard-coded 'magic' string literal.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
5541,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",292,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
5542,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",296,8,3344,"Value of control expression is not derived from an explicit logical operation.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
5543,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",296,28,2209,"This brace style is not consistent with 'exdented' style.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
5544,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,306,"[I] Cast between a pointer to object and an integral type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5545,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,310,"Casting to different object pointer type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5546,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5547,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,489,"Increment or decrement operation performed on pointer.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5548,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__result' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5549,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5550,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5551,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5552,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5553,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5554,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5555,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5556,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5557,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5558,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5559,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,2100,"Integral promotion : unsigned char promoted to signed int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5560,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5561,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3112,"This statement has no side-effect - it can be removed.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5562,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3122,"Hard-coded 'magic' string literal.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5563,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3200,"__builtin_strcmp' returns a value which is not being used.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5564,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5565,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5566,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5567,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5568,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5569,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5570,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5571,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5572,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5573,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3326,"An assignment operator is being used in a boolean expression.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5574,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3346,"This 'if' control expression has a constant 'true' value.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5575,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5576,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5577,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5578,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5579,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5580,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5581,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5582,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5583,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5584,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5585,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5586,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5587,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5588,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5589,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5590,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5591,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5592,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5593,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5594,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5595,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5596,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5597,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5598,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3416,"This boolean expression contains side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5599,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3417,"The comma operator has been used outside a for-loop header.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5600,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3446,"The result operands of this conditional operator generate side effects","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5601,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3631,"Type 'char' has been used in a cast.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5602,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,12,3760,"Implicit conversion: int to unsigned int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5603,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5604,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5605,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5606,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",297,45,2209,"This brace style is not consistent with 'exdented' style.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5607,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",298,13,3200,"strcat' returns a value which is not being used.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
5608,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",298,37,3122,"Hard-coded 'magic' string literal.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
5609,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",298,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
5610,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",299,13,3200,"strcat' returns a value which is not being used.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
5611,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",299,37,3122,"Hard-coded 'magic' string literal.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
5612,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",299,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
5613,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",301,13,2209,"This brace style is not consistent with 'exdented' style.","  301:	        else{
",,,
5614,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",301,13,3201,"This statement is unreachable.","  301:	        else{
",,,
5615,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",302,13,3200,"strcat' returns a value which is not being used.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
5616,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",302,37,3122,"Hard-coded 'magic' string literal.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
5617,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",302,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
5618,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,306,"[I] Cast between a pointer to object and an integral type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5619,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,310,"Casting to different object pointer type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5620,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5621,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,489,"Increment or decrement operation performed on pointer.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5622,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__result' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5623,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5624,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5625,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5626,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5627,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5628,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5629,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5630,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5631,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5632,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5633,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,2100,"Integral promotion : unsigned char promoted to signed int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5634,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5635,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3112,"This statement has no side-effect - it can be removed.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5636,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3122,"Hard-coded 'magic' string literal.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5637,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3200,"__builtin_strcmp' returns a value which is not being used.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5638,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5639,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5640,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5641,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5642,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5643,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5644,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5645,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5646,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5647,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3326,"An assignment operator is being used in a boolean expression.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5648,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3346,"This 'if' control expression has a constant 'true' value.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5649,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5650,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5651,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5652,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5653,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5654,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5655,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5656,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5657,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5658,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5659,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5660,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5661,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5662,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5663,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5664,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5665,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5666,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5667,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5668,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5669,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5670,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5671,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5672,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3416,"This boolean expression contains side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5673,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3417,"The comma operator has been used outside a for-loop header.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5674,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3446,"The result operands of this conditional operator generate side effects","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5675,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3631,"Type 'char' has been used in a cast.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5676,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,12,3760,"Implicit conversion: int to unsigned int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5677,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5678,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5679,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5680,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",304,45,2209,"This brace style is not consistent with 'exdented' style.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5681,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",305,13,3200,"strcat' returns a value which is not being used.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
5682,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",305,37,3122,"Hard-coded 'magic' string literal.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
5683,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",305,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
5684,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",306,13,3200,"strcat' returns a value which is not being used.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
5685,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",306,37,3122,"Hard-coded 'magic' string literal.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
5686,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",308,13,2209,"This brace style is not consistent with 'exdented' style.","  308:	        else{
",,,
5687,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",308,13,3201,"This statement is unreachable.","  308:	        else{
",,,
5688,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",309,13,3200,"strcat' returns a value which is not being used.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
5689,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",309,37,3122,"Hard-coded 'magic' string literal.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
5690,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",314,8,3344,"Value of control expression is not derived from an explicit logical operation.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
5691,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",314,34,2209,"This brace style is not consistent with 'exdented' style.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
5692,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,306,"[I] Cast between a pointer to object and an integral type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5693,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,310,"Casting to different object pointer type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5694,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5695,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,489,"Increment or decrement operation performed on pointer.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5696,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__result' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5697,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5698,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5699,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5700,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5701,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5702,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5703,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5704,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5705,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5706,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5707,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,2100,"Integral promotion : unsigned char promoted to signed int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5708,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5709,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3112,"This statement has no side-effect - it can be removed.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5710,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3122,"Hard-coded 'magic' string literal.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5711,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3200,"__builtin_strcmp' returns a value which is not being used.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5712,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5713,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5714,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5715,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5716,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5717,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5718,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5719,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5720,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5721,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3326,"An assignment operator is being used in a boolean expression.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5722,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3346,"This 'if' control expression has a constant 'true' value.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5723,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5724,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5725,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5726,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5727,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5728,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5729,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5730,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5731,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5732,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5733,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5734,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5735,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5736,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5737,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5738,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5739,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5740,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5741,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5742,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5743,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5744,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5745,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5746,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3416,"This boolean expression contains side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5747,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3417,"The comma operator has been used outside a for-loop header.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5748,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3446,"The result operands of this conditional operator generate side effects","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5749,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3631,"Type 'char' has been used in a cast.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5750,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,12,3760,"Implicit conversion: int to unsigned int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5751,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5752,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5753,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5754,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",315,45,2209,"This brace style is not consistent with 'exdented' style.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5755,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",316,13,3200,"strcat' returns a value which is not being used.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
5756,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",316,37,3122,"Hard-coded 'magic' string literal.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
5757,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",316,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
5758,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",317,13,3200,"strcat' returns a value which is not being used.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
5759,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",317,37,3122,"Hard-coded 'magic' string literal.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
5760,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",317,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
5761,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",319,13,2209,"This brace style is not consistent with 'exdented' style.","  319:	        else{
",,,
5762,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",319,13,3201,"This statement is unreachable.","  319:	        else{
",,,
5763,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",320,13,3200,"strcat' returns a value which is not being used.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
5764,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",320,37,3122,"Hard-coded 'magic' string literal.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
5765,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",320,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
5766,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,306,"[I] Cast between a pointer to object and an integral type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5767,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,310,"Casting to different object pointer type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5768,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5769,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,489,"Increment or decrement operation performed on pointer.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5770,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__result' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5771,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5772,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5773,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5774,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5775,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5776,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5777,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5778,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5779,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5780,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5781,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,2100,"Integral promotion : unsigned char promoted to signed int.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5782,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5783,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3112,"This statement has no side-effect - it can be removed.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5784,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3122,"Hard-coded 'magic' string literal.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5785,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3200,"__builtin_strcmp' returns a value which is not being used.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5786,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5787,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5788,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5789,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5790,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5791,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5792,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5793,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5794,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5795,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3326,"An assignment operator is being used in a boolean expression.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5796,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3346,"This 'if' control expression has a constant 'true' value.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5797,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5798,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5799,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5800,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5801,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5802,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5803,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5804,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5805,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5806,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5807,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5808,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5809,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5810,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5811,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5812,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5813,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5814,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5815,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5816,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5817,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5818,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5819,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5820,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3416,"This boolean expression contains side effects.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5821,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3417,"The comma operator has been used outside a for-loop header.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5822,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3446,"The result operands of this conditional operator generate side effects","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5823,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3631,"Type 'char' has been used in a cast.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5824,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,12,3760,"Implicit conversion: int to unsigned int.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5825,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5826,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5827,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5828,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",323,45,2209,"This brace style is not consistent with 'exdented' style.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5829,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",324,13,3200,"strcat' returns a value which is not being used.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
5830,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",324,37,3122,"Hard-coded 'magic' string literal.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
5831,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",324,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
5832,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",325,13,3200,"strcat' returns a value which is not being used.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
5833,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",325,37,3122,"Hard-coded 'magic' string literal.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
5834,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",325,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
5835,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",327,13,2209,"This brace style is not consistent with 'exdented' style.","  327:	        else{
",,,
5836,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",327,13,3201,"This statement is unreachable.","  327:	        else{
",,,
5837,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",328,13,3200,"strcat' returns a value which is not being used.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
5838,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",328,37,3122,"Hard-coded 'magic' string literal.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
5839,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",328,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
5840,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",333,8,3344,"Value of control expression is not derived from an explicit logical operation.","  333:	    if(the_pOption-&gt;m_trend){
",,,
5841,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",333,29,2209,"This brace style is not consistent with 'exdented' style.","  333:	    if(the_pOption-&gt;m_trend){
",,,
5842,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,306,"[I] Cast between a pointer to object and an integral type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5843,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,310,"Casting to different object pointer type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5844,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5845,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,489,"Increment or decrement operation performed on pointer.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5846,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,602,"[U] The identifier '__result' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5847,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5848,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5849,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5850,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5851,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5852,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5853,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5854,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5855,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5856,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5857,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,2100,"Integral promotion : unsigned char promoted to signed int.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5858,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5859,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3112,"This statement has no side-effect - it can be removed.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5860,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3122,"Hard-coded 'magic' string literal.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5861,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3200,"__builtin_strcmp' returns a value which is not being used.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5862,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5863,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5864,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5865,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5866,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5867,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5868,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5869,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5870,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5871,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3326,"An assignment operator is being used in a boolean expression.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5872,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3346,"This 'if' control expression has a constant 'true' value.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5873,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5874,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5875,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5876,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5877,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5878,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5879,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5880,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5881,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5882,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5883,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5884,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5885,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5886,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5887,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5888,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5889,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5890,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5891,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5892,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5893,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5894,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5895,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5896,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3416,"This boolean expression contains side effects.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5897,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3417,"The comma operator has been used outside a for-loop header.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5898,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3446,"The result operands of this conditional operator generate side effects","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5899,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3631,"Type 'char' has been used in a cast.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5900,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,12,3760,"Implicit conversion: int to unsigned int.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5901,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5902,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5903,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5904,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",334,45,2209,"This brace style is not consistent with 'exdented' style.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5905,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",335,13,3200,"strcat' returns a value which is not being used.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
5906,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",335,37,3122,"Hard-coded 'magic' string literal.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
5907,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",335,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
5908,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",336,13,3200,"strcat' returns a value which is not being used.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
5909,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",336,37,3122,"Hard-coded 'magic' string literal.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
5910,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",336,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
5911,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",338,13,2209,"This brace style is not consistent with 'exdented' style.","  338:	        else{
",,,
5912,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",338,13,3201,"This statement is unreachable.","  338:	        else{
",,,
5913,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",339,13,3200,"strcat' returns a value which is not being used.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
5914,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",339,37,3122,"Hard-coded 'magic' string literal.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
5915,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",339,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
5916,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",341,9,3200,"strcat' returns a value which is not being used.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
5917,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",341,33,3122,"Hard-coded 'magic' string literal.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
5918,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",341,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
5919,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",345,8,3344,"Value of control expression is not derived from an explicit logical operation.","  345:	    if(the_pOption-&gt;m_funcTrend){
",,,
5920,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",345,33,2209,"This brace style is not consistent with 'exdented' style.","  345:	    if(the_pOption-&gt;m_funcTrend){
",,,
5921,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,306,"[I] Cast between a pointer to object and an integral type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5922,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,310,"Casting to different object pointer type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5923,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5924,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,489,"Increment or decrement operation performed on pointer.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5925,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,602,"[U] The identifier '__result' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5926,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5927,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5928,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5929,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5930,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5931,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5932,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5933,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5934,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5935,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5936,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,2100,"Integral promotion : unsigned char promoted to signed int.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5937,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5938,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3112,"This statement has no side-effect - it can be removed.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5939,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3122,"Hard-coded 'magic' string literal.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5940,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3200,"__builtin_strcmp' returns a value which is not being used.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5941,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5942,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5943,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5944,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5945,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5946,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5947,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5948,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5949,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5950,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3326,"An assignment operator is being used in a boolean expression.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5951,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3346,"This 'if' control expression has a constant 'true' value.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5952,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5953,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5954,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5955,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5956,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5957,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5958,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5959,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5960,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5961,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5962,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5963,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5964,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5965,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5966,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5967,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5968,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5969,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5970,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5971,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5972,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5973,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5974,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5975,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3416,"This boolean expression contains side effects.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5976,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3417,"The comma operator has been used outside a for-loop header.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5977,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3446,"The result operands of this conditional operator generate side effects","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5978,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3631,"Type 'char' has been used in a cast.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5979,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,12,3760,"Implicit conversion: int to unsigned int.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5980,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5981,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5982,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5983,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",346,45,2209,"This brace style is not consistent with 'exdented' style.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5984,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",347,13,3200,"strcat' returns a value which is not being used.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
5985,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",347,37,3122,"Hard-coded 'magic' string literal.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
5986,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",347,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
5987,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",348,13,3200,"strcat' returns a value which is not being used.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
5988,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",348,37,3122,"Hard-coded 'magic' string literal.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
5989,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",348,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
5990,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",350,13,2209,"This brace style is not consistent with 'exdented' style.","  350:	        else{
",,,
5991,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",350,13,3201,"This statement is unreachable.","  350:	        else{
",,,
5992,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",351,13,3200,"strcat' returns a value which is not being used.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
5993,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",351,37,3122,"Hard-coded 'magic' string literal.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
5994,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",351,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
5995,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,306,"[I] Cast between a pointer to object and an integral type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5996,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,310,"Casting to different object pointer type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5997,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5998,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,489,"Increment or decrement operation performed on pointer.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
5999,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,602,"[U] The identifier '__result' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6000,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6001,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6002,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6003,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6004,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6005,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6006,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6007,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6008,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6009,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6010,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,2100,"Integral promotion : unsigned char promoted to signed int.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6011,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6012,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3112,"This statement has no side-effect - it can be removed.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6013,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3122,"Hard-coded 'magic' string literal.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6014,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3200,"__builtin_strcmp' returns a value which is not being used.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6015,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6016,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6017,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6018,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6019,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6020,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6021,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6022,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6023,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6024,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3326,"An assignment operator is being used in a boolean expression.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6025,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3346,"This 'if' control expression has a constant 'true' value.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6026,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6027,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6028,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6029,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6030,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6031,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6032,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6033,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6034,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6035,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6036,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6037,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6038,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6039,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6040,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6041,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6042,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6043,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6044,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6045,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6046,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6047,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6048,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6049,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3416,"This boolean expression contains side effects.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6050,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3417,"The comma operator has been used outside a for-loop header.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6051,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3446,"The result operands of this conditional operator generate side effects","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6052,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3631,"Type 'char' has been used in a cast.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6053,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,12,3760,"Implicit conversion: int to unsigned int.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6054,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6055,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6056,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6057,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",353,45,2209,"This brace style is not consistent with 'exdented' style.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6058,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",354,13,3200,"strcat' returns a value which is not being used.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
6059,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",354,37,3122,"Hard-coded 'magic' string literal.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
6060,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",354,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
6061,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",355,13,3200,"strcat' returns a value which is not being used.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
6062,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",355,37,3122,"Hard-coded 'magic' string literal.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
6063,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",355,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
6064,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",357,13,2209,"This brace style is not consistent with 'exdented' style.","  357:	        else{
",,,
6065,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",357,13,3201,"This statement is unreachable.","  357:	        else{
",,,
6066,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",358,13,3200,"strcat' returns a value which is not being used.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
6067,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",358,37,3122,"Hard-coded 'magic' string literal.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
6068,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",358,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
6069,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,306,"[I] Cast between a pointer to object and an integral type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6070,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,310,"Casting to different object pointer type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6071,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6072,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,489,"Increment or decrement operation performed on pointer.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6073,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,602,"[U] The identifier '__result' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6074,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6075,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6076,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6077,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6078,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6079,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6080,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6081,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6082,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6083,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6084,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,2100,"Integral promotion : unsigned char promoted to signed int.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6085,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6086,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3112,"This statement has no side-effect - it can be removed.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6087,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3122,"Hard-coded 'magic' string literal.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6088,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3200,"__builtin_strcmp' returns a value which is not being used.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6089,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6090,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6091,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6092,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6093,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6094,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6095,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6096,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6097,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6098,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3326,"An assignment operator is being used in a boolean expression.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6099,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3346,"This 'if' control expression has a constant 'true' value.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6100,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6101,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6102,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6103,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6104,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6105,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6106,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6107,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6108,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6109,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6110,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6111,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6112,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6113,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6114,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6115,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6116,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6117,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6118,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6119,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6120,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6121,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6122,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6123,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3416,"This boolean expression contains side effects.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6124,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3417,"The comma operator has been used outside a for-loop header.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6125,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3446,"The result operands of this conditional operator generate side effects","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6126,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3631,"Type 'char' has been used in a cast.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6127,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,12,3760,"Implicit conversion: int to unsigned int.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6128,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6129,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6130,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6131,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",360,45,2209,"This brace style is not consistent with 'exdented' style.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6132,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",361,13,3200,"strcat' returns a value which is not being used.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
6133,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",361,37,3122,"Hard-coded 'magic' string literal.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
6134,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",361,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
6135,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",362,13,3200,"strcat' returns a value which is not being used.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
6136,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",362,37,3122,"Hard-coded 'magic' string literal.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
6137,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",362,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
6138,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",364,13,2209,"This brace style is not consistent with 'exdented' style.","  364:	        else{
",,,
6139,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",364,13,3201,"This statement is unreachable.","  364:	        else{
",,,
6140,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",365,13,3200,"strcat' returns a value which is not being used.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
6141,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",365,37,3122,"Hard-coded 'magic' string literal.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
6142,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",365,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
6143,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,306,"[I] Cast between a pointer to object and an integral type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6144,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,310,"Casting to different object pointer type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6145,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6146,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,489,"Increment or decrement operation performed on pointer.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6147,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,602,"[U] The identifier '__result' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6148,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6149,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6150,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6151,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6152,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6153,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6154,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6155,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6156,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6157,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6158,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,2100,"Integral promotion : unsigned char promoted to signed int.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6159,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6160,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3112,"This statement has no side-effect - it can be removed.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6161,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3122,"Hard-coded 'magic' string literal.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6162,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3200,"__builtin_strcmp' returns a value which is not being used.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6163,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6164,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6165,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6166,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6167,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6168,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6169,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6170,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6171,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6172,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3326,"An assignment operator is being used in a boolean expression.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6173,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3346,"This 'if' control expression has a constant 'true' value.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6174,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6175,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6176,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6177,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6178,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6179,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6180,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6181,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6182,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6183,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6184,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6185,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6186,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6187,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6188,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6189,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6190,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6191,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6192,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6193,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6194,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6195,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6196,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6197,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3416,"This boolean expression contains side effects.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6198,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3417,"The comma operator has been used outside a for-loop header.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6199,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3446,"The result operands of this conditional operator generate side effects","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6200,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3631,"Type 'char' has been used in a cast.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6201,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,12,3760,"Implicit conversion: int to unsigned int.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6202,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6203,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6204,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6205,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",367,45,2209,"This brace style is not consistent with 'exdented' style.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6206,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",368,13,3200,"strcat' returns a value which is not being used.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
6207,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",368,37,3122,"Hard-coded 'magic' string literal.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
6208,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",368,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
6209,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",369,13,3200,"strcat' returns a value which is not being used.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
6210,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",369,37,3122,"Hard-coded 'magic' string literal.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
6211,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",369,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
6212,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",371,13,2209,"This brace style is not consistent with 'exdented' style.","  371:	        else{
",,,
6213,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",371,13,3201,"This statement is unreachable.","  371:	        else{
",,,
6214,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",372,13,3200,"strcat' returns a value which is not being used.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
6215,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",372,37,3122,"Hard-coded 'magic' string literal.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
6216,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",372,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
6217,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",377,37,2209,"This brace style is not consistent with 'exdented' style.","  377:	    if(the_pOption-&gt;m_verbos == ON ){
",,,
6218,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",379,9,3200,"printf' returns a value which is not being used.","  379:	        printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_START);
",,,
6219,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",379,16,3122,"Hard-coded 'magic' string literal.","  379:	        printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_START);
",,,
6220,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",384,32,2209,"This brace style is not consistent with 'exdented' style.","  384:	    if(the_iRet != ANZ_SUCCESS){
",,,
6221,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",385,18,2001,"A 'goto' statement has been used.","  385:	        goto EXIT;
",,,
6222,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",390,32,2209,"This brace style is not consistent with 'exdented' style.","  390:	    if(the_iRet != ANZ_SUCCESS){
",,,
6223,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",392,18,2001,"A 'goto' statement has been used.","  392:	        goto EXIT;
",,,
6224,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",397,47,2209,"This brace style is not consistent with 'exdented' style.","  397:	    if(the_iMeasureType == ANZ_COMMON_MEASURE){
",,,
6225,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",400,36,2209,"This brace style is not consistent with 'exdented' style.","  400:	        if(the_iRet != ANZ_SUCCESS){
",,,
6226,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",401,22,2001,"A 'goto' statement has been used.","  401:	            goto EXIT;
",,,
6227,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",404,36,2209,"This brace style is not consistent with 'exdented' style.","  404:	        if(the_iRet != ANZ_SUCCESS){
",,,
6228,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",405,13,3200,"printf' returns a value which is not being used.","  405:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
6229,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",405,20,3122,"Hard-coded 'magic' string literal.","  405:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
6230,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",406,22,2001,"A 'goto' statement has been used.","  406:	            goto EXIT;
",,,
6231,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",410,46,2209,"This brace style is not consistent with 'exdented' style.","  410:	    if(the_iMeasureType == ANZ_TREND_MEASURE){
",,,
6232,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",413,36,2209,"This brace style is not consistent with 'exdented' style.","  413:	        if(the_iRet != ANZ_SUCCESS){
",,,
6233,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",414,22,2001,"A 'goto' statement has been used.","  414:	            goto EXIT;
",,,
6234,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",417,36,2209,"This brace style is not consistent with 'exdented' style.","  417:	        if(the_iRet != ANZ_SUCCESS){
",,,
6235,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",418,13,3200,"printf' returns a value which is not being used.","  418:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
6236,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",418,20,3122,"Hard-coded 'magic' string literal.","  418:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
6237,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",419,22,2001,"A 'goto' statement has been used.","  419:	            goto EXIT;
",,,
6238,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",424,36,2209,"This brace style is not consistent with 'exdented' style.","  424:	    if(the_pOption-&gt;m_verbos == ON){
",,,
6239,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",425,40,2209,"This brace style is not consistent with 'exdented' style.","  425:	        if(the_pAnzInfo-&gt;m_err == NULL){
",,,
6240,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",426,13,3200,"printf' returns a value which is not being used.","  426:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
6241,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",426,20,3122,"Hard-coded 'magic' string literal.","  426:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
6242,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",428,13,2209,"This brace style is not consistent with 'exdented' style.","  428:	        else{
",,,
6243,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",429,13,3200,"printf' returns a value which is not being used.","  429:	            printf(""%s%s%s\n"",MSG_MEASURE_FILE_ERROR,the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
6244,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",429,20,3122,"Hard-coded 'magic' string literal.","  429:	            printf(""%s%s%s\n"",MSG_MEASURE_FILE_ERROR,the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
6245,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",433,1,2015,"This label is not a case or default label for a switch statement.","  433:	EXIT:;
",,,
6246,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",433,1,2201,"This indentation is not consistent with previous indentation in this file.","  433:	EXIT:;
",,,
6247,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",433,6,3109,"Empty statement (';' on its own) - if this is deliberate, it is best to put ';' on a line by itself.","  433:	EXIT:;
",,,
6248,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",433,6,3139,"Null statement is obscured by code or comment on the same line.","  433:	EXIT:;
",,,
6249,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",435,29,505,"[U] Dereferencing pointer value that is apparently NULL.","  435:	    the_iRet = OutErrorFile(the_pAnzInfo-&gt;m_err);
",,,
6250,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",436,42,2209,"This brace style is not consistent with 'exdented' style.","  436:	    if(the_iRet == ANZ_ERR_MEMORY_FAILED){
",,,
6251,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",437,9,3200,"printf' returns a value which is not being used.","  437:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
6252,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",437,16,3122,"Hard-coded 'magic' string literal.","  437:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
6253,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",442,31,2209,"This brace style is not consistent with 'exdented' style.","  442:	    if(the_pCmdOption != NULL){
",,,
6254,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",444,9,3199,"The value of 'the_pCmdOption' is never used following this assignment.","  444:	        the_pCmdOption = NULL;
",,,
6255,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",447,34,2209,"This brace style is not consistent with 'exdented' style.","  447:	    if(the_pMeasureItem != NULL) {
",,,
6256,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",449,9,3199,"The value of 'the_pMeasureItem' is never used following this assignment.","  449:	        the_pMeasureItem = NULL;
",,,
6257,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",455,8,3344,"Value of control expression is not derived from an explicit logical operation.","  455:	    if(g_bOutTime) {
",,,
6258,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",455,20,2209,"This brace style is not consistent with 'exdented' style.","  455:	    if(g_bOutTime) {
",,,
6259,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",456,9,3200,"ftime' returns a value which is not being used.","  456:	        ftime(&amp;the_ed);
",,,
6260,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",457,9,3200,"printf' returns a value which is not being used.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
6261,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",457,9,3395,"Operators in the set + - * / with different precedence have been used. Extra parentheses recommended.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
6262,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",457,9,3401,"Possible precedence confusion: extra parentheses are recommended here.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
6263,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",457,16,3122,"Hard-coded 'magic' string literal.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
6264,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",457,69,1253,"Unsuffixed integer constant implicitly converted to another type.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
6265,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",457,71,3120,"Hard-coded 'magic' integer constant '1000'.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
6266,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",457,94,2101,"Integral promotion : unsigned short promoted to signed int.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
6267,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",473,2,2017,"Comment spans more than one line.","  473:	*/
",,,
6268,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",475,26,3227,"The parameter 'sig' is never modified and so it could be declared with the 'const' qualifier.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
6269,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",475,35,3206,"The parameter 'code' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
6270,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",475,47,3206,"The parameter 'scp' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
6271,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",475,53,3625,"Type 'char' has been used in the declaration of an object or a function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
6272,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",475,59,344,"K&amp;R compilers do not support function prototypes.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
6273,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",475,59,3206,"The parameter 'addr' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
6274,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",480,5,3625,"Type 'char' has been used in the declaration of an object or a function.","  480:	    char the_errMsg[128]; /* エラーメッセージ */
",,,
6275,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",480,21,3132,"Hard coded 'magic' number '128' used to define the size of an array.","  480:	    char the_errMsg[128]; /* エラーメッセージ */
",,,
6276,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",483,16,2209,"This brace style is not consistent with 'exdented' style.","  483:	    switch(sig){
",,,
6277,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",485,9,3200,"sprintf' returns a value which is not being used.","  485:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGINT(%d)\n"",sig );
",,,
6278,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",485,28,3122,"Hard-coded 'magic' string literal.","  485:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGINT(%d)\n"",sig );
",,,
6279,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",486,9,3200,"fprintf' returns a value which is not being used.","  486:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6280,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",486,31,3122,"Hard-coded 'magic' string literal.","  486:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6281,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",489,9,3200,"sprintf' returns a value which is not being used.","  489:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGQUIT(%d)\n"",sig );
",,,
6282,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",489,28,3122,"Hard-coded 'magic' string literal.","  489:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGQUIT(%d)\n"",sig );
",,,
6283,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",490,9,3200,"fprintf' returns a value which is not being used.","  490:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6284,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",490,31,3122,"Hard-coded 'magic' string literal.","  490:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6285,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",493,9,3200,"sprintf' returns a value which is not being used.","  493:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGKILL(%d)\n"",sig );
",,,
6286,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",493,28,3122,"Hard-coded 'magic' string literal.","  493:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGKILL(%d)\n"",sig );
",,,
6287,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",494,9,3200,"fprintf' returns a value which is not being used.","  494:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6288,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",494,31,3122,"Hard-coded 'magic' string literal.","  494:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6289,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",497,9,3200,"sprintf' returns a value which is not being used.","  497:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGTERM(%d)\n"",sig );
",,,
6290,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",497,28,3122,"Hard-coded 'magic' string literal.","  497:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGTERM(%d)\n"",sig );
",,,
6291,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",498,9,3200,"fprintf' returns a value which is not being used.","  498:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6292,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",498,31,3122,"Hard-coded 'magic' string literal.","  498:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6293,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",501,9,3200,"sprintf' returns a value which is not being used.","  501:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGFPE(%d)\n"",sig );
",,,
6294,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",501,28,3122,"Hard-coded 'magic' string literal.","  501:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGFPE(%d)\n"",sig );
",,,
6295,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",502,9,3200,"fprintf' returns a value which is not being used.","  502:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6296,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",502,31,3122,"Hard-coded 'magic' string literal.","  502:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6297,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",505,9,3200,"sprintf' returns a value which is not being used.","  505:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGILL(%d)\n"",sig );
",,,
6298,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",505,28,3122,"Hard-coded 'magic' string literal.","  505:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGILL(%d)\n"",sig );
",,,
6299,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",506,9,3200,"fprintf' returns a value which is not being used.","  506:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6300,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",506,31,3122,"Hard-coded 'magic' string literal.","  506:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6301,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",509,9,3200,"sprintf' returns a value which is not being used.","  509:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGBUS(%d)\n"",sig );
",,,
6302,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",509,28,3122,"Hard-coded 'magic' string literal.","  509:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGBUS(%d)\n"",sig );
",,,
6303,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",510,9,3200,"fprintf' returns a value which is not being used.","  510:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6304,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",510,31,3122,"Hard-coded 'magic' string literal.","  510:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6305,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",513,9,3200,"sprintf' returns a value which is not being used.","  513:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSEGV(%d)\n"",sig );
",,,
6306,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",513,28,3122,"Hard-coded 'magic' string literal.","  513:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSEGV(%d)\n"",sig );
",,,
6307,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",514,9,3200,"fprintf' returns a value which is not being used.","  514:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6308,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",514,31,3122,"Hard-coded 'magic' string literal.","  514:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6309,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",517,9,3200,"sprintf' returns a value which is not being used.","  517:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSYS(%d)\n"",sig );
",,,
6310,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",517,28,3122,"Hard-coded 'magic' string literal.","  517:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSYS(%d)\n"",sig );
",,,
6311,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",518,9,3200,"fprintf' returns a value which is not being used.","  518:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6312,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",518,31,3122,"Hard-coded 'magic' string literal.","  518:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6313,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",521,9,3200,"sprintf' returns a value which is not being used.","  521:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=%d\n"",sig );
",,,
6314,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",521,28,3122,"Hard-coded 'magic' string literal.","  521:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=%d\n"",sig );
",,,
6315,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",522,9,3200,"fprintf' returns a value which is not being used.","  522:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6316,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",522,31,3122,"Hard-coded 'magic' string literal.","  522:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
6317,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",532,16,2209,"This brace style is not consistent with 'exdented' style.","  532:	    switch(sig){
",,,
6318,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",538,10,2003,"The preceding non-empty 'case' or 'default' clause does not end with an explicit 'break' or 'return' statement.","  538:	    case SIGFPE :
",,,
6319,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",545,5,2002,"No 'default' case found in this 'switch' statement.","  545:	    }
",,,
6320,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",592,2,2017,"Comment spans more than one line.","  592:	*/
",,,
6321,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",594,1,3007,"""void"" has been omitted when defining a function with no parameters.","  594:	{
",,,
6322,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",597,5,428,"Function identifier is not followed by () but a function call may be intended.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
6323,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",597,5,3200,"signal' returns a value which is not being used.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
6324,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",597,23,432,"[C] Argument is not a compatible pointer type.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
6325,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",597,24,307,"[u] Cast between a pointer to object and a pointer to function.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
6326,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",598,5,428,"Function identifier is not followed by () but a function call may be intended.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
6327,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",598,5,3200,"signal' returns a value which is not being used.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
6328,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",598,23,432,"[C] Argument is not a compatible pointer type.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
6329,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",598,24,307,"[u] Cast between a pointer to object and a pointer to function.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
6330,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",599,5,428,"Function identifier is not followed by () but a function call may be intended.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
6331,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",599,5,3200,"signal' returns a value which is not being used.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
6332,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",599,23,432,"[C] Argument is not a compatible pointer type.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
6333,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",599,24,307,"[u] Cast between a pointer to object and a pointer to function.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
6334,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",601,5,428,"Function identifier is not followed by () but a function call may be intended.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
6335,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",601,5,3200,"signal' returns a value which is not being used.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
6336,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",601,23,432,"[C] Argument is not a compatible pointer type.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
6337,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",601,24,307,"[u] Cast between a pointer to object and a pointer to function.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
6338,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",602,5,428,"Function identifier is not followed by () but a function call may be intended.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
6339,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",602,5,3200,"signal' returns a value which is not being used.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
6340,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",602,22,432,"[C] Argument is not a compatible pointer type.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
6341,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",602,23,307,"[u] Cast between a pointer to object and a pointer to function.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
6342,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",604,5,428,"Function identifier is not followed by () but a function call may be intended.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
6343,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",604,5,3200,"signal' returns a value which is not being used.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
6344,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",604,23,432,"[C] Argument is not a compatible pointer type.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
6345,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",604,24,307,"[u] Cast between a pointer to object and a pointer to function.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
6346,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",605,5,428,"Function identifier is not followed by () but a function call may be intended.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
6347,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",605,5,3200,"signal' returns a value which is not being used.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
6348,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",605,23,432,"[C] Argument is not a compatible pointer type.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
6349,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",605,24,307,"[u] Cast between a pointer to object and a pointer to function.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
6350,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",606,5,428,"Function identifier is not followed by () but a function call may be intended.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
6351,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",606,5,3200,"signal' returns a value which is not being used.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
6352,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",606,23,432,"[C] Argument is not a compatible pointer type.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
6353,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",606,24,307,"[u] Cast between a pointer to object and a pointer to function.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
6354,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",607,5,428,"Function identifier is not followed by () but a function call may be intended.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
6355,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",607,5,3200,"signal' returns a value which is not being used.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
6356,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",607,23,432,"[C] Argument is not a compatible pointer type.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
6357,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",607,24,307,"[u] Cast between a pointer to object and a pointer to function.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
6358,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",622,2,2017,"Comment spans more than one line.","  622:	*/
",,,
6359,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",623,20,3625,"Type 'char' has been used in the declaration of an object or a function.","  623:	int ResetTrendPath(char *io_pPath)
",,,
6360,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",623,26,344,"K&amp;R compilers do not support function prototypes.","  623:	int ResetTrendPath(char *io_pPath)
",,,
6361,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",623,26,3227,"The parameter 'io_pPath' is never modified and so it could be declared with the 'const' qualifier.","  623:	int ResetTrendPath(char *io_pPath)
",,,
6362,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",625,9,2201,"This indentation is not consistent with previous indentation in this file.","  625:	        char the_szFullPath[MAX_PATH];
",,,
6363,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",625,9,3625,"Type 'char' has been used in the declaration of an object or a function.","  625:	        char the_szFullPath[MAX_PATH];
",,,
6364,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",626,9,2201,"This indentation is not consistent with previous indentation in this file.","  626:	        char the_szCurPath[MAX_PATH];
",,,
6365,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",626,9,3625,"Type 'char' has been used in the declaration of an object or a function.","  626:	        char the_szCurPath[MAX_PATH];
",,,
6366,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",627,9,2201,"This indentation is not consistent with previous indentation in this file.","  627:	        int the_iRet = ANZ_SUCCESS;
",,,
6367,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",627,13,2211,"the_iRet' is not aligned with the previously declared identifier.","  627:	        int the_iRet = ANZ_SUCCESS;
",,,
6368,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",630,9,2201,"This indentation is not consistent with previous indentation in this file.","  630:	        if(io_pPath[0] != '/') {
",,,
6369,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",630,20,506,"Dereferencing pointer value that is possibly NULL.","  630:	        if(io_pPath[0] != '/') {
",,,
6370,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",630,24,2106,"Integral promotion : plain char promoted to signed int.","  630:	        if(io_pPath[0] != '/') {
",,,
6371,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",630,27,3123,"Hard coded 'magic' character constant '/'.","  630:	        if(io_pPath[0] != '/') {
",,,
6372,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",630,32,2209,"This brace style is not consistent with 'exdented' style.","  630:	        if(io_pPath[0] != '/') {
",,,
6373,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",631,16,3416,"This boolean expression contains side effects.","  631:	            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {
",,,
6374,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",631,56,2209,"This brace style is not consistent with 'exdented' style.","  631:	            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {
",,,
6375,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",633,26,2001,"A 'goto' statement has been used.","  633:	                goto EXIT;
",,,
6376,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,306,"[I] Cast between a pointer to object and an integral type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6377,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,310,"Casting to different object pointer type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6378,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6379,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,489,"Increment or decrement operation performed on pointer.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6380,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,506,"Dereferencing pointer value that is possibly NULL.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6381,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,510,"Arithmetic operation on pointer value that is possibly NULL.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6382,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,602,"[U] The identifier '__result' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6383,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,602,"[U] The identifier '__s1' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6384,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6385,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,602,"[U] The identifier '__s2' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6386,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6387,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6388,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6389,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,1251,"Suffixed integer constant causes implicit conversion of other operand.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6390,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,1253,"Unsuffixed integer constant implicitly converted to another type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6391,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,1302,"__builtin_constant_p()' must be declared before use in C++.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6392,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,1302,"__builtin_strcmp()' must be declared before use in C++.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6393,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,2100,"Integral promotion : unsigned char promoted to signed int.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6394,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6395,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3112,"This statement has no side-effect - it can be removed.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6396,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3122,"Hard-coded 'magic' string literal.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6397,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3200,"__builtin_strcmp' returns a value which is not being used.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6398,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6399,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6400,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6401,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6402,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6403,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6404,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6405,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6406,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6407,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3326,"An assignment operator is being used in a boolean expression.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6408,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3346,"This 'if' control expression has a constant 'true' value.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6409,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6410,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6411,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6412,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6413,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6414,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6415,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6416,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6417,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6418,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6419,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6420,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6421,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6422,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6423,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6424,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6425,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6426,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6427,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6428,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6429,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6430,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3401,"Possible precedence confusion: extra parentheses are recommended here.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6431,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6432,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3416,"This boolean expression contains side effects.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6433,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3417,"The comma operator has been used outside a for-loop header.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6434,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3446,"The result operands of this conditional operator generate side effects","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6435,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3631,"Type 'char' has been used in a cast.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6436,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,16,3760,"Implicit conversion: int to unsigned int.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6437,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6438,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6439,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,36,1251,"Suffixed integer constant causes implicit conversion of other operand.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6440,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",635,42,2209,"This brace style is not consistent with 'exdented' style.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
6441,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",636,17,3200,"sprintf' returns a value which is not being used.","  636:	                sprintf(the_szFullPath,""%s/%s"",the_szCurPath,io_pPath);
",,,
6442,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",636,40,3122,"Hard-coded 'magic' string literal.","  636:	                sprintf(the_szFullPath,""%s/%s"",the_szCurPath,io_pPath);
",,,
6443,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",639,9,2201,"This indentation is not consistent with previous indentation in this file.","  639:	        else {
",,,
6444,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",639,14,2209,"This brace style is not consistent with 'exdented' style.","  639:	        else {
",,,
6445,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",640,22,2001,"A 'goto' statement has been used.","  640:	            goto EXIT;
",,,
6446,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",658,9,2201,"This indentation is not consistent with previous indentation in this file.","  658:	        strcpy(io_pPath,the_szFullPath);
",,,
6447,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",658,9,3200,"strcpy' returns a value which is not being used.","  658:	        strcpy(io_pPath,the_szFullPath);
",,,
6448,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",659,1,2015,"This label is not a case or default label for a switch statement.","  659:	EXIT:
",,,
6449,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",659,1,2201,"This indentation is not consistent with previous indentation in this file.","  659:	EXIT:
",,,
6450,"sample_c/src","analyzeme.c","analyzeme.c.HiRisk.html",660,9,2201,"This indentation is not consistent with previous indentation in this file.","  660:	        return the_iRet;
",,,
6451,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",1,1,240,"[E] This file contains the control-M character at the end of a line.","    1:	/*
",,,
6452,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",9,16,288,"[I] Source file '/home/www/TOSCANA_dev/BackEnd/AnalyzeTaskManager/work/1/work/sample_c_cpp/sample_c/src/analyzeme.c' has comments containing characters which are not members of the basic source character set.","    9:	      AnalyzeMeのメイン関数を定義する
",,,
6453,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",16,2,2017,"Comment spans more than one line.","   16:	*/
",,,
6454,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",20,2,2017,"Comment spans more than one line.","   20:	*/
",,,
6455,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",21,1,838,"File has already been included directly from this file.","   21:	#include ""analyzeme.h""
",,,
6456,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",21,1,839,"File has already been included indirectly from this file.","   21:	#include ""analyzeme.h""
",,,
6457,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",21,23,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   21:	#include ""analyzeme.h""
",,,
6458,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",22,1,839,"File has already been included indirectly from this file.","   22:	#include ""common.h""
",,,
6459,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",23,1,839,"File has already been included indirectly from this file.","   23:	#include ""memory_manage.h""
",,,
6460,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",23,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   23:	#include ""memory_manage.h""
",,,
6461,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",24,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   24:	#include ""parse_cmdline.h""
",,,
6462,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",25,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   25:	#include ""common_measure.h""
",,,
6463,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",26,27,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   26:	#include ""trend_measure.h""
",,,
6464,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",27,28,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   27:	#include ""make_file_list.h""
",,,
6465,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",29,31,816,"[L] #include ""..."" &nbsp;file name does not conform to ISO restrictions.","   29:	#include ""get_process_macro.h""
",,,
6466,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",30,1,839,"File has already been included indirectly from this file.","   30:	#include &lt;signal.h&gt;
",,,
6467,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",35,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
6468,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",35,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
6469,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",35,13,3211,"The global identifier 'TRACEFILE' is defined but not used.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
6470,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",35,13,3408,"TRACEFILE' has external linkage but is being defined without any previous declaration.","   35:	const char* TRACEFILE = ""analyzeme_trace.txt"";
",,,
6471,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",36,1,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
6472,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",36,7,3625,"Type 'char' has been used in the declaration of an object or a function.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
6473,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",36,13,3408,"APPLOGFILE' has external linkage but is being defined without any previous declaration.","   36:	const char* APPLOGFILE = ""analyzeme_log.txt"";
",,,
6474,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",44,7,3408,"g_fpLogFile' has external linkage but is being defined without any previous declaration.","   44:	FILE *g_fpLogFile = NULL;       /* Log File pointer */
",,,
6475,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",46,7,3211,"The global identifier 'g_fpTraceFile' is defined but not used.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
6476,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",46,7,3408,"g_fpTraceFile' has external linkage but is being defined without any previous declaration.","   46:	FILE *g_fpTraceFile = NULL;     /* Trace File pointer */
",,,
6477,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",48,7,3408,"g_fpErrorFile' has external linkage but is being defined without any previous declaration.","   48:	FILE *g_fpErrorFile = NULL;
",,,
6478,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",50,6,3408,"g_bTrace' has external linkage but is being defined without any previous declaration.","   50:	bool g_bTrace           = false;    /* Trace flag */
",,,
6479,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",51,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
6480,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",51,6,3408,"g_szNVPath' has external linkage but is being defined without any previous declaration.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
6481,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",51,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   51:	char g_szNVPath[MAX_PATH] = {0};
",,,
6482,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",52,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
6483,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",52,6,3408,"g_szOVPath' has external linkage but is being defined without any previous declaration.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
6484,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",52,31,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   52:	char g_szOVPath[MAX_PATH] = {0};
",,,
6485,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",53,6,3408,"g_bTrendFile' has external linkage but is being defined without any previous declaration.","   53:	bool g_bTrendFile = false;
",,,
6486,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",55,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   55:	char *g_optionFileCont = NULL;
",,,
6487,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",55,7,3211,"The global identifier 'g_optionFileCont' is defined but not used.","   55:	char *g_optionFileCont = NULL;
",,,
6488,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",55,7,3408,"g_optionFileCont' has external linkage but is being defined without any previous declaration.","   55:	char *g_optionFileCont = NULL;
",,,
6489,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",57,1,3625,"Type 'char' has been used in the declaration of an object or a function.","   57:	char *g_symbolFileCont = NULL;
",,,
6490,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",57,7,3211,"The global identifier 'g_symbolFileCont' is defined but not used.","   57:	char *g_symbolFileCont = NULL;
",,,
6491,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",57,7,3408,"g_symbolFileCont' has external linkage but is being defined without any previous declaration.","   57:	char *g_symbolFileCont = NULL;
",,,
6492,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",58,6,3408,"g_bOutTime' has external linkage but is being defined without any previous declaration.","   58:	bool g_bOutTime = false;
",,,
6493,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",59,15,3408,"g_pAnzInfo' has external linkage but is being defined without any previous declaration.","   59:	ST_AnalyzeMe *g_pAnzInfo;  /* AnalyzeMe管理情報 */
",,,
6494,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",69,2,2017,"Comment spans more than one line.","   69:	*/
",,,
6495,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",70,14,3227,"The parameter 'argc' is never modified and so it could be declared with the 'const' qualifier.","   70:	int main(int argc,char * argv[])
",,,
6496,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",70,19,3625,"Type 'char' has been used in the declaration of an object or a function.","   70:	int main(int argc,char * argv[])
",,,
6497,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",70,26,344,"K&amp;R compilers do not support function prototypes.","   70:	int main(int argc,char * argv[])
",,,
6498,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",75,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
6499,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",75,28,2211,"the_pMeasureItem' is not aligned with the previously declared identifier.","   75:	    char **the_pMeasureItem;       /* コマンドラインに入力した計測対象のリスト */
",,,
6500,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",76,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
6501,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",76,10,2211,"the_szCurMetrics' is not aligned with the previously declared identifier.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
6502,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",76,10,3604,"Local arrays and structures cannot be initialised in K&amp;R C.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
6503,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",76,44,2213,"Matching braces appear on the same line - proper indentation would be preferred.","   76:	    char the_szCurMetrics[MAX_METRICS] = {0};/* カレント計測Metrics */
",,,
6504,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",80,5,3625,"Type 'char' has been used in the declaration of an object or a function.","   80:	    char *the_pTrace = NULL;
",,,
6505,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",80,11,2211,"the_pTrace' is not aligned with the previously declared identifier.","   80:	    char *the_pTrace = NULL;
",,,
6506,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",80,11,3197,"The initialiser for 'the_pTrace' is always modified before being used.","   80:	    char *the_pTrace = NULL;
",,,
6507,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",81,25,2211,"the_st' is not aligned with the previously declared identifier.","   81:	    struct timeb the_st ;
",,,
6508,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",89,5,3198,"The value assigned to 'the_pAnzInfo' is always modified before being used.","   89:	    the_pAnzInfo = NULL;
",,,
6509,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",91,5,3198,"The value assigned to 'the_iRet' is always modified before being used.","   91:	    the_iRet = ANZ_SUCCESS;
",,,
6510,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",101,25,3122,"Hard-coded 'magic' string literal.","  101:	    the_pTrace = getenv(""AnzTrace"");
",,,
6511,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",102,28,2209,"This brace style is not consistent with 'exdented' style.","  102:	    if(the_pTrace != NULL) {
",,,
6512,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,306,"[I] Cast between a pointer to object and an integral type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6513,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,310,"Casting to different object pointer type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6514,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6515,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,489,"Increment or decrement operation performed on pointer.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6516,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,602,"[U] The identifier '__result' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6517,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6518,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6519,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6520,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6521,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6522,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6523,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6524,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6525,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6526,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6527,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,2100,"Integral promotion : unsigned char promoted to signed int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6528,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6529,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3112,"This statement has no side-effect - it can be removed.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6530,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3122,"Hard-coded 'magic' string literal.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6531,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3200,"__builtin_strcmp' returns a value which is not being used.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6532,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6533,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6534,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6535,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6536,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6537,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6538,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3220,"Identifier declared at a nested level of block scope.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6539,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6540,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6541,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3325,"This control expression has a constant 'false' value.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6542,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3326,"An assignment operator is being used in a boolean expression.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6543,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6544,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6545,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6546,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6547,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6548,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6549,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6550,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6551,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6552,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6553,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6554,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6555,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6556,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6557,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6558,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6559,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6560,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6561,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6562,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_pTrace)) &amp;&amp; (__builtin_constant_p(ON))) &amp;&amp; (((__s1_len = strlen(the_pTrace)), (__s2_len = strlen(ON))), (((!((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_pTrace,ON)) : ((((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_pTrace)), (__s1_len &lt; 4))) ? (((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : ((((__builtin_constant_p(ON)) &amp;&amp; ((((size_t)((const void*)((ON) + 1))) - ((size_t)((const void*)(ON)))) == 1)) &amp;&amp; ((__s2_len = strlen(ON)), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_pTrace)) &amp;&amp; ((((size_t)((const void*)((the_pTrace) + 1))) - ((size_t)((const void*)(the_pTrace)))) == 1)) ? (__builtin_strcmp(the_pTrace,ON)) : (1)) : (__builtin_strcmp(the_pTrace,ON)))))""","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6563,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6564,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6565,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6566,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3416,"This boolean expression contains side effects.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6567,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3417,"The comma operator has been used outside a for-loop header.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6568,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3446,"The result operands of this conditional operator generate side effects","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6569,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3631,"Type 'char' has been used in a cast.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6570,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,12,3760,"Implicit conversion: int to unsigned int.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6571,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,35,3209,"__builtin_strcmp()' returns a value which is always ignored.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6572,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6573,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6574,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,36,1251,"Suffixed integer constant causes implicit conversion of other operand.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6575,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,43,2209,"This brace style is not consistent with 'exdented' style.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6576,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",103,43,3201,"This statement is unreachable.","  103:	        if(strcmp(the_pTrace,""ON"") == 0 ) {
",,,
6577,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",113,6,2017,"Comment spans more than one line.","  113:	    */
",,,
6578,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",114,36,3122,"Hard-coded 'magic' string literal.","  114:	    g_fpLogFile = fopen(APPLOGFILE,""w"");
",,,
6579,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",115,28,2209,"This brace style is not consistent with 'exdented' style.","  115:	    if(g_fpLogFile == NULL){
",,,
6580,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",116,9,3200,"printf' returns a value which is not being used.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
6581,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",116,16,3122,"Hard-coded 'magic' string literal.","  116:	        printf(""Create log file failed!\n"");   /* */
",,,
6582,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",120,5,702,"Result of sizeof operator is not explicitly cast.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
6583,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",120,63,3430,"Macro argument expression requires parentheses.","  120:	    AnzMalloc(the_pAnzInfo,ST_AnalyzeMe*,sizeof(ST_AnalyzeMe));
",,,
6584,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",121,29,2209,"This brace style is not consistent with 'exdented' style.","  121:	    if(the_pAnzInfo == NULL){
",,,
6585,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",122,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  122:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
6586,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",123,18,2001,"A 'goto' statement has been used.","  123:	        goto EXIT;
",,,
6587,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",125,5,702,"Result of sizeof operator is not explicitly cast.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
6588,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",125,5,3200,"memset' returns a value which is not being used.","  125:	    memset(the_pAnzInfo,'\0',sizeof(ST_AnalyzeMe));
",,,
6589,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",128,5,702,"Result of sizeof operator is not explicitly cast.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
6590,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",128,67,3430,"Macro argument expression requires parentheses.","  128:	    AnzMalloc(the_pAnzInfo-&gt;m_option,ST_Option*,sizeof(ST_Option));
",,,
6591,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",129,39,2209,"This brace style is not consistent with 'exdented' style.","  129:	    if(the_pAnzInfo-&gt;m_option == NULL){
",,,
6592,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",130,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  130:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
6593,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",131,18,2001,"A 'goto' statement has been used.","  131:	        goto EXIT;
",,,
6594,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",133,5,702,"Result of sizeof operator is not explicitly cast.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
6595,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",133,5,3200,"memset' returns a value which is not being used.","  133:	    memset(the_pAnzInfo-&gt;m_option,'\0',sizeof(ST_Option));
",,,
6596,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",137,5,702,"Result of sizeof operator is not explicitly cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
6597,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",137,5,3631,"Type 'char' has been used in a cast.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
6598,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",137,5,3633,"Type 'char' has been used in the operand of the sizeof operator.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
6599,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",137,5,3760,"Implicit conversion: int to unsigned int.","  137:	    AnzMalloc(the_pMeasureItem,char**,argc * sizeof(char *));
",,,
6600,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",138,34,2209,"This brace style is not consistent with 'exdented' style.","  138:	    if(the_pMeasureItem == NULL) {
",,,
6601,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",139,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  139:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
6602,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",140,18,2001,"A 'goto' statement has been used.","  140:	        goto EXIT;
",,,
6603,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",142,5,702,"Result of sizeof operator is not explicitly cast.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
6604,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",142,5,3200,"memset' returns a value which is not being used.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
6605,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",142,36,3760,"Implicit conversion: int to unsigned int.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
6606,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",142,45,3633,"Type 'char' has been used in the operand of the sizeof operator.","  142:	    memset(the_pMeasureItem,0,argc * sizeof(char *));
",,,
6607,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",150,5,3200,"strcpy' returns a value which is not being used.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
6608,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",150,34,3122,"Hard-coded 'magic' string literal.","  150:	    strcpy(the_pOption-&gt;m_prefix,""./"");
",,,
6609,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",154,5,3200,"strcpy' returns a value which is not being used.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
6610,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",154,39,3122,"Hard-coded 'magic' string literal.","  154:	    strcpy(the_pOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
6611,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",155,5,3200,"strcpy' returns a value which is not being used.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
6612,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",155,38,3122,"Hard-coded 'magic' string literal.","  155:	    strcpy(the_pOption-&gt;m_symbolFile,"""");
",,,
6613,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",156,5,3200,"strcpy' returns a value which is not being used.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
6614,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",156,38,3122,"Hard-coded 'magic' string literal.","  156:	    strcpy(the_pOption-&gt;m_optionFile,"""");
",,,
6615,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",165,32,3120,"Hard-coded 'magic' integer constant '70'.","  165:	    the_pOption-&gt;m_symThresh = 70;
",,,
6616,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",166,32,3120,"Hard-coded 'magic' integer constant '2'.","  166:	    the_pOption-&gt;m_minThresh = 2;
",,,
6617,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",169,5,702,"Result of sizeof operator is not explicitly cast.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
6618,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",169,59,3430,"Macro argument expression requires parentheses.","  169:	    AnzMalloc(the_pCmdOption,ST_Option*,sizeof(ST_Option));
",,,
6619,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",170,31,2209,"This brace style is not consistent with 'exdented' style.","  170:	    if(the_pCmdOption == NULL){
",,,
6620,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",171,9,3198,"The value assigned to 'the_iRet' is always modified before being used.","  171:	        the_iRet = ANZ_ERR_MEMORY_FAILED;
",,,
6621,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",172,18,2001,"A 'goto' statement has been used.","  172:	        goto EXIT;
",,,
6622,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",174,5,702,"Result of sizeof operator is not explicitly cast.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
6623,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",174,5,3200,"memset' returns a value which is not being used.","  174:	    memset(the_pCmdOption,'\0',sizeof(ST_Option));
",,,
6624,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",180,5,3200,"strcpy' returns a value which is not being used.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
6625,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",180,37,3122,"Hard-coded 'magic' string literal.","  180:	    strcpy(the_pCmdOption-&gt;m_prefix,""./"");
",,,
6626,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",184,5,3200,"strcpy' returns a value which is not being used.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
6627,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",184,42,3122,"Hard-coded 'magic' string literal.","  184:	    strcpy(the_pCmdOption-&gt;m_filePattern,""**/*.[CcHh]"");
",,,
6628,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",185,5,3200,"strcpy' returns a value which is not being used.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
6629,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",185,41,3122,"Hard-coded 'magic' string literal.","  185:	    strcpy(the_pCmdOption-&gt;m_symbolFile,"""");
",,,
6630,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",186,5,3200,"strcpy' returns a value which is not being used.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
6631,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",186,41,3122,"Hard-coded 'magic' string literal.","  186:	    strcpy(the_pCmdOption-&gt;m_optionFile,"""");
",,,
6632,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",195,35,3120,"Hard-coded 'magic' integer constant '70'.","  195:	    the_pCmdOption-&gt;m_symThresh = 70;
",,,
6633,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",196,35,3120,"Hard-coded 'magic' integer constant '2'.","  196:	    the_pCmdOption-&gt;m_minThresh = 2;
",,,
6634,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",200,32,2209,"This brace style is not consistent with 'exdented' style.","  200:	    if(the_iRet != ANZ_SUCCESS){
",,,
6635,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",201,18,2001,"A 'goto' statement has been used.","  201:	        goto EXIT;
",,,
6636,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",203,8,3344,"Value of control expression is not derived from an explicit logical operation.","  203:	    if(g_bOutTime) {
",,,
6637,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",203,20,2209,"This brace style is not consistent with 'exdented' style.","  203:	    if(g_bOutTime) {
",,,
6638,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",204,9,3200,"ftime' returns a value which is not being used.","  204:	        ftime(&amp;the_st);
",,,
6639,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",209,32,2209,"This brace style is not consistent with 'exdented' style.","  209:	    if(the_iRet != ANZ_SUCCESS){
",,,
6640,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",210,18,2001,"A 'goto' statement has been used.","  210:	        goto EXIT;
",,,
6641,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",214,32,2209,"This brace style is not consistent with 'exdented' style.","  214:	    if(the_iRet != ANZ_SUCCESS){
",,,
6642,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",215,18,2001,"A 'goto' statement has been used.","  215:	        goto EXIT;
",,,
6643,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",218,23,3355,"The result of this logical operation is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
6644,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",218,23,3358,"The value of this 'if' control expression is always 'true'.","  218:	    if(the_pCmdOption != NULL){
",,,
6645,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",218,31,2209,"This brace style is not consistent with 'exdented' style.","  218:	    if(the_pCmdOption != NULL){
",,,
6646,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",224,32,2209,"This brace style is not consistent with 'exdented' style.","  224:	    if(the_iRet != ANZ_SUCCESS){
",,,
6647,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",225,18,2001,"A 'goto' statement has been used.","  225:	        goto EXIT;
",,,
6648,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",229,32,2209,"This brace style is not consistent with 'exdented' style.","  229:	    if(the_iRet != ANZ_SUCCESS){
",,,
6649,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",230,18,2001,"A 'goto' statement has been used.","  230:	        goto EXIT;
",,,
6650,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",233,47,2209,"This brace style is not consistent with 'exdented' style.","  233:	    if(the_iMeasureType == ANZ_TREND_MEASURE) {
",,,
6651,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",234,13,3220,"Identifier declared at a nested level of block scope.","  234:	        int the_iType = -1;
",,,
6652,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",235,13,3220,"Identifier declared at a nested level of block scope.","  235:	        int the_pPos = -1;
",,,
6653,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",236,9,3200,"isDirOrFile' returns a value which is not being used.","  236:	        isDirOrFile(*the_pMeasureItem,&amp;the_iType);
",,,
6654,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",237,35,2209,"This brace style is not consistent with 'exdented' style.","  237:	        if(the_iType == ANZ_FILE) {
",,,
6655,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",242,30,2209,"This brace style is not consistent with 'exdented' style.","  242:	            if(the_pPos &gt; 0) {
",,,
6656,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",243,55,488,"Performing pointer arithmetic.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
6657,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",243,66,489,"Increment or decrement operation performed on pointer.","  243:	                *the_pMeasureItem = *the_pMeasureItem + the_pPos + 1;
",,,
6658,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",246,43,489,"Increment or decrement operation performed on pointer.","  246:	            GetPathPos(*(the_pMeasureItem + 1),&amp;the_pPos);
",,,
6659,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",248,30,2209,"This brace style is not consistent with 'exdented' style.","  248:	            if(the_pPos &gt; 0) {
",,,
6660,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",249,36,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
6661,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",249,42,3501,"This could be read as an old-style assignment operator. Spaces are needed to make it more readable.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
6662,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",249,61,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
6663,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",249,66,488,"Performing pointer arithmetic.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
6664,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",249,77,489,"Increment or decrement operation performed on pointer.","  249:	                *(the_pMeasureItem + 1) =*(the_pMeasureItem + 1) + the_pPos + 1;
",,,
6665,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",252,13,3198,"The value assigned to 'the_iRet' is always modified before being used.","  252:	            the_iRet = ResetTrendPath(g_szNVPath);
",,,
6666,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",254,41,2209,"This brace style is not consistent with 'exdented' style.","  254:	            if(the_iRet != ANZ_SUCCESS) {
",,,
6667,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",255,26,2001,"A 'goto' statement has been used.","  255:	                goto EXIT;
",,,
6668,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",260,51,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
6669,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",260,57,3631,"Type 'char' has been used in a cast.","  260:	    the_iRet = MakeMeasureFilesList(the_pAnzInfo,(const char**)the_pMeasureItem);
",,,
6670,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",261,41,2209,"This brace style is not consistent with 'exdented' style.","  261:	    if(the_iRet == ANZ_NO_MEASURE_FILES){
",,,
6671,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",262,9,3200,"printf' returns a value which is not being used.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
6672,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",262,16,3122,"Hard-coded 'magic' string literal.","  262:	        printf(""%s\n"",MSG_NO_FILES);
",,,
6673,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",264,42,2209,"This brace style is not consistent with 'exdented' style.","  264:	    if(the_iRet == ANZ_ERR_MEMORY_FAILED){
",,,
6674,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",265,9,3200,"printf' returns a value which is not being used.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
6675,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",265,16,3122,"Hard-coded 'magic' string literal.","  265:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
6676,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",267,32,2209,"This brace style is not consistent with 'exdented' style.","  267:	    if(the_iRet != ANZ_SUCCESS){
",,,
6677,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",268,18,2001,"A 'goto' statement has been used.","  268:	        goto EXIT;
",,,
6678,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",272,37,2209,"This brace style is not consistent with 'exdented' style.","  272:	    if(the_pOption-&gt;m_fileLOC == ON){
",,,
6679,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",273,9,3200,"strcat' returns a value which is not being used.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
6680,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",273,33,3122,"Hard-coded 'magic' string literal.","  273:	        strcat(the_szCurMetrics,""FileLOC"");
",,,
6681,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",276,40,2209,"This brace style is not consistent with 'exdented' style.","  276:	    if(the_pOption-&gt;m_redundancy == ON){
",,,
6682,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,306,"[I] Cast between a pointer to object and an integral type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6683,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,310,"Casting to different object pointer type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6684,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6685,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,489,"Increment or decrement operation performed on pointer.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6686,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,602,"[U] The identifier '__result' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6687,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6688,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6689,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6690,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6691,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6692,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6693,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6694,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6695,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6696,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6697,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,2100,"Integral promotion : unsigned char promoted to signed int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6698,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6699,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3112,"This statement has no side-effect - it can be removed.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6700,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3122,"Hard-coded 'magic' string literal.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6701,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3200,"__builtin_strcmp' returns a value which is not being used.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6702,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6703,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6704,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6705,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6706,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6707,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6708,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3220,"Identifier declared at a nested level of block scope.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6709,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6710,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6711,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3326,"An assignment operator is being used in a boolean expression.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6712,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3346,"This 'if' control expression has a constant 'true' value.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6713,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6714,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6715,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6716,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6717,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6718,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6719,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6720,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6721,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6722,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6723,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6724,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6725,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6726,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6727,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6728,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6729,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6730,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6731,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6732,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6733,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6734,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6735,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6736,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3416,"This boolean expression contains side effects.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6737,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3417,"The comma operator has been used outside a for-loop header.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6738,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3446,"The result operands of this conditional operator generate side effects","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6739,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3631,"Type 'char' has been used in a cast.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6740,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,12,3760,"Implicit conversion: int to unsigned int.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6741,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6742,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6743,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6744,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",277,45,2209,"This brace style is not consistent with 'exdented' style.","  277:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6745,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",278,13,3200,"strcat' returns a value which is not being used.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
6746,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",278,37,3122,"Hard-coded 'magic' string literal.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
6747,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",278,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  278:	            strcat(the_szCurMetrics,""、"");
",,,
6748,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",279,13,3200,"strcat' returns a value which is not being used.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
6749,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",279,37,3122,"Hard-coded 'magic' string literal.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
6750,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",279,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  279:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
6751,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",281,13,2209,"This brace style is not consistent with 'exdented' style.","  281:	        else{
",,,
6752,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",281,13,3201,"This statement is unreachable.","  281:	        else{
",,,
6753,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",282,13,3200,"strcat' returns a value which is not being used.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
6754,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",282,37,3122,"Hard-coded 'magic' string literal.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
6755,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",282,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  282:	            strcat(the_szCurMetrics,""File冗長度"");
",,,
6756,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",286,8,3344,"Value of control expression is not derived from an explicit logical operation.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
6757,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",286,31,2209,"This brace style is not consistent with 'exdented' style.","  286:	    if(the_pOption-&gt;m_funcNum){
",,,
6758,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,306,"[I] Cast between a pointer to object and an integral type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6759,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,310,"Casting to different object pointer type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6760,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6761,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,489,"Increment or decrement operation performed on pointer.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6762,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,602,"[U] The identifier '__result' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6763,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6764,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6765,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6766,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6767,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6768,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6769,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6770,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6771,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6772,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6773,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,2100,"Integral promotion : unsigned char promoted to signed int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6774,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6775,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3112,"This statement has no side-effect - it can be removed.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6776,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3122,"Hard-coded 'magic' string literal.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6777,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3200,"__builtin_strcmp' returns a value which is not being used.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6778,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6779,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6780,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6781,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6782,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6783,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6784,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3220,"Identifier declared at a nested level of block scope.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6785,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6786,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6787,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3326,"An assignment operator is being used in a boolean expression.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6788,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3346,"This 'if' control expression has a constant 'true' value.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6789,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6790,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6791,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6792,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6793,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6794,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6795,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6796,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6797,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6798,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6799,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6800,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6801,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6802,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6803,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6804,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6805,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6806,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6807,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6808,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6809,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6810,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6811,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6812,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3416,"This boolean expression contains side effects.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6813,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3417,"The comma operator has been used outside a for-loop header.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6814,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3446,"The result operands of this conditional operator generate side effects","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6815,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3631,"Type 'char' has been used in a cast.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6816,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,12,3760,"Implicit conversion: int to unsigned int.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6817,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6818,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6819,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6820,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",287,45,2209,"This brace style is not consistent with 'exdented' style.","  287:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6821,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",288,13,3200,"strcat' returns a value which is not being used.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
6822,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",288,37,3122,"Hard-coded 'magic' string literal.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
6823,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",288,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  288:	            strcat(the_szCurMetrics,""、"");
",,,
6824,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",289,13,3200,"strcat' returns a value which is not being used.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
6825,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",289,37,3122,"Hard-coded 'magic' string literal.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
6826,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",289,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  289:	            strcat(the_szCurMetrics,""関数数"");
",,,
6827,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",291,13,2209,"This brace style is not consistent with 'exdented' style.","  291:	        else{
",,,
6828,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",291,13,3201,"This statement is unreachable.","  291:	        else{
",,,
6829,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",292,13,3200,"strcat' returns a value which is not being used.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
6830,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",292,37,3122,"Hard-coded 'magic' string literal.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
6831,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",292,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  292:	            strcat(the_szCurMetrics,""関数数"");
",,,
6832,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",296,8,3344,"Value of control expression is not derived from an explicit logical operation.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
6833,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",296,28,2209,"This brace style is not consistent with 'exdented' style.","  296:	    if(the_pOption-&gt;m_eloc){
",,,
6834,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,306,"[I] Cast between a pointer to object and an integral type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6835,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,310,"Casting to different object pointer type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6836,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6837,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,489,"Increment or decrement operation performed on pointer.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6838,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,602,"[U] The identifier '__result' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6839,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6840,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6841,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6842,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6843,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6844,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6845,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6846,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6847,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6848,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6849,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,2100,"Integral promotion : unsigned char promoted to signed int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6850,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6851,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3112,"This statement has no side-effect - it can be removed.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6852,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3122,"Hard-coded 'magic' string literal.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6853,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3200,"__builtin_strcmp' returns a value which is not being used.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6854,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6855,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6856,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6857,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6858,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6859,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6860,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3220,"Identifier declared at a nested level of block scope.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6861,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6862,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6863,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3326,"An assignment operator is being used in a boolean expression.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6864,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3346,"This 'if' control expression has a constant 'true' value.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6865,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6866,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6867,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6868,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6869,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6870,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6871,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6872,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6873,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6874,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6875,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6876,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6877,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6878,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6879,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6880,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6881,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6882,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6883,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6884,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6885,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6886,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6887,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6888,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3416,"This boolean expression contains side effects.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6889,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3417,"The comma operator has been used outside a for-loop header.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6890,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3446,"The result operands of this conditional operator generate side effects","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6891,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3631,"Type 'char' has been used in a cast.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6892,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,12,3760,"Implicit conversion: int to unsigned int.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6893,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6894,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6895,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6896,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",297,45,2209,"This brace style is not consistent with 'exdented' style.","  297:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6897,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",298,13,3200,"strcat' returns a value which is not being used.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
6898,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",298,37,3122,"Hard-coded 'magic' string literal.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
6899,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",298,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  298:	            strcat(the_szCurMetrics,""、"");
",,,
6900,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",299,13,3200,"strcat' returns a value which is not being used.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
6901,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",299,37,3122,"Hard-coded 'magic' string literal.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
6902,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",299,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  299:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
6903,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",301,13,2209,"This brace style is not consistent with 'exdented' style.","  301:	        else{
",,,
6904,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",301,13,3201,"This statement is unreachable.","  301:	        else{
",,,
6905,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",302,13,3200,"strcat' returns a value which is not being used.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
6906,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",302,37,3122,"Hard-coded 'magic' string literal.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
6907,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",302,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  302:	            strcat(the_szCurMetrics,""関数ELOC"");
",,,
6908,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,306,"[I] Cast between a pointer to object and an integral type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6909,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,310,"Casting to different object pointer type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6910,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6911,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,489,"Increment or decrement operation performed on pointer.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6912,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,602,"[U] The identifier '__result' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6913,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6914,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6915,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6916,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6917,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6918,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6919,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6920,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6921,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6922,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6923,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,2100,"Integral promotion : unsigned char promoted to signed int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6924,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6925,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3112,"This statement has no side-effect - it can be removed.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6926,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3122,"Hard-coded 'magic' string literal.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6927,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3200,"__builtin_strcmp' returns a value which is not being used.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6928,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6929,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6930,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6931,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6932,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6933,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6934,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3220,"Identifier declared at a nested level of block scope.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6935,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6936,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6937,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3326,"An assignment operator is being used in a boolean expression.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6938,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3346,"This 'if' control expression has a constant 'true' value.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6939,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6940,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6941,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6942,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6943,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6944,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6945,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6946,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6947,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6948,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6949,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6950,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6951,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6952,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6953,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6954,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6955,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6956,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6957,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6958,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6959,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6960,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6961,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6962,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3416,"This boolean expression contains side effects.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6963,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3417,"The comma operator has been used outside a for-loop header.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6964,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3446,"The result operands of this conditional operator generate side effects","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6965,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3631,"Type 'char' has been used in a cast.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6966,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,12,3760,"Implicit conversion: int to unsigned int.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6967,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6968,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6969,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6970,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",304,45,2209,"This brace style is not consistent with 'exdented' style.","  304:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6971,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",305,13,3200,"strcat' returns a value which is not being used.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
6972,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",305,37,3122,"Hard-coded 'magic' string literal.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
6973,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",305,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  305:	            strcat(the_szCurMetrics,""、"");
",,,
6974,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",306,13,3200,"strcat' returns a value which is not being used.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
6975,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",306,37,3122,"Hard-coded 'magic' string literal.","  306:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
6976,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",308,13,2209,"This brace style is not consistent with 'exdented' style.","  308:	        else{
",,,
6977,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",308,13,3201,"This statement is unreachable.","  308:	        else{
",,,
6978,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",309,13,3200,"strcat' returns a value which is not being used.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
6979,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",309,37,3122,"Hard-coded 'magic' string literal.","  309:	            strcat(the_szCurMetrics,""FileELOC"");
",,,
6980,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",314,8,3344,"Value of control expression is not derived from an explicit logical operation.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
6981,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",314,34,2209,"This brace style is not consistent with 'exdented' style.","  314:	    if(the_pOption-&gt;m_redundancy){
",,,
6982,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,306,"[I] Cast between a pointer to object and an integral type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6983,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,310,"Casting to different object pointer type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6984,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6985,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,489,"Increment or decrement operation performed on pointer.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6986,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,602,"[U] The identifier '__result' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6987,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6988,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6989,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6990,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6991,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6992,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6993,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6994,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6995,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6996,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6997,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,2100,"Integral promotion : unsigned char promoted to signed int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6998,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
6999,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3112,"This statement has no side-effect - it can be removed.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7000,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3122,"Hard-coded 'magic' string literal.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7001,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3200,"__builtin_strcmp' returns a value which is not being used.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7002,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7003,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7004,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7005,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7006,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7007,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7008,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3220,"Identifier declared at a nested level of block scope.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7009,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7010,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7011,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3326,"An assignment operator is being used in a boolean expression.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7012,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3346,"This 'if' control expression has a constant 'true' value.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7013,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7014,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7015,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7016,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7017,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7018,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7019,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7020,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7021,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7022,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7023,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7024,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7025,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7026,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7027,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7028,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7029,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7030,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7031,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7032,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7033,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7034,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7035,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7036,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3416,"This boolean expression contains side effects.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7037,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3417,"The comma operator has been used outside a for-loop header.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7038,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3446,"The result operands of this conditional operator generate side effects","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7039,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3631,"Type 'char' has been used in a cast.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7040,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,12,3760,"Implicit conversion: int to unsigned int.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7041,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7042,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7043,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7044,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",315,45,2209,"This brace style is not consistent with 'exdented' style.","  315:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7045,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",316,13,3200,"strcat' returns a value which is not being used.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
7046,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",316,37,3122,"Hard-coded 'magic' string literal.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
7047,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",316,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  316:	            strcat(the_szCurMetrics,""、"");
",,,
7048,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",317,13,3200,"strcat' returns a value which is not being used.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
7049,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",317,37,3122,"Hard-coded 'magic' string literal.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
7050,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",317,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  317:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
7051,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",319,13,2209,"This brace style is not consistent with 'exdented' style.","  319:	        else{
",,,
7052,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",319,13,3201,"This statement is unreachable.","  319:	        else{
",,,
7053,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",320,13,3200,"strcat' returns a value which is not being used.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
7054,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",320,37,3122,"Hard-coded 'magic' string literal.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
7055,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",320,44,286,"[I] String literal contains character which is not a member of the basic source character set.","  320:	            strcat(the_szCurMetrics,""McCabeの複雑度"");
",,,
7056,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,306,"[I] Cast between a pointer to object and an integral type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7057,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,310,"Casting to different object pointer type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7058,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7059,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,489,"Increment or decrement operation performed on pointer.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7060,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,602,"[U] The identifier '__result' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7061,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7062,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7063,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7064,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7065,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7066,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7067,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7068,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7069,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7070,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7071,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,2100,"Integral promotion : unsigned char promoted to signed int.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7072,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7073,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3112,"This statement has no side-effect - it can be removed.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7074,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3122,"Hard-coded 'magic' string literal.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7075,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3200,"__builtin_strcmp' returns a value which is not being used.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7076,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7077,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7078,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7079,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7080,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7081,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7082,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3220,"Identifier declared at a nested level of block scope.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7083,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7084,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7085,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3326,"An assignment operator is being used in a boolean expression.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7086,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3346,"This 'if' control expression has a constant 'true' value.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7087,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7088,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7089,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7090,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7091,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7092,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7093,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7094,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7095,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7096,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7097,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7098,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7099,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7100,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7101,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7102,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7103,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7104,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7105,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7106,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7107,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7108,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7109,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7110,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3416,"This boolean expression contains side effects.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7111,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3417,"The comma operator has been used outside a for-loop header.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7112,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3446,"The result operands of this conditional operator generate side effects","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7113,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3631,"Type 'char' has been used in a cast.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7114,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,12,3760,"Implicit conversion: int to unsigned int.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7115,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7116,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7117,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7118,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",323,45,2209,"This brace style is not consistent with 'exdented' style.","  323:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7119,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",324,13,3200,"strcat' returns a value which is not being used.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
7120,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",324,37,3122,"Hard-coded 'magic' string literal.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
7121,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",324,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  324:	            strcat(the_szCurMetrics,""、"");
",,,
7122,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",325,13,3200,"strcat' returns a value which is not being used.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
7123,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",325,37,3122,"Hard-coded 'magic' string literal.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
7124,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",325,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  325:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
7125,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",327,13,2209,"This brace style is not consistent with 'exdented' style.","  327:	        else{
",,,
7126,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",327,13,3201,"This statement is unreachable.","  327:	        else{
",,,
7127,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",328,13,3200,"strcat' returns a value which is not being used.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
7128,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",328,37,3122,"Hard-coded 'magic' string literal.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
7129,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",328,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  328:	            strcat(the_szCurMetrics,""File複雑度"");
",,,
7130,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",333,8,3344,"Value of control expression is not derived from an explicit logical operation.","  333:	    if(the_pOption-&gt;m_trend){
",,,
7131,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",333,29,2209,"This brace style is not consistent with 'exdented' style.","  333:	    if(the_pOption-&gt;m_trend){
",,,
7132,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,306,"[I] Cast between a pointer to object and an integral type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7133,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,310,"Casting to different object pointer type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7134,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7135,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,489,"Increment or decrement operation performed on pointer.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7136,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,602,"[U] The identifier '__result' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7137,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7138,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7139,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7140,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7141,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7142,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7143,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7144,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7145,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7146,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7147,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,2100,"Integral promotion : unsigned char promoted to signed int.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7148,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7149,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3112,"This statement has no side-effect - it can be removed.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7150,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3122,"Hard-coded 'magic' string literal.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7151,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3200,"__builtin_strcmp' returns a value which is not being used.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7152,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7153,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7154,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7155,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7156,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7157,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7158,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3220,"Identifier declared at a nested level of block scope.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7159,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7160,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7161,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3326,"An assignment operator is being used in a boolean expression.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7162,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3346,"This 'if' control expression has a constant 'true' value.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7163,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7164,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7165,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7166,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7167,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7168,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7169,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7170,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7171,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7172,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7173,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7174,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7175,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7176,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7177,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7178,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7179,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7180,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7181,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7182,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7183,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7184,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7185,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7186,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3416,"This boolean expression contains side effects.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7187,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3417,"The comma operator has been used outside a for-loop header.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7188,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3446,"The result operands of this conditional operator generate side effects","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7189,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3631,"Type 'char' has been used in a cast.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7190,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,12,3760,"Implicit conversion: int to unsigned int.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7191,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7192,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7193,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7194,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",334,45,2209,"This brace style is not consistent with 'exdented' style.","  334:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7195,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",335,13,3200,"strcat' returns a value which is not being used.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
7196,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",335,37,3122,"Hard-coded 'magic' string literal.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
7197,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",335,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  335:	            strcat(the_szCurMetrics,""、"");
",,,
7198,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",336,13,3200,"strcat' returns a value which is not being used.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
7199,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",336,37,3122,"Hard-coded 'magic' string literal.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
7200,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",336,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  336:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
7201,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",338,13,2209,"This brace style is not consistent with 'exdented' style.","  338:	        else{
",,,
7202,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",338,13,3201,"This statement is unreachable.","  338:	        else{
",,,
7203,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",339,13,3200,"strcat' returns a value which is not being used.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
7204,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",339,37,3122,"Hard-coded 'magic' string literal.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
7205,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",339,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  339:	            strcat(the_szCurMetrics,""File共通量(1)"");
",,,
7206,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",341,9,3200,"strcat' returns a value which is not being used.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
7207,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",341,33,3122,"Hard-coded 'magic' string literal.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
7208,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",341,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  341:	        strcat(the_szCurMetrics,""File変更量(1)"");
",,,
7209,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",345,8,3344,"Value of control expression is not derived from an explicit logical operation.","  345:	    if(the_pOption-&gt;m_funcTrend){
",,,
7210,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",345,33,2209,"This brace style is not consistent with 'exdented' style.","  345:	    if(the_pOption-&gt;m_funcTrend){
",,,
7211,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,306,"[I] Cast between a pointer to object and an integral type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7212,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,310,"Casting to different object pointer type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7213,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7214,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,489,"Increment or decrement operation performed on pointer.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7215,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,602,"[U] The identifier '__result' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7216,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7217,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7218,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7219,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7220,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7221,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7222,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7223,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7224,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7225,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7226,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,2100,"Integral promotion : unsigned char promoted to signed int.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7227,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7228,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3112,"This statement has no side-effect - it can be removed.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7229,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3122,"Hard-coded 'magic' string literal.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7230,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3200,"__builtin_strcmp' returns a value which is not being used.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7231,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7232,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7233,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7234,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7235,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7236,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7237,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3220,"Identifier declared at a nested level of block scope.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7238,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7239,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7240,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3326,"An assignment operator is being used in a boolean expression.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7241,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3346,"This 'if' control expression has a constant 'true' value.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7242,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7243,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7244,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7245,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7246,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7247,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7248,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7249,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7250,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7251,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7252,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7253,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7254,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7255,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7256,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7257,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7258,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7259,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7260,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7261,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7262,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7263,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7264,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7265,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3416,"This boolean expression contains side effects.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7266,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3417,"The comma operator has been used outside a for-loop header.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7267,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3446,"The result operands of this conditional operator generate side effects","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7268,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3631,"Type 'char' has been used in a cast.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7269,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,12,3760,"Implicit conversion: int to unsigned int.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7270,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7271,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7272,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7273,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",346,45,2209,"This brace style is not consistent with 'exdented' style.","  346:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7274,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",347,13,3200,"strcat' returns a value which is not being used.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
7275,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",347,37,3122,"Hard-coded 'magic' string literal.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
7276,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",347,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  347:	            strcat(the_szCurMetrics,""、"");
",,,
7277,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",348,13,3200,"strcat' returns a value which is not being used.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
7278,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",348,37,3122,"Hard-coded 'magic' string literal.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
7279,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",348,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  348:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
7280,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",350,13,2209,"This brace style is not consistent with 'exdented' style.","  350:	        else{
",,,
7281,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",350,13,3201,"This statement is unreachable.","  350:	        else{
",,,
7282,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",351,13,3200,"strcat' returns a value which is not being used.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
7283,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",351,37,3122,"Hard-coded 'magic' string literal.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
7284,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",351,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  351:	            strcat(the_szCurMetrics,""関数共通量"");
",,,
7285,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,306,"[I] Cast between a pointer to object and an integral type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7286,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,310,"Casting to different object pointer type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7287,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7288,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,489,"Increment or decrement operation performed on pointer.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7289,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,602,"[U] The identifier '__result' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7290,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7291,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7292,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7293,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7294,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7295,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7296,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7297,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7298,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7299,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7300,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,2100,"Integral promotion : unsigned char promoted to signed int.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7301,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7302,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3112,"This statement has no side-effect - it can be removed.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7303,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3122,"Hard-coded 'magic' string literal.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7304,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3200,"__builtin_strcmp' returns a value which is not being used.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7305,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7306,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7307,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7308,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7309,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7310,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7311,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3220,"Identifier declared at a nested level of block scope.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7312,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7313,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7314,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3326,"An assignment operator is being used in a boolean expression.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7315,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3346,"This 'if' control expression has a constant 'true' value.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7316,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7317,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7318,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7319,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7320,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7321,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7322,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7323,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7324,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7325,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7326,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7327,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7328,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7329,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7330,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7331,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7332,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7333,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7334,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7335,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7336,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7337,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7338,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7339,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3416,"This boolean expression contains side effects.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7340,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3417,"The comma operator has been used outside a for-loop header.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7341,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3446,"The result operands of this conditional operator generate side effects","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7342,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3631,"Type 'char' has been used in a cast.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7343,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,12,3760,"Implicit conversion: int to unsigned int.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7344,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7345,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7346,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7347,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",353,45,2209,"This brace style is not consistent with 'exdented' style.","  353:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7348,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",354,13,3200,"strcat' returns a value which is not being used.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
7349,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",354,37,3122,"Hard-coded 'magic' string literal.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
7350,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",354,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  354:	            strcat(the_szCurMetrics,""、"");
",,,
7351,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",355,13,3200,"strcat' returns a value which is not being used.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
7352,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",355,37,3122,"Hard-coded 'magic' string literal.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
7353,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",355,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  355:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
7354,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",357,13,2209,"This brace style is not consistent with 'exdented' style.","  357:	        else{
",,,
7355,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",357,13,3201,"This statement is unreachable.","  357:	        else{
",,,
7356,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",358,13,3200,"strcat' returns a value which is not being used.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
7357,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",358,37,3122,"Hard-coded 'magic' string literal.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
7358,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",358,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  358:	            strcat(the_szCurMetrics,""関数変更量"");
",,,
7359,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,306,"[I] Cast between a pointer to object and an integral type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7360,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,310,"Casting to different object pointer type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7361,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7362,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,489,"Increment or decrement operation performed on pointer.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7363,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,602,"[U] The identifier '__result' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7364,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7365,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7366,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7367,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7368,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7369,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7370,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7371,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7372,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7373,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7374,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,2100,"Integral promotion : unsigned char promoted to signed int.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7375,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7376,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3112,"This statement has no side-effect - it can be removed.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7377,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3122,"Hard-coded 'magic' string literal.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7378,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3200,"__builtin_strcmp' returns a value which is not being used.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7379,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7380,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7381,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7382,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7383,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7384,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7385,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3220,"Identifier declared at a nested level of block scope.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7386,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7387,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7388,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3326,"An assignment operator is being used in a boolean expression.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7389,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3346,"This 'if' control expression has a constant 'true' value.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7390,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7391,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7392,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7393,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7394,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7395,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7396,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7397,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7398,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7399,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7400,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7401,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7402,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7403,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7404,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7405,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7406,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7407,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7408,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7409,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7410,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7411,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7412,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7413,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3416,"This boolean expression contains side effects.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7414,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3417,"The comma operator has been used outside a for-loop header.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7415,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3446,"The result operands of this conditional operator generate side effects","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7416,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3631,"Type 'char' has been used in a cast.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7417,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,12,3760,"Implicit conversion: int to unsigned int.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7418,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7419,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7420,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7421,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",360,45,2209,"This brace style is not consistent with 'exdented' style.","  360:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7422,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",361,13,3200,"strcat' returns a value which is not being used.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
7423,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",361,37,3122,"Hard-coded 'magic' string literal.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
7424,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",361,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  361:	            strcat(the_szCurMetrics,""、"");
",,,
7425,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",362,13,3200,"strcat' returns a value which is not being used.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
7426,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",362,37,3122,"Hard-coded 'magic' string literal.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
7427,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",362,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  362:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
7428,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",364,13,2209,"This brace style is not consistent with 'exdented' style.","  364:	        else{
",,,
7429,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",364,13,3201,"This statement is unreachable.","  364:	        else{
",,,
7430,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",365,13,3200,"strcat' returns a value which is not being used.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
7431,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",365,37,3122,"Hard-coded 'magic' string literal.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
7432,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",365,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  365:	            strcat(the_szCurMetrics,""File共通量(2)"");
",,,
7433,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,306,"[I] Cast between a pointer to object and an integral type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7434,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,310,"Casting to different object pointer type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7435,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7436,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,489,"Increment or decrement operation performed on pointer.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7437,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,602,"[U] The identifier '__result' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7438,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,602,"[U] The identifier '__s1' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7439,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7440,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,602,"[U] The identifier '__s2' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7441,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7442,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7443,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7444,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,1251,"Suffixed integer constant causes implicit conversion of other operand.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7445,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,1253,"Unsuffixed integer constant implicitly converted to another type.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7446,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,1302,"__builtin_constant_p()' must be declared before use in C++.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7447,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,1302,"__builtin_strcmp()' must be declared before use in C++.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7448,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,2100,"Integral promotion : unsigned char promoted to signed int.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7449,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7450,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3112,"This statement has no side-effect - it can be removed.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7451,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3122,"Hard-coded 'magic' string literal.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7452,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3200,"__builtin_strcmp' returns a value which is not being used.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7453,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7454,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7455,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7456,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7457,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7458,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7459,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3220,"Identifier declared at a nested level of block scope.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7460,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7461,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7462,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3326,"An assignment operator is being used in a boolean expression.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7463,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3346,"This 'if' control expression has a constant 'true' value.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7464,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7465,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7466,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7467,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7468,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7469,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7470,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7471,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7472,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7473,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7474,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7475,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7476,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7477,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7478,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7479,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7480,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7481,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7482,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7483,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(the_szCurMetrics)), (__s2_len = strlen())), (((!((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(the_szCurMetrics,)) : ((((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) &amp;&amp; ((__s1_len = strlen(the_szCurMetrics)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(the_szCurMetrics)) &amp;&amp; ((((size_t)((const void*)((the_szCurMetrics) + 1))) - ((size_t)((const void*)(the_szCurMetrics)))) == 1)) ? (__builtin_strcmp(the_szCurMetrics,)) : (1)) : (__builtin_strcmp(the_szCurMetrics,)))))""","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7484,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7485,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3401,"Possible precedence confusion: extra parentheses are recommended here.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7486,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7487,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3416,"This boolean expression contains side effects.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7488,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3417,"The comma operator has been used outside a for-loop header.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7489,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3446,"The result operands of this conditional operator generate side effects","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7490,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3631,"Type 'char' has been used in a cast.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7491,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,12,3760,"Implicit conversion: int to unsigned int.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7492,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7493,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,39,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7494,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,40,1251,"Suffixed integer constant causes implicit conversion of other operand.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7495,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",367,45,2209,"This brace style is not consistent with 'exdented' style.","  367:	        if(strcmp(the_szCurMetrics,"""") != 0){
",,,
7496,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",368,13,3200,"strcat' returns a value which is not being used.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
7497,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",368,37,3122,"Hard-coded 'magic' string literal.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
7498,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",368,38,286,"[I] String literal contains character which is not a member of the basic source character set.","  368:	            strcat(the_szCurMetrics,""、"");
",,,
7499,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",369,13,3200,"strcat' returns a value which is not being used.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
7500,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",369,37,3122,"Hard-coded 'magic' string literal.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
7501,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",369,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  369:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
7502,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",371,13,2209,"This brace style is not consistent with 'exdented' style.","  371:	        else{
",,,
7503,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",371,13,3201,"This statement is unreachable.","  371:	        else{
",,,
7504,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",372,13,3200,"strcat' returns a value which is not being used.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
7505,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",372,37,3122,"Hard-coded 'magic' string literal.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
7506,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",372,42,286,"[I] String literal contains character which is not a member of the basic source character set.","  372:	            strcat(the_szCurMetrics,""File変更量(2)"");
",,,
7507,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",377,37,2209,"This brace style is not consistent with 'exdented' style.","  377:	    if(the_pOption-&gt;m_verbos == ON ){
",,,
7508,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",379,9,3200,"printf' returns a value which is not being used.","  379:	        printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_START);
",,,
7509,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",379,16,3122,"Hard-coded 'magic' string literal.","  379:	        printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_START);
",,,
7510,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",384,32,2209,"This brace style is not consistent with 'exdented' style.","  384:	    if(the_iRet != ANZ_SUCCESS){
",,,
7511,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",385,18,2001,"A 'goto' statement has been used.","  385:	        goto EXIT;
",,,
7512,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",390,32,2209,"This brace style is not consistent with 'exdented' style.","  390:	    if(the_iRet != ANZ_SUCCESS){
",,,
7513,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",392,18,2001,"A 'goto' statement has been used.","  392:	        goto EXIT;
",,,
7514,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",397,47,2209,"This brace style is not consistent with 'exdented' style.","  397:	    if(the_iMeasureType == ANZ_COMMON_MEASURE){
",,,
7515,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",400,36,2209,"This brace style is not consistent with 'exdented' style.","  400:	        if(the_iRet != ANZ_SUCCESS){
",,,
7516,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",401,22,2001,"A 'goto' statement has been used.","  401:	            goto EXIT;
",,,
7517,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",404,36,2209,"This brace style is not consistent with 'exdented' style.","  404:	        if(the_iRet != ANZ_SUCCESS){
",,,
7518,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",405,13,3200,"printf' returns a value which is not being used.","  405:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
7519,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",405,20,3122,"Hard-coded 'magic' string literal.","  405:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
7520,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",406,22,2001,"A 'goto' statement has been used.","  406:	            goto EXIT;
",,,
7521,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",410,46,2209,"This brace style is not consistent with 'exdented' style.","  410:	    if(the_iMeasureType == ANZ_TREND_MEASURE){
",,,
7522,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",413,36,2209,"This brace style is not consistent with 'exdented' style.","  413:	        if(the_iRet != ANZ_SUCCESS){
",,,
7523,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",414,22,2001,"A 'goto' statement has been used.","  414:	            goto EXIT;
",,,
7524,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",417,36,2209,"This brace style is not consistent with 'exdented' style.","  417:	        if(the_iRet != ANZ_SUCCESS){
",,,
7525,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",418,13,3200,"printf' returns a value which is not being used.","  418:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
7526,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",418,20,3122,"Hard-coded 'magic' string literal.","  418:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_ERROR);
",,,
7527,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",419,22,2001,"A 'goto' statement has been used.","  419:	            goto EXIT;
",,,
7528,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",424,36,2209,"This brace style is not consistent with 'exdented' style.","  424:	    if(the_pOption-&gt;m_verbos == ON){
",,,
7529,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",425,40,2209,"This brace style is not consistent with 'exdented' style.","  425:	        if(the_pAnzInfo-&gt;m_err == NULL){
",,,
7530,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",426,13,3200,"printf' returns a value which is not being used.","  426:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
7531,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",426,20,3122,"Hard-coded 'magic' string literal.","  426:	            printf(""%s%s\n"",the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
7532,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",428,13,2209,"This brace style is not consistent with 'exdented' style.","  428:	        else{
",,,
7533,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",429,13,3200,"printf' returns a value which is not being used.","  429:	            printf(""%s%s%s\n"",MSG_MEASURE_FILE_ERROR,the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
7534,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",429,20,3122,"Hard-coded 'magic' string literal.","  429:	            printf(""%s%s%s\n"",MSG_MEASURE_FILE_ERROR,the_szCurMetrics,MSG_METRIC_NORMAL);
",,,
7535,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",433,1,2015,"This label is not a case or default label for a switch statement.","  433:	EXIT:;
",,,
7536,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",433,1,2201,"This indentation is not consistent with previous indentation in this file.","  433:	EXIT:;
",,,
7537,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",433,6,3109,"Empty statement (';' on its own) - if this is deliberate, it is best to put ';' on a line by itself.","  433:	EXIT:;
",,,
7538,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",433,6,3139,"Null statement is obscured by code or comment on the same line.","  433:	EXIT:;
",,,
7539,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",435,29,505,"[U] Dereferencing pointer value that is apparently NULL.","  435:	    the_iRet = OutErrorFile(the_pAnzInfo-&gt;m_err);
",,,
7540,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",436,42,2209,"This brace style is not consistent with 'exdented' style.","  436:	    if(the_iRet == ANZ_ERR_MEMORY_FAILED){
",,,
7541,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",437,9,3200,"printf' returns a value which is not being used.","  437:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
7542,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",437,16,3122,"Hard-coded 'magic' string literal.","  437:	        printf(""%s\n"",MSG_MOMORY_FAILED);
",,,
7543,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",442,31,2209,"This brace style is not consistent with 'exdented' style.","  442:	    if(the_pCmdOption != NULL){
",,,
7544,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",444,9,3199,"The value of 'the_pCmdOption' is never used following this assignment.","  444:	        the_pCmdOption = NULL;
",,,
7545,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",447,34,2209,"This brace style is not consistent with 'exdented' style.","  447:	    if(the_pMeasureItem != NULL) {
",,,
7546,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",449,9,3199,"The value of 'the_pMeasureItem' is never used following this assignment.","  449:	        the_pMeasureItem = NULL;
",,,
7547,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",455,8,3344,"Value of control expression is not derived from an explicit logical operation.","  455:	    if(g_bOutTime) {
",,,
7548,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",455,20,2209,"This brace style is not consistent with 'exdented' style.","  455:	    if(g_bOutTime) {
",,,
7549,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",456,9,3200,"ftime' returns a value which is not being used.","  456:	        ftime(&amp;the_ed);
",,,
7550,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",457,9,3200,"printf' returns a value which is not being used.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
7551,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",457,9,3395,"Operators in the set + - * / with different precedence have been used. Extra parentheses recommended.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
7552,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",457,9,3401,"Possible precedence confusion: extra parentheses are recommended here.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
7553,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",457,16,3122,"Hard-coded 'magic' string literal.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
7554,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",457,69,1253,"Unsuffixed integer constant implicitly converted to another type.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
7555,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",457,71,3120,"Hard-coded 'magic' integer constant '1000'.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
7556,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",457,94,2101,"Integral promotion : unsigned short promoted to signed int.","  457:	        printf(""\nTotal times:%ld ms\n"",(the_ed.time - the_st.time) * 1000 + (the_ed.millitm - the_st.millitm));
",,,
7557,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",473,2,2017,"Comment spans more than one line.","  473:	*/
",,,
7558,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",475,26,3227,"The parameter 'sig' is never modified and so it could be declared with the 'const' qualifier.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
7559,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",475,35,3206,"The parameter 'code' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
7560,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",475,47,3206,"The parameter 'scp' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
7561,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",475,53,3625,"Type 'char' has been used in the declaration of an object or a function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
7562,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",475,59,344,"K&amp;R compilers do not support function prototypes.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
7563,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",475,59,3206,"The parameter 'addr' is not used in this function.","  475:	void AbortAnalyzeMe( int sig, int code, void *scp , char *addr )
",,,
7564,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",480,5,3625,"Type 'char' has been used in the declaration of an object or a function.","  480:	    char the_errMsg[128]; /* エラーメッセージ */
",,,
7565,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",480,21,3132,"Hard coded 'magic' number '128' used to define the size of an array.","  480:	    char the_errMsg[128]; /* エラーメッセージ */
",,,
7566,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",483,16,2209,"This brace style is not consistent with 'exdented' style.","  483:	    switch(sig){
",,,
7567,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",485,9,3200,"sprintf' returns a value which is not being used.","  485:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGINT(%d)\n"",sig );
",,,
7568,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",485,28,3122,"Hard-coded 'magic' string literal.","  485:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGINT(%d)\n"",sig );
",,,
7569,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",486,9,3200,"fprintf' returns a value which is not being used.","  486:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
7570,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",486,31,3122,"Hard-coded 'magic' string literal.","  486:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
7571,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",489,9,3200,"sprintf' returns a value which is not being used.","  489:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGQUIT(%d)\n"",sig );
",,,
7572,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",489,28,3122,"Hard-coded 'magic' string literal.","  489:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGQUIT(%d)\n"",sig );
",,,
7573,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",490,9,3200,"fprintf' returns a value which is not being used.","  490:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
7574,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",490,31,3122,"Hard-coded 'magic' string literal.","  490:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
7575,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",493,9,3200,"sprintf' returns a value which is not being used.","  493:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGKILL(%d)\n"",sig );
",,,
7576,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",493,28,3122,"Hard-coded 'magic' string literal.","  493:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGKILL(%d)\n"",sig );
",,,
7577,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",494,9,3200,"fprintf' returns a value which is not being used.","  494:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
7578,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",494,31,3122,"Hard-coded 'magic' string literal.","  494:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
7579,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",497,9,3200,"sprintf' returns a value which is not being used.","  497:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGTERM(%d)\n"",sig );
",,,
7580,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",497,28,3122,"Hard-coded 'magic' string literal.","  497:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGTERM(%d)\n"",sig );
",,,
7581,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",498,9,3200,"fprintf' returns a value which is not being used.","  498:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
7582,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",498,31,3122,"Hard-coded 'magic' string literal.","  498:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
7583,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",501,9,3200,"sprintf' returns a value which is not being used.","  501:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGFPE(%d)\n"",sig );
",,,
7584,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",501,28,3122,"Hard-coded 'magic' string literal.","  501:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGFPE(%d)\n"",sig );
",,,
7585,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",502,9,3200,"fprintf' returns a value which is not being used.","  502:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
7586,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",502,31,3122,"Hard-coded 'magic' string literal.","  502:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
7587,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",505,9,3200,"sprintf' returns a value which is not being used.","  505:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGILL(%d)\n"",sig );
",,,
7588,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",505,28,3122,"Hard-coded 'magic' string literal.","  505:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGILL(%d)\n"",sig );
",,,
7589,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",506,9,3200,"fprintf' returns a value which is not being used.","  506:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
7590,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",506,31,3122,"Hard-coded 'magic' string literal.","  506:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
7591,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",509,9,3200,"sprintf' returns a value which is not being used.","  509:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGBUS(%d)\n"",sig );
",,,
7592,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",509,28,3122,"Hard-coded 'magic' string literal.","  509:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGBUS(%d)\n"",sig );
",,,
7593,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",510,9,3200,"fprintf' returns a value which is not being used.","  510:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
7594,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",510,31,3122,"Hard-coded 'magic' string literal.","  510:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
7595,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",513,9,3200,"sprintf' returns a value which is not being used.","  513:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSEGV(%d)\n"",sig );
",,,
7596,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",513,28,3122,"Hard-coded 'magic' string literal.","  513:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSEGV(%d)\n"",sig );
",,,
7597,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",514,9,3200,"fprintf' returns a value which is not being used.","  514:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
7598,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",514,31,3122,"Hard-coded 'magic' string literal.","  514:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
7599,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",517,9,3200,"sprintf' returns a value which is not being used.","  517:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSYS(%d)\n"",sig );
",,,
7600,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",517,28,3122,"Hard-coded 'magic' string literal.","  517:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=SIGSYS(%d)\n"",sig );
",,,
7601,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",518,9,3200,"fprintf' returns a value which is not being used.","  518:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
7602,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",518,31,3122,"Hard-coded 'magic' string literal.","  518:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
7603,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",521,9,3200,"sprintf' returns a value which is not being used.","  521:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=%d\n"",sig );
",,,
7604,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",521,28,3122,"Hard-coded 'magic' string literal.","  521:	        sprintf(the_errMsg,""AnalyzeMe Abort Signal=%d\n"",sig );
",,,
7605,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",522,9,3200,"fprintf' returns a value which is not being used.","  522:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
7606,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",522,31,3122,"Hard-coded 'magic' string literal.","  522:	        fprintf(g_fpErrorFile,""%s\n"",the_errMsg);
",,,
7607,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",532,16,2209,"This brace style is not consistent with 'exdented' style.","  532:	    switch(sig){
",,,
7608,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",538,10,2003,"The preceding non-empty 'case' or 'default' clause does not end with an explicit 'break' or 'return' statement.","  538:	    case SIGFPE :
",,,
7609,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",545,5,2002,"No 'default' case found in this 'switch' statement.","  545:	    }
",,,
7610,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",592,2,2017,"Comment spans more than one line.","  592:	*/
",,,
7611,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",594,1,3007,"""void"" has been omitted when defining a function with no parameters.","  594:	{
",,,
7612,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",597,5,428,"Function identifier is not followed by () but a function call may be intended.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
7613,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",597,5,3200,"signal' returns a value which is not being used.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
7614,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",597,23,432,"[C] Argument is not a compatible pointer type.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
7615,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",597,24,307,"[u] Cast between a pointer to object and a pointer to function.","  597:	    signal( SIGFPE  , (void *)AbortAnalyzeMe);
",,,
7616,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",598,5,428,"Function identifier is not followed by () but a function call may be intended.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
7617,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",598,5,3200,"signal' returns a value which is not being used.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
7618,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",598,23,432,"[C] Argument is not a compatible pointer type.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
7619,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",598,24,307,"[u] Cast between a pointer to object and a pointer to function.","  598:	    signal( SIGILL  , (void *)AbortAnalyzeMe);
",,,
7620,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",599,5,428,"Function identifier is not followed by () but a function call may be intended.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
7621,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",599,5,3200,"signal' returns a value which is not being used.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
7622,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",599,23,432,"[C] Argument is not a compatible pointer type.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
7623,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",599,24,307,"[u] Cast between a pointer to object and a pointer to function.","  599:	    signal( SIGBUS  , (void *)AbortAnalyzeMe);
",,,
7624,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",601,5,428,"Function identifier is not followed by () but a function call may be intended.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
7625,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",601,5,3200,"signal' returns a value which is not being used.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
7626,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",601,23,432,"[C] Argument is not a compatible pointer type.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
7627,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",601,24,307,"[u] Cast between a pointer to object and a pointer to function.","  601:	    signal( SIGSEGV , (void *)AbortAnalyzeMe);
",,,
7628,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",602,5,428,"Function identifier is not followed by () but a function call may be intended.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
7629,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",602,5,3200,"signal' returns a value which is not being used.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
7630,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",602,22,432,"[C] Argument is not a compatible pointer type.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
7631,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",602,23,307,"[u] Cast between a pointer to object and a pointer to function.","  602:	    signal( SIGSYS , (void *)AbortAnalyzeMe);
",,,
7632,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",604,5,428,"Function identifier is not followed by () but a function call may be intended.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
7633,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",604,5,3200,"signal' returns a value which is not being used.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
7634,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",604,23,432,"[C] Argument is not a compatible pointer type.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
7635,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",604,24,307,"[u] Cast between a pointer to object and a pointer to function.","  604:	    signal( SIGINT  , (void *)AbortAnalyzeMe);
",,,
7636,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",605,5,428,"Function identifier is not followed by () but a function call may be intended.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
7637,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",605,5,3200,"signal' returns a value which is not being used.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
7638,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",605,23,432,"[C] Argument is not a compatible pointer type.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
7639,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",605,24,307,"[u] Cast between a pointer to object and a pointer to function.","  605:	    signal( SIGQUIT , (void *)AbortAnalyzeMe);
",,,
7640,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",606,5,428,"Function identifier is not followed by () but a function call may be intended.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
7641,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",606,5,3200,"signal' returns a value which is not being used.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
7642,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",606,23,432,"[C] Argument is not a compatible pointer type.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
7643,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",606,24,307,"[u] Cast between a pointer to object and a pointer to function.","  606:	    signal( SIGKILL , (void *)AbortAnalyzeMe);
",,,
7644,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",607,5,428,"Function identifier is not followed by () but a function call may be intended.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
7645,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",607,5,3200,"signal' returns a value which is not being used.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
7646,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",607,23,432,"[C] Argument is not a compatible pointer type.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
7647,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",607,24,307,"[u] Cast between a pointer to object and a pointer to function.","  607:	    signal( SIGTERM , (void *)AbortAnalyzeMe);
",,,
7648,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",622,2,2017,"Comment spans more than one line.","  622:	*/
",,,
7649,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",623,20,3625,"Type 'char' has been used in the declaration of an object or a function.","  623:	int ResetTrendPath(char *io_pPath)
",,,
7650,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",623,26,344,"K&amp;R compilers do not support function prototypes.","  623:	int ResetTrendPath(char *io_pPath)
",,,
7651,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",623,26,3227,"The parameter 'io_pPath' is never modified and so it could be declared with the 'const' qualifier.","  623:	int ResetTrendPath(char *io_pPath)
",,,
7652,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",625,9,2201,"This indentation is not consistent with previous indentation in this file.","  625:	        char the_szFullPath[MAX_PATH];
",,,
7653,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",625,9,3625,"Type 'char' has been used in the declaration of an object or a function.","  625:	        char the_szFullPath[MAX_PATH];
",,,
7654,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",626,9,2201,"This indentation is not consistent with previous indentation in this file.","  626:	        char the_szCurPath[MAX_PATH];
",,,
7655,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",626,9,3625,"Type 'char' has been used in the declaration of an object or a function.","  626:	        char the_szCurPath[MAX_PATH];
",,,
7656,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",627,9,2201,"This indentation is not consistent with previous indentation in this file.","  627:	        int the_iRet = ANZ_SUCCESS;
",,,
7657,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",627,13,2211,"the_iRet' is not aligned with the previously declared identifier.","  627:	        int the_iRet = ANZ_SUCCESS;
",,,
7658,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",630,9,2201,"This indentation is not consistent with previous indentation in this file.","  630:	        if(io_pPath[0] != '/') {
",,,
7659,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",630,20,506,"Dereferencing pointer value that is possibly NULL.","  630:	        if(io_pPath[0] != '/') {
",,,
7660,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",630,24,2106,"Integral promotion : plain char promoted to signed int.","  630:	        if(io_pPath[0] != '/') {
",,,
7661,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",630,27,3123,"Hard coded 'magic' character constant '/'.","  630:	        if(io_pPath[0] != '/') {
",,,
7662,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",630,32,2209,"This brace style is not consistent with 'exdented' style.","  630:	        if(io_pPath[0] != '/') {
",,,
7663,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",631,16,3416,"This boolean expression contains side effects.","  631:	            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {
",,,
7664,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",631,56,2209,"This brace style is not consistent with 'exdented' style.","  631:	            if(getcwd(the_szCurPath,MAX_PATH) == NULL) {
",,,
7665,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",633,26,2001,"A 'goto' statement has been used.","  633:	                goto EXIT;
",,,
7666,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,306,"[I] Cast between a pointer to object and an integral type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7667,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,310,"Casting to different object pointer type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7668,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,346,"const' is an ISO keyword and will not be recognised by K&amp;R compilers.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7669,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,489,"Increment or decrement operation performed on pointer.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7670,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,506,"Dereferencing pointer value that is possibly NULL.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7671,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,510,"Arithmetic operation on pointer value that is possibly NULL.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7672,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,602,"[U] The identifier '__result' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7673,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,602,"[U] The identifier '__s1' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7674,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,602,"[U] The identifier '__s1_len' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7675,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,602,"[U] The identifier '__s2' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7676,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,602,"[U] The identifier '__s2_len' is reserved for use by the library.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7677,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,776,"[L] External identifier matches other identifier(s) (e.g. '__builtin_expect') in first 6 characters - program is non-conforming.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7678,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,1021,"[E] Statement in expression is not valid ISO, treated as an extension.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7679,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,1251,"Suffixed integer constant causes implicit conversion of other operand.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7680,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,1253,"Unsuffixed integer constant implicitly converted to another type.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7681,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,1302,"__builtin_constant_p()' must be declared before use in C++.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7682,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,1302,"__builtin_strcmp()' must be declared before use in C++.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7683,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,2100,"Integral promotion : unsigned char promoted to signed int.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7684,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,2711,"register' is only a hint - the compiler may well be able to do a better job of optimising - avoid!","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7685,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3112,"This statement has no side-effect - it can be removed.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7686,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3122,"Hard-coded 'magic' string literal.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7687,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3200,"__builtin_strcmp' returns a value which is not being used.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7688,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3204,"The variable '__s1' is only set once and so it could be declared with the 'const' qualifier.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7689,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3204,"The variable '__s2' is only set once and so it could be declared with the 'const' qualifier.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7690,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7691,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7692,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7693,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7694,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3220,"Identifier declared at a nested level of block scope.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7695,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3321,"[U] The variable '__s1_len' is definitely unset at this point.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7696,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3321,"[U] The variable '__s2_len' is definitely unset at this point.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7697,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3326,"An assignment operator is being used in a boolean expression.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7698,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3346,"This 'if' control expression has a constant 'true' value.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7699,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3396,"Ternary operator used with another binary operator. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7700,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7701,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7702,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7703,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7704,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 0) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7705,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7706,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 1) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7707,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7708,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s1_len &gt; 2) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7709,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7710,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 0) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7711,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7712,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 1) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7713,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3397,"Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7714,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""(__s2_len &gt; 2) &amp;&amp; (__result == 0)""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7715,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3398,"Operator in set () [] -&gt; . used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7716,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7717,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3399,"Unary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7718,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3390,"&nbsp;&nbsp;Expression is equivalent to: ""((((__builtin_constant_p(io_pPath)) &amp;&amp; (__builtin_constant_p())) &amp;&amp; (((__s1_len = strlen(io_pPath)), (__s2_len = strlen())), (((!((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) || (__s1_len &gt;= 4)) &amp;&amp; ((!((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) || (__s2_len &gt;= 4))))) ? (__builtin_strcmp(io_pPath,)) : ((((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) &amp;&amp; ((__s1_len = strlen(io_pPath)), (__s1_len &lt; 4))) ? (((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : ((((__builtin_constant_p()) &amp;&amp; ((((size_t)((const void*)(() + 1))) - ((size_t)((const void*)()))) == 1)) &amp;&amp; ((__s2_len = strlen()), (__s2_len &lt; 4))) ? (((__builtin_constant_p(io_pPath)) &amp;&amp; ((((size_t)((const void*)((io_pPath) + 1))) - ((size_t)((const void*)(io_pPath)))) == 1)) ? (__builtin_strcmp(io_pPath,)) : (1)) : (__builtin_strcmp(io_pPath,)))))""","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7719,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3400,"Binary/ternary operator used with &amp;&amp; or ||. Extra parentheses recommended.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7720,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3401,"Possible precedence confusion: extra parentheses are recommended here.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7721,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3415,"The right hand operand of '&amp;&amp;' or '||' has side effects.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7722,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3416,"This boolean expression contains side effects.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7723,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3417,"The comma operator has been used outside a for-loop header.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7724,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3446,"The result operands of this conditional operator generate side effects","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7725,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3631,"Type 'char' has been used in a cast.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7726,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,16,3760,"Implicit conversion: int to unsigned int.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7727,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_constant_p();'.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7728,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,35,3335,"No function declaration. Implicit declaration inserted: 'extern int __builtin_strcmp();'.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7729,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,36,1251,"Suffixed integer constant causes implicit conversion of other operand.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7730,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",635,42,2209,"This brace style is not consistent with 'exdented' style.","  635:	            if(strcmp(io_pPath,"""") != 0) {
",,,
7731,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",636,17,3200,"sprintf' returns a value which is not being used.","  636:	                sprintf(the_szFullPath,""%s/%s"",the_szCurPath,io_pPath);
",,,
7732,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",636,40,3122,"Hard-coded 'magic' string literal.","  636:	                sprintf(the_szFullPath,""%s/%s"",the_szCurPath,io_pPath);
",,,
7733,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",639,9,2201,"This indentation is not consistent with previous indentation in this file.","  639:	        else {
",,,
7734,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",639,14,2209,"This brace style is not consistent with 'exdented' style.","  639:	        else {
",,,
7735,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",640,22,2001,"A 'goto' statement has been used.","  640:	            goto EXIT;
",,,
7736,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",658,9,2201,"This indentation is not consistent with previous indentation in this file.","  658:	        strcpy(io_pPath,the_szFullPath);
",,,
7737,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",658,9,3200,"strcpy' returns a value which is not being used.","  658:	        strcpy(io_pPath,the_szFullPath);
",,,
7738,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",659,1,2015,"This label is not a case or default label for a switch statement.","  659:	EXIT:
",,,
7739,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",659,1,2201,"This indentation is not consistent with previous indentation in this file.","  659:	EXIT:
",,,
7740,"sample_c/src","analyzeme.c","analyzeme.c.Normal.html",660,9,2201,"This indentation is not consistent with previous indentation in this file.","  660:	        return the_iRet;
",,,
